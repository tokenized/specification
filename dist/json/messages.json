{
  "fieldAliases": [
    {
      "description": "Predefined tags for output metadata.",
      "name": "Tag",
      "resource": "Tags",
      "size": 1,
      "type": "uint"
    },
    {
      "description": "Represents a time, encoded as a 64 bit unsigned integer representing the number of nanoseconds since the Unix epoch.",
      "example": "Wed May 09 2018 00:00:00 GMT+1000 (AEST)",
      "name": "Timestamp",
      "size": 8,
      "type": "uint"
    },
    {
      "description": "A representation of a bitcoin address in raw format, with no check sum or encoding.",
      "name": "Address",
      "type": "varbin",
      "varSize": "small"
    },
    {
      "description": "Represents a Bitcoin transaction ID, the double SHA256 hash of the serialized transaction.",
      "example": "9d1ef0b1201c1dec3c1eb1caf758a988205226173e988e7a04afb4ea9977f506",
      "name": "TxId",
      "size": 32,
      "type": "bin"
    },
    {
      "description": "The type/format of the sender's proof of identity. 0 - not included, 1 - PaymailProof, 2 - IdentityOracleProof",
      "name": "ProofOfIdentityType",
      "options": [
        0,
        1,
        2
      ],
      "size": 1,
      "type": "uint"
    }
  ],
  "fieldTypes": [
    {
      "description": "Information about an entity in a channel.",
      "fields": [
        {
          "description": "The address representing the locking script that is required to perform entity administrative level operations on a channel. Such as add/remove a member, accept/reject proposals, and requesting/receiving payments. This is recommended to be an m of n multi-signature address.",
          "label": "Administrative Address",
          "name": "AdministrativeAddress",
          "type": "Address"
        },
        {
          "description": "Specifies the output containing the locking script for the party. It should also be included in the M1 ReceiverIndexes. That output must respond with a proof of identity that identifies the company involved.",
          "label": "Output Index",
          "name": "OutputIndex",
          "size": 4,
          "type": "uint"
        }
      ],
      "label": "Channel Party",
      "name": "ChannelParty"
    },
    {
      "description": "A file containing data.",
      "fields": [
        {
          "description": "Full name, including file extension, of the file. Length 0-255 bytes. 0 is valid.",
          "example": "Agreement.pdf",
          "label": "Document Name",
          "name": "Name",
          "type": "varchar"
        },
        {
          "description": "MIME type of the file. Length 0-255 bytes. 0 is valid. ",
          "example": "application/pdf",
          "label": "MIME Type",
          "name": "Type",
          "type": "varchar"
        },
        {
          "description": "The contents of the file.",
          "label": "File Contents",
          "name": "Contents",
          "type": "varbin",
          "varSize": "medium"
        }
      ],
      "label": "Document",
      "name": "Document"
    },
    {
      "description": "A proof of identity based on identity oracles.",
      "fields": [
        {
          "description": "The user id (UUID) in the identity oracle system. Used to request the entity data.",
          "label": "User ID",
          "name": "UserID",
          "type": "varbin"
        },
        {
          "description": "Address of entity contract. Can be used instead of a User ID. This field refers to the entity specified in the contract at the address specified.",
          "label": "Entity Contract Address",
          "name": "EntityContractAddress",
          "type": "Address"
        },
        {
          "description": "PII is not allowed in entity by GDPR, so only company information can be placed in this entity. In the future this might be supported for PII with better understanding of GDPR. The identity being provided.",
          "label": "Entity",
          "name": "Entity",
          "type": "varbin"
        },
        {
          "description": "Signature of the serialized entity, public key, and block hash with the identity oracle's public key.",
          "label": "OracleSignature",
          "name": "OracleSignature",
          "type": "OracleSignature"
        },
        {
          "description": "Signature of the relevent data (dependent on containing structure and context) with the public key of the identity being proven.",
          "label": "IdentitySignature",
          "name": "IdentitySignature",
          "type": "varbin"
        }
      ],
      "label": "Identity Oracle Proof",
      "name": "IdentityOracleProof"
    },
    {
      "description": "A signature from an oracle verifying some data.",
      "fields": [
        {
          "description": "Base URL of the identity oracle that provided the signature.",
          "example": "identity.tokenized.com",
          "label": "Oracle URL",
          "name": "OracleURL",
          "type": "varchar"
        },
        {
          "description": "The height of the block hash included in the data signed by the oracle. If the value is not included (zero), then no signature hash is included in the signed data.",
          "label": "Block Height",
          "name": "BlockHeight",
          "size": 4,
          "type": "uint"
        },
        {
          "description": "The time frame that the proof is valid.",
          "label": "Validity Period",
          "name": "ValidityPeriod",
          "type": "Period"
        },
        {
          "description": "The algorithm used by the oracle signature.",
          "label": "Signature Algorithm",
          "name": "SignatureAlgorithm",
          "size": 1,
          "type": "uint"
        },
        {
          "description": "Signature of the related data with the oracle's public key.",
          "label": "Signature",
          "name": "Signature",
          "type": "varbin"
        }
      ],
      "label": "Oracle Signature",
      "name": "OracleSignature"
    },
    {
      "code": 2,
      "description": "Reference to a bitcoin transaction output.",
      "fields": [
        {
          "label": "TxId",
          "name": "TxId",
          "type": "TxId"
        },
        {
          "description": "The index of the output within the referenced transaction.",
          "label": "Output Index",
          "name": "OutputIndex",
          "size": 4,
          "type": "uint"
        }
      ],
      "label": "Outpoint",
      "name": "Outpoint"
    },
    {
      "description": "A tag or category of an output used to categorize and organize outputs from different transactions.",
      "fields": [
        {
          "description": "The text of the tag.",
          "label": "Tag",
          "name": "Tag",
          "type": "varchar"
        }
      ],
      "label": "Output Tag",
      "name": "OutputTag"
    },
    {
      "description": "A proof of identity based on paymail.",
      "fields": [
        {
          "description": "The user id (UUID) in the identity oracle system. Used to request the entity data.",
          "label": "User ID",
          "name": "UserID",
          "type": "varbin"
        },
        {
          "description": "PII including personally identifiable user names not allowed by GDPR. This is put in for possible future use without a protocol change. Paymail handle in the form {alias}@{domain}.{tld}",
          "example": "john@tokenized.com",
          "label": "Handle",
          "name": "Handle",
          "type": "varchar"
        },
        {
          "description": "Signature of the serialized entity, public key, and block hash with the identity oracle's public key.",
          "label": "OracleSignature",
          "name": "OracleSignature",
          "type": "OracleSignature"
        }
      ],
      "label": "Paymail Proof",
      "name": "PaymailProof"
    },
    {
      "description": "A period of time. Begin and end can be optional depending on context.",
      "fields": [
        {
          "description": "The start of the period",
          "label": "Begin",
          "name": "Begin",
          "type": "Timestamp"
        },
        {
          "description": "The end of the period",
          "label": "End",
          "name": "End",
          "type": "Timestamp"
        }
      ],
      "label": "Period",
      "name": "Period"
    },
    {
      "description": "A TargetAddress defines a public address and quantity.",
      "fields": [
        {
          "description": "Public address where the token balance will be changed.",
          "label": "Address",
          "name": "Address",
          "type": "Address"
        },
        {
          "description": "Qty of tokens to be frozen, thawed, confiscated or reconciled. For Contract-wide freezes 0 will be used.",
          "example": "10000",
          "label": "Quantity",
          "name": "Quantity",
          "size": 8,
          "type": "uint"
        }
      ],
      "label": "Target Address",
      "name": "TargetAddress"
    }
  ],
  "messages": [
    {
      "code": 2,
      "description": "Generic public message or public announcement. Sent to an address(es).  Can be used for an official issuer announcement.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender creates the transaction.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "The subject / topic of the message.",
          "label": "Subject",
          "name": "Subject",
          "type": "varchar",
          "varSize": "small"
        },
        {
          "description": "The output of the message that this message is regarding (responding to).",
          "label": "Regarding",
          "name": "Regarding",
          "type": "Outpoint"
        },
        {
          "description": "Tokenized Ltd. announces product launch.",
          "label": "Public Message",
          "name": "PublicMessage",
          "type": "Document"
        },
        {
          "description": "Documents attached to the message.",
          "label": "Attachments",
          "listSize": "medium",
          "name": "Attachments",
          "type": "Document[]"
        }
      ],
      "label": "Public Message",
      "name": "PublicMessage"
    },
    {
      "code": 3,
      "description": "Generic private message. Sent to another address(es). Encryption is to be used.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender creates the transaction.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "The subject / topic of the message.",
          "label": "Subject",
          "name": "Subject",
          "type": "varchar",
          "varSize": "small"
        },
        {
          "description": "The output of the message that this message is regarding (responding to).",
          "label": "Regarding",
          "name": "Regarding",
          "type": "Outpoint"
        },
        {
          "description": "Tokenized Ltd announces product launch.",
          "label": "Private Message",
          "name": "PrivateMessage",
          "type": "Document"
        },
        {
          "description": "Documents attached to the message.",
          "label": "Attachments",
          "listSize": "medium",
          "name": "Attachments",
          "type": "Document[]"
        }
      ],
      "label": "Private Message",
      "name": "PrivateMessage"
    },
    {
      "code": 4,
      "description": "A message that contains a bitcoin transaction that was accepted by the network or an agent and then invalidated by a reorg, or zero conf double spend. This serves as on chain evidence of the sending party's signatures and approval for the given transaction.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender creates the transaction.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "Serialized bitcoin transaction that was reverted/invalidated after being accepted.",
          "label": "Transaction",
          "name": "Transaction",
          "type": "varbin",
          "varSize": "medium"
        }
      ],
      "label": "Reverted Tx",
      "name": "RevertedTx"
    },
    {
      "code": 1001,
      "description": "A message that contains all of the details required for an agreement to be formed. Sent to an address(es). The Offer should have all, or nearly all, of the details required for the receiving party to accept the offer.  The Offer shall be in the form of a partially formed Bitcoin transaction with all of the relevent details (offer, consideration, offeror's payment/receipt details, etc.).  The Offer message is different to a Signature Request message in that it is missing the offeree's payment/receipt details (eg. UTXOs). If the Offer message is well received by the offeree, then the offeree can add their relevent details (eg. inputs/outputs) and sign the transaction.  If an additional signature is required from the offeror at this point, then the partially-signed transaction can be sent to the offeror by way of a Signature Request message.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender created the offer.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "Serialized Bitcoin transaction. The transaction needs data added by another party upon acceptance of offer.",
          "label": "Payload",
          "name": "Payload",
          "type": "varbin",
          "varSize": "medium"
        }
      ],
      "label": "Offer",
      "name": "Offer"
    },
    {
      "code": 1002,
      "description": "Partially-signed transactions (Tokenized actions, Bitcoin, Multisig, Threshold Signatures, etc.) can be passed around on-chain to the parties (including Smart Contracts) that still have to sign the transaction.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender creates the transaction.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "Full serialized bitcoin tx with multiple inputs from different wallets/users.",
          "label": "Payload",
          "name": "Payload",
          "type": "varbin",
          "varSize": "medium"
        }
      ],
      "label": "Signature Request",
      "name": "SignatureRequest"
    },
    {
      "code": 1003,
      "description": "A message that contains a multi-contract settlement that needs settlement data added by another contract. Sent to another contract to request data be added.",
      "fields": [
        {
          "description": "Timestamp in nanoseconds for when the message sender creates the transaction.",
          "label": "Timestamp",
          "name": "Timestamp",
          "type": "Timestamp"
        },
        {
          "description": "Tx Id of the transfer request transaction that triggered this message.",
          "label": "Transfer Tx Id",
          "name": "TransferTxId",
          "type": "TxId"
        },
        {
          "description": "Contract fees (in bitcoin) and addresses(PKHs) where fees should be paid. Added by each contract as settlement data is added.",
          "label": "Contract Fees",
          "listSize": "small",
          "name": "ContractFees",
          "type": "TargetAddress[]"
        },
        {
          "description": "Serialized settlement OP_RETURN that needs data added by another contract.",
          "label": "Settlement",
          "name": "Settlement",
          "type": "varbin",
          "varSize": "medium"
        }
      ],
      "label": "Settlement Request",
      "name": "SettlementRequest"
    },
    {
      "code": 1004,
      "description": "Metadata associated with the output. Aka Transaction details. It is used to describe the purpose of the transaction and add other relevant information. Often encrypted (DH, RSA) to make it private for one or more parties.  DH for b2b where multiple parties can see the description.  RSA or the like for descriptions only visible to one of the transacting parties. Optional",
      "fields": [
        {
          "description": "A Description that accompanies the output. A transaction description.",
          "example": "eg. Invoice 3024, Pay Mike back for camping.",
          "label": "Output Description",
          "name": "OutputDescription",
          "notes": "  Can be NULL",
          "type": "varchar",
          "varSize": "medium"
        },
        {
          "description": "Predefined values for describing the output.",
          "label": "Tags",
          "name": "Tags",
          "type": "Tag[]"
        },
        {
          "description": "Free form text fields for describing the output. Groceries, Moomba Gas Compressor Project, Cash Register 3, Fitness, Entertainment, Special, VIP Section, North Carolina Store, Waitress: Cindy Smith, etc.",
          "label": "Custom Tags",
          "name": "CustomTags",
          "type": "OutputTag[]"
        }
      ],
      "label": "Output Metadata",
      "name": "OutputMetadata"
    },
    {
      "code": 2001,
      "description": "A message used to initiate a new relationship between 2 or more parties. The M1 container specifies the sender tx input and requested participant tx outputs. If there are more than 2 parties the encryption secret provided in the envelope protocol is used as the base encryption secret. If there are only 2 parties, then the ECDH secret of each key pair is used to encrypt each message.",
      "fields": [
        {
          "description": "The type or purposed of the relationship. 0 - Conversation (direct messages), 1 - Channel (entity/business to entity/business)",
          "label": "Type",
          "name": "Type",
          "options": [
            0,
            1
          ],
          "size": 1,
          "type": "uint"
        },
        {
          "description": "The seed value used to derive keys for the relationship.",
          "label": "Seed Value",
          "name": "SeedValue",
          "type": "varbin"
        },
        {
          "description": "The flag value can optionally be used to identify messages in the relationship so that all members don't have to be tagged in each message. It isn't needed for two party relationships, but is recommended for relationships with more members. It will be included in it's own op return for all message transactions. It is recommended to be a random 20 byte value similar to public key hashes. The flag will be the Payload of an Envelope protocol message with a Payload Protocol ID of \"F\". If this value is not specified then there must be an output to the next key in the relationship chain for every member in the group.",
          "label": "Flag Value",
          "name": "FlagValue",
          "type": "varbin"
        },
        {
          "description": "The type/format of the sender's proof of identity.",
          "label": "Proof of Identity Type",
          "name": "ProofOfIdentityType",
          "type": "ProofOfIdentityType"
        },
        {
          "description": "Sender's proof of identity.",
          "label": "Proof of Identity",
          "name": "ProofOfIdentity",
          "size": "small",
          "type": "varbin"
        },
        {
          "description": "Information about the entities in the channel. Not included if this is not a channel initiation. These represent the companies in a channel. A channel is recommended to have 2 entities and several individual members per party. The individual members can discuss terms while the parties are used for official actions.",
          "label": "Channel Parties",
          "name": "ChannelParties",
          "type": "ChannelParty[]"
        }
      ],
      "label": "Initiate Relationship",
      "name": "InitiateRelationship"
    },
    {
      "code": 2002,
      "description": "A pending accept to a relationship that provides information about a requested participant.",
      "fields": [
        {
          "description": "The type/format of the sender's proof of identity.",
          "label": "Proof of Identity Type",
          "name": "ProofOfIdentityType",
          "type": "ProofOfIdentityType"
        },
        {
          "description": "Sender's proof of identity.",
          "label": "Proof of Identity",
          "name": "ProofOfIdentity",
          "size": "small",
          "type": "varbin"
        }
      ],
      "label": "Pending Accept Relationship",
      "name": "PendingAcceptRelationship"
    },
    {
      "code": 2003,
      "description": "Accept a relationship.",
      "fields": [
        {
          "description": "The type/format of the sender's proof of identity.",
          "label": "Proof of Identity Type",
          "name": "ProofOfIdentityType",
          "type": "ProofOfIdentityType"
        },
        {
          "description": "Sender's proof of identity.",
          "label": "Proof of Identity",
          "name": "ProofOfIdentity",
          "size": "small",
          "type": "varbin"
        }
      ],
      "label": "Accept Relationship",
      "name": "AcceptRelationship"
    },
    {
      "code": 2004,
      "description": "Amend a relationship. Add/Remove members. Modify permissions. This is encrypted with the current base encryption secret, but can provide a new base encryption secret that starts after this message.",
      "fields": [
        {
          "description": "The new seed value used to derive keys for the relationship after this message.",
          "label": "Seed Value",
          "name": "SeedValue",
          "type": "varbin"
        },
        {
          "description": "The new base encryption secret used to derive encryption secrets for the relationship after this message. Each time a message is sent, the current seed hash is added to the base encryption secret and that value is used to encrypt the message.",
          "label": "Base Encryption Secret",
          "name": "BaseEncryptionSecret",
          "type": "varbin"
        },
        {
          "description": "Indexes to the outputs of the members that are being added to the group.",
          "label": "Add Member Indexes",
          "name": "AddMemberIndexes",
          "size": 4,
          "type": "uint"
        },
        {
          "description": "Indexes to the outputs of the members that are being removed from the group.",
          "label": "Drop Member Indexes",
          "name": "DropMemberIndexes",
          "size": 4,
          "type": "uint"
        }
      ],
      "label": "Relationship Amendment",
      "name": "RelationshipAmendment"
    },
    {
      "code": 2005,
      "description": "Start a thread from within a conversation or channel.",
      "fields": [
        {
          "description": "The flag value is required to identify messages in the thread so that all members don't have to be tagged in each message. It is recommended to be a random 20 byte value similar to public key hashes. The flag will be the Payload of an Envelope protocol message with a Payload Protocol ID of \"F\"",
          "label": "Flag Value",
          "name": "FlagValue",
          "type": "varbin"
        },
        {
          "description": "The seed value used to derive keys for the thread. If this value is not specified, then the original seed value from the parent conversation or channel is used.",
          "label": "Seed Value",
          "name": "SeedValue",
          "type": "varbin"
        }
      ],
      "label": "Initiate Thread",
      "name": "InitiateThread"
    }
  ],
  "name": "Tokenized Message Types",
  "package": "messages",
  "resources": [
    {
      "codeType": {
        "type": "uint"
      },
      "description": "Predefined tags for output metadata. Multiple values can be assigned to an output to describe a tx output.\n",
      "metadata": {
        "type": "Tag"
      },
      "name": "Tags",
      "values": [
        {
          "code": 1,
          "name": "Housing"
        },
        {
          "code": 2,
          "name": "Utilities"
        },
        {
          "code": 3,
          "name": "Food"
        },
        {
          "code": 4,
          "name": "Medical"
        },
        {
          "code": 5,
          "name": "Financial Services"
        },
        {
          "code": 6,
          "name": "Entertainment"
        },
        {
          "code": 7,
          "name": "Sales"
        },
        {
          "code": 8,
          "name": "Automotive"
        },
        {
          "code": 9,
          "name": "Transportation"
        },
        {
          "code": 10,
          "name": "Fitness"
        },
        {
          "code": 20,
          "name": "Electricity"
        },
        {
          "code": 21,
          "name": "Water"
        },
        {
          "code": 22,
          "name": "Internet"
        },
        {
          "code": 23,
          "name": "Medicine"
        },
        {
          "code": 24,
          "name": "Service"
        },
        {
          "code": 25,
          "name": "Repair"
        },
        {
          "code": 26,
          "name": "Supplies"
        },
        {
          "code": 27,
          "name": "Parts"
        },
        {
          "code": 28,
          "name": "Labor"
        },
        {
          "code": 29,
          "name": "Tip"
        },
        {
          "code": 30,
          "name": "Media"
        },
        {
          "code": 40,
          "name": "Music"
        },
        {
          "code": 41,
          "name": "Video"
        },
        {
          "code": 42,
          "name": "Photo"
        },
        {
          "code": 43,
          "name": "Audio"
        },
        {
          "code": 100,
          "name": "Alcohol"
        },
        {
          "code": 101,
          "name": "Tobacco"
        },
        {
          "code": 120,
          "name": "Discounted"
        },
        {
          "code": 121,
          "name": "Promotional"
        }
      ]
    }
  ],
  "version": 1
}