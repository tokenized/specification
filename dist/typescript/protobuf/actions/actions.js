// source: actions.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.actions.Addition');
goog.provide('proto.actions.AdminIdentityCertificateField');
goog.provide('proto.actions.AdministratorField');
goog.provide('proto.actions.Alteration');
goog.provide('proto.actions.AmendmentField');
goog.provide('proto.actions.AssetCreation');
goog.provide('proto.actions.AssetDefinition');
goog.provide('proto.actions.AssetModification');
goog.provide('proto.actions.AssetReceiverField');
goog.provide('proto.actions.AssetSettlementField');
goog.provide('proto.actions.AssetTransferField');
goog.provide('proto.actions.BallotCast');
goog.provide('proto.actions.BallotCounted');
goog.provide('proto.actions.BodyOfAgreementAmendment');
goog.provide('proto.actions.BodyOfAgreementFormation');
goog.provide('proto.actions.BodyOfAgreementOffer');
goog.provide('proto.actions.ChapterField');
goog.provide('proto.actions.ClauseField');
goog.provide('proto.actions.Confiscation');
goog.provide('proto.actions.ContractAddressChange');
goog.provide('proto.actions.ContractAmendment');
goog.provide('proto.actions.ContractFormation');
goog.provide('proto.actions.ContractOffer');
goog.provide('proto.actions.DefinedTermField');
goog.provide('proto.actions.DocumentField');
goog.provide('proto.actions.EntityField');
goog.provide('proto.actions.Establishment');
goog.provide('proto.actions.Freeze');
goog.provide('proto.actions.ManagerField');
goog.provide('proto.actions.Message');
goog.provide('proto.actions.OracleField');
goog.provide('proto.actions.Order');
goog.provide('proto.actions.Proposal');
goog.provide('proto.actions.QuantityIndexField');
goog.provide('proto.actions.Reconciliation');
goog.provide('proto.actions.ReferenceTransactionField');
goog.provide('proto.actions.Rejection');
goog.provide('proto.actions.Removal');
goog.provide('proto.actions.Result');
goog.provide('proto.actions.ServiceField');
goog.provide('proto.actions.Settlement');
goog.provide('proto.actions.StaticContractFormation');
goog.provide('proto.actions.TargetAddressField');
goog.provide('proto.actions.Thaw');
goog.provide('proto.actions.Transfer');
goog.provide('proto.actions.Vote');
goog.provide('proto.actions.VotingSystemField');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractOffer.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ContractOffer.displayName = 'proto.actions.ContractOffer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractFormation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractFormation.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractFormation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ContractFormation.displayName = 'proto.actions.ContractFormation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractAmendment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ContractAmendment.repeatedFields_, null);
};
goog.inherits(proto.actions.ContractAmendment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ContractAmendment.displayName = 'proto.actions.ContractAmendment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.StaticContractFormation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.StaticContractFormation.repeatedFields_, null);
};
goog.inherits(proto.actions.StaticContractFormation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.StaticContractFormation.displayName = 'proto.actions.StaticContractFormation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ContractAddressChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ContractAddressChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ContractAddressChange.displayName = 'proto.actions.ContractAddressChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BodyOfAgreementOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.BodyOfAgreementOffer.repeatedFields_, null);
};
goog.inherits(proto.actions.BodyOfAgreementOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.BodyOfAgreementOffer.displayName = 'proto.actions.BodyOfAgreementOffer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BodyOfAgreementFormation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.BodyOfAgreementFormation.repeatedFields_, null);
};
goog.inherits(proto.actions.BodyOfAgreementFormation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.BodyOfAgreementFormation.displayName = 'proto.actions.BodyOfAgreementFormation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BodyOfAgreementAmendment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.BodyOfAgreementAmendment.repeatedFields_, null);
};
goog.inherits(proto.actions.BodyOfAgreementAmendment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.BodyOfAgreementAmendment.displayName = 'proto.actions.BodyOfAgreementAmendment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetDefinition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetDefinition.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetDefinition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetDefinition.displayName = 'proto.actions.AssetDefinition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetCreation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetCreation.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetCreation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetCreation.displayName = 'proto.actions.AssetCreation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetModification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetModification.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetModification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetModification.displayName = 'proto.actions.AssetModification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Transfer.repeatedFields_, null);
};
goog.inherits(proto.actions.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Transfer.displayName = 'proto.actions.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Settlement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Settlement.repeatedFields_, null);
};
goog.inherits(proto.actions.Settlement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Settlement.displayName = 'proto.actions.Settlement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Proposal.repeatedFields_, null);
};
goog.inherits(proto.actions.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Proposal.displayName = 'proto.actions.Proposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Vote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Vote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Vote.displayName = 'proto.actions.Vote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BallotCast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.BallotCast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.BallotCast.displayName = 'proto.actions.BallotCast';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.BallotCounted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.BallotCounted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.BallotCounted.displayName = 'proto.actions.BallotCounted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Result.repeatedFields_, null);
};
goog.inherits(proto.actions.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Result.displayName = 'proto.actions.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Order = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Order.repeatedFields_, null);
};
goog.inherits(proto.actions.Order, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Order.displayName = 'proto.actions.Order';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Freeze = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Freeze.repeatedFields_, null);
};
goog.inherits(proto.actions.Freeze, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Freeze.displayName = 'proto.actions.Freeze';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Thaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Thaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Thaw.displayName = 'proto.actions.Thaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Confiscation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Confiscation.repeatedFields_, null);
};
goog.inherits(proto.actions.Confiscation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Confiscation.displayName = 'proto.actions.Confiscation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Reconciliation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Reconciliation.repeatedFields_, null);
};
goog.inherits(proto.actions.Reconciliation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Reconciliation.displayName = 'proto.actions.Reconciliation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Establishment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Establishment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Establishment.displayName = 'proto.actions.Establishment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Addition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Addition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Addition.displayName = 'proto.actions.Addition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Alteration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Alteration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Alteration.displayName = 'proto.actions.Alteration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Removal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.Removal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Removal.displayName = 'proto.actions.Removal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Message.repeatedFields_, null);
};
goog.inherits(proto.actions.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Message.displayName = 'proto.actions.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.Rejection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.Rejection.repeatedFields_, null);
};
goog.inherits(proto.actions.Rejection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.Rejection.displayName = 'proto.actions.Rejection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AdministratorField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AdministratorField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AdministratorField.displayName = 'proto.actions.AdministratorField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AdminIdentityCertificateField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AdminIdentityCertificateField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AdminIdentityCertificateField.displayName = 'proto.actions.AdminIdentityCertificateField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AmendmentField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AmendmentField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AmendmentField.displayName = 'proto.actions.AmendmentField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetReceiverField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.AssetReceiverField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetReceiverField.displayName = 'proto.actions.AssetReceiverField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetSettlementField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetSettlementField.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetSettlementField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetSettlementField.displayName = 'proto.actions.AssetSettlementField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.AssetTransferField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.AssetTransferField.repeatedFields_, null);
};
goog.inherits(proto.actions.AssetTransferField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.AssetTransferField.displayName = 'proto.actions.AssetTransferField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ChapterField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ChapterField.repeatedFields_, null);
};
goog.inherits(proto.actions.ChapterField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ChapterField.displayName = 'proto.actions.ChapterField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ClauseField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ClauseField.repeatedFields_, null);
};
goog.inherits(proto.actions.ClauseField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ClauseField.displayName = 'proto.actions.ClauseField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.DefinedTermField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.DefinedTermField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.DefinedTermField.displayName = 'proto.actions.DefinedTermField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.DocumentField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.DocumentField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.DocumentField.displayName = 'proto.actions.DocumentField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.EntityField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.EntityField.repeatedFields_, null);
};
goog.inherits(proto.actions.EntityField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.EntityField.displayName = 'proto.actions.EntityField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ManagerField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ManagerField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ManagerField.displayName = 'proto.actions.ManagerField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.OracleField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.OracleField.repeatedFields_, null);
};
goog.inherits(proto.actions.OracleField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.OracleField.displayName = 'proto.actions.OracleField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.QuantityIndexField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.QuantityIndexField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.QuantityIndexField.displayName = 'proto.actions.QuantityIndexField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ReferenceTransactionField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.actions.ReferenceTransactionField.repeatedFields_, null);
};
goog.inherits(proto.actions.ReferenceTransactionField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ReferenceTransactionField.displayName = 'proto.actions.ReferenceTransactionField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.ServiceField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.ServiceField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.ServiceField.displayName = 'proto.actions.ServiceField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.TargetAddressField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.TargetAddressField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.TargetAddressField.displayName = 'proto.actions.TargetAddressField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.actions.VotingSystemField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.actions.VotingSystemField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.actions.VotingSystemField.displayName = 'proto.actions.VotingSystemField';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractOffer.repeatedFields_ = [5,18,23,28,29];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bodyofagreementtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    contractexpiration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    contracturi: jspb.Message.getFieldWithDefault(msg, 9, ""),
    issuer: (f = msg.getIssuer()) && proto.actions.EntityField.toObject(includeInstance, f),
    contractoperatorincluded: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    contractfee: jspb.Message.getFieldWithDefault(msg, 17, 0),
    votingsystemsList: jspb.Message.toObjectList(msg.getVotingsystemsList(),
    proto.actions.VotingSystemField.toObject, includeInstance),
    contractpermissions: msg.getContractpermissions_asB64(),
    restrictedqtyassets: jspb.Message.getFieldWithDefault(msg, 20, 0),
    administrationproposal: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    holderproposal: jspb.Message.getBooleanFieldWithDefault(msg, 22, false),
    oraclesList: jspb.Message.toObjectList(msg.getOraclesList(),
    proto.actions.OracleField.toObject, includeInstance),
    masteraddress: msg.getMasteraddress_asB64(),
    entitycontract: msg.getEntitycontract_asB64(),
    operatorentitycontract: msg.getOperatorentitycontract_asB64(),
    contracttype: jspb.Message.getFieldWithDefault(msg, 27, 0),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.actions.ServiceField.toObject, includeInstance),
    adminidentitycertificatesList: jspb.Message.toObjectList(msg.getAdminidentitycertificatesList(),
    proto.actions.AdminIdentityCertificateField.toObject, includeInstance),
    governinglaw: jspb.Message.getFieldWithDefault(msg, 30, ""),
    jurisdiction: jspb.Message.getFieldWithDefault(msg, 31, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractOffer}
 */
proto.actions.ContractOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractOffer;
  return proto.actions.ContractOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractOffer}
 */
proto.actions.ContractOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 5:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.addSupportingdocs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 10:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContractoperatorincluded(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractfee(value);
      break;
    case 18:
      var value = new proto.actions.VotingSystemField;
      reader.readMessage(value,proto.actions.VotingSystemField.deserializeBinaryFromReader);
      msg.addVotingsystems(value);
      break;
    case 19:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractpermissions(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestrictedqtyassets(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 23:
      var value = new proto.actions.OracleField;
      reader.readMessage(value,proto.actions.OracleField.deserializeBinaryFromReader);
      msg.addOracles(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasteraddress(value);
      break;
    case 25:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntitycontract(value);
      break;
    case 26:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperatorentitycontract(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContracttype(value);
      break;
    case 28:
      var value = new proto.actions.ServiceField;
      reader.readMessage(value,proto.actions.ServiceField.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    case 29:
      var value = new proto.actions.AdminIdentityCertificateField;
      reader.readMessage(value,proto.actions.AdminIdentityCertificateField.deserializeBinaryFromReader);
      msg.addAdminidentitycertificates(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 31:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ContractOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = message.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = message.getContractoperatorincluded();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getContractfee();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getVotingsystemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.actions.VotingSystemField.serializeBinaryToWriter
    );
  }
  f = message.getContractpermissions_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      19,
      f
    );
  }
  f = message.getRestrictedqtyassets();
  if (f !== 0) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = message.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getHolderproposal();
  if (f) {
    writer.writeBool(
      22,
      f
    );
  }
  f = message.getOraclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      23,
      f,
      proto.actions.OracleField.serializeBinaryToWriter
    );
  }
  f = message.getMasteraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      24,
      f
    );
  }
  f = message.getEntitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      25,
      f
    );
  }
  f = message.getOperatorentitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      26,
      f
    );
  }
  f = message.getContracttype();
  if (f !== 0) {
    writer.writeUint32(
      27,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      28,
      f,
      proto.actions.ServiceField.serializeBinaryToWriter
    );
  }
  f = message.getAdminidentitycertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      29,
      f,
      proto.actions.AdminIdentityCertificateField.serializeBinaryToWriter
    );
  }
  f = message.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
  f = message.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      31,
      f
    );
  }
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContractname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 BodyOfAgreementType = 2;
 * @return {number}
 */
proto.actions.ContractOffer.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setBodyofagreementtype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes BodyOfAgreement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOffer.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setBodyofagreement = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated DocumentField SupportingDocs = 5;
 * @return {!Array<!proto.actions.DocumentField>}
 */
proto.actions.ContractOffer.prototype.getSupportingdocsList = function() {
  return /** @type{!Array<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 5));
};


/**
 * @param {!Array<!proto.actions.DocumentField>} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setSupportingdocsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.actions.DocumentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.DocumentField}
 */
proto.actions.ContractOffer.prototype.addSupportingdocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.actions.DocumentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearSupportingdocsList = function() {
  return this.setSupportingdocsList([]);
};


/**
 * optional uint64 ContractExpiration = 8;
 * @return {number}
 */
proto.actions.ContractOffer.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContractexpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string ContractURI = 9;
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContracturi = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional EntityField Issuer = 10;
 * @return {?proto.actions.EntityField}
 */
proto.actions.ContractOffer.prototype.getIssuer = function() {
  return /** @type{?proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 10));
};


/**
 * @param {?proto.actions.EntityField|undefined} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setIssuer = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearIssuer = function() {
  return this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.actions.ContractOffer.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool ContractOperatorIncluded = 12;
 * @return {boolean}
 */
proto.actions.ContractOffer.prototype.getContractoperatorincluded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContractoperatorincluded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 ContractFee = 17;
 * @return {number}
 */
proto.actions.ContractOffer.prototype.getContractfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContractfee = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * repeated VotingSystemField VotingSystems = 18;
 * @return {!Array<!proto.actions.VotingSystemField>}
 */
proto.actions.ContractOffer.prototype.getVotingsystemsList = function() {
  return /** @type{!Array<!proto.actions.VotingSystemField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.VotingSystemField, 18));
};


/**
 * @param {!Array<!proto.actions.VotingSystemField>} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setVotingsystemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.actions.VotingSystemField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.ContractOffer.prototype.addVotingsystems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.actions.VotingSystemField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearVotingsystemsList = function() {
  return this.setVotingsystemsList([]);
};


/**
 * optional bytes ContractPermissions = 19;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOffer.prototype.getContractpermissions = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * optional bytes ContractPermissions = 19;
 * This is a type-conversion wrapper around `getContractpermissions()`
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getContractpermissions_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractpermissions()));
};


/**
 * optional bytes ContractPermissions = 19;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractpermissions()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.getContractpermissions_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractpermissions()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContractpermissions = function(value) {
  return jspb.Message.setProto3BytesField(this, 19, value);
};


/**
 * optional uint64 RestrictedQtyAssets = 20;
 * @return {number}
 */
proto.actions.ContractOffer.prototype.getRestrictedqtyassets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setRestrictedqtyassets = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional bool AdministrationProposal = 21;
 * @return {boolean}
 */
proto.actions.ContractOffer.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setAdministrationproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * optional bool HolderProposal = 22;
 * @return {boolean}
 */
proto.actions.ContractOffer.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setHolderproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 22, value);
};


/**
 * repeated OracleField Oracles = 23;
 * @return {!Array<!proto.actions.OracleField>}
 */
proto.actions.ContractOffer.prototype.getOraclesList = function() {
  return /** @type{!Array<!proto.actions.OracleField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.OracleField, 23));
};


/**
 * @param {!Array<!proto.actions.OracleField>} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setOraclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 23, value);
};


/**
 * @param {!proto.actions.OracleField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.OracleField}
 */
proto.actions.ContractOffer.prototype.addOracles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 23, opt_value, proto.actions.OracleField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearOraclesList = function() {
  return this.setOraclesList([]);
};


/**
 * optional bytes MasterAddress = 24;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOffer.prototype.getMasteraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes MasterAddress = 24;
 * This is a type-conversion wrapper around `getMasteraddress()`
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getMasteraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasteraddress()));
};


/**
 * optional bytes MasterAddress = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasteraddress()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.getMasteraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasteraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setMasteraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 24, value);
};


/**
 * optional bytes EntityContract = 25;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOffer.prototype.getEntitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * optional bytes EntityContract = 25;
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getEntitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntitycontract()));
};


/**
 * optional bytes EntityContract = 25;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.getEntitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setEntitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 25, value);
};


/**
 * optional bytes OperatorEntityContract = 26;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractOffer.prototype.getOperatorentitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * optional bytes OperatorEntityContract = 26;
 * This is a type-conversion wrapper around `getOperatorentitycontract()`
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getOperatorentitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperatorentitycontract()));
};


/**
 * optional bytes OperatorEntityContract = 26;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperatorentitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.ContractOffer.prototype.getOperatorentitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperatorentitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setOperatorentitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 26, value);
};


/**
 * optional uint32 ContractType = 27;
 * @return {number}
 */
proto.actions.ContractOffer.prototype.getContracttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * repeated ServiceField Services = 28;
 * @return {!Array<!proto.actions.ServiceField>}
 */
proto.actions.ContractOffer.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.actions.ServiceField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ServiceField, 28));
};


/**
 * @param {!Array<!proto.actions.ServiceField>} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 28, value);
};


/**
 * @param {!proto.actions.ServiceField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ServiceField}
 */
proto.actions.ContractOffer.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 28, opt_value, proto.actions.ServiceField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};


/**
 * repeated AdminIdentityCertificateField AdminIdentityCertificates = 29;
 * @return {!Array<!proto.actions.AdminIdentityCertificateField>}
 */
proto.actions.ContractOffer.prototype.getAdminidentitycertificatesList = function() {
  return /** @type{!Array<!proto.actions.AdminIdentityCertificateField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AdminIdentityCertificateField, 29));
};


/**
 * @param {!Array<!proto.actions.AdminIdentityCertificateField>} value
 * @return {!proto.actions.ContractOffer} returns this
*/
proto.actions.ContractOffer.prototype.setAdminidentitycertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 29, value);
};


/**
 * @param {!proto.actions.AdminIdentityCertificateField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AdminIdentityCertificateField}
 */
proto.actions.ContractOffer.prototype.addAdminidentitycertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 29, opt_value, proto.actions.AdminIdentityCertificateField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.clearAdminidentitycertificatesList = function() {
  return this.setAdminidentitycertificatesList([]);
};


/**
 * optional string GoverningLaw = 30;
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setGoverninglaw = function(value) {
  return jspb.Message.setProto3StringField(this, 30, value);
};


/**
 * optional string Jurisdiction = 31;
 * @return {string}
 */
proto.actions.ContractOffer.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractOffer} returns this
 */
proto.actions.ContractOffer.prototype.setJurisdiction = function(value) {
  return jspb.Message.setProto3StringField(this, 31, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractFormation.repeatedFields_ = [5,17,22,29,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractFormation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractFormation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractFormation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractFormation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bodyofagreementtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    contractexpiration: jspb.Message.getFieldWithDefault(msg, 8, 0),
    contracturi: jspb.Message.getFieldWithDefault(msg, 9, ""),
    issuer: (f = msg.getIssuer()) && proto.actions.EntityField.toObject(includeInstance, f),
    contractfee: jspb.Message.getFieldWithDefault(msg, 16, 0),
    votingsystemsList: jspb.Message.toObjectList(msg.getVotingsystemsList(),
    proto.actions.VotingSystemField.toObject, includeInstance),
    contractpermissions: msg.getContractpermissions_asB64(),
    restrictedqtyassets: jspb.Message.getFieldWithDefault(msg, 19, 0),
    administrationproposal: jspb.Message.getBooleanFieldWithDefault(msg, 20, false),
    holderproposal: jspb.Message.getBooleanFieldWithDefault(msg, 21, false),
    oraclesList: jspb.Message.toObjectList(msg.getOraclesList(),
    proto.actions.OracleField.toObject, includeInstance),
    masteraddress: msg.getMasteraddress_asB64(),
    contractrevision: jspb.Message.getFieldWithDefault(msg, 24, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 25, 0),
    entitycontract: msg.getEntitycontract_asB64(),
    operatorentitycontract: msg.getOperatorentitycontract_asB64(),
    contracttype: jspb.Message.getFieldWithDefault(msg, 28, 0),
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.actions.ServiceField.toObject, includeInstance),
    adminidentitycertificatesList: jspb.Message.toObjectList(msg.getAdminidentitycertificatesList(),
    proto.actions.AdminIdentityCertificateField.toObject, includeInstance),
    adminaddress: msg.getAdminaddress_asB64(),
    operatoraddress: msg.getOperatoraddress_asB64(),
    governinglaw: jspb.Message.getFieldWithDefault(msg, 33, ""),
    jurisdiction: jspb.Message.getFieldWithDefault(msg, 34, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractFormation}
 */
proto.actions.ContractFormation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractFormation;
  return proto.actions.ContractFormation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractFormation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractFormation}
 */
proto.actions.ContractFormation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 5:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.addSupportingdocs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 10:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.setIssuer(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractfee(value);
      break;
    case 17:
      var value = new proto.actions.VotingSystemField;
      reader.readMessage(value,proto.actions.VotingSystemField.deserializeBinaryFromReader);
      msg.addVotingsystems(value);
      break;
    case 18:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractpermissions(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRestrictedqtyassets(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 22:
      var value = new proto.actions.OracleField;
      reader.readMessage(value,proto.actions.OracleField.deserializeBinaryFromReader);
      msg.addOracles(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasteraddress(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 26:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntitycontract(value);
      break;
    case 27:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperatorentitycontract(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContracttype(value);
      break;
    case 29:
      var value = new proto.actions.ServiceField;
      reader.readMessage(value,proto.actions.ServiceField.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    case 30:
      var value = new proto.actions.AdminIdentityCertificateField;
      reader.readMessage(value,proto.actions.AdminIdentityCertificateField.deserializeBinaryFromReader);
      msg.addAdminidentitycertificates(value);
      break;
    case 31:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdminaddress(value);
      break;
    case 32:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOperatoraddress(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 34:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ContractFormation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractFormation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractFormation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = message.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getIssuer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = message.getContractfee();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getVotingsystemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.actions.VotingSystemField.serializeBinaryToWriter
    );
  }
  f = message.getContractpermissions_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      18,
      f
    );
  }
  f = message.getRestrictedqtyassets();
  if (f !== 0) {
    writer.writeUint64(
      19,
      f
    );
  }
  f = message.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = message.getHolderproposal();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
  f = message.getOraclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.actions.OracleField.serializeBinaryToWriter
    );
  }
  f = message.getMasteraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = message.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      24,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      25,
      f
    );
  }
  f = message.getEntitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      26,
      f
    );
  }
  f = message.getOperatorentitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      27,
      f
    );
  }
  f = message.getContracttype();
  if (f !== 0) {
    writer.writeUint32(
      28,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      29,
      f,
      proto.actions.ServiceField.serializeBinaryToWriter
    );
  }
  f = message.getAdminidentitycertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.actions.AdminIdentityCertificateField.serializeBinaryToWriter
    );
  }
  f = message.getAdminaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      31,
      f
    );
  }
  f = message.getOperatoraddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      32,
      f
    );
  }
  f = message.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = message.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      34,
      f
    );
  }
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContractname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 BodyOfAgreementType = 2;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setBodyofagreementtype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes BodyOfAgreement = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setBodyofagreement = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated DocumentField SupportingDocs = 5;
 * @return {!Array<!proto.actions.DocumentField>}
 */
proto.actions.ContractFormation.prototype.getSupportingdocsList = function() {
  return /** @type{!Array<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 5));
};


/**
 * @param {!Array<!proto.actions.DocumentField>} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setSupportingdocsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.actions.DocumentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.DocumentField}
 */
proto.actions.ContractFormation.prototype.addSupportingdocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.actions.DocumentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearSupportingdocsList = function() {
  return this.setSupportingdocsList([]);
};


/**
 * optional uint64 ContractExpiration = 8;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContractexpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string ContractURI = 9;
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContracturi = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional EntityField Issuer = 10;
 * @return {?proto.actions.EntityField}
 */
proto.actions.ContractFormation.prototype.getIssuer = function() {
  return /** @type{?proto.actions.EntityField} */ (
    jspb.Message.getWrapperField(this, proto.actions.EntityField, 10));
};


/**
 * @param {?proto.actions.EntityField|undefined} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setIssuer = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearIssuer = function() {
  return this.setIssuer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.actions.ContractFormation.prototype.hasIssuer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 ContractFee = 16;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getContractfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContractfee = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated VotingSystemField VotingSystems = 17;
 * @return {!Array<!proto.actions.VotingSystemField>}
 */
proto.actions.ContractFormation.prototype.getVotingsystemsList = function() {
  return /** @type{!Array<!proto.actions.VotingSystemField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.VotingSystemField, 17));
};


/**
 * @param {!Array<!proto.actions.VotingSystemField>} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setVotingsystemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.actions.VotingSystemField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.ContractFormation.prototype.addVotingsystems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.actions.VotingSystemField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearVotingsystemsList = function() {
  return this.setVotingsystemsList([]);
};


/**
 * optional bytes ContractPermissions = 18;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getContractpermissions = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * optional bytes ContractPermissions = 18;
 * This is a type-conversion wrapper around `getContractpermissions()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getContractpermissions_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractpermissions()));
};


/**
 * optional bytes ContractPermissions = 18;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractpermissions()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getContractpermissions_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractpermissions()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContractpermissions = function(value) {
  return jspb.Message.setProto3BytesField(this, 18, value);
};


/**
 * optional uint64 RestrictedQtyAssets = 19;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getRestrictedqtyassets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setRestrictedqtyassets = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional bool AdministrationProposal = 20;
 * @return {boolean}
 */
proto.actions.ContractFormation.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 20, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setAdministrationproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 20, value);
};


/**
 * optional bool HolderProposal = 21;
 * @return {boolean}
 */
proto.actions.ContractFormation.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 21, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setHolderproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 21, value);
};


/**
 * repeated OracleField Oracles = 22;
 * @return {!Array<!proto.actions.OracleField>}
 */
proto.actions.ContractFormation.prototype.getOraclesList = function() {
  return /** @type{!Array<!proto.actions.OracleField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.OracleField, 22));
};


/**
 * @param {!Array<!proto.actions.OracleField>} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setOraclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.actions.OracleField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.OracleField}
 */
proto.actions.ContractFormation.prototype.addOracles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.actions.OracleField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearOraclesList = function() {
  return this.setOraclesList([]);
};


/**
 * optional bytes MasterAddress = 23;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getMasteraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * optional bytes MasterAddress = 23;
 * This is a type-conversion wrapper around `getMasteraddress()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getMasteraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasteraddress()));
};


/**
 * optional bytes MasterAddress = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasteraddress()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getMasteraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasteraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setMasteraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 23, value);
};


/**
 * optional uint32 ContractRevision = 24;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContractrevision = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional uint64 Timestamp = 25;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional bytes EntityContract = 26;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getEntitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * optional bytes EntityContract = 26;
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getEntitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntitycontract()));
};


/**
 * optional bytes EntityContract = 26;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getEntitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setEntitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 26, value);
};


/**
 * optional bytes OperatorEntityContract = 27;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getOperatorentitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * optional bytes OperatorEntityContract = 27;
 * This is a type-conversion wrapper around `getOperatorentitycontract()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getOperatorentitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperatorentitycontract()));
};


/**
 * optional bytes OperatorEntityContract = 27;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperatorentitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getOperatorentitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperatorentitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setOperatorentitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 27, value);
};


/**
 * optional uint32 ContractType = 28;
 * @return {number}
 */
proto.actions.ContractFormation.prototype.getContracttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * repeated ServiceField Services = 29;
 * @return {!Array<!proto.actions.ServiceField>}
 */
proto.actions.ContractFormation.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.actions.ServiceField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ServiceField, 29));
};


/**
 * @param {!Array<!proto.actions.ServiceField>} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 29, value);
};


/**
 * @param {!proto.actions.ServiceField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ServiceField}
 */
proto.actions.ContractFormation.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 29, opt_value, proto.actions.ServiceField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};


/**
 * repeated AdminIdentityCertificateField AdminIdentityCertificates = 30;
 * @return {!Array<!proto.actions.AdminIdentityCertificateField>}
 */
proto.actions.ContractFormation.prototype.getAdminidentitycertificatesList = function() {
  return /** @type{!Array<!proto.actions.AdminIdentityCertificateField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AdminIdentityCertificateField, 30));
};


/**
 * @param {!Array<!proto.actions.AdminIdentityCertificateField>} value
 * @return {!proto.actions.ContractFormation} returns this
*/
proto.actions.ContractFormation.prototype.setAdminidentitycertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.actions.AdminIdentityCertificateField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AdminIdentityCertificateField}
 */
proto.actions.ContractFormation.prototype.addAdminidentitycertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.actions.AdminIdentityCertificateField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.clearAdminidentitycertificatesList = function() {
  return this.setAdminidentitycertificatesList([]);
};


/**
 * optional bytes AdminAddress = 31;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getAdminaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * optional bytes AdminAddress = 31;
 * This is a type-conversion wrapper around `getAdminaddress()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getAdminaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdminaddress()));
};


/**
 * optional bytes AdminAddress = 31;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdminaddress()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getAdminaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdminaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setAdminaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 31, value);
};


/**
 * optional bytes OperatorAddress = 32;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractFormation.prototype.getOperatoraddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 32, ""));
};


/**
 * optional bytes OperatorAddress = 32;
 * This is a type-conversion wrapper around `getOperatoraddress()`
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getOperatoraddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOperatoraddress()));
};


/**
 * optional bytes OperatorAddress = 32;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOperatoraddress()`
 * @return {!Uint8Array}
 */
proto.actions.ContractFormation.prototype.getOperatoraddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOperatoraddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setOperatoraddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 32, value);
};


/**
 * optional string GoverningLaw = 33;
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setGoverninglaw = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional string Jurisdiction = 34;
 * @return {string}
 */
proto.actions.ContractFormation.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 34, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ContractFormation} returns this
 */
proto.actions.ContractFormation.prototype.setJurisdiction = function(value) {
  return jspb.Message.setProto3StringField(this, 34, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ContractAmendment.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractAmendment.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractAmendment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractAmendment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractAmendment.toObject = function(includeInstance, msg) {
  var f, obj = {
    changeadministrationaddress: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    changeoperatoraddress: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    contractrevision: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    reftxid: msg.getReftxid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractAmendment}
 */
proto.actions.ContractAmendment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractAmendment;
  return proto.actions.ContractAmendment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractAmendment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractAmendment}
 */
proto.actions.ContractAmendment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChangeadministrationaddress(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChangeoperatoraddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 4:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.addAmendments(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractAmendment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ContractAmendment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractAmendment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractAmendment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangeadministrationaddress();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getChangeoperatoraddress();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = message.getReftxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bool ChangeAdministrationAddress = 1;
 * @return {boolean}
 */
proto.actions.ContractAmendment.prototype.getChangeadministrationaddress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractAmendment} returns this
 */
proto.actions.ContractAmendment.prototype.setChangeadministrationaddress = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool ChangeOperatorAddress = 2;
 * @return {boolean}
 */
proto.actions.ContractAmendment.prototype.getChangeoperatoraddress = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.ContractAmendment} returns this
 */
proto.actions.ContractAmendment.prototype.setChangeoperatoraddress = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 ContractRevision = 3;
 * @return {number}
 */
proto.actions.ContractAmendment.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractAmendment} returns this
 */
proto.actions.ContractAmendment.prototype.setContractrevision = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated AmendmentField Amendments = 4;
 * @return {!Array<!proto.actions.AmendmentField>}
 */
proto.actions.ContractAmendment.prototype.getAmendmentsList = function() {
  return /** @type{!Array<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 4));
};


/**
 * @param {!Array<!proto.actions.AmendmentField>} value
 * @return {!proto.actions.ContractAmendment} returns this
*/
proto.actions.ContractAmendment.prototype.setAmendmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.actions.AmendmentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.ContractAmendment.prototype.addAmendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.actions.AmendmentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ContractAmendment} returns this
 */
proto.actions.ContractAmendment.prototype.clearAmendmentsList = function() {
  return this.setAmendmentsList([]);
};


/**
 * optional bytes RefTxID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractAmendment.prototype.getReftxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes RefTxID = 5;
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {string}
 */
proto.actions.ContractAmendment.prototype.getReftxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxid()));
};


/**
 * optional bytes RefTxID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {!Uint8Array}
 */
proto.actions.ContractAmendment.prototype.getReftxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractAmendment} returns this
 */
proto.actions.ContractAmendment.prototype.setReftxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.StaticContractFormation.repeatedFields_ = [6,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.StaticContractFormation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.StaticContractFormation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.StaticContractFormation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.StaticContractFormation.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractcode: msg.getContractcode_asB64(),
    bodyofagreementtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    bodyofagreement: msg.getBodyofagreement_asB64(),
    contracttype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    supportingdocsList: jspb.Message.toObjectList(msg.getSupportingdocsList(),
    proto.actions.DocumentField.toObject, includeInstance),
    contractrevision: jspb.Message.getFieldWithDefault(msg, 7, 0),
    effectivedate: jspb.Message.getFieldWithDefault(msg, 10, 0),
    contractexpiration: jspb.Message.getFieldWithDefault(msg, 11, 0),
    contracturi: jspb.Message.getFieldWithDefault(msg, 12, ""),
    prevrevtxid: msg.getPrevrevtxid_asB64(),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.actions.EntityField.toObject, includeInstance),
    entityoracle: (f = msg.getEntityoracle()) && proto.actions.OracleField.toObject(includeInstance, f),
    entityoraclesignature: msg.getEntityoraclesignature_asB64(),
    entityoraclesigblockheight: jspb.Message.getFieldWithDefault(msg, 17, 0),
    governinglaw: jspb.Message.getFieldWithDefault(msg, 18, ""),
    jurisdiction: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.StaticContractFormation}
 */
proto.actions.StaticContractFormation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.StaticContractFormation;
  return proto.actions.StaticContractFormation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.StaticContractFormation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.StaticContractFormation}
 */
proto.actions.StaticContractFormation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractname(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBodyofagreementtype(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodyofagreement(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracttype(value);
      break;
    case 6:
      var value = new proto.actions.DocumentField;
      reader.readMessage(value,proto.actions.DocumentField.deserializeBinaryFromReader);
      msg.addSupportingdocs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractrevision(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEffectivedate(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractexpiration(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setContracturi(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrevrevtxid(value);
      break;
    case 14:
      var value = new proto.actions.EntityField;
      reader.readMessage(value,proto.actions.EntityField.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 15:
      var value = new proto.actions.OracleField;
      reader.readMessage(value,proto.actions.OracleField.deserializeBinaryFromReader);
      msg.setEntityoracle(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntityoraclesignature(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntityoraclesigblockheight(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoverninglaw(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setJurisdiction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.StaticContractFormation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.StaticContractFormation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.StaticContractFormation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBodyofagreementtype();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBodyofagreement_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getContracttype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSupportingdocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.actions.DocumentField.serializeBinaryToWriter
    );
  }
  f = message.getContractrevision();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getEffectivedate();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getContractexpiration();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getContracturi();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPrevrevtxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.actions.EntityField.serializeBinaryToWriter
    );
  }
  f = message.getEntityoracle();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.actions.OracleField.serializeBinaryToWriter
    );
  }
  f = message.getEntityoraclesignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getEntityoraclesigblockheight();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getGoverninglaw();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getJurisdiction();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional string ContractName = 1;
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getContractname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContractname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes ContractCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormation.prototype.getContractcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ContractCode = 2;
 * This is a type-conversion wrapper around `getContractcode()`
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getContractcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractcode()));
};


/**
 * optional bytes ContractCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractcode()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormation.prototype.getContractcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContractcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 BodyOfAgreementType = 3;
 * @return {number}
 */
proto.actions.StaticContractFormation.prototype.getBodyofagreementtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setBodyofagreementtype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes BodyOfAgreement = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormation.prototype.getBodyofagreement = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes BodyOfAgreement = 4;
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getBodyofagreement_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodyofagreement()));
};


/**
 * optional bytes BodyOfAgreement = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodyofagreement()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormation.prototype.getBodyofagreement_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodyofagreement()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setBodyofagreement = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string ContractType = 5;
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getContracttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated DocumentField SupportingDocs = 6;
 * @return {!Array<!proto.actions.DocumentField>}
 */
proto.actions.StaticContractFormation.prototype.getSupportingdocsList = function() {
  return /** @type{!Array<!proto.actions.DocumentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DocumentField, 6));
};


/**
 * @param {!Array<!proto.actions.DocumentField>} value
 * @return {!proto.actions.StaticContractFormation} returns this
*/
proto.actions.StaticContractFormation.prototype.setSupportingdocsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.actions.DocumentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.DocumentField}
 */
proto.actions.StaticContractFormation.prototype.addSupportingdocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.actions.DocumentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.clearSupportingdocsList = function() {
  return this.setSupportingdocsList([]);
};


/**
 * optional uint32 ContractRevision = 7;
 * @return {number}
 */
proto.actions.StaticContractFormation.prototype.getContractrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContractrevision = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 EffectiveDate = 10;
 * @return {number}
 */
proto.actions.StaticContractFormation.prototype.getEffectivedate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setEffectivedate = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 ContractExpiration = 11;
 * @return {number}
 */
proto.actions.StaticContractFormation.prototype.getContractexpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContractexpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string ContractURI = 12;
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getContracturi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setContracturi = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes PrevRevTxID = 13;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormation.prototype.getPrevrevtxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes PrevRevTxID = 13;
 * This is a type-conversion wrapper around `getPrevrevtxid()`
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getPrevrevtxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrevrevtxid()));
};


/**
 * optional bytes PrevRevTxID = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrevrevtxid()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormation.prototype.getPrevrevtxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrevrevtxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setPrevrevtxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * repeated EntityField Entities = 14;
 * @return {!Array<!proto.actions.EntityField>}
 */
proto.actions.StaticContractFormation.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.actions.EntityField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.EntityField, 14));
};


/**
 * @param {!Array<!proto.actions.EntityField>} value
 * @return {!proto.actions.StaticContractFormation} returns this
*/
proto.actions.StaticContractFormation.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.actions.EntityField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.EntityField}
 */
proto.actions.StaticContractFormation.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.actions.EntityField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional OracleField EntityOracle = 15;
 * @return {?proto.actions.OracleField}
 */
proto.actions.StaticContractFormation.prototype.getEntityoracle = function() {
  return /** @type{?proto.actions.OracleField} */ (
    jspb.Message.getWrapperField(this, proto.actions.OracleField, 15));
};


/**
 * @param {?proto.actions.OracleField|undefined} value
 * @return {!proto.actions.StaticContractFormation} returns this
*/
proto.actions.StaticContractFormation.prototype.setEntityoracle = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.clearEntityoracle = function() {
  return this.setEntityoracle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.actions.StaticContractFormation.prototype.hasEntityoracle = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes EntityOracleSignature = 16;
 * @return {!(string|Uint8Array)}
 */
proto.actions.StaticContractFormation.prototype.getEntityoraclesignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes EntityOracleSignature = 16;
 * This is a type-conversion wrapper around `getEntityoraclesignature()`
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getEntityoraclesignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntityoraclesignature()));
};


/**
 * optional bytes EntityOracleSignature = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntityoraclesignature()`
 * @return {!Uint8Array}
 */
proto.actions.StaticContractFormation.prototype.getEntityoraclesignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntityoraclesignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setEntityoraclesignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional uint32 EntityOracleSigBlockHeight = 17;
 * @return {number}
 */
proto.actions.StaticContractFormation.prototype.getEntityoraclesigblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setEntityoraclesigblockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string GoverningLaw = 18;
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getGoverninglaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setGoverninglaw = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string Jurisdiction = 19;
 * @return {string}
 */
proto.actions.StaticContractFormation.prototype.getJurisdiction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.StaticContractFormation} returns this
 */
proto.actions.StaticContractFormation.prototype.setJurisdiction = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ContractAddressChange.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ContractAddressChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ContractAddressChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractAddressChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    newcontractaddress: msg.getNewcontractaddress_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ContractAddressChange}
 */
proto.actions.ContractAddressChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ContractAddressChange;
  return proto.actions.ContractAddressChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ContractAddressChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ContractAddressChange}
 */
proto.actions.ContractAddressChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewcontractaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ContractAddressChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ContractAddressChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ContractAddressChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ContractAddressChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewcontractaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes NewContractAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ContractAddressChange.prototype.getNewcontractaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NewContractAddress = 1;
 * This is a type-conversion wrapper around `getNewcontractaddress()`
 * @return {string}
 */
proto.actions.ContractAddressChange.prototype.getNewcontractaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewcontractaddress()));
};


/**
 * optional bytes NewContractAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewcontractaddress()`
 * @return {!Uint8Array}
 */
proto.actions.ContractAddressChange.prototype.getNewcontractaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewcontractaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ContractAddressChange} returns this
 */
proto.actions.ContractAddressChange.prototype.setNewcontractaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.ContractAddressChange.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ContractAddressChange} returns this
 */
proto.actions.ContractAddressChange.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.BodyOfAgreementOffer.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BodyOfAgreementOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BodyOfAgreementOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BodyOfAgreementOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaptersList: jspb.Message.toObjectList(msg.getChaptersList(),
    proto.actions.ChapterField.toObject, includeInstance),
    definitionsList: jspb.Message.toObjectList(msg.getDefinitionsList(),
    proto.actions.DefinedTermField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BodyOfAgreementOffer}
 */
proto.actions.BodyOfAgreementOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BodyOfAgreementOffer;
  return proto.actions.BodyOfAgreementOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BodyOfAgreementOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BodyOfAgreementOffer}
 */
proto.actions.BodyOfAgreementOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.ChapterField;
      reader.readMessage(value,proto.actions.ChapterField.deserializeBinaryFromReader);
      msg.addChapters(value);
      break;
    case 2:
      var value = new proto.actions.DefinedTermField;
      reader.readMessage(value,proto.actions.DefinedTermField.deserializeBinaryFromReader);
      msg.addDefinitions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BodyOfAgreementOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.BodyOfAgreementOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.BodyOfAgreementOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaptersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.ChapterField.serializeBinaryToWriter
    );
  }
  f = message.getDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.actions.DefinedTermField.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ChapterField Chapters = 1;
 * @return {!Array<!proto.actions.ChapterField>}
 */
proto.actions.BodyOfAgreementOffer.prototype.getChaptersList = function() {
  return /** @type{!Array<!proto.actions.ChapterField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ChapterField, 1));
};


/**
 * @param {!Array<!proto.actions.ChapterField>} value
 * @return {!proto.actions.BodyOfAgreementOffer} returns this
*/
proto.actions.BodyOfAgreementOffer.prototype.setChaptersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.actions.ChapterField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ChapterField}
 */
proto.actions.BodyOfAgreementOffer.prototype.addChapters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.actions.ChapterField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.BodyOfAgreementOffer} returns this
 */
proto.actions.BodyOfAgreementOffer.prototype.clearChaptersList = function() {
  return this.setChaptersList([]);
};


/**
 * repeated DefinedTermField Definitions = 2;
 * @return {!Array<!proto.actions.DefinedTermField>}
 */
proto.actions.BodyOfAgreementOffer.prototype.getDefinitionsList = function() {
  return /** @type{!Array<!proto.actions.DefinedTermField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DefinedTermField, 2));
};


/**
 * @param {!Array<!proto.actions.DefinedTermField>} value
 * @return {!proto.actions.BodyOfAgreementOffer} returns this
*/
proto.actions.BodyOfAgreementOffer.prototype.setDefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.actions.DefinedTermField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.DefinedTermField}
 */
proto.actions.BodyOfAgreementOffer.prototype.addDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.actions.DefinedTermField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.BodyOfAgreementOffer} returns this
 */
proto.actions.BodyOfAgreementOffer.prototype.clearDefinitionsList = function() {
  return this.setDefinitionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.BodyOfAgreementFormation.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BodyOfAgreementFormation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BodyOfAgreementFormation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BodyOfAgreementFormation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementFormation.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaptersList: jspb.Message.toObjectList(msg.getChaptersList(),
    proto.actions.ChapterField.toObject, includeInstance),
    definitionsList: jspb.Message.toObjectList(msg.getDefinitionsList(),
    proto.actions.DefinedTermField.toObject, includeInstance),
    revision: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BodyOfAgreementFormation}
 */
proto.actions.BodyOfAgreementFormation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BodyOfAgreementFormation;
  return proto.actions.BodyOfAgreementFormation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BodyOfAgreementFormation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BodyOfAgreementFormation}
 */
proto.actions.BodyOfAgreementFormation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.ChapterField;
      reader.readMessage(value,proto.actions.ChapterField.deserializeBinaryFromReader);
      msg.addChapters(value);
      break;
    case 2:
      var value = new proto.actions.DefinedTermField;
      reader.readMessage(value,proto.actions.DefinedTermField.deserializeBinaryFromReader);
      msg.addDefinitions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevision(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BodyOfAgreementFormation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.BodyOfAgreementFormation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.BodyOfAgreementFormation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementFormation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaptersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.ChapterField.serializeBinaryToWriter
    );
  }
  f = message.getDefinitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.actions.DefinedTermField.serializeBinaryToWriter
    );
  }
  f = message.getRevision();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * repeated ChapterField Chapters = 1;
 * @return {!Array<!proto.actions.ChapterField>}
 */
proto.actions.BodyOfAgreementFormation.prototype.getChaptersList = function() {
  return /** @type{!Array<!proto.actions.ChapterField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ChapterField, 1));
};


/**
 * @param {!Array<!proto.actions.ChapterField>} value
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
*/
proto.actions.BodyOfAgreementFormation.prototype.setChaptersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.actions.ChapterField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ChapterField}
 */
proto.actions.BodyOfAgreementFormation.prototype.addChapters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.actions.ChapterField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
 */
proto.actions.BodyOfAgreementFormation.prototype.clearChaptersList = function() {
  return this.setChaptersList([]);
};


/**
 * repeated DefinedTermField Definitions = 2;
 * @return {!Array<!proto.actions.DefinedTermField>}
 */
proto.actions.BodyOfAgreementFormation.prototype.getDefinitionsList = function() {
  return /** @type{!Array<!proto.actions.DefinedTermField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.DefinedTermField, 2));
};


/**
 * @param {!Array<!proto.actions.DefinedTermField>} value
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
*/
proto.actions.BodyOfAgreementFormation.prototype.setDefinitionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.actions.DefinedTermField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.DefinedTermField}
 */
proto.actions.BodyOfAgreementFormation.prototype.addDefinitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.actions.DefinedTermField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
 */
proto.actions.BodyOfAgreementFormation.prototype.clearDefinitionsList = function() {
  return this.setDefinitionsList([]);
};


/**
 * optional uint32 Revision = 3;
 * @return {number}
 */
proto.actions.BodyOfAgreementFormation.prototype.getRevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
 */
proto.actions.BodyOfAgreementFormation.prototype.setRevision = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Timestamp = 4;
 * @return {number}
 */
proto.actions.BodyOfAgreementFormation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.BodyOfAgreementFormation} returns this
 */
proto.actions.BodyOfAgreementFormation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.BodyOfAgreementAmendment.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BodyOfAgreementAmendment.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BodyOfAgreementAmendment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BodyOfAgreementAmendment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementAmendment.toObject = function(includeInstance, msg) {
  var f, obj = {
    revision: jspb.Message.getFieldWithDefault(msg, 1, 0),
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    reftxid: msg.getReftxid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BodyOfAgreementAmendment}
 */
proto.actions.BodyOfAgreementAmendment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BodyOfAgreementAmendment;
  return proto.actions.BodyOfAgreementAmendment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BodyOfAgreementAmendment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BodyOfAgreementAmendment}
 */
proto.actions.BodyOfAgreementAmendment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRevision(value);
      break;
    case 2:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.addAmendments(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BodyOfAgreementAmendment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.BodyOfAgreementAmendment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.BodyOfAgreementAmendment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BodyOfAgreementAmendment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRevision();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = message.getReftxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 Revision = 1;
 * @return {number}
 */
proto.actions.BodyOfAgreementAmendment.prototype.getRevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.BodyOfAgreementAmendment} returns this
 */
proto.actions.BodyOfAgreementAmendment.prototype.setRevision = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated AmendmentField Amendments = 2;
 * @return {!Array<!proto.actions.AmendmentField>}
 */
proto.actions.BodyOfAgreementAmendment.prototype.getAmendmentsList = function() {
  return /** @type{!Array<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 2));
};


/**
 * @param {!Array<!proto.actions.AmendmentField>} value
 * @return {!proto.actions.BodyOfAgreementAmendment} returns this
*/
proto.actions.BodyOfAgreementAmendment.prototype.setAmendmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.actions.AmendmentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.BodyOfAgreementAmendment.prototype.addAmendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.actions.AmendmentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.BodyOfAgreementAmendment} returns this
 */
proto.actions.BodyOfAgreementAmendment.prototype.clearAmendmentsList = function() {
  return this.setAmendmentsList([]);
};


/**
 * optional bytes RefTxID = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.BodyOfAgreementAmendment.prototype.getReftxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RefTxID = 3;
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {string}
 */
proto.actions.BodyOfAgreementAmendment.prototype.getReftxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxid()));
};


/**
 * optional bytes RefTxID = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {!Uint8Array}
 */
proto.actions.BodyOfAgreementAmendment.prototype.getReftxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.BodyOfAgreementAmendment} returns this
 */
proto.actions.BodyOfAgreementAmendment.prototype.setReftxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetDefinition.repeatedFields_ = [13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetDefinition.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetDefinition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetDefinition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetDefinition.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetpermissions: msg.getAssetpermissions_asB64(),
    enforcementorderspermitted: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    votingrights: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    votemultiplier: jspb.Message.getFieldWithDefault(msg, 6, 0),
    administrationproposal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    holderproposal: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    assetmodificationgovernance: jspb.Message.getFieldWithDefault(msg, 9, 0),
    authorizedtokenqty: jspb.Message.getFieldWithDefault(msg, 10, 0),
    assettype: jspb.Message.getFieldWithDefault(msg, 11, ""),
    assetpayload: msg.getAssetpayload_asB64(),
    traderestrictionsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetDefinition}
 */
proto.actions.AssetDefinition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetDefinition;
  return proto.actions.AssetDefinition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetDefinition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetDefinition}
 */
proto.actions.AssetDefinition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpermissions(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnforcementorderspermitted(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotingrights(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemultiplier(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetmodificationgovernance(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAuthorizedtokenqty(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpayload(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addTraderestrictions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetDefinition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetDefinition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetDefinition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetpermissions_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEnforcementorderspermitted();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getVotingrights();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getVotemultiplier();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHolderproposal();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAssetmodificationgovernance();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getAuthorizedtokenqty();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getAssetpayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getTraderestrictionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
};


/**
 * optional bytes AssetPermissions = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetDefinition.prototype.getAssetpermissions = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetPermissions = 1;
 * This is a type-conversion wrapper around `getAssetpermissions()`
 * @return {string}
 */
proto.actions.AssetDefinition.prototype.getAssetpermissions_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpermissions()));
};


/**
 * optional bytes AssetPermissions = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpermissions()`
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinition.prototype.getAssetpermissions_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpermissions()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAssetpermissions = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool EnforcementOrdersPermitted = 4;
 * @return {boolean}
 */
proto.actions.AssetDefinition.prototype.getEnforcementorderspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setEnforcementorderspermitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool VotingRights = 5;
 * @return {boolean}
 */
proto.actions.AssetDefinition.prototype.getVotingrights = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setVotingrights = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint32 VoteMultiplier = 6;
 * @return {number}
 */
proto.actions.AssetDefinition.prototype.getVotemultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setVotemultiplier = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool AdministrationProposal = 7;
 * @return {boolean}
 */
proto.actions.AssetDefinition.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAdministrationproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool HolderProposal = 8;
 * @return {boolean}
 */
proto.actions.AssetDefinition.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setHolderproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 AssetModificationGovernance = 9;
 * @return {number}
 */
proto.actions.AssetDefinition.prototype.getAssetmodificationgovernance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAssetmodificationgovernance = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 AuthorizedTokenQty = 10;
 * @return {number}
 */
proto.actions.AssetDefinition.prototype.getAuthorizedtokenqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAuthorizedtokenqty = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string AssetType = 11;
 * @return {string}
 */
proto.actions.AssetDefinition.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bytes AssetPayload = 12;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetDefinition.prototype.getAssetpayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes AssetPayload = 12;
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {string}
 */
proto.actions.AssetDefinition.prototype.getAssetpayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpayload()));
};


/**
 * optional bytes AssetPayload = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {!Uint8Array}
 */
proto.actions.AssetDefinition.prototype.getAssetpayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setAssetpayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * repeated string TradeRestrictions = 13;
 * @return {!Array<string>}
 */
proto.actions.AssetDefinition.prototype.getTraderestrictionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.setTraderestrictionsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.addTraderestrictions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetDefinition} returns this
 */
proto.actions.AssetDefinition.prototype.clearTraderestrictionsList = function() {
  return this.setTraderestrictionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetCreation.repeatedFields_ = [17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetCreation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetCreation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetCreation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetCreation.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetcode: msg.getAssetcode_asB64(),
    assetindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    assetpermissions: msg.getAssetpermissions_asB64(),
    enforcementorderspermitted: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    votingrights: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    votemultiplier: jspb.Message.getFieldWithDefault(msg, 8, 0),
    administrationproposal: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    holderproposal: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    assetmodificationgovernance: jspb.Message.getFieldWithDefault(msg, 11, 0),
    authorizedtokenqty: jspb.Message.getFieldWithDefault(msg, 12, 0),
    assettype: jspb.Message.getFieldWithDefault(msg, 13, ""),
    assetpayload: msg.getAssetpayload_asB64(),
    assetrevision: jspb.Message.getFieldWithDefault(msg, 15, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 16, 0),
    traderestrictionsList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetCreation}
 */
proto.actions.AssetCreation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetCreation;
  return proto.actions.AssetCreation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetCreation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetCreation}
 */
proto.actions.AssetCreation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssetindex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpermissions(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnforcementorderspermitted(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotingrights(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemultiplier(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdministrationproposal(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHolderproposal(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetmodificationgovernance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAuthorizedtokenqty(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetpayload(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetrevision(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addTraderestrictions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetCreation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetCreation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetCreation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetCreation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAssetindex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAssetpermissions_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEnforcementorderspermitted();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getVotingrights();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getVotemultiplier();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getAdministrationproposal();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHolderproposal();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getAssetmodificationgovernance();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getAuthorizedtokenqty();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getAssetpayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getAssetrevision();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = message.getTraderestrictionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
};


/**
 * optional bytes AssetCode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreation.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes AssetCode = 1;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetCreation.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreation.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 AssetIndex = 2;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getAssetindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes AssetPermissions = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreation.prototype.getAssetpermissions = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetPermissions = 3;
 * This is a type-conversion wrapper around `getAssetpermissions()`
 * @return {string}
 */
proto.actions.AssetCreation.prototype.getAssetpermissions_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpermissions()));
};


/**
 * optional bytes AssetPermissions = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpermissions()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreation.prototype.getAssetpermissions_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpermissions()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetpermissions = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool EnforcementOrdersPermitted = 6;
 * @return {boolean}
 */
proto.actions.AssetCreation.prototype.getEnforcementorderspermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setEnforcementorderspermitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool VotingRights = 7;
 * @return {boolean}
 */
proto.actions.AssetCreation.prototype.getVotingrights = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setVotingrights = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional uint32 VoteMultiplier = 8;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getVotemultiplier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setVotemultiplier = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool AdministrationProposal = 9;
 * @return {boolean}
 */
proto.actions.AssetCreation.prototype.getAdministrationproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAdministrationproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool HolderProposal = 10;
 * @return {boolean}
 */
proto.actions.AssetCreation.prototype.getHolderproposal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setHolderproposal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional uint32 AssetModificationGovernance = 11;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getAssetmodificationgovernance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetmodificationgovernance = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 AuthorizedTokenQty = 12;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getAuthorizedtokenqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAuthorizedtokenqty = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string AssetType = 13;
 * @return {string}
 */
proto.actions.AssetCreation.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional bytes AssetPayload = 14;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetCreation.prototype.getAssetpayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes AssetPayload = 14;
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {string}
 */
proto.actions.AssetCreation.prototype.getAssetpayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetpayload()));
};


/**
 * optional bytes AssetPayload = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetpayload()`
 * @return {!Uint8Array}
 */
proto.actions.AssetCreation.prototype.getAssetpayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetpayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetpayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional uint32 AssetRevision = 15;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getAssetrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setAssetrevision = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint64 Timestamp = 16;
 * @return {number}
 */
proto.actions.AssetCreation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated string TradeRestrictions = 17;
 * @return {!Array<string>}
 */
proto.actions.AssetCreation.prototype.getTraderestrictionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.setTraderestrictionsList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.addTraderestrictions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetCreation} returns this
 */
proto.actions.AssetCreation.prototype.clearTraderestrictionsList = function() {
  return this.setTraderestrictionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetModification.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetModification.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetModification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetModification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetModification.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetcode: msg.getAssetcode_asB64(),
    assetrevision: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amendmentsList: jspb.Message.toObjectList(msg.getAmendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    reftxid: msg.getReftxid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetModification}
 */
proto.actions.AssetModification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetModification;
  return proto.actions.AssetModification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetModification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetModification}
 */
proto.actions.AssetModification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAssetrevision(value);
      break;
    case 4:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.addAmendments(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReftxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetModification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetModification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetModification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetModification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAssetrevision();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAmendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = message.getReftxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.AssetModification.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AssetModification} returns this
 */
proto.actions.AssetModification.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetModification.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetModification.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetModification.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetModification} returns this
 */
proto.actions.AssetModification.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 AssetRevision = 3;
 * @return {number}
 */
proto.actions.AssetModification.prototype.getAssetrevision = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetModification} returns this
 */
proto.actions.AssetModification.prototype.setAssetrevision = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated AmendmentField Amendments = 4;
 * @return {!Array<!proto.actions.AmendmentField>}
 */
proto.actions.AssetModification.prototype.getAmendmentsList = function() {
  return /** @type{!Array<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 4));
};


/**
 * @param {!Array<!proto.actions.AmendmentField>} value
 * @return {!proto.actions.AssetModification} returns this
*/
proto.actions.AssetModification.prototype.setAmendmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.actions.AmendmentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.AssetModification.prototype.addAmendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.actions.AmendmentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetModification} returns this
 */
proto.actions.AssetModification.prototype.clearAmendmentsList = function() {
  return this.setAmendmentsList([]);
};


/**
 * optional bytes RefTxID = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetModification.prototype.getReftxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes RefTxID = 5;
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {string}
 */
proto.actions.AssetModification.prototype.getReftxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReftxid()));
};


/**
 * optional bytes RefTxID = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReftxid()`
 * @return {!Uint8Array}
 */
proto.actions.AssetModification.prototype.getReftxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReftxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetModification} returns this
 */
proto.actions.AssetModification.prototype.setReftxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Transfer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.actions.AssetTransferField.toObject, includeInstance),
    offerexpiry: jspb.Message.getFieldWithDefault(msg, 2, 0),
    exchangefee: jspb.Message.getFieldWithDefault(msg, 3, 0),
    exchangefeeaddress: msg.getExchangefeeaddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Transfer}
 */
proto.actions.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Transfer;
  return proto.actions.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Transfer}
 */
proto.actions.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.AssetTransferField;
      reader.readMessage(value,proto.actions.AssetTransferField.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOfferexpiry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExchangefee(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExchangefeeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.AssetTransferField.serializeBinaryToWriter
    );
  }
  f = message.getOfferexpiry();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getExchangefee();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExchangefeeaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * repeated AssetTransferField Assets = 1;
 * @return {!Array<!proto.actions.AssetTransferField>}
 */
proto.actions.Transfer.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.actions.AssetTransferField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetTransferField, 1));
};


/**
 * @param {!Array<!proto.actions.AssetTransferField>} value
 * @return {!proto.actions.Transfer} returns this
*/
proto.actions.Transfer.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.actions.AssetTransferField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AssetTransferField}
 */
proto.actions.Transfer.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.actions.AssetTransferField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Transfer} returns this
 */
proto.actions.Transfer.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * optional uint64 OfferExpiry = 2;
 * @return {number}
 */
proto.actions.Transfer.prototype.getOfferexpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Transfer} returns this
 */
proto.actions.Transfer.prototype.setOfferexpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 ExchangeFee = 3;
 * @return {number}
 */
proto.actions.Transfer.prototype.getExchangefee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Transfer} returns this
 */
proto.actions.Transfer.prototype.setExchangefee = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Transfer.prototype.getExchangefeeaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * This is a type-conversion wrapper around `getExchangefeeaddress()`
 * @return {string}
 */
proto.actions.Transfer.prototype.getExchangefeeaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExchangefeeaddress()));
};


/**
 * optional bytes ExchangeFeeAddress = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExchangefeeaddress()`
 * @return {!Uint8Array}
 */
proto.actions.Transfer.prototype.getExchangefeeaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExchangefeeaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Transfer} returns this
 */
proto.actions.Transfer.prototype.setExchangefeeaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Settlement.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Settlement.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Settlement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Settlement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Settlement.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.actions.AssetSettlementField.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Settlement}
 */
proto.actions.Settlement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Settlement;
  return proto.actions.Settlement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Settlement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Settlement}
 */
proto.actions.Settlement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.actions.AssetSettlementField;
      reader.readMessage(value,proto.actions.AssetSettlementField.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Settlement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Settlement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Settlement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Settlement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.actions.AssetSettlementField.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * repeated AssetSettlementField Assets = 1;
 * @return {!Array<!proto.actions.AssetSettlementField>}
 */
proto.actions.Settlement.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.actions.AssetSettlementField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetSettlementField, 1));
};


/**
 * @param {!Array<!proto.actions.AssetSettlementField>} value
 * @return {!proto.actions.Settlement} returns this
*/
proto.actions.Settlement.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.actions.AssetSettlementField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AssetSettlementField}
 */
proto.actions.Settlement.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.actions.AssetSettlementField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Settlement} returns this
 */
proto.actions.Settlement.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.Settlement.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Settlement} returns this
 */
proto.actions.Settlement.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Proposal.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assettype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetcode: msg.getAssetcode_asB64(),
    votesystem: jspb.Message.getFieldWithDefault(msg, 4, 0),
    proposedamendmentsList: jspb.Message.toObjectList(msg.getProposedamendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    voteoptions: jspb.Message.getFieldWithDefault(msg, 6, ""),
    votemax: jspb.Message.getFieldWithDefault(msg, 7, 0),
    proposaldescription: jspb.Message.getFieldWithDefault(msg, 8, ""),
    proposaldocumenthash: msg.getProposaldocumenthash_asB64(),
    votecutofftimestamp: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Proposal}
 */
proto.actions.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Proposal;
  return proto.actions.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Proposal}
 */
proto.actions.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotesystem(value);
      break;
    case 5:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.addProposedamendments(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoteoptions(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVotemax(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposaldescription(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposaldocumenthash(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVotecutofftimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getVotesystem();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getProposedamendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = message.getVoteoptions();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVotemax();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getProposaldescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getProposaldocumenthash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getVotecutofftimestamp();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.actions.Proposal.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.Proposal.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Proposal.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Proposal.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Proposal.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 VoteSystem = 4;
 * @return {number}
 */
proto.actions.Proposal.prototype.getVotesystem = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setVotesystem = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated AmendmentField ProposedAmendments = 5;
 * @return {!Array<!proto.actions.AmendmentField>}
 */
proto.actions.Proposal.prototype.getProposedamendmentsList = function() {
  return /** @type{!Array<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 5));
};


/**
 * @param {!Array<!proto.actions.AmendmentField>} value
 * @return {!proto.actions.Proposal} returns this
*/
proto.actions.Proposal.prototype.setProposedamendmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.actions.AmendmentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.Proposal.prototype.addProposedamendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.actions.AmendmentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.clearProposedamendmentsList = function() {
  return this.setProposedamendmentsList([]);
};


/**
 * optional string VoteOptions = 6;
 * @return {string}
 */
proto.actions.Proposal.prototype.getVoteoptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setVoteoptions = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 VoteMax = 7;
 * @return {number}
 */
proto.actions.Proposal.prototype.getVotemax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setVotemax = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string ProposalDescription = 8;
 * @return {string}
 */
proto.actions.Proposal.prototype.getProposaldescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setProposaldescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes ProposalDocumentHash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Proposal.prototype.getProposaldocumenthash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes ProposalDocumentHash = 9;
 * This is a type-conversion wrapper around `getProposaldocumenthash()`
 * @return {string}
 */
proto.actions.Proposal.prototype.getProposaldocumenthash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposaldocumenthash()));
};


/**
 * optional bytes ProposalDocumentHash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposaldocumenthash()`
 * @return {!Uint8Array}
 */
proto.actions.Proposal.prototype.getProposaldocumenthash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposaldocumenthash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setProposaldocumenthash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional uint64 VoteCutOffTimestamp = 10;
 * @return {number}
 */
proto.actions.Proposal.prototype.getVotecutofftimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Proposal} returns this
 */
proto.actions.Proposal.prototype.setVotecutofftimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Vote.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Vote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Vote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Vote.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Vote}
 */
proto.actions.Vote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Vote;
  return proto.actions.Vote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Vote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Vote}
 */
proto.actions.Vote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Vote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Vote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Vote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Vote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 Timestamp = 1;
 * @return {number}
 */
proto.actions.Vote.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Vote} returns this
 */
proto.actions.Vote.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BallotCast.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BallotCast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BallotCast} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BallotCast.toObject = function(includeInstance, msg) {
  var f, obj = {
    votetxid: msg.getVotetxid_asB64(),
    vote: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BallotCast}
 */
proto.actions.BallotCast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BallotCast;
  return proto.actions.BallotCast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BallotCast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BallotCast}
 */
proto.actions.BallotCast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BallotCast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.BallotCast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.BallotCast} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BallotCast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes VoteTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.BallotCast.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes VoteTxId = 1;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.BallotCast.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.BallotCast.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.BallotCast} returns this
 */
proto.actions.BallotCast.prototype.setVotetxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Vote = 2;
 * @return {string}
 */
proto.actions.BallotCast.prototype.getVote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.BallotCast} returns this
 */
proto.actions.BallotCast.prototype.setVote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.BallotCounted.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.BallotCounted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.BallotCounted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BallotCounted.toObject = function(includeInstance, msg) {
  var f, obj = {
    votetxid: msg.getVotetxid_asB64(),
    vote: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.BallotCounted}
 */
proto.actions.BallotCounted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.BallotCounted;
  return proto.actions.BallotCounted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.BallotCounted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.BallotCounted}
 */
proto.actions.BallotCounted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVote(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.BallotCounted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.BallotCounted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.BallotCounted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.BallotCounted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes VoteTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.BallotCounted.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes VoteTxId = 1;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.BallotCounted.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.BallotCounted.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.BallotCounted} returns this
 */
proto.actions.BallotCounted.prototype.setVotetxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Vote = 2;
 * @return {string}
 */
proto.actions.BallotCounted.prototype.getVote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.BallotCounted} returns this
 */
proto.actions.BallotCounted.prototype.setVote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 Quantity = 3;
 * @return {number}
 */
proto.actions.BallotCounted.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.BallotCounted} returns this
 */
proto.actions.BallotCounted.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Timestamp = 4;
 * @return {number}
 */
proto.actions.BallotCounted.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.BallotCounted} returns this
 */
proto.actions.BallotCounted.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Result.repeatedFields_ = [3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetcode: msg.getAssetcode_asB64(),
    proposedamendmentsList: jspb.Message.toObjectList(msg.getProposedamendmentsList(),
    proto.actions.AmendmentField.toObject, includeInstance),
    votetxid: msg.getVotetxid_asB64(),
    optiontallyList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    result: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Result}
 */
proto.actions.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Result;
  return proto.actions.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Result}
 */
proto.actions.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.AmendmentField;
      reader.readMessage(value,proto.actions.AmendmentField.deserializeBinaryFromReader);
      msg.addProposedamendments(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setVotetxid(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setOptiontallyList(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProposedamendmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.AmendmentField.serializeBinaryToWriter
    );
  }
  f = message.getVotetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOptiontallyList();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.Result.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Result.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Result.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Result.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated AmendmentField ProposedAmendments = 3;
 * @return {!Array<!proto.actions.AmendmentField>}
 */
proto.actions.Result.prototype.getProposedamendmentsList = function() {
  return /** @type{!Array<!proto.actions.AmendmentField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AmendmentField, 3));
};


/**
 * @param {!Array<!proto.actions.AmendmentField>} value
 * @return {!proto.actions.Result} returns this
*/
proto.actions.Result.prototype.setProposedamendmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.AmendmentField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.Result.prototype.addProposedamendments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.AmendmentField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.clearProposedamendmentsList = function() {
  return this.setProposedamendmentsList([]);
};


/**
 * optional bytes VoteTxId = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Result.prototype.getVotetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes VoteTxId = 4;
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {string}
 */
proto.actions.Result.prototype.getVotetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getVotetxid()));
};


/**
 * optional bytes VoteTxId = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getVotetxid()`
 * @return {!Uint8Array}
 */
proto.actions.Result.prototype.getVotetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getVotetxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setVotetxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated uint64 OptionTally = 5;
 * @return {!Array<number>}
 */
proto.actions.Result.prototype.getOptiontallyList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setOptiontallyList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.addOptiontally = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.clearOptiontallyList = function() {
  return this.setOptiontallyList([]);
};


/**
 * optional string Result = 6;
 * @return {string}
 */
proto.actions.Result.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 Timestamp = 7;
 * @return {number}
 */
proto.actions.Result.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Result} returns this
 */
proto.actions.Result.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Order.repeatedFields_ = [4,14,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Order.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Order.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Order} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Order.toObject = function(includeInstance, msg) {
  var f, obj = {
    complianceaction: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assettype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetcode: msg.getAssetcode_asB64(),
    targetaddressesList: jspb.Message.toObjectList(msg.getTargetaddressesList(),
    proto.actions.TargetAddressField.toObject, includeInstance),
    freezetxid: msg.getFreezetxid_asB64(),
    freezeperiod: jspb.Message.getFieldWithDefault(msg, 6, 0),
    depositaddress: msg.getDepositaddress_asB64(),
    authorityname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    authoritypublickey: msg.getAuthoritypublickey_asB64(),
    signaturealgorithm: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ordersignature: msg.getOrdersignature_asB64(),
    bitcoindispersionsList: jspb.Message.toObjectList(msg.getBitcoindispersionsList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    message: jspb.Message.getFieldWithDefault(msg, 15, ""),
    supportingevidenceformat: jspb.Message.getFieldWithDefault(msg, 16, 0),
    supportingevidence: msg.getSupportingevidence_asB64(),
    referencetransactionsList: jspb.Message.toObjectList(msg.getReferencetransactionsList(),
    proto.actions.ReferenceTransactionField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Order}
 */
proto.actions.Order.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Order;
  return proto.actions.Order.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Order} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Order}
 */
proto.actions.Order.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setComplianceaction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.TargetAddressField;
      reader.readMessage(value,proto.actions.TargetAddressField.deserializeBinaryFromReader);
      msg.addTargetaddresses(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFreezetxid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreezeperiod(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDepositaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorityname(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthoritypublickey(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignaturealgorithm(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrdersignature(value);
      break;
    case 14:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addBitcoindispersions(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSupportingevidenceformat(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSupportingevidence(value);
      break;
    case 18:
      var value = new proto.actions.ReferenceTransactionField;
      reader.readMessage(value,proto.actions.ReferenceTransactionField.deserializeBinaryFromReader);
      msg.addReferencetransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Order.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Order} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Order.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComplianceaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTargetaddressesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.TargetAddressField.serializeBinaryToWriter
    );
  }
  f = message.getFreezetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getFreezeperiod();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getDepositaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getAuthorityname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAuthoritypublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getSignaturealgorithm();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getOrdersignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getBitcoindispersionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSupportingevidenceformat();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getSupportingevidence_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getReferencetransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.actions.ReferenceTransactionField.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ComplianceAction = 1;
 * @return {string}
 */
proto.actions.Order.prototype.getComplianceaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setComplianceaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.Order.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Order.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated TargetAddressField TargetAddresses = 4;
 * @return {!Array<!proto.actions.TargetAddressField>}
 */
proto.actions.Order.prototype.getTargetaddressesList = function() {
  return /** @type{!Array<!proto.actions.TargetAddressField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.TargetAddressField, 4));
};


/**
 * @param {!Array<!proto.actions.TargetAddressField>} value
 * @return {!proto.actions.Order} returns this
*/
proto.actions.Order.prototype.setTargetaddressesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.actions.TargetAddressField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.TargetAddressField}
 */
proto.actions.Order.prototype.addTargetaddresses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.actions.TargetAddressField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.clearTargetaddressesList = function() {
  return this.setTargetaddressesList([]);
};


/**
 * optional bytes FreezeTxId = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getFreezetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes FreezeTxId = 5;
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {string}
 */
proto.actions.Order.prototype.getFreezetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFreezetxid()));
};


/**
 * optional bytes FreezeTxId = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getFreezetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFreezetxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setFreezetxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 FreezePeriod = 6;
 * @return {number}
 */
proto.actions.Order.prototype.getFreezeperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setFreezeperiod = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes DepositAddress = 7;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getDepositaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes DepositAddress = 7;
 * This is a type-conversion wrapper around `getDepositaddress()`
 * @return {string}
 */
proto.actions.Order.prototype.getDepositaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDepositaddress()));
};


/**
 * optional bytes DepositAddress = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDepositaddress()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getDepositaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDepositaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setDepositaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string AuthorityName = 8;
 * @return {string}
 */
proto.actions.Order.prototype.getAuthorityname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setAuthorityname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bytes AuthorityPublicKey = 9;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getAuthoritypublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes AuthorityPublicKey = 9;
 * This is a type-conversion wrapper around `getAuthoritypublickey()`
 * @return {string}
 */
proto.actions.Order.prototype.getAuthoritypublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthoritypublickey()));
};


/**
 * optional bytes AuthorityPublicKey = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthoritypublickey()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getAuthoritypublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthoritypublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setAuthoritypublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional uint32 SignatureAlgorithm = 10;
 * @return {number}
 */
proto.actions.Order.prototype.getSignaturealgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setSignaturealgorithm = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes OrderSignature = 11;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getOrdersignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes OrderSignature = 11;
 * This is a type-conversion wrapper around `getOrdersignature()`
 * @return {string}
 */
proto.actions.Order.prototype.getOrdersignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrdersignature()));
};


/**
 * optional bytes OrderSignature = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrdersignature()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getOrdersignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrdersignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setOrdersignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * repeated QuantityIndexField BitcoinDispersions = 14;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.Order.prototype.getBitcoindispersionsList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 14));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.Order} returns this
*/
proto.actions.Order.prototype.setBitcoindispersionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.Order.prototype.addBitcoindispersions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.clearBitcoindispersionsList = function() {
  return this.setBitcoindispersionsList([]);
};


/**
 * optional string Message = 15;
 * @return {string}
 */
proto.actions.Order.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional uint32 SupportingEvidenceFormat = 16;
 * @return {number}
 */
proto.actions.Order.prototype.getSupportingevidenceformat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setSupportingevidenceformat = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional bytes SupportingEvidence = 17;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Order.prototype.getSupportingevidence = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes SupportingEvidence = 17;
 * This is a type-conversion wrapper around `getSupportingevidence()`
 * @return {string}
 */
proto.actions.Order.prototype.getSupportingevidence_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSupportingevidence()));
};


/**
 * optional bytes SupportingEvidence = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSupportingevidence()`
 * @return {!Uint8Array}
 */
proto.actions.Order.prototype.getSupportingevidence_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSupportingevidence()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.setSupportingevidence = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * repeated ReferenceTransactionField ReferenceTransactions = 18;
 * @return {!Array<!proto.actions.ReferenceTransactionField>}
 */
proto.actions.Order.prototype.getReferencetransactionsList = function() {
  return /** @type{!Array<!proto.actions.ReferenceTransactionField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ReferenceTransactionField, 18));
};


/**
 * @param {!Array<!proto.actions.ReferenceTransactionField>} value
 * @return {!proto.actions.Order} returns this
*/
proto.actions.Order.prototype.setReferencetransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.actions.ReferenceTransactionField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ReferenceTransactionField}
 */
proto.actions.Order.prototype.addReferencetransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.actions.ReferenceTransactionField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Order} returns this
 */
proto.actions.Order.prototype.clearReferencetransactionsList = function() {
  return this.setReferencetransactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Freeze.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Freeze.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Freeze.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Freeze} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Freeze.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    freezeperiod: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Freeze}
 */
proto.actions.Freeze.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Freeze;
  return proto.actions.Freeze.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Freeze} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Freeze}
 */
proto.actions.Freeze.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addQuantities(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreezeperiod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Freeze.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Freeze.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Freeze} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Freeze.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = message.getFreezeperiod();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.Freeze.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Freeze} returns this
 */
proto.actions.Freeze.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Freeze.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Freeze.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Freeze.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Freeze} returns this
 */
proto.actions.Freeze.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.Freeze.prototype.getQuantitiesList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.Freeze} returns this
*/
proto.actions.Freeze.prototype.setQuantitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.Freeze.prototype.addQuantities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Freeze} returns this
 */
proto.actions.Freeze.prototype.clearQuantitiesList = function() {
  return this.setQuantitiesList([]);
};


/**
 * optional uint64 FreezePeriod = 4;
 * @return {number}
 */
proto.actions.Freeze.prototype.getFreezeperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Freeze} returns this
 */
proto.actions.Freeze.prototype.setFreezeperiod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.Freeze.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Freeze} returns this
 */
proto.actions.Freeze.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Thaw.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Thaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Thaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Thaw.toObject = function(includeInstance, msg) {
  var f, obj = {
    freezetxid: msg.getFreezetxid_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Thaw}
 */
proto.actions.Thaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Thaw;
  return proto.actions.Thaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Thaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Thaw}
 */
proto.actions.Thaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFreezetxid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Thaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Thaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Thaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Thaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFreezetxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes FreezeTxId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Thaw.prototype.getFreezetxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes FreezeTxId = 1;
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {string}
 */
proto.actions.Thaw.prototype.getFreezetxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFreezetxid()));
};


/**
 * optional bytes FreezeTxId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFreezetxid()`
 * @return {!Uint8Array}
 */
proto.actions.Thaw.prototype.getFreezetxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFreezetxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Thaw} returns this
 */
proto.actions.Thaw.prototype.setFreezetxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Timestamp = 2;
 * @return {number}
 */
proto.actions.Thaw.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Thaw} returns this
 */
proto.actions.Thaw.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Confiscation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Confiscation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Confiscation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Confiscation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Confiscation.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    depositqty: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Confiscation}
 */
proto.actions.Confiscation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Confiscation;
  return proto.actions.Confiscation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Confiscation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Confiscation}
 */
proto.actions.Confiscation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addQuantities(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositqty(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Confiscation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Confiscation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Confiscation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Confiscation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = message.getDepositqty();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.Confiscation.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Confiscation} returns this
 */
proto.actions.Confiscation.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Confiscation.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Confiscation.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Confiscation.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Confiscation} returns this
 */
proto.actions.Confiscation.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.Confiscation.prototype.getQuantitiesList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.Confiscation} returns this
*/
proto.actions.Confiscation.prototype.setQuantitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.Confiscation.prototype.addQuantities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Confiscation} returns this
 */
proto.actions.Confiscation.prototype.clearQuantitiesList = function() {
  return this.setQuantitiesList([]);
};


/**
 * optional uint64 DepositQty = 4;
 * @return {number}
 */
proto.actions.Confiscation.prototype.getDepositqty = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Confiscation} returns this
 */
proto.actions.Confiscation.prototype.setDepositqty = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.Confiscation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Confiscation} returns this
 */
proto.actions.Confiscation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Reconciliation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Reconciliation.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Reconciliation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Reconciliation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Reconciliation.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetcode: msg.getAssetcode_asB64(),
    quantitiesList: jspb.Message.toObjectList(msg.getQuantitiesList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Reconciliation}
 */
proto.actions.Reconciliation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Reconciliation;
  return proto.actions.Reconciliation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Reconciliation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Reconciliation}
 */
proto.actions.Reconciliation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 3:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addQuantities(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Reconciliation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Reconciliation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Reconciliation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Reconciliation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQuantitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional string AssetType = 1;
 * @return {string}
 */
proto.actions.Reconciliation.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Reconciliation} returns this
 */
proto.actions.Reconciliation.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes AssetCode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Reconciliation.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes AssetCode = 2;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.Reconciliation.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.Reconciliation.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Reconciliation} returns this
 */
proto.actions.Reconciliation.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated QuantityIndexField Quantities = 3;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.Reconciliation.prototype.getQuantitiesList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 3));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.Reconciliation} returns this
*/
proto.actions.Reconciliation.prototype.setQuantitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.Reconciliation.prototype.addQuantities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Reconciliation} returns this
 */
proto.actions.Reconciliation.prototype.clearQuantitiesList = function() {
  return this.setQuantitiesList([]);
};


/**
 * optional uint64 Timestamp = 4;
 * @return {number}
 */
proto.actions.Reconciliation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Reconciliation} returns this
 */
proto.actions.Reconciliation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Establishment.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Establishment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Establishment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Establishment.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Establishment}
 */
proto.actions.Establishment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Establishment;
  return proto.actions.Establishment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Establishment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Establishment}
 */
proto.actions.Establishment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Establishment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Establishment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Establishment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Establishment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.actions.Establishment.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Establishment} returns this
 */
proto.actions.Establishment.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Addition.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Addition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Addition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Addition.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Addition}
 */
proto.actions.Addition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Addition;
  return proto.actions.Addition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Addition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Addition}
 */
proto.actions.Addition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Addition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Addition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Addition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Addition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Message = 1;
 * @return {string}
 */
proto.actions.Addition.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Addition} returns this
 */
proto.actions.Addition.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Alteration.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Alteration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Alteration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Alteration.toObject = function(includeInstance, msg) {
  var f, obj = {
    entrytxid: msg.getEntrytxid_asB64(),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Alteration}
 */
proto.actions.Alteration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Alteration;
  return proto.actions.Alteration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Alteration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Alteration}
 */
proto.actions.Alteration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntrytxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Alteration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Alteration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Alteration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Alteration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntrytxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes EntryTxID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Alteration.prototype.getEntrytxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EntryTxID = 1;
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {string}
 */
proto.actions.Alteration.prototype.getEntrytxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntrytxid()));
};


/**
 * optional bytes EntryTxID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {!Uint8Array}
 */
proto.actions.Alteration.prototype.getEntrytxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntrytxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Alteration} returns this
 */
proto.actions.Alteration.prototype.setEntrytxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.actions.Alteration.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Alteration} returns this
 */
proto.actions.Alteration.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Removal.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Removal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Removal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Removal.toObject = function(includeInstance, msg) {
  var f, obj = {
    entrytxid: msg.getEntrytxid_asB64(),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Removal}
 */
proto.actions.Removal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Removal;
  return proto.actions.Removal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Removal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Removal}
 */
proto.actions.Removal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntrytxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Removal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Removal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Removal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Removal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntrytxid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes EntryTxID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Removal.prototype.getEntrytxid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EntryTxID = 1;
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {string}
 */
proto.actions.Removal.prototype.getEntrytxid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntrytxid()));
};


/**
 * optional bytes EntryTxID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntrytxid()`
 * @return {!Uint8Array}
 */
proto.actions.Removal.prototype.getEntrytxid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntrytxid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Removal} returns this
 */
proto.actions.Removal.prototype.setEntrytxid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string Message = 2;
 * @return {string}
 */
proto.actions.Removal.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Removal} returns this
 */
proto.actions.Removal.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Message.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderindexesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    receiverindexesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    messagecode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    messagepayload: msg.getMessagepayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Message}
 */
proto.actions.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Message;
  return proto.actions.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Message}
 */
proto.actions.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setSenderindexesList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setReceiverindexesList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMessagecode(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessagepayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getReceiverindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getMessagecode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessagepayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * repeated uint32 SenderIndexes = 1;
 * @return {!Array<number>}
 */
proto.actions.Message.prototype.getSenderindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.setSenderindexesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.addSenderindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.clearSenderindexesList = function() {
  return this.setSenderindexesList([]);
};


/**
 * repeated uint32 ReceiverIndexes = 2;
 * @return {!Array<number>}
 */
proto.actions.Message.prototype.getReceiverindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.setReceiverindexesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.addReceiverindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.clearReceiverindexesList = function() {
  return this.setReceiverindexesList([]);
};


/**
 * optional uint32 MessageCode = 3;
 * @return {number}
 */
proto.actions.Message.prototype.getMessagecode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.setMessagecode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes MessagePayload = 4;
 * @return {!(string|Uint8Array)}
 */
proto.actions.Message.prototype.getMessagepayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes MessagePayload = 4;
 * This is a type-conversion wrapper around `getMessagepayload()`
 * @return {string}
 */
proto.actions.Message.prototype.getMessagepayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessagepayload()));
};


/**
 * optional bytes MessagePayload = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagepayload()`
 * @return {!Uint8Array}
 */
proto.actions.Message.prototype.getMessagepayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessagepayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.Message} returns this
 */
proto.actions.Message.prototype.setMessagepayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.Rejection.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.Rejection.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.Rejection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.Rejection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Rejection.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressindexesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    rejectaddressindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rejectioncode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.Rejection}
 */
proto.actions.Rejection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.Rejection;
  return proto.actions.Rejection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.Rejection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.Rejection}
 */
proto.actions.Rejection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setAddressindexesList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRejectaddressindex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRejectioncode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.Rejection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.Rejection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.Rejection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.Rejection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressindexesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getRejectaddressindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRejectioncode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * repeated uint32 AddressIndexes = 1;
 * @return {!Array<number>}
 */
proto.actions.Rejection.prototype.getAddressindexesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.setAddressindexesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.addAddressindexes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.clearAddressindexesList = function() {
  return this.setAddressindexesList([]);
};


/**
 * optional uint32 RejectAddressIndex = 2;
 * @return {number}
 */
proto.actions.Rejection.prototype.getRejectaddressindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.setRejectaddressindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 RejectionCode = 3;
 * @return {number}
 */
proto.actions.Rejection.prototype.getRejectioncode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.setRejectioncode = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string Message = 4;
 * @return {string}
 */
proto.actions.Rejection.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 Timestamp = 5;
 * @return {number}
 */
proto.actions.Rejection.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.Rejection} returns this
 */
proto.actions.Rejection.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AdministratorField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AdministratorField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AdministratorField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AdministratorField.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AdministratorField}
 */
proto.actions.AdministratorField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AdministratorField;
  return proto.actions.AdministratorField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AdministratorField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AdministratorField}
 */
proto.actions.AdministratorField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AdministratorField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AdministratorField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AdministratorField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AdministratorField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.actions.AdministratorField.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AdministratorField} returns this
 */
proto.actions.AdministratorField.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.actions.AdministratorField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AdministratorField} returns this
 */
proto.actions.AdministratorField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AdminIdentityCertificateField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AdminIdentityCertificateField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AdminIdentityCertificateField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AdminIdentityCertificateField.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitycontract: msg.getEntitycontract_asB64(),
    signature: msg.getSignature_asB64(),
    blockheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expiration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AdminIdentityCertificateField}
 */
proto.actions.AdminIdentityCertificateField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AdminIdentityCertificateField;
  return proto.actions.AdminIdentityCertificateField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AdminIdentityCertificateField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AdminIdentityCertificateField}
 */
proto.actions.AdminIdentityCertificateField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntitycontract(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AdminIdentityCertificateField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AdminIdentityCertificateField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AdminIdentityCertificateField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AdminIdentityCertificateField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional bytes EntityContract = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AdminIdentityCertificateField.prototype.getEntitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes EntityContract = 1;
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {string}
 */
proto.actions.AdminIdentityCertificateField.prototype.getEntitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntitycontract()));
};


/**
 * optional bytes EntityContract = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.AdminIdentityCertificateField.prototype.getEntitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AdminIdentityCertificateField} returns this
 */
proto.actions.AdminIdentityCertificateField.prototype.setEntitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes Signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AdminIdentityCertificateField.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.actions.AdminIdentityCertificateField.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes Signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.actions.AdminIdentityCertificateField.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AdminIdentityCertificateField} returns this
 */
proto.actions.AdminIdentityCertificateField.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 BlockHeight = 3;
 * @return {number}
 */
proto.actions.AdminIdentityCertificateField.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AdminIdentityCertificateField} returns this
 */
proto.actions.AdminIdentityCertificateField.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Expiration = 4;
 * @return {number}
 */
proto.actions.AdminIdentityCertificateField.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AdminIdentityCertificateField} returns this
 */
proto.actions.AdminIdentityCertificateField.prototype.setExpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AmendmentField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AmendmentField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AmendmentField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AmendmentField.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldindexpath: msg.getFieldindexpath_asB64(),
    operation: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.AmendmentField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AmendmentField;
  return proto.actions.AmendmentField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AmendmentField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AmendmentField}
 */
proto.actions.AmendmentField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFieldindexpath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOperation(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AmendmentField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AmendmentField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AmendmentField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AmendmentField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldindexpath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOperation();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes FieldIndexPath = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AmendmentField.prototype.getFieldindexpath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes FieldIndexPath = 1;
 * This is a type-conversion wrapper around `getFieldindexpath()`
 * @return {string}
 */
proto.actions.AmendmentField.prototype.getFieldindexpath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFieldindexpath()));
};


/**
 * optional bytes FieldIndexPath = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFieldindexpath()`
 * @return {!Uint8Array}
 */
proto.actions.AmendmentField.prototype.getFieldindexpath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFieldindexpath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AmendmentField} returns this
 */
proto.actions.AmendmentField.prototype.setFieldindexpath = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 Operation = 2;
 * @return {number}
 */
proto.actions.AmendmentField.prototype.getOperation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AmendmentField} returns this
 */
proto.actions.AmendmentField.prototype.setOperation = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes Data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AmendmentField.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.actions.AmendmentField.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes Data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.actions.AmendmentField.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AmendmentField} returns this
 */
proto.actions.AmendmentField.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetReceiverField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetReceiverField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetReceiverField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetReceiverField.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    oraclesigalgorithm: jspb.Message.getFieldWithDefault(msg, 3, 0),
    oracleindex: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oracleconfirmationsig: msg.getOracleconfirmationsig_asB64(),
    oraclesigblockheight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    oraclesigexpiry: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetReceiverField}
 */
proto.actions.AssetReceiverField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetReceiverField;
  return proto.actions.AssetReceiverField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetReceiverField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetReceiverField}
 */
proto.actions.AssetReceiverField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOraclesigalgorithm(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleindex(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOracleconfirmationsig(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOraclesigblockheight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOraclesigexpiry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetReceiverField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetReceiverField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetReceiverField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOraclesigalgorithm();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOracleindex();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOracleconfirmationsig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getOraclesigblockheight();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getOraclesigexpiry();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetReceiverField.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.actions.AssetReceiverField.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 OracleSigAlgorithm = 3;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOraclesigalgorithm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setOraclesigalgorithm = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 OracleIndex = 4;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOracleindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setOracleindex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * This is a type-conversion wrapper around `getOracleconfirmationsig()`
 * @return {string}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOracleconfirmationsig()));
};


/**
 * optional bytes OracleConfirmationSig = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOracleconfirmationsig()`
 * @return {!Uint8Array}
 */
proto.actions.AssetReceiverField.prototype.getOracleconfirmationsig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOracleconfirmationsig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setOracleconfirmationsig = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 OracleSigBlockHeight = 6;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOraclesigblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setOraclesigblockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 OracleSigExpiry = 7;
 * @return {number}
 */
proto.actions.AssetReceiverField.prototype.getOraclesigexpiry = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetReceiverField} returns this
 */
proto.actions.AssetReceiverField.prototype.setOraclesigexpiry = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetSettlementField.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetSettlementField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetSettlementField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetSettlementField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetSettlementField.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assettype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetcode: msg.getAssetcode_asB64(),
    settlementsList: jspb.Message.toObjectList(msg.getSettlementsList(),
    proto.actions.QuantityIndexField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetSettlementField}
 */
proto.actions.AssetSettlementField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetSettlementField;
  return proto.actions.AssetSettlementField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetSettlementField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetSettlementField}
 */
proto.actions.AssetSettlementField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addSettlements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetSettlementField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetSettlementField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetSettlementField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetSettlementField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSettlementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 ContractIndex = 1;
 * @return {number}
 */
proto.actions.AssetSettlementField.prototype.getContractindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetSettlementField} returns this
 */
proto.actions.AssetSettlementField.prototype.setContractindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.AssetSettlementField.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AssetSettlementField} returns this
 */
proto.actions.AssetSettlementField.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetSettlementField.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetSettlementField} returns this
 */
proto.actions.AssetSettlementField.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated QuantityIndexField Settlements = 4;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.AssetSettlementField.prototype.getSettlementsList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 4));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.AssetSettlementField} returns this
*/
proto.actions.AssetSettlementField.prototype.setSettlementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.AssetSettlementField.prototype.addSettlements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetSettlementField} returns this
 */
proto.actions.AssetSettlementField.prototype.clearSettlementsList = function() {
  return this.setSettlementsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.AssetTransferField.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.AssetTransferField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.AssetTransferField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.AssetTransferField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetTransferField.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assettype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetcode: msg.getAssetcode_asB64(),
    assetsendersList: jspb.Message.toObjectList(msg.getAssetsendersList(),
    proto.actions.QuantityIndexField.toObject, includeInstance),
    assetreceiversList: jspb.Message.toObjectList(msg.getAssetreceiversList(),
    proto.actions.AssetReceiverField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.AssetTransferField}
 */
proto.actions.AssetTransferField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.AssetTransferField;
  return proto.actions.AssetTransferField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.AssetTransferField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.AssetTransferField}
 */
proto.actions.AssetTransferField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContractindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetcode(value);
      break;
    case 4:
      var value = new proto.actions.QuantityIndexField;
      reader.readMessage(value,proto.actions.QuantityIndexField.deserializeBinaryFromReader);
      msg.addAssetsenders(value);
      break;
    case 5:
      var value = new proto.actions.AssetReceiverField;
      reader.readMessage(value,proto.actions.AssetReceiverField.deserializeBinaryFromReader);
      msg.addAssetreceivers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.AssetTransferField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.AssetTransferField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.AssetTransferField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.AssetTransferField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractindex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetcode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAssetsendersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.actions.QuantityIndexField.serializeBinaryToWriter
    );
  }
  f = message.getAssetreceiversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.actions.AssetReceiverField.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 ContractIndex = 1;
 * @return {number}
 */
proto.actions.AssetTransferField.prototype.getContractindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.AssetTransferField} returns this
 */
proto.actions.AssetTransferField.prototype.setContractindex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string AssetType = 2;
 * @return {string}
 */
proto.actions.AssetTransferField.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.AssetTransferField} returns this
 */
proto.actions.AssetTransferField.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes AssetCode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.AssetTransferField.prototype.getAssetcode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes AssetCode = 3;
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {string}
 */
proto.actions.AssetTransferField.prototype.getAssetcode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetcode()));
};


/**
 * optional bytes AssetCode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetcode()`
 * @return {!Uint8Array}
 */
proto.actions.AssetTransferField.prototype.getAssetcode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetcode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.AssetTransferField} returns this
 */
proto.actions.AssetTransferField.prototype.setAssetcode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated QuantityIndexField AssetSenders = 4;
 * @return {!Array<!proto.actions.QuantityIndexField>}
 */
proto.actions.AssetTransferField.prototype.getAssetsendersList = function() {
  return /** @type{!Array<!proto.actions.QuantityIndexField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.QuantityIndexField, 4));
};


/**
 * @param {!Array<!proto.actions.QuantityIndexField>} value
 * @return {!proto.actions.AssetTransferField} returns this
*/
proto.actions.AssetTransferField.prototype.setAssetsendersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.actions.QuantityIndexField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.AssetTransferField.prototype.addAssetsenders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.actions.QuantityIndexField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetTransferField} returns this
 */
proto.actions.AssetTransferField.prototype.clearAssetsendersList = function() {
  return this.setAssetsendersList([]);
};


/**
 * repeated AssetReceiverField AssetReceivers = 5;
 * @return {!Array<!proto.actions.AssetReceiverField>}
 */
proto.actions.AssetTransferField.prototype.getAssetreceiversList = function() {
  return /** @type{!Array<!proto.actions.AssetReceiverField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AssetReceiverField, 5));
};


/**
 * @param {!Array<!proto.actions.AssetReceiverField>} value
 * @return {!proto.actions.AssetTransferField} returns this
*/
proto.actions.AssetTransferField.prototype.setAssetreceiversList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.actions.AssetReceiverField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AssetReceiverField}
 */
proto.actions.AssetTransferField.prototype.addAssetreceivers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.actions.AssetReceiverField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.AssetTransferField} returns this
 */
proto.actions.AssetTransferField.prototype.clearAssetreceiversList = function() {
  return this.setAssetreceiversList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ChapterField.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ChapterField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ChapterField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ChapterField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ChapterField.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    preamble: jspb.Message.getFieldWithDefault(msg, 2, ""),
    articlesList: jspb.Message.toObjectList(msg.getArticlesList(),
    proto.actions.ClauseField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ChapterField}
 */
proto.actions.ChapterField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ChapterField;
  return proto.actions.ChapterField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ChapterField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ChapterField}
 */
proto.actions.ChapterField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreamble(value);
      break;
    case 3:
      var value = new proto.actions.ClauseField;
      reader.readMessage(value,proto.actions.ClauseField.deserializeBinaryFromReader);
      msg.addArticles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ChapterField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ChapterField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ChapterField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ChapterField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreamble();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getArticlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.ClauseField.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Title = 1;
 * @return {string}
 */
proto.actions.ChapterField.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ChapterField} returns this
 */
proto.actions.ChapterField.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Preamble = 2;
 * @return {string}
 */
proto.actions.ChapterField.prototype.getPreamble = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ChapterField} returns this
 */
proto.actions.ChapterField.prototype.setPreamble = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ClauseField Articles = 3;
 * @return {!Array<!proto.actions.ClauseField>}
 */
proto.actions.ChapterField.prototype.getArticlesList = function() {
  return /** @type{!Array<!proto.actions.ClauseField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ClauseField, 3));
};


/**
 * @param {!Array<!proto.actions.ClauseField>} value
 * @return {!proto.actions.ChapterField} returns this
*/
proto.actions.ChapterField.prototype.setArticlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.ClauseField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ClauseField}
 */
proto.actions.ChapterField.prototype.addArticles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.ClauseField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ChapterField} returns this
 */
proto.actions.ChapterField.prototype.clearArticlesList = function() {
  return this.setArticlesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ClauseField.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ClauseField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ClauseField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ClauseField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ClauseField.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.actions.ClauseField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ClauseField}
 */
proto.actions.ClauseField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ClauseField;
  return proto.actions.ClauseField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ClauseField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ClauseField}
 */
proto.actions.ClauseField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = new proto.actions.ClauseField;
      reader.readMessage(value,proto.actions.ClauseField.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ClauseField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ClauseField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ClauseField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ClauseField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.actions.ClauseField.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Title = 1;
 * @return {string}
 */
proto.actions.ClauseField.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ClauseField} returns this
 */
proto.actions.ClauseField.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Body = 2;
 * @return {string}
 */
proto.actions.ClauseField.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ClauseField} returns this
 */
proto.actions.ClauseField.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ClauseField Children = 3;
 * @return {!Array<!proto.actions.ClauseField>}
 */
proto.actions.ClauseField.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.actions.ClauseField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ClauseField, 3));
};


/**
 * @param {!Array<!proto.actions.ClauseField>} value
 * @return {!proto.actions.ClauseField} returns this
*/
proto.actions.ClauseField.prototype.setChildrenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.actions.ClauseField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ClauseField}
 */
proto.actions.ClauseField.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.actions.ClauseField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ClauseField} returns this
 */
proto.actions.ClauseField.prototype.clearChildrenList = function() {
  return this.setChildrenList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.DefinedTermField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.DefinedTermField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.DefinedTermField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.DefinedTermField.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: jspb.Message.getFieldWithDefault(msg, 1, ""),
    definition: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.DefinedTermField}
 */
proto.actions.DefinedTermField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.DefinedTermField;
  return proto.actions.DefinedTermField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.DefinedTermField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.DefinedTermField}
 */
proto.actions.DefinedTermField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.DefinedTermField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.DefinedTermField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.DefinedTermField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.DefinedTermField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Term = 1;
 * @return {string}
 */
proto.actions.DefinedTermField.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.DefinedTermField} returns this
 */
proto.actions.DefinedTermField.prototype.setTerm = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Definition = 2;
 * @return {string}
 */
proto.actions.DefinedTermField.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.DefinedTermField} returns this
 */
proto.actions.DefinedTermField.prototype.setDefinition = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.DocumentField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.DocumentField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.DocumentField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.DocumentField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.DocumentField}
 */
proto.actions.DocumentField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.DocumentField;
  return proto.actions.DocumentField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.DocumentField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.DocumentField}
 */
proto.actions.DocumentField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.DocumentField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.DocumentField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.DocumentField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.DocumentField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.DocumentField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.DocumentField} returns this
 */
proto.actions.DocumentField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.actions.DocumentField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.DocumentField} returns this
 */
proto.actions.DocumentField.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes Contents = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.DocumentField.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes Contents = 3;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.actions.DocumentField.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes Contents = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.actions.DocumentField.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.DocumentField} returns this
 */
proto.actions.DocumentField.prototype.setContents = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.EntityField.repeatedFields_ = [13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.EntityField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.EntityField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.EntityField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.EntityField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lei: jspb.Message.getFieldWithDefault(msg, 3, ""),
    unitnumber: jspb.Message.getFieldWithDefault(msg, 4, ""),
    buildingnumber: jspb.Message.getFieldWithDefault(msg, 5, ""),
    street: jspb.Message.getFieldWithDefault(msg, 6, ""),
    suburbcity: jspb.Message.getFieldWithDefault(msg, 7, ""),
    territorystateprovincecode: jspb.Message.getFieldWithDefault(msg, 8, ""),
    countrycode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    postalzipcode: jspb.Message.getFieldWithDefault(msg, 10, ""),
    emailaddress: jspb.Message.getFieldWithDefault(msg, 11, ""),
    phonenumber: jspb.Message.getFieldWithDefault(msg, 12, ""),
    administrationList: jspb.Message.toObjectList(msg.getAdministrationList(),
    proto.actions.AdministratorField.toObject, includeInstance),
    managementList: jspb.Message.toObjectList(msg.getManagementList(),
    proto.actions.ManagerField.toObject, includeInstance),
    domainname: jspb.Message.getFieldWithDefault(msg, 15, ""),
    paymailhandle: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.EntityField}
 */
proto.actions.EntityField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.EntityField;
  return proto.actions.EntityField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.EntityField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.EntityField}
 */
proto.actions.EntityField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLei(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitnumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildingnumber(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStreet(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuburbcity(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerritorystateprovincecode(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPostalzipcode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailaddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 13:
      var value = new proto.actions.AdministratorField;
      reader.readMessage(value,proto.actions.AdministratorField.deserializeBinaryFromReader);
      msg.addAdministration(value);
      break;
    case 14:
      var value = new proto.actions.ManagerField;
      reader.readMessage(value,proto.actions.ManagerField.deserializeBinaryFromReader);
      msg.addManagement(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomainname(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymailhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.EntityField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.EntityField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.EntityField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.EntityField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLei();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUnitnumber();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBuildingnumber();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStreet();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSuburbcity();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTerritorystateprovincecode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCountrycode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPostalzipcode();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEmailaddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPhonenumber();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getAdministrationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.actions.AdministratorField.serializeBinaryToWriter
    );
  }
  f = message.getManagementList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.actions.ManagerField.serializeBinaryToWriter
    );
  }
  f = message.getDomainname();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getPaymailhandle();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.EntityField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Type = 2;
 * @return {string}
 */
proto.actions.EntityField.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string LEI = 3;
 * @return {string}
 */
proto.actions.EntityField.prototype.getLei = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setLei = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UnitNumber = 4;
 * @return {string}
 */
proto.actions.EntityField.prototype.getUnitnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setUnitnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string BuildingNumber = 5;
 * @return {string}
 */
proto.actions.EntityField.prototype.getBuildingnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setBuildingnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string Street = 6;
 * @return {string}
 */
proto.actions.EntityField.prototype.getStreet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setStreet = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string SuburbCity = 7;
 * @return {string}
 */
proto.actions.EntityField.prototype.getSuburbcity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setSuburbcity = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string TerritoryStateProvinceCode = 8;
 * @return {string}
 */
proto.actions.EntityField.prototype.getTerritorystateprovincecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setTerritorystateprovincecode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string CountryCode = 9;
 * @return {string}
 */
proto.actions.EntityField.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setCountrycode = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string PostalZIPCode = 10;
 * @return {string}
 */
proto.actions.EntityField.prototype.getPostalzipcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setPostalzipcode = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string EmailAddress = 11;
 * @return {string}
 */
proto.actions.EntityField.prototype.getEmailaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setEmailaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string PhoneNumber = 12;
 * @return {string}
 */
proto.actions.EntityField.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setPhonenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * repeated AdministratorField Administration = 13;
 * @return {!Array<!proto.actions.AdministratorField>}
 */
proto.actions.EntityField.prototype.getAdministrationList = function() {
  return /** @type{!Array<!proto.actions.AdministratorField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.AdministratorField, 13));
};


/**
 * @param {!Array<!proto.actions.AdministratorField>} value
 * @return {!proto.actions.EntityField} returns this
*/
proto.actions.EntityField.prototype.setAdministrationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.actions.AdministratorField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.AdministratorField}
 */
proto.actions.EntityField.prototype.addAdministration = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.actions.AdministratorField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.clearAdministrationList = function() {
  return this.setAdministrationList([]);
};


/**
 * repeated ManagerField Management = 14;
 * @return {!Array<!proto.actions.ManagerField>}
 */
proto.actions.EntityField.prototype.getManagementList = function() {
  return /** @type{!Array<!proto.actions.ManagerField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.actions.ManagerField, 14));
};


/**
 * @param {!Array<!proto.actions.ManagerField>} value
 * @return {!proto.actions.EntityField} returns this
*/
proto.actions.EntityField.prototype.setManagementList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.actions.ManagerField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.actions.ManagerField}
 */
proto.actions.EntityField.prototype.addManagement = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.actions.ManagerField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.clearManagementList = function() {
  return this.setManagementList([]);
};


/**
 * optional string DomainName = 15;
 * @return {string}
 */
proto.actions.EntityField.prototype.getDomainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setDomainname = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string PaymailHandle = 17;
 * @return {string}
 */
proto.actions.EntityField.prototype.getPaymailhandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.EntityField} returns this
 */
proto.actions.EntityField.prototype.setPaymailhandle = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ManagerField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ManagerField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ManagerField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ManagerField.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ManagerField}
 */
proto.actions.ManagerField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ManagerField;
  return proto.actions.ManagerField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ManagerField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ManagerField}
 */
proto.actions.ManagerField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ManagerField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ManagerField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ManagerField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ManagerField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.actions.ManagerField.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ManagerField} returns this
 */
proto.actions.ManagerField.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Name = 2;
 * @return {string}
 */
proto.actions.ManagerField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ManagerField} returns this
 */
proto.actions.ManagerField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.OracleField.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.OracleField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.OracleField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.OracleField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.OracleField.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracletypesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    entitycontract: msg.getEntitycontract_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.OracleField}
 */
proto.actions.OracleField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.OracleField;
  return proto.actions.OracleField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.OracleField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.OracleField}
 */
proto.actions.OracleField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setOracletypesList(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEntitycontract(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.OracleField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.OracleField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.OracleField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.OracleField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracletypesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getEntitycontract_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated uint32 OracleTypes = 4;
 * @return {!Array<number>}
 */
proto.actions.OracleField.prototype.getOracletypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.actions.OracleField} returns this
 */
proto.actions.OracleField.prototype.setOracletypesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.actions.OracleField} returns this
 */
proto.actions.OracleField.prototype.addOracletypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.OracleField} returns this
 */
proto.actions.OracleField.prototype.clearOracletypesList = function() {
  return this.setOracletypesList([]);
};


/**
 * optional bytes EntityContract = 5;
 * @return {!(string|Uint8Array)}
 */
proto.actions.OracleField.prototype.getEntitycontract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes EntityContract = 5;
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {string}
 */
proto.actions.OracleField.prototype.getEntitycontract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEntitycontract()));
};


/**
 * optional bytes EntityContract = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEntitycontract()`
 * @return {!Uint8Array}
 */
proto.actions.OracleField.prototype.getEntitycontract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEntitycontract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.OracleField} returns this
 */
proto.actions.OracleField.prototype.setEntitycontract = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.QuantityIndexField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.QuantityIndexField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.QuantityIndexField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.QuantityIndexField.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.QuantityIndexField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.QuantityIndexField;
  return proto.actions.QuantityIndexField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.QuantityIndexField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.QuantityIndexField}
 */
proto.actions.QuantityIndexField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.QuantityIndexField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.QuantityIndexField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.QuantityIndexField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.QuantityIndexField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint32 Index = 1;
 * @return {number}
 */
proto.actions.QuantityIndexField.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.QuantityIndexField} returns this
 */
proto.actions.QuantityIndexField.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.QuantityIndexField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.QuantityIndexField} returns this
 */
proto.actions.QuantityIndexField.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.actions.ReferenceTransactionField.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ReferenceTransactionField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ReferenceTransactionField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ReferenceTransactionField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ReferenceTransactionField.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: msg.getTransaction_asB64(),
    outputsList: msg.getOutputsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ReferenceTransactionField}
 */
proto.actions.ReferenceTransactionField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ReferenceTransactionField;
  return proto.actions.ReferenceTransactionField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ReferenceTransactionField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ReferenceTransactionField}
 */
proto.actions.ReferenceTransactionField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ReferenceTransactionField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ReferenceTransactionField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ReferenceTransactionField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ReferenceTransactionField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOutputsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes Transaction = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ReferenceTransactionField.prototype.getTransaction = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.actions.ReferenceTransactionField.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes Transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.actions.ReferenceTransactionField.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ReferenceTransactionField} returns this
 */
proto.actions.ReferenceTransactionField.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes Outputs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.actions.ReferenceTransactionField.prototype.getOutputsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes Outputs = 2;
 * This is a type-conversion wrapper around `getOutputsList()`
 * @return {!Array<string>}
 */
proto.actions.ReferenceTransactionField.prototype.getOutputsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getOutputsList()));
};


/**
 * repeated bytes Outputs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOutputsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.actions.ReferenceTransactionField.prototype.getOutputsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getOutputsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.actions.ReferenceTransactionField} returns this
 */
proto.actions.ReferenceTransactionField.prototype.setOutputsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.actions.ReferenceTransactionField} returns this
 */
proto.actions.ReferenceTransactionField.prototype.addOutputs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.actions.ReferenceTransactionField} returns this
 */
proto.actions.ReferenceTransactionField.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.ServiceField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.ServiceField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.ServiceField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ServiceField.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.ServiceField}
 */
proto.actions.ServiceField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.ServiceField;
  return proto.actions.ServiceField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.ServiceField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.ServiceField}
 */
proto.actions.ServiceField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.ServiceField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.ServiceField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.ServiceField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.ServiceField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional uint32 Type = 1;
 * @return {number}
 */
proto.actions.ServiceField.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.ServiceField} returns this
 */
proto.actions.ServiceField.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string URL = 2;
 * @return {string}
 */
proto.actions.ServiceField.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.ServiceField} returns this
 */
proto.actions.ServiceField.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes PublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.actions.ServiceField.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes PublicKey = 3;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.actions.ServiceField.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes PublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.actions.ServiceField.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.ServiceField} returns this
 */
proto.actions.ServiceField.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.TargetAddressField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.TargetAddressField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.TargetAddressField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.TargetAddressField.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.TargetAddressField}
 */
proto.actions.TargetAddressField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.TargetAddressField;
  return proto.actions.TargetAddressField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.TargetAddressField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.TargetAddressField}
 */
proto.actions.TargetAddressField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.TargetAddressField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.TargetAddressField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.TargetAddressField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.TargetAddressField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes Address = 1;
 * @return {!(string|Uint8Array)}
 */
proto.actions.TargetAddressField.prototype.getAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes Address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.actions.TargetAddressField.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes Address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.actions.TargetAddressField.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.actions.TargetAddressField} returns this
 */
proto.actions.TargetAddressField.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 Quantity = 2;
 * @return {number}
 */
proto.actions.TargetAddressField.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.TargetAddressField} returns this
 */
proto.actions.TargetAddressField.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.actions.VotingSystemField.prototype.toObject = function(opt_includeInstance) {
  return proto.actions.VotingSystemField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.actions.VotingSystemField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.VotingSystemField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    votetype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tallylogic: jspb.Message.getFieldWithDefault(msg, 3, 0),
    thresholdpercentage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    votemultiplierpermitted: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    holderproposalfee: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.VotingSystemField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.actions.VotingSystemField;
  return proto.actions.VotingSystemField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.actions.VotingSystemField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.actions.VotingSystemField}
 */
proto.actions.VotingSystemField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTallylogic(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThresholdpercentage(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVotemultiplierpermitted(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHolderproposalfee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.actions.VotingSystemField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.actions.VotingSystemField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.actions.VotingSystemField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.actions.VotingSystemField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVotetype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTallylogic();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getThresholdpercentage();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getVotemultiplierpermitted();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getHolderproposalfee();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.actions.VotingSystemField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string VoteType = 2;
 * @return {string}
 */
proto.actions.VotingSystemField.prototype.getVotetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setVotetype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 TallyLogic = 3;
 * @return {number}
 */
proto.actions.VotingSystemField.prototype.getTallylogic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setTallylogic = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 ThresholdPercentage = 4;
 * @return {number}
 */
proto.actions.VotingSystemField.prototype.getThresholdpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setThresholdpercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool VoteMultiplierPermitted = 5;
 * @return {boolean}
 */
proto.actions.VotingSystemField.prototype.getVotemultiplierpermitted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setVotemultiplierpermitted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional uint64 HolderProposalFee = 6;
 * @return {number}
 */
proto.actions.VotingSystemField.prototype.getHolderproposalfee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.actions.VotingSystemField} returns this
 */
proto.actions.VotingSystemField.prototype.setHolderproposalfee = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


