// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actions.proto

#include "actions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminIdentityCertificateField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdministratorField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmendmentField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChapterField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClauseField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefinedTermField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EntityField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentReceiverField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentSettlementField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentTransferField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagerField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantityIndexField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceTransactionField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetAddressField_actions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_actions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VotingSystemField_actions_2eproto;
namespace actions {
class ContractOfferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOffer> _instance;
} _ContractOffer_default_instance_;
class ContractFormationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractFormation> _instance;
} _ContractFormation_default_instance_;
class ContractAmendmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractAmendment> _instance;
} _ContractAmendment_default_instance_;
class StaticContractFormationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticContractFormation> _instance;
} _StaticContractFormation_default_instance_;
class ContractAddressChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractAddressChange> _instance;
} _ContractAddressChange_default_instance_;
class BodyOfAgreementOfferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyOfAgreementOffer> _instance;
} _BodyOfAgreementOffer_default_instance_;
class BodyOfAgreementFormationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyOfAgreementFormation> _instance;
} _BodyOfAgreementFormation_default_instance_;
class BodyOfAgreementAmendmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyOfAgreementAmendment> _instance;
} _BodyOfAgreementAmendment_default_instance_;
class InstrumentDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentDefinition> _instance;
} _InstrumentDefinition_default_instance_;
class InstrumentCreationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentCreation> _instance;
} _InstrumentCreation_default_instance_;
class InstrumentModificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentModification> _instance;
} _InstrumentModification_default_instance_;
class TransferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transfer> _instance;
} _Transfer_default_instance_;
class SettlementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Settlement> _instance;
} _Settlement_default_instance_;
class RectificationSettlementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RectificationSettlement> _instance;
} _RectificationSettlement_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
class BallotCastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BallotCast> _instance;
} _BallotCast_default_instance_;
class BallotCountedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BallotCounted> _instance;
} _BallotCounted_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Result> _instance;
} _Result_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class FreezeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Freeze> _instance;
} _Freeze_default_instance_;
class ThawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Thaw> _instance;
} _Thaw_default_instance_;
class ConfiscationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Confiscation> _instance;
} _Confiscation_default_instance_;
class DeprecatedReconciliationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeprecatedReconciliation> _instance;
} _DeprecatedReconciliation_default_instance_;
class EstablishmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Establishment> _instance;
} _Establishment_default_instance_;
class AdditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Addition> _instance;
} _Addition_default_instance_;
class AlterationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alteration> _instance;
} _Alteration_default_instance_;
class RemovalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Removal> _instance;
} _Removal_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class RejectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rejection> _instance;
} _Rejection_default_instance_;
class AdministratorFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdministratorField> _instance;
} _AdministratorField_default_instance_;
class AdminIdentityCertificateFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdminIdentityCertificateField> _instance;
} _AdminIdentityCertificateField_default_instance_;
class AmendmentFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AmendmentField> _instance;
} _AmendmentField_default_instance_;
class InstrumentReceiverFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentReceiverField> _instance;
} _InstrumentReceiverField_default_instance_;
class InstrumentSettlementFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentSettlementField> _instance;
} _InstrumentSettlementField_default_instance_;
class InstrumentTransferFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentTransferField> _instance;
} _InstrumentTransferField_default_instance_;
class ChapterFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChapterField> _instance;
} _ChapterField_default_instance_;
class ClauseFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClauseField> _instance;
} _ClauseField_default_instance_;
class DefinedTermFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefinedTermField> _instance;
} _DefinedTermField_default_instance_;
class DocumentFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DocumentField> _instance;
} _DocumentField_default_instance_;
class EntityFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EntityField> _instance;
} _EntityField_default_instance_;
class FeeFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeField> _instance;
} _FeeField_default_instance_;
class ManagerFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManagerField> _instance;
} _ManagerField_default_instance_;
class OracleFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OracleField> _instance;
} _OracleField_default_instance_;
class QuantityIndexFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantityIndexField> _instance;
} _QuantityIndexField_default_instance_;
class ReferenceTransactionFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReferenceTransactionField> _instance;
} _ReferenceTransactionField_default_instance_;
class ServiceFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceField> _instance;
} _ServiceField_default_instance_;
class TargetAddressFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetAddressField> _instance;
} _TargetAddressField_default_instance_;
class VotingSystemFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VotingSystemField> _instance;
} _VotingSystemField_default_instance_;
}  // namespace actions
static void InitDefaultsscc_info_Addition_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Addition_default_instance_;
    new (ptr) ::actions::Addition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Addition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Addition_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Addition_actions_2eproto}, {}};

static void InitDefaultsscc_info_AdminIdentityCertificateField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_AdminIdentityCertificateField_default_instance_;
    new (ptr) ::actions::AdminIdentityCertificateField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::AdminIdentityCertificateField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdminIdentityCertificateField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdminIdentityCertificateField_actions_2eproto}, {}};

static void InitDefaultsscc_info_AdministratorField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_AdministratorField_default_instance_;
    new (ptr) ::actions::AdministratorField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::AdministratorField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AdministratorField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AdministratorField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Alteration_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Alteration_default_instance_;
    new (ptr) ::actions::Alteration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Alteration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alteration_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Alteration_actions_2eproto}, {}};

static void InitDefaultsscc_info_AmendmentField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_AmendmentField_default_instance_;
    new (ptr) ::actions::AmendmentField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::AmendmentField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AmendmentField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AmendmentField_actions_2eproto}, {}};

static void InitDefaultsscc_info_BallotCast_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_BallotCast_default_instance_;
    new (ptr) ::actions::BallotCast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::BallotCast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallotCast_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BallotCast_actions_2eproto}, {}};

static void InitDefaultsscc_info_BallotCounted_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_BallotCounted_default_instance_;
    new (ptr) ::actions::BallotCounted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::BallotCounted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BallotCounted_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BallotCounted_actions_2eproto}, {}};

static void InitDefaultsscc_info_BodyOfAgreementAmendment_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_BodyOfAgreementAmendment_default_instance_;
    new (ptr) ::actions::BodyOfAgreementAmendment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::BodyOfAgreementAmendment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BodyOfAgreementAmendment_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BodyOfAgreementAmendment_actions_2eproto}, {
      &scc_info_AmendmentField_actions_2eproto.base,}};

static void InitDefaultsscc_info_BodyOfAgreementFormation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_BodyOfAgreementFormation_default_instance_;
    new (ptr) ::actions::BodyOfAgreementFormation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::BodyOfAgreementFormation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BodyOfAgreementFormation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BodyOfAgreementFormation_actions_2eproto}, {
      &scc_info_ChapterField_actions_2eproto.base,
      &scc_info_DefinedTermField_actions_2eproto.base,}};

static void InitDefaultsscc_info_BodyOfAgreementOffer_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_BodyOfAgreementOffer_default_instance_;
    new (ptr) ::actions::BodyOfAgreementOffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::BodyOfAgreementOffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BodyOfAgreementOffer_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BodyOfAgreementOffer_actions_2eproto}, {
      &scc_info_ChapterField_actions_2eproto.base,
      &scc_info_DefinedTermField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ChapterField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ChapterField_default_instance_;
    new (ptr) ::actions::ChapterField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ChapterField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChapterField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChapterField_actions_2eproto}, {
      &scc_info_ClauseField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ClauseField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ClauseField_default_instance_;
    new (ptr) ::actions::ClauseField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ClauseField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClauseField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClauseField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Confiscation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Confiscation_default_instance_;
    new (ptr) ::actions::Confiscation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Confiscation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Confiscation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Confiscation_actions_2eproto}, {
      &scc_info_QuantityIndexField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ContractAddressChange_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ContractAddressChange_default_instance_;
    new (ptr) ::actions::ContractAddressChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ContractAddressChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractAddressChange_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractAddressChange_actions_2eproto}, {}};

static void InitDefaultsscc_info_ContractAmendment_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ContractAmendment_default_instance_;
    new (ptr) ::actions::ContractAmendment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ContractAmendment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractAmendment_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractAmendment_actions_2eproto}, {
      &scc_info_AmendmentField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ContractFormation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ContractFormation_default_instance_;
    new (ptr) ::actions::ContractFormation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ContractFormation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContractFormation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContractFormation_actions_2eproto}, {
      &scc_info_DocumentField_actions_2eproto.base,
      &scc_info_EntityField_actions_2eproto.base,
      &scc_info_VotingSystemField_actions_2eproto.base,
      &scc_info_OracleField_actions_2eproto.base,
      &scc_info_ServiceField_actions_2eproto.base,
      &scc_info_AdminIdentityCertificateField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ContractOffer_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ContractOffer_default_instance_;
    new (ptr) ::actions::ContractOffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ContractOffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContractOffer_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContractOffer_actions_2eproto}, {
      &scc_info_DocumentField_actions_2eproto.base,
      &scc_info_EntityField_actions_2eproto.base,
      &scc_info_VotingSystemField_actions_2eproto.base,
      &scc_info_OracleField_actions_2eproto.base,
      &scc_info_ServiceField_actions_2eproto.base,
      &scc_info_AdminIdentityCertificateField_actions_2eproto.base,}};

static void InitDefaultsscc_info_DefinedTermField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_DefinedTermField_default_instance_;
    new (ptr) ::actions::DefinedTermField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::DefinedTermField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefinedTermField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefinedTermField_actions_2eproto}, {}};

static void InitDefaultsscc_info_DeprecatedReconciliation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_DeprecatedReconciliation_default_instance_;
    new (ptr) ::actions::DeprecatedReconciliation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::DeprecatedReconciliation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeprecatedReconciliation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeprecatedReconciliation_actions_2eproto}, {
      &scc_info_QuantityIndexField_actions_2eproto.base,}};

static void InitDefaultsscc_info_DocumentField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_DocumentField_default_instance_;
    new (ptr) ::actions::DocumentField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::DocumentField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DocumentField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DocumentField_actions_2eproto}, {}};

static void InitDefaultsscc_info_EntityField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_EntityField_default_instance_;
    new (ptr) ::actions::EntityField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::EntityField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EntityField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EntityField_actions_2eproto}, {
      &scc_info_AdministratorField_actions_2eproto.base,
      &scc_info_ManagerField_actions_2eproto.base,}};

static void InitDefaultsscc_info_Establishment_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Establishment_default_instance_;
    new (ptr) ::actions::Establishment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Establishment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Establishment_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Establishment_actions_2eproto}, {}};

static void InitDefaultsscc_info_FeeField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_FeeField_default_instance_;
    new (ptr) ::actions::FeeField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::FeeField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Freeze_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Freeze_default_instance_;
    new (ptr) ::actions::Freeze();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Freeze::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Freeze_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Freeze_actions_2eproto}, {
      &scc_info_QuantityIndexField_actions_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentCreation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentCreation_default_instance_;
    new (ptr) ::actions::InstrumentCreation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentCreation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentCreation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentCreation_actions_2eproto}, {
      &scc_info_FeeField_actions_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentDefinition_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentDefinition_default_instance_;
    new (ptr) ::actions::InstrumentDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentDefinition_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentDefinition_actions_2eproto}, {
      &scc_info_FeeField_actions_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentModification_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentModification_default_instance_;
    new (ptr) ::actions::InstrumentModification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentModification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentModification_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentModification_actions_2eproto}, {
      &scc_info_AmendmentField_actions_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentReceiverField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentReceiverField_default_instance_;
    new (ptr) ::actions::InstrumentReceiverField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentReceiverField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentReceiverField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentReceiverField_actions_2eproto}, {}};

static void InitDefaultsscc_info_InstrumentSettlementField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentSettlementField_default_instance_;
    new (ptr) ::actions::InstrumentSettlementField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentSettlementField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentSettlementField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentSettlementField_actions_2eproto}, {
      &scc_info_QuantityIndexField_actions_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentTransferField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_InstrumentTransferField_default_instance_;
    new (ptr) ::actions::InstrumentTransferField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::InstrumentTransferField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InstrumentTransferField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InstrumentTransferField_actions_2eproto}, {
      &scc_info_QuantityIndexField_actions_2eproto.base,
      &scc_info_InstrumentReceiverField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ManagerField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ManagerField_default_instance_;
    new (ptr) ::actions::ManagerField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ManagerField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ManagerField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ManagerField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Message_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Message_default_instance_;
    new (ptr) ::actions::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_actions_2eproto}, {}};

static void InitDefaultsscc_info_OracleField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_OracleField_default_instance_;
    new (ptr) ::actions::OracleField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::OracleField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OracleField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OracleField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Order_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Order_default_instance_;
    new (ptr) ::actions::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Order_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Order_actions_2eproto}, {
      &scc_info_TargetAddressField_actions_2eproto.base,
      &scc_info_QuantityIndexField_actions_2eproto.base,
      &scc_info_ReferenceTransactionField_actions_2eproto.base,}};

static void InitDefaultsscc_info_Proposal_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Proposal_default_instance_;
    new (ptr) ::actions::Proposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Proposal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proposal_actions_2eproto}, {
      &scc_info_AmendmentField_actions_2eproto.base,}};

static void InitDefaultsscc_info_QuantityIndexField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_QuantityIndexField_default_instance_;
    new (ptr) ::actions::QuantityIndexField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::QuantityIndexField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantityIndexField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuantityIndexField_actions_2eproto}, {}};

static void InitDefaultsscc_info_RectificationSettlement_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_RectificationSettlement_default_instance_;
    new (ptr) ::actions::RectificationSettlement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::RectificationSettlement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RectificationSettlement_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RectificationSettlement_actions_2eproto}, {
      &scc_info_ReferenceTransactionField_actions_2eproto.base,
      &scc_info_InstrumentSettlementField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ReferenceTransactionField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ReferenceTransactionField_default_instance_;
    new (ptr) ::actions::ReferenceTransactionField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ReferenceTransactionField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReferenceTransactionField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReferenceTransactionField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Rejection_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Rejection_default_instance_;
    new (ptr) ::actions::Rejection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Rejection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rejection_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rejection_actions_2eproto}, {}};

static void InitDefaultsscc_info_Removal_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Removal_default_instance_;
    new (ptr) ::actions::Removal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Removal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Removal_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Removal_actions_2eproto}, {}};

static void InitDefaultsscc_info_Result_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Result_default_instance_;
    new (ptr) ::actions::Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Result_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Result_actions_2eproto}, {
      &scc_info_AmendmentField_actions_2eproto.base,}};

static void InitDefaultsscc_info_ServiceField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_ServiceField_default_instance_;
    new (ptr) ::actions::ServiceField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::ServiceField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServiceField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServiceField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Settlement_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Settlement_default_instance_;
    new (ptr) ::actions::Settlement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Settlement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Settlement_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Settlement_actions_2eproto}, {
      &scc_info_InstrumentSettlementField_actions_2eproto.base,}};

static void InitDefaultsscc_info_StaticContractFormation_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_StaticContractFormation_default_instance_;
    new (ptr) ::actions::StaticContractFormation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::StaticContractFormation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StaticContractFormation_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StaticContractFormation_actions_2eproto}, {
      &scc_info_DocumentField_actions_2eproto.base,
      &scc_info_EntityField_actions_2eproto.base,
      &scc_info_OracleField_actions_2eproto.base,}};

static void InitDefaultsscc_info_TargetAddressField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_TargetAddressField_default_instance_;
    new (ptr) ::actions::TargetAddressField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::TargetAddressField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetAddressField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TargetAddressField_actions_2eproto}, {}};

static void InitDefaultsscc_info_Thaw_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Thaw_default_instance_;
    new (ptr) ::actions::Thaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Thaw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Thaw_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Thaw_actions_2eproto}, {}};

static void InitDefaultsscc_info_Transfer_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Transfer_default_instance_;
    new (ptr) ::actions::Transfer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Transfer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transfer_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transfer_actions_2eproto}, {
      &scc_info_InstrumentTransferField_actions_2eproto.base,}};

static void InitDefaultsscc_info_Vote_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_Vote_default_instance_;
    new (ptr) ::actions::Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::Vote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vote_actions_2eproto}, {}};

static void InitDefaultsscc_info_VotingSystemField_actions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::actions::_VotingSystemField_default_instance_;
    new (ptr) ::actions::VotingSystemField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::actions::VotingSystemField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VotingSystemField_actions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VotingSystemField_actions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_actions_2eproto[49];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_actions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_actions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_actions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contractname_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, bodyofagreementtype_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, bodyofagreement_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, supportingdocs_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contractexpiration_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contracturi_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, issuer_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contractoperatorincluded_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contractfee_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, votingsystems_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contractpermissions_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, restrictedqtyinstruments_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, administrationproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, holderproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, oracles_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, masteraddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, entitycontract_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, operatorentitycontract_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, contracttype_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, services_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, adminidentitycertificates_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, governinglaw_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractOffer, jurisdiction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contractname_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, bodyofagreementtype_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, bodyofagreement_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, supportingdocs_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contractexpiration_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contracturi_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, issuer_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contractfee_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, votingsystems_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contractpermissions_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, restrictedqtyinstruments_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, administrationproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, holderproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, oracles_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, masteraddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contractrevision_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, timestamp_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, entitycontract_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, operatorentitycontract_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, contracttype_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, services_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, adminidentitycertificates_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, adminaddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, operatoraddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, governinglaw_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, jurisdiction_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractFormation, requestpeerchannel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, changeadministrationaddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, changeoperatoraddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, contractrevision_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, amendments_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractAmendment, reftxid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contractname_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contractcode_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, bodyofagreementtype_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, bodyofagreement_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contracttype_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, supportingdocs_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contractrevision_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, effectivedate_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contractexpiration_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, contracturi_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, prevrevtxid_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, entities_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, entityoracle_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, entityoraclesignature_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, entityoraclesigblockheight_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, governinglaw_),
  PROTOBUF_FIELD_OFFSET(::actions::StaticContractFormation, jurisdiction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ContractAddressChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ContractAddressChange, newcontractaddress_),
  PROTOBUF_FIELD_OFFSET(::actions::ContractAddressChange, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementOffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementOffer, chapters_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementOffer, definitions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementFormation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementFormation, chapters_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementFormation, definitions_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementFormation, revision_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementFormation, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementAmendment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementAmendment, revision_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementAmendment, amendments_),
  PROTOBUF_FIELD_OFFSET(::actions::BodyOfAgreementAmendment, reftxid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, instrumentpermissions_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, enforcementorderspermitted_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, votingrights_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, votemultiplier_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, administrationproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, holderproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, instrumentmodificationgovernance_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, authorizedtokenqty_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, instrumentpayload_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, traderestrictions_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentDefinition, transferfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentindex_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentpermissions_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, enforcementorderspermitted_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, votingrights_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, votemultiplier_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, administrationproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, holderproposal_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentmodificationgovernance_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, authorizedtokenqty_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentpayload_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, instrumentrevision_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, timestamp_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, traderestrictions_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentCreation, transferfee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, instrumentrevision_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, amendments_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentModification, reftxid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Transfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Transfer, instruments_),
  PROTOBUF_FIELD_OFFSET(::actions::Transfer, offerexpiry_),
  PROTOBUF_FIELD_OFFSET(::actions::Transfer, exchangefee_),
  PROTOBUF_FIELD_OFFSET(::actions::Transfer, exchangefeeaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Settlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Settlement, instruments_),
  PROTOBUF_FIELD_OFFSET(::actions::Settlement, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::RectificationSettlement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::RectificationSettlement, transfer_),
  PROTOBUF_FIELD_OFFSET(::actions::RectificationSettlement, instruments_),
  PROTOBUF_FIELD_OFFSET(::actions::RectificationSettlement, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, type_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, votesystem_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, proposedamendments_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, voteoptions_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, votemax_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, proposaldescription_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, proposaldocumenthash_),
  PROTOBUF_FIELD_OFFSET(::actions::Proposal, votecutofftimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Vote, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::BallotCast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::BallotCast, votetxid_),
  PROTOBUF_FIELD_OFFSET(::actions::BallotCast, vote_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::BallotCounted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::BallotCounted, votetxid_),
  PROTOBUF_FIELD_OFFSET(::actions::BallotCounted, vote_),
  PROTOBUF_FIELD_OFFSET(::actions::BallotCounted, quantity_),
  PROTOBUF_FIELD_OFFSET(::actions::BallotCounted, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Result, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, proposedamendments_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, votetxid_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, optiontally_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, result_),
  PROTOBUF_FIELD_OFFSET(::actions::Result, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Order, complianceaction_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, targetaddresses_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, freezetxid_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, freezeperiod_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, depositaddress_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, authorityname_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, authoritypublickey_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, signaturealgorithm_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, ordersignature_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, bitcoindispersions_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, message_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, supportingevidenceformat_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, supportingevidence_),
  PROTOBUF_FIELD_OFFSET(::actions::Order, referencetransactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, quantities_),
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, freezeperiod_),
  PROTOBUF_FIELD_OFFSET(::actions::Freeze, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Thaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Thaw, freezetxid_),
  PROTOBUF_FIELD_OFFSET(::actions::Thaw, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, quantities_),
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, depositqty_),
  PROTOBUF_FIELD_OFFSET(::actions::Confiscation, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::DeprecatedReconciliation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::DeprecatedReconciliation, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::DeprecatedReconciliation, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::DeprecatedReconciliation, quantities_),
  PROTOBUF_FIELD_OFFSET(::actions::DeprecatedReconciliation, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Establishment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Establishment, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Addition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Addition, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Alteration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Alteration, entrytxid_),
  PROTOBUF_FIELD_OFFSET(::actions::Alteration, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Removal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Removal, entrytxid_),
  PROTOBUF_FIELD_OFFSET(::actions::Removal, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Message, senderindexes_),
  PROTOBUF_FIELD_OFFSET(::actions::Message, receiverindexes_),
  PROTOBUF_FIELD_OFFSET(::actions::Message, messagecode_),
  PROTOBUF_FIELD_OFFSET(::actions::Message, messagepayload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, addressindexes_),
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, rejectaddressindex_),
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, rejectioncode_),
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, message_),
  PROTOBUF_FIELD_OFFSET(::actions::Rejection, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::AdministratorField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::AdministratorField, type_),
  PROTOBUF_FIELD_OFFSET(::actions::AdministratorField, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::AdminIdentityCertificateField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::AdminIdentityCertificateField, entitycontract_),
  PROTOBUF_FIELD_OFFSET(::actions::AdminIdentityCertificateField, signature_),
  PROTOBUF_FIELD_OFFSET(::actions::AdminIdentityCertificateField, blockheight_),
  PROTOBUF_FIELD_OFFSET(::actions::AdminIdentityCertificateField, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::AmendmentField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::AmendmentField, fieldindexpath_),
  PROTOBUF_FIELD_OFFSET(::actions::AmendmentField, operation_),
  PROTOBUF_FIELD_OFFSET(::actions::AmendmentField, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, address_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, quantity_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, oraclesigalgorithm_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, oracleindex_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, oracleconfirmationsig_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, oraclesigblockheight_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentReceiverField, oraclesigexpiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentSettlementField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentSettlementField, contractindex_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentSettlementField, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentSettlementField, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentSettlementField, settlements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, contractindex_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, instrumenttype_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, instrumentcode_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, instrumentsenders_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, instrumentreceivers_),
  PROTOBUF_FIELD_OFFSET(::actions::InstrumentTransferField, refundaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ChapterField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ChapterField, title_),
  PROTOBUF_FIELD_OFFSET(::actions::ChapterField, preamble_),
  PROTOBUF_FIELD_OFFSET(::actions::ChapterField, articles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ClauseField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ClauseField, title_),
  PROTOBUF_FIELD_OFFSET(::actions::ClauseField, body_),
  PROTOBUF_FIELD_OFFSET(::actions::ClauseField, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::DefinedTermField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::DefinedTermField, term_),
  PROTOBUF_FIELD_OFFSET(::actions::DefinedTermField, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::DocumentField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::DocumentField, name_),
  PROTOBUF_FIELD_OFFSET(::actions::DocumentField, type_),
  PROTOBUF_FIELD_OFFSET(::actions::DocumentField, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, name_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, type_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, lei_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, unitnumber_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, buildingnumber_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, street_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, suburbcity_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, territorystateprovincecode_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, countrycode_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, postalzipcode_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, emailaddress_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, phonenumber_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, administration_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, management_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, domainname_),
  PROTOBUF_FIELD_OFFSET(::actions::EntityField, paymailhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::FeeField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::FeeField, address_),
  PROTOBUF_FIELD_OFFSET(::actions::FeeField, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ManagerField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ManagerField, type_),
  PROTOBUF_FIELD_OFFSET(::actions::ManagerField, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::OracleField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::OracleField, oracletypes_),
  PROTOBUF_FIELD_OFFSET(::actions::OracleField, entitycontract_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::QuantityIndexField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::QuantityIndexField, index_),
  PROTOBUF_FIELD_OFFSET(::actions::QuantityIndexField, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ReferenceTransactionField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ReferenceTransactionField, transaction_),
  PROTOBUF_FIELD_OFFSET(::actions::ReferenceTransactionField, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::ServiceField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::ServiceField, type_),
  PROTOBUF_FIELD_OFFSET(::actions::ServiceField, url_),
  PROTOBUF_FIELD_OFFSET(::actions::ServiceField, publickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::TargetAddressField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::TargetAddressField, address_),
  PROTOBUF_FIELD_OFFSET(::actions::TargetAddressField, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, name_),
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, votetype_),
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, tallylogic_),
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, thresholdpercentage_),
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, votemultiplierpermitted_),
  PROTOBUF_FIELD_OFFSET(::actions::VotingSystemField, holderproposalfee_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::actions::ContractOffer)},
  { 28, -1, sizeof(::actions::ContractFormation)},
  { 60, -1, sizeof(::actions::ContractAmendment)},
  { 70, -1, sizeof(::actions::StaticContractFormation)},
  { 92, -1, sizeof(::actions::ContractAddressChange)},
  { 99, -1, sizeof(::actions::BodyOfAgreementOffer)},
  { 106, -1, sizeof(::actions::BodyOfAgreementFormation)},
  { 115, -1, sizeof(::actions::BodyOfAgreementAmendment)},
  { 123, -1, sizeof(::actions::InstrumentDefinition)},
  { 140, -1, sizeof(::actions::InstrumentCreation)},
  { 161, -1, sizeof(::actions::InstrumentModification)},
  { 171, -1, sizeof(::actions::Transfer)},
  { 180, -1, sizeof(::actions::Settlement)},
  { 187, -1, sizeof(::actions::RectificationSettlement)},
  { 195, -1, sizeof(::actions::Proposal)},
  { 210, -1, sizeof(::actions::Vote)},
  { 216, -1, sizeof(::actions::BallotCast)},
  { 223, -1, sizeof(::actions::BallotCounted)},
  { 232, -1, sizeof(::actions::Result)},
  { 244, -1, sizeof(::actions::Order)},
  { 265, -1, sizeof(::actions::Freeze)},
  { 275, -1, sizeof(::actions::Thaw)},
  { 282, -1, sizeof(::actions::Confiscation)},
  { 292, -1, sizeof(::actions::DeprecatedReconciliation)},
  { 301, -1, sizeof(::actions::Establishment)},
  { 307, -1, sizeof(::actions::Addition)},
  { 313, -1, sizeof(::actions::Alteration)},
  { 320, -1, sizeof(::actions::Removal)},
  { 327, -1, sizeof(::actions::Message)},
  { 336, -1, sizeof(::actions::Rejection)},
  { 346, -1, sizeof(::actions::AdministratorField)},
  { 353, -1, sizeof(::actions::AdminIdentityCertificateField)},
  { 362, -1, sizeof(::actions::AmendmentField)},
  { 370, -1, sizeof(::actions::InstrumentReceiverField)},
  { 382, -1, sizeof(::actions::InstrumentSettlementField)},
  { 391, -1, sizeof(::actions::InstrumentTransferField)},
  { 402, -1, sizeof(::actions::ChapterField)},
  { 410, -1, sizeof(::actions::ClauseField)},
  { 418, -1, sizeof(::actions::DefinedTermField)},
  { 425, -1, sizeof(::actions::DocumentField)},
  { 433, -1, sizeof(::actions::EntityField)},
  { 454, -1, sizeof(::actions::FeeField)},
  { 461, -1, sizeof(::actions::ManagerField)},
  { 468, -1, sizeof(::actions::OracleField)},
  { 475, -1, sizeof(::actions::QuantityIndexField)},
  { 482, -1, sizeof(::actions::ReferenceTransactionField)},
  { 489, -1, sizeof(::actions::ServiceField)},
  { 497, -1, sizeof(::actions::TargetAddressField)},
  { 504, -1, sizeof(::actions::VotingSystemField)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ContractOffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ContractFormation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ContractAmendment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_StaticContractFormation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ContractAddressChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_BodyOfAgreementOffer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_BodyOfAgreementFormation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_BodyOfAgreementAmendment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentModification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Transfer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Settlement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_RectificationSettlement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_BallotCast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_BallotCounted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Freeze_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Thaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Confiscation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_DeprecatedReconciliation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Establishment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Addition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Alteration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Removal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_Rejection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_AdministratorField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_AdminIdentityCertificateField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_AmendmentField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentReceiverField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentSettlementField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_InstrumentTransferField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ChapterField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ClauseField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_DefinedTermField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_DocumentField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_EntityField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_FeeField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ManagerField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_OracleField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_QuantityIndexField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ReferenceTransactionField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_ServiceField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_TargetAddressField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::actions::_VotingSystemField_default_instance_),
};

const char descriptor_table_protodef_actions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ractions.proto\022\007actions\"\237\006\n\rContractOff"
  "er\022\024\n\014ContractName\030\001 \001(\t\022\033\n\023BodyOfAgreem"
  "entType\030\002 \001(\r\022\027\n\017BodyOfAgreement\030\003 \001(\014\022."
  "\n\016SupportingDocs\030\005 \003(\0132\026.actions.Documen"
  "tField\022\032\n\022ContractExpiration\030\010 \001(\004\022\023\n\013Co"
  "ntractURI\030\t \001(\t\022$\n\006Issuer\030\n \001(\0132\024.action"
  "s.EntityField\022 \n\030ContractOperatorInclude"
  "d\030\014 \001(\010\022\023\n\013ContractFee\030\021 \001(\004\0221\n\rVotingSy"
  "stems\030\022 \003(\0132\032.actions.VotingSystemField\022"
  "\033\n\023ContractPermissions\030\023 \001(\014\022 \n\030Restrict"
  "edQtyInstruments\030\024 \001(\004\022\036\n\026Administration"
  "Proposal\030\025 \001(\010\022\026\n\016HolderProposal\030\026 \001(\010\022%"
  "\n\007Oracles\030\027 \003(\0132\024.actions.OracleField\022\025\n"
  "\rMasterAddress\030\030 \001(\014\022\026\n\016EntityContract\030\031"
  " \001(\014\022\036\n\026OperatorEntityContract\030\032 \001(\014\022\024\n\014"
  "ContractType\030\033 \001(\r\022\'\n\010Services\030\034 \003(\0132\025.a"
  "ctions.ServiceField\022I\n\031AdminIdentityCert"
  "ificates\030\035 \003(\0132&.actions.AdminIdentityCe"
  "rtificateField\022\024\n\014GoverningLaw\030\036 \001(\t\022\024\n\014"
  "Jurisdiction\030\037 \001(\tJ\004\010\004\020\005J\004\010\006\020\007J\004\010\007\020\010J\004\010\013"
  "\020\014J\004\010\r\020\016J\004\010\016\020\017J\004\010\017\020\020J\004\010\020\020\021\"\371\006\n\021ContractF"
  "ormation\022\024\n\014ContractName\030\001 \001(\t\022\033\n\023BodyOf"
  "AgreementType\030\002 \001(\r\022\027\n\017BodyOfAgreement\030\003"
  " \001(\014\022.\n\016SupportingDocs\030\005 \003(\0132\026.actions.D"
  "ocumentField\022\032\n\022ContractExpiration\030\010 \001(\004"
  "\022\023\n\013ContractURI\030\t \001(\t\022$\n\006Issuer\030\n \001(\0132\024."
  "actions.EntityField\022\023\n\013ContractFee\030\020 \001(\004"
  "\0221\n\rVotingSystems\030\021 \003(\0132\032.actions.Voting"
  "SystemField\022\033\n\023ContractPermissions\030\022 \001(\014"
  "\022 \n\030RestrictedQtyInstruments\030\023 \001(\004\022\036\n\026Ad"
  "ministrationProposal\030\024 \001(\010\022\026\n\016HolderProp"
  "osal\030\025 \001(\010\022%\n\007Oracles\030\026 \003(\0132\024.actions.Or"
  "acleField\022\025\n\rMasterAddress\030\027 \001(\014\022\030\n\020Cont"
  "ractRevision\030\030 \001(\r\022\021\n\tTimestamp\030\031 \001(\004\022\026\n"
  "\016EntityContract\030\032 \001(\014\022\036\n\026OperatorEntityC"
  "ontract\030\033 \001(\014\022\024\n\014ContractType\030\034 \001(\r\022\'\n\010S"
  "ervices\030\035 \003(\0132\025.actions.ServiceField\022I\n\031"
  "AdminIdentityCertificates\030\036 \003(\0132&.action"
  "s.AdminIdentityCertificateField\022\024\n\014Admin"
  "Address\030\037 \001(\014\022\027\n\017OperatorAddress\030  \001(\014\022\024"
  "\n\014GoverningLaw\030! \001(\t\022\024\n\014Jurisdiction\030\" \001"
  "(\t\022\032\n\022RequestPeerChannel\030# \001(\tJ\004\010\004\020\005J\004\010\006"
  "\020\007J\004\010\007\020\010J\004\010\013\020\014J\004\010\014\020\rJ\004\010\r\020\016J\004\010\016\020\017J\004\010\017\020\020\"\257"
  "\001\n\021ContractAmendment\022#\n\033ChangeAdministra"
  "tionAddress\030\001 \001(\010\022\035\n\025ChangeOperatorAddre"
  "ss\030\002 \001(\010\022\030\n\020ContractRevision\030\003 \001(\r\022+\n\nAm"
  "endments\030\004 \003(\0132\027.actions.AmendmentField\022"
  "\017\n\007RefTxID\030\005 \001(\014\"\207\004\n\027StaticContractForma"
  "tion\022\024\n\014ContractName\030\001 \001(\t\022\024\n\014ContractCo"
  "de\030\002 \001(\014\022\033\n\023BodyOfAgreementType\030\003 \001(\r\022\027\n"
  "\017BodyOfAgreement\030\004 \001(\014\022\024\n\014ContractType\030\005"
  " \001(\t\022.\n\016SupportingDocs\030\006 \003(\0132\026.actions.D"
  "ocumentField\022\030\n\020ContractRevision\030\007 \001(\r\022\025"
  "\n\rEffectiveDate\030\n \001(\004\022\032\n\022ContractExpirat"
  "ion\030\013 \001(\004\022\023\n\013ContractURI\030\014 \001(\t\022\023\n\013PrevRe"
  "vTxID\030\r \001(\014\022&\n\010Entities\030\016 \003(\0132\024.actions."
  "EntityField\022*\n\014EntityOracle\030\017 \001(\0132\024.acti"
  "ons.OracleField\022\035\n\025EntityOracleSignature"
  "\030\020 \001(\014\022\"\n\032EntityOracleSigBlockHeight\030\021 \001"
  "(\r\022\024\n\014GoverningLaw\030\022 \001(\t\022\024\n\014Jurisdiction"
  "\030\023 \001(\tJ\004\010\010\020\tJ\004\010\t\020\n\"F\n\025ContractAddressCha"
  "nge\022\032\n\022NewContractAddress\030\001 \001(\014\022\021\n\tTimes"
  "tamp\030\002 \001(\004\"o\n\024BodyOfAgreementOffer\022\'\n\010Ch"
  "apters\030\001 \003(\0132\025.actions.ChapterField\022.\n\013D"
  "efinitions\030\002 \003(\0132\031.actions.DefinedTermFi"
  "eld\"\230\001\n\030BodyOfAgreementFormation\022\'\n\010Chap"
  "ters\030\001 \003(\0132\025.actions.ChapterField\022.\n\013Def"
  "initions\030\002 \003(\0132\031.actions.DefinedTermFiel"
  "d\022\020\n\010Revision\030\003 \001(\r\022\021\n\tTimestamp\030\004 \001(\004\"j"
  "\n\030BodyOfAgreementAmendment\022\020\n\010Revision\030\001"
  " \001(\r\022+\n\nAmendments\030\002 \003(\0132\027.actions.Amend"
  "mentField\022\017\n\007RefTxID\030\003 \001(\014\"\207\003\n\024Instrumen"
  "tDefinition\022\035\n\025InstrumentPermissions\030\001 \001"
  "(\014\022\"\n\032EnforcementOrdersPermitted\030\004 \001(\010\022\024"
  "\n\014VotingRights\030\005 \001(\010\022\026\n\016VoteMultiplier\030\006"
  " \001(\r\022\036\n\026AdministrationProposal\030\007 \001(\010\022\026\n\016"
  "HolderProposal\030\010 \001(\010\022(\n InstrumentModifi"
  "cationGovernance\030\t \001(\r\022\032\n\022AuthorizedToke"
  "nQty\030\n \001(\004\022\026\n\016InstrumentType\030\013 \001(\t\022\031\n\021In"
  "strumentPayload\030\014 \001(\014\022\031\n\021TradeRestrictio"
  "ns\030\r \003(\t\022&\n\013TransferFee\030\016 \001(\0132\021.actions."
  "FeeFieldJ\004\010\002\020\003J\004\010\003\020\004\"\345\003\n\022InstrumentCreat"
  "ion\022\026\n\016InstrumentCode\030\001 \001(\014\022\027\n\017Instrumen"
  "tIndex\030\002 \001(\004\022\035\n\025InstrumentPermissions\030\003 "
  "\001(\014\022\"\n\032EnforcementOrdersPermitted\030\006 \001(\010\022"
  "\024\n\014VotingRights\030\007 \001(\010\022\026\n\016VoteMultiplier\030"
  "\010 \001(\r\022\036\n\026AdministrationProposal\030\t \001(\010\022\026\n"
  "\016HolderProposal\030\n \001(\010\022(\n InstrumentModif"
  "icationGovernance\030\013 \001(\r\022\032\n\022AuthorizedTok"
  "enQty\030\014 \001(\004\022\026\n\016InstrumentType\030\r \001(\t\022\031\n\021I"
  "nstrumentPayload\030\016 \001(\014\022\032\n\022InstrumentRevi"
  "sion\030\017 \001(\r\022\021\n\tTimestamp\030\020 \001(\004\022\031\n\021TradeRe"
  "strictions\030\021 \003(\t\022&\n\013TransferFee\030\022 \001(\0132\021."
  "actions.FeeFieldJ\004\010\004\020\005J\004\010\005\020\006\"\242\001\n\026Instrum"
  "entModification\022\026\n\016InstrumentType\030\001 \001(\t\022"
  "\026\n\016InstrumentCode\030\002 \001(\014\022\032\n\022InstrumentRev"
  "ision\030\003 \001(\r\022+\n\nAmendments\030\004 \003(\0132\027.action"
  "s.AmendmentField\022\017\n\007RefTxID\030\005 \001(\014\"\207\001\n\010Tr"
  "ansfer\0225\n\013Instruments\030\001 \003(\0132 .actions.In"
  "strumentTransferField\022\023\n\013OfferExpiry\030\002 \001"
  "(\004\022\023\n\013ExchangeFee\030\003 \001(\004\022\032\n\022ExchangeFeeAd"
  "dress\030\004 \001(\014\"X\n\nSettlement\0227\n\013Instruments"
  "\030\001 \003(\0132\".actions.InstrumentSettlementFie"
  "ld\022\021\n\tTimestamp\030\002 \001(\004\"\233\001\n\027RectificationS"
  "ettlement\0224\n\010Transfer\030\001 \001(\0132\".actions.Re"
  "ferenceTransactionField\0227\n\013Instruments\030\002"
  " \003(\0132\".actions.InstrumentSettlementField"
  "\022\021\n\tTimestamp\030\003 \001(\004\"\217\002\n\010Proposal\022\014\n\004Type"
  "\030\001 \001(\r\022\026\n\016InstrumentType\030\002 \001(\t\022\026\n\016Instru"
  "mentCode\030\003 \001(\014\022\022\n\nVoteSystem\030\004 \001(\r\0223\n\022Pr"
  "oposedAmendments\030\005 \003(\0132\027.actions.Amendme"
  "ntField\022\023\n\013VoteOptions\030\006 \001(\t\022\017\n\007VoteMax\030"
  "\007 \001(\r\022\033\n\023ProposalDescription\030\010 \001(\t\022\034\n\024Pr"
  "oposalDocumentHash\030\t \001(\014\022\033\n\023VoteCutOffTi"
  "mestamp\030\n \001(\004\"\031\n\004Vote\022\021\n\tTimestamp\030\001 \001(\004"
  "\",\n\nBallotCast\022\020\n\010VoteTxId\030\001 \001(\014\022\014\n\004Vote"
  "\030\002 \001(\t\"T\n\rBallotCounted\022\020\n\010VoteTxId\030\001 \001("
  "\014\022\014\n\004Vote\030\002 \001(\t\022\020\n\010Quantity\030\003 \001(\004\022\021\n\tTim"
  "estamp\030\004 \001(\004\"\267\001\n\006Result\022\026\n\016InstrumentTyp"
  "e\030\001 \001(\t\022\026\n\016InstrumentCode\030\002 \001(\014\0223\n\022Propo"
  "sedAmendments\030\003 \003(\0132\027.actions.AmendmentF"
  "ield\022\020\n\010VoteTxId\030\004 \001(\014\022\023\n\013OptionTally\030\005 "
  "\003(\004\022\016\n\006Result\030\006 \001(\t\022\021\n\tTimestamp\030\007 \001(\004\"\207"
  "\004\n\005Order\022\030\n\020ComplianceAction\030\001 \001(\t\022\026\n\016In"
  "strumentType\030\002 \001(\t\022\026\n\016InstrumentCode\030\003 \001"
  "(\014\0224\n\017TargetAddresses\030\004 \003(\0132\033.actions.Ta"
  "rgetAddressField\022\022\n\nFreezeTxId\030\005 \001(\014\022\024\n\014"
  "FreezePeriod\030\006 \001(\004\022\026\n\016DepositAddress\030\007 \001"
  "(\014\022\025\n\rAuthorityName\030\010 \001(\t\022\032\n\022AuthorityPu"
  "blicKey\030\t \001(\014\022\032\n\022SignatureAlgorithm\030\n \001("
  "\r\022\026\n\016OrderSignature\030\013 \001(\014\0227\n\022BitcoinDisp"
  "ersions\030\016 \003(\0132\033.actions.QuantityIndexFie"
  "ld\022\017\n\007Message\030\017 \001(\t\022 \n\030SupportingEvidenc"
  "eFormat\030\020 \001(\r\022\032\n\022SupportingEvidence\030\021 \001("
  "\014\022A\n\025ReferenceTransactions\030\022 \003(\0132\".actio"
  "ns.ReferenceTransactionFieldJ\004\010\014\020\rJ\004\010\r\020\016"
  "\"\222\001\n\006Freeze\022\026\n\016InstrumentType\030\001 \001(\t\022\026\n\016I"
  "nstrumentCode\030\002 \001(\014\022/\n\nQuantities\030\003 \003(\0132"
  "\033.actions.QuantityIndexField\022\024\n\014FreezePe"
  "riod\030\004 \001(\004\022\021\n\tTimestamp\030\005 \001(\004\"-\n\004Thaw\022\022\n"
  "\nFreezeTxId\030\001 \001(\014\022\021\n\tTimestamp\030\002 \001(\004\"\226\001\n"
  "\014Confiscation\022\026\n\016InstrumentType\030\001 \001(\t\022\026\n"
  "\016InstrumentCode\030\002 \001(\014\022/\n\nQuantities\030\003 \003("
  "\0132\033.actions.QuantityIndexField\022\022\n\nDeposi"
  "tQty\030\004 \001(\004\022\021\n\tTimestamp\030\005 \001(\004\"\216\001\n\030Deprec"
  "atedReconciliation\022\026\n\016InstrumentType\030\001 \001"
  "(\t\022\026\n\016InstrumentCode\030\002 \001(\014\022/\n\nQuantities"
  "\030\003 \003(\0132\033.actions.QuantityIndexField\022\021\n\tT"
  "imestamp\030\004 \001(\004\" \n\rEstablishment\022\017\n\007Messa"
  "ge\030\001 \001(\t\"\033\n\010Addition\022\017\n\007Message\030\001 \001(\t\"0\n"
  "\nAlteration\022\021\n\tEntryTxID\030\001 \001(\014\022\017\n\007Messag"
  "e\030\002 \001(\t\"-\n\007Removal\022\021\n\tEntryTxID\030\001 \001(\014\022\017\n"
  "\007Message\030\002 \001(\t\"f\n\007Message\022\025\n\rSenderIndex"
  "es\030\001 \003(\r\022\027\n\017ReceiverIndexes\030\002 \003(\r\022\023\n\013Mes"
  "sageCode\030\003 \001(\r\022\026\n\016MessagePayload\030\004 \001(\014\"z"
  "\n\tRejection\022\026\n\016AddressIndexes\030\001 \003(\r\022\032\n\022R"
  "ejectAddressIndex\030\002 \001(\r\022\025\n\rRejectionCode"
  "\030\003 \001(\r\022\017\n\007Message\030\004 \001(\t\022\021\n\tTimestamp\030\005 \001"
  "(\004\"0\n\022AdministratorField\022\014\n\004Type\030\001 \001(\r\022\014"
  "\n\004Name\030\002 \001(\t\"s\n\035AdminIdentityCertificate"
  "Field\022\026\n\016EntityContract\030\001 \001(\014\022\021\n\tSignatu"
  "re\030\002 \001(\014\022\023\n\013BlockHeight\030\003 \001(\r\022\022\n\nExpirat"
  "ion\030\004 \001(\004\"I\n\016AmendmentField\022\026\n\016FieldInde"
  "xPath\030\001 \001(\014\022\021\n\tOperation\030\002 \001(\r\022\014\n\004Data\030\003"
  " \001(\014\"\303\001\n\027InstrumentReceiverField\022\017\n\007Addr"
  "ess\030\001 \001(\014\022\020\n\010Quantity\030\002 \001(\004\022\032\n\022OracleSig"
  "Algorithm\030\003 \001(\r\022\023\n\013OracleIndex\030\004 \001(\r\022\035\n\025"
  "OracleConfirmationSig\030\005 \001(\014\022\034\n\024OracleSig"
  "BlockHeight\030\006 \001(\r\022\027\n\017OracleSigExpiry\030\007 \001"
  "(\004\"\224\001\n\031InstrumentSettlementField\022\025\n\rCont"
  "ractIndex\030\001 \001(\r\022\026\n\016InstrumentType\030\002 \001(\t\022"
  "\026\n\016InstrumentCode\030\003 \001(\014\0220\n\013Settlements\030\004"
  " \003(\0132\033.actions.QuantityIndexField\"\356\001\n\027In"
  "strumentTransferField\022\025\n\rContractIndex\030\001"
  " \001(\r\022\026\n\016InstrumentType\030\002 \001(\t\022\026\n\016Instrume"
  "ntCode\030\003 \001(\014\0226\n\021InstrumentSenders\030\004 \003(\0132"
  "\033.actions.QuantityIndexField\022=\n\023Instrume"
  "ntReceivers\030\005 \003(\0132 .actions.InstrumentRe"
  "ceiverField\022\025\n\rRefundAddress\030\006 \001(\014\"W\n\014Ch"
  "apterField\022\r\n\005Title\030\001 \001(\t\022\020\n\010Preamble\030\002 "
  "\001(\t\022&\n\010Articles\030\003 \003(\0132\024.actions.ClauseFi"
  "eld\"R\n\013ClauseField\022\r\n\005Title\030\001 \001(\t\022\014\n\004Bod"
  "y\030\002 \001(\t\022&\n\010Children\030\003 \003(\0132\024.actions.Clau"
  "seField\"4\n\020DefinedTermField\022\014\n\004Term\030\001 \001("
  "\t\022\022\n\nDefinition\030\002 \001(\t\"=\n\rDocumentField\022\014"
  "\n\004Name\030\001 \001(\t\022\014\n\004Type\030\002 \001(\t\022\020\n\010Contents\030\003"
  " \001(\014\"\222\003\n\013EntityField\022\014\n\004Name\030\001 \001(\t\022\014\n\004Ty"
  "pe\030\002 \001(\t\022\013\n\003LEI\030\003 \001(\t\022\022\n\nUnitNumber\030\004 \001("
  "\t\022\026\n\016BuildingNumber\030\005 \001(\t\022\016\n\006Street\030\006 \001("
  "\t\022\022\n\nSuburbCity\030\007 \001(\t\022\"\n\032TerritoryStateP"
  "rovinceCode\030\010 \001(\t\022\023\n\013CountryCode\030\t \001(\t\022\025"
  "\n\rPostalZIPCode\030\n \001(\t\022\024\n\014EmailAddress\030\013 "
  "\001(\t\022\023\n\013PhoneNumber\030\014 \001(\t\0223\n\016Administrati"
  "on\030\r \003(\0132\033.actions.AdministratorField\022)\n"
  "\nManagement\030\016 \003(\0132\025.actions.ManagerField"
  "\022\022\n\nDomainName\030\017 \001(\t\022\025\n\rPaymailHandle\030\021 "
  "\001(\tJ\004\010\020\020\021\"-\n\010FeeField\022\017\n\007Address\030\001 \001(\014\022\020"
  "\n\010Quantity\030\002 \001(\004\"*\n\014ManagerField\022\014\n\004Type"
  "\030\001 \001(\r\022\014\n\004Name\030\002 \001(\t\"L\n\013OracleField\022\023\n\013O"
  "racleTypes\030\004 \003(\r\022\026\n\016EntityContract\030\005 \001(\014"
  "J\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004\"5\n\022QuantityIndexField"
  "\022\r\n\005Index\030\001 \001(\r\022\020\n\010Quantity\030\002 \001(\004\"A\n\031Ref"
  "erenceTransactionField\022\023\n\013Transaction\030\001 "
  "\001(\014\022\017\n\007Outputs\030\002 \003(\014\"<\n\014ServiceField\022\014\n\004"
  "Type\030\001 \001(\r\022\013\n\003URL\030\002 \001(\t\022\021\n\tPublicKey\030\003 \001"
  "(\014\"7\n\022TargetAddressField\022\017\n\007Address\030\001 \001("
  "\014\022\020\n\010Quantity\030\002 \001(\004\"\240\001\n\021VotingSystemFiel"
  "d\022\014\n\004Name\030\001 \001(\t\022\020\n\010VoteType\030\002 \001(\t\022\022\n\nTal"
  "lyLogic\030\003 \001(\r\022\033\n\023ThresholdPercentage\030\004 \001"
  "(\r\022\037\n\027VoteMultiplierPermitted\030\005 \001(\010\022\031\n\021H"
  "olderProposalFee\030\006 \001(\004B8Z6github.com/tok"
  "enized/specification/dist/golang/actions"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_actions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_actions_2eproto_sccs[49] = {
  &scc_info_Addition_actions_2eproto.base,
  &scc_info_AdminIdentityCertificateField_actions_2eproto.base,
  &scc_info_AdministratorField_actions_2eproto.base,
  &scc_info_Alteration_actions_2eproto.base,
  &scc_info_AmendmentField_actions_2eproto.base,
  &scc_info_BallotCast_actions_2eproto.base,
  &scc_info_BallotCounted_actions_2eproto.base,
  &scc_info_BodyOfAgreementAmendment_actions_2eproto.base,
  &scc_info_BodyOfAgreementFormation_actions_2eproto.base,
  &scc_info_BodyOfAgreementOffer_actions_2eproto.base,
  &scc_info_ChapterField_actions_2eproto.base,
  &scc_info_ClauseField_actions_2eproto.base,
  &scc_info_Confiscation_actions_2eproto.base,
  &scc_info_ContractAddressChange_actions_2eproto.base,
  &scc_info_ContractAmendment_actions_2eproto.base,
  &scc_info_ContractFormation_actions_2eproto.base,
  &scc_info_ContractOffer_actions_2eproto.base,
  &scc_info_DefinedTermField_actions_2eproto.base,
  &scc_info_DeprecatedReconciliation_actions_2eproto.base,
  &scc_info_DocumentField_actions_2eproto.base,
  &scc_info_EntityField_actions_2eproto.base,
  &scc_info_Establishment_actions_2eproto.base,
  &scc_info_FeeField_actions_2eproto.base,
  &scc_info_Freeze_actions_2eproto.base,
  &scc_info_InstrumentCreation_actions_2eproto.base,
  &scc_info_InstrumentDefinition_actions_2eproto.base,
  &scc_info_InstrumentModification_actions_2eproto.base,
  &scc_info_InstrumentReceiverField_actions_2eproto.base,
  &scc_info_InstrumentSettlementField_actions_2eproto.base,
  &scc_info_InstrumentTransferField_actions_2eproto.base,
  &scc_info_ManagerField_actions_2eproto.base,
  &scc_info_Message_actions_2eproto.base,
  &scc_info_OracleField_actions_2eproto.base,
  &scc_info_Order_actions_2eproto.base,
  &scc_info_Proposal_actions_2eproto.base,
  &scc_info_QuantityIndexField_actions_2eproto.base,
  &scc_info_RectificationSettlement_actions_2eproto.base,
  &scc_info_ReferenceTransactionField_actions_2eproto.base,
  &scc_info_Rejection_actions_2eproto.base,
  &scc_info_Removal_actions_2eproto.base,
  &scc_info_Result_actions_2eproto.base,
  &scc_info_ServiceField_actions_2eproto.base,
  &scc_info_Settlement_actions_2eproto.base,
  &scc_info_StaticContractFormation_actions_2eproto.base,
  &scc_info_TargetAddressField_actions_2eproto.base,
  &scc_info_Thaw_actions_2eproto.base,
  &scc_info_Transfer_actions_2eproto.base,
  &scc_info_Vote_actions_2eproto.base,
  &scc_info_VotingSystemField_actions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_actions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actions_2eproto = {
  false, false, descriptor_table_protodef_actions_2eproto, "actions.proto", 8488,
  &descriptor_table_actions_2eproto_once, descriptor_table_actions_2eproto_sccs, descriptor_table_actions_2eproto_deps, 49, 0,
  schemas, file_default_instances, TableStruct_actions_2eproto::offsets,
  file_level_metadata_actions_2eproto, 49, file_level_enum_descriptors_actions_2eproto, file_level_service_descriptors_actions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_actions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_actions_2eproto)), true);
namespace actions {

// ===================================================================

void ContractOffer::InitAsDefaultInstance() {
  ::actions::_ContractOffer_default_instance_._instance.get_mutable()->issuer_ = const_cast< ::actions::EntityField*>(
      ::actions::EntityField::internal_default_instance());
}
class ContractOffer::_Internal {
 public:
  static const ::actions::EntityField& issuer(const ContractOffer* msg);
};

const ::actions::EntityField&
ContractOffer::_Internal::issuer(const ContractOffer* msg) {
  return *msg->issuer_;
}
ContractOffer::ContractOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supportingdocs_(arena),
  votingsystems_(arena),
  oracles_(arena),
  services_(arena),
  adminidentitycertificates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ContractOffer)
}
ContractOffer::ContractOffer(const ContractOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supportingdocs_(from.supportingdocs_),
      votingsystems_(from.votingsystems_),
      oracles_(from.oracles_),
      services_(from.services_),
      adminidentitycertificates_(from.adminidentitycertificates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractname().empty()) {
    contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractname(),
      GetArena());
  }
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodyofagreement().empty()) {
    bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bodyofagreement(),
      GetArena());
  }
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contracturi().empty()) {
    contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contracturi(),
      GetArena());
  }
  contractpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractpermissions().empty()) {
    contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractpermissions(),
      GetArena());
  }
  masteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_masteraddress().empty()) {
    masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_masteraddress(),
      GetArena());
  }
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitycontract().empty()) {
    entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entitycontract(),
      GetArena());
  }
  operatorentitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operatorentitycontract().empty()) {
    operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operatorentitycontract(),
      GetArena());
  }
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_governinglaw().empty()) {
    governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_governinglaw(),
      GetArena());
  }
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jurisdiction().empty()) {
    jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jurisdiction(),
      GetArena());
  }
  if (from._internal_has_issuer()) {
    issuer_ = new ::actions::EntityField(*from.issuer_);
  } else {
    issuer_ = nullptr;
  }
  ::memcpy(&contractexpiration_, &from.contractexpiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&contracttype_) -
    reinterpret_cast<char*>(&contractexpiration_)) + sizeof(contracttype_));
  // @@protoc_insertion_point(copy_constructor:actions.ContractOffer)
}

void ContractOffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOffer_actions_2eproto.base);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatorentitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracttype_) -
      reinterpret_cast<char*>(&issuer_)) + sizeof(contracttype_));
}

ContractOffer::~ContractOffer() {
  // @@protoc_insertion_point(destructor:actions.ContractOffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contractname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractpermissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masteraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatorentitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete issuer_;
}

void ContractOffer::ArenaDtor(void* object) {
  ContractOffer* _this = reinterpret_cast< ContractOffer* >(object);
  (void)_this;
}
void ContractOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOffer& ContractOffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOffer_actions_2eproto.base);
  return *internal_default_instance();
}


void ContractOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ContractOffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supportingdocs_.Clear();
  votingsystems_.Clear();
  oracles_.Clear();
  services_.Clear();
  adminidentitycertificates_.Clear();
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masteraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatorentitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
  ::memset(&contractexpiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracttype_) -
      reinterpret_cast<char*>(&contractexpiration_)) + sizeof(contracttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContractName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contractname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractOffer.ContractName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BodyOfAgreementType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bodyofagreementtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes BodyOfAgreement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bodyofagreement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.DocumentField SupportingDocs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supportingdocs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 ContractExpiration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          contractexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContractURI = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_contracturi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractOffer.ContractURI"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .actions.EntityField Issuer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ContractOperatorIncluded = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          contractoperatorincluded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ContractFee = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          contractfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.VotingSystemField VotingSystems = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_votingsystems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes ContractPermissions = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_contractpermissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RestrictedQtyInstruments = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          restrictedqtyinstruments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AdministrationProposal = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          administrationproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HolderProposal = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          holderproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.OracleField Oracles = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_oracles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes MasterAddress = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_masteraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes EntityContract = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_entitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OperatorEntityContract = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_operatorentitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ContractType = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          contracttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.ServiceField Services = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adminidentitycertificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // string GoverningLaw = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_governinglaw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractOffer.GoverningLaw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Jurisdiction = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_jurisdiction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractOffer.Jurisdiction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ContractOffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractname().data(), static_cast<int>(this->_internal_contractname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractOffer.ContractName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contractname(), target);
  }

  // uint32 BodyOfAgreementType = 2;
  if (this->bodyofagreementtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bodyofagreementtype(), target);
  }

  // bytes BodyOfAgreement = 3;
  if (this->bodyofagreement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_bodyofagreement(), target);
  }

  // repeated .actions.DocumentField SupportingDocs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supportingdocs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_supportingdocs(i), target, stream);
  }

  // uint64 ContractExpiration = 8;
  if (this->contractexpiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_contractexpiration(), target);
  }

  // string ContractURI = 9;
  if (this->contracturi().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contracturi().data(), static_cast<int>(this->_internal_contracturi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractOffer.ContractURI");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_contracturi(), target);
  }

  // .actions.EntityField Issuer = 10;
  if (this->has_issuer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::issuer(this), target, stream);
  }

  // bool ContractOperatorIncluded = 12;
  if (this->contractoperatorincluded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_contractoperatorincluded(), target);
  }

  // uint64 ContractFee = 17;
  if (this->contractfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_contractfee(), target);
  }

  // repeated .actions.VotingSystemField VotingSystems = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votingsystems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_votingsystems(i), target, stream);
  }

  // bytes ContractPermissions = 19;
  if (this->contractpermissions().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_contractpermissions(), target);
  }

  // uint64 RestrictedQtyInstruments = 20;
  if (this->restrictedqtyinstruments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_restrictedqtyinstruments(), target);
  }

  // bool AdministrationProposal = 21;
  if (this->administrationproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_administrationproposal(), target);
  }

  // bool HolderProposal = 22;
  if (this->holderproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_holderproposal(), target);
  }

  // repeated .actions.OracleField Oracles = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oracles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_oracles(i), target, stream);
  }

  // bytes MasterAddress = 24;
  if (this->masteraddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_masteraddress(), target);
  }

  // bytes EntityContract = 25;
  if (this->entitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        25, this->_internal_entitycontract(), target);
  }

  // bytes OperatorEntityContract = 26;
  if (this->operatorentitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_operatorentitycontract(), target);
  }

  // uint32 ContractType = 27;
  if (this->contracttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_contracttype(), target);
  }

  // repeated .actions.ServiceField Services = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_services(i), target, stream);
  }

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adminidentitycertificates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_adminidentitycertificates(i), target, stream);
  }

  // string GoverningLaw = 30;
  if (this->governinglaw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_governinglaw().data(), static_cast<int>(this->_internal_governinglaw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractOffer.GoverningLaw");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_governinglaw(), target);
  }

  // string Jurisdiction = 31;
  if (this->jurisdiction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jurisdiction().data(), static_cast<int>(this->_internal_jurisdiction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractOffer.Jurisdiction");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_jurisdiction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ContractOffer)
  return target;
}

size_t ContractOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ContractOffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.DocumentField SupportingDocs = 5;
  total_size += 1UL * this->_internal_supportingdocs_size();
  for (const auto& msg : this->supportingdocs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.VotingSystemField VotingSystems = 18;
  total_size += 2UL * this->_internal_votingsystems_size();
  for (const auto& msg : this->votingsystems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.OracleField Oracles = 23;
  total_size += 2UL * this->_internal_oracles_size();
  for (const auto& msg : this->oracles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.ServiceField Services = 28;
  total_size += 2UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 29;
  total_size += 2UL * this->_internal_adminidentitycertificates_size();
  for (const auto& msg : this->adminidentitycertificates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractname());
  }

  // bytes BodyOfAgreement = 3;
  if (this->bodyofagreement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bodyofagreement());
  }

  // string ContractURI = 9;
  if (this->contracturi().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contracturi());
  }

  // bytes ContractPermissions = 19;
  if (this->contractpermissions().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractpermissions());
  }

  // bytes MasterAddress = 24;
  if (this->masteraddress().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_masteraddress());
  }

  // bytes EntityContract = 25;
  if (this->entitycontract().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entitycontract());
  }

  // bytes OperatorEntityContract = 26;
  if (this->operatorentitycontract().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operatorentitycontract());
  }

  // string GoverningLaw = 30;
  if (this->governinglaw().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_governinglaw());
  }

  // string Jurisdiction = 31;
  if (this->jurisdiction().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jurisdiction());
  }

  // .actions.EntityField Issuer = 10;
  if (this->has_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *issuer_);
  }

  // uint64 ContractExpiration = 8;
  if (this->contractexpiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contractexpiration());
  }

  // uint32 BodyOfAgreementType = 2;
  if (this->bodyofagreementtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodyofagreementtype());
  }

  // bool ContractOperatorIncluded = 12;
  if (this->contractoperatorincluded() != 0) {
    total_size += 1 + 1;
  }

  // bool AdministrationProposal = 21;
  if (this->administrationproposal() != 0) {
    total_size += 2 + 1;
  }

  // bool HolderProposal = 22;
  if (this->holderproposal() != 0) {
    total_size += 2 + 1;
  }

  // uint64 ContractFee = 17;
  if (this->contractfee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contractfee());
  }

  // uint64 RestrictedQtyInstruments = 20;
  if (this->restrictedqtyinstruments() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_restrictedqtyinstruments());
  }

  // uint32 ContractType = 27;
  if (this->contracttype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contracttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ContractOffer)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ContractOffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ContractOffer)
    MergeFrom(*source);
  }
}

void ContractOffer::MergeFrom(const ContractOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ContractOffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supportingdocs_.MergeFrom(from.supportingdocs_);
  votingsystems_.MergeFrom(from.votingsystems_);
  oracles_.MergeFrom(from.oracles_);
  services_.MergeFrom(from.services_);
  adminidentitycertificates_.MergeFrom(from.adminidentitycertificates_);
  if (from.contractname().size() > 0) {
    _internal_set_contractname(from._internal_contractname());
  }
  if (from.bodyofagreement().size() > 0) {
    _internal_set_bodyofagreement(from._internal_bodyofagreement());
  }
  if (from.contracturi().size() > 0) {
    _internal_set_contracturi(from._internal_contracturi());
  }
  if (from.contractpermissions().size() > 0) {
    _internal_set_contractpermissions(from._internal_contractpermissions());
  }
  if (from.masteraddress().size() > 0) {
    _internal_set_masteraddress(from._internal_masteraddress());
  }
  if (from.entitycontract().size() > 0) {
    _internal_set_entitycontract(from._internal_entitycontract());
  }
  if (from.operatorentitycontract().size() > 0) {
    _internal_set_operatorentitycontract(from._internal_operatorentitycontract());
  }
  if (from.governinglaw().size() > 0) {
    _internal_set_governinglaw(from._internal_governinglaw());
  }
  if (from.jurisdiction().size() > 0) {
    _internal_set_jurisdiction(from._internal_jurisdiction());
  }
  if (from.has_issuer()) {
    _internal_mutable_issuer()->::actions::EntityField::MergeFrom(from._internal_issuer());
  }
  if (from.contractexpiration() != 0) {
    _internal_set_contractexpiration(from._internal_contractexpiration());
  }
  if (from.bodyofagreementtype() != 0) {
    _internal_set_bodyofagreementtype(from._internal_bodyofagreementtype());
  }
  if (from.contractoperatorincluded() != 0) {
    _internal_set_contractoperatorincluded(from._internal_contractoperatorincluded());
  }
  if (from.administrationproposal() != 0) {
    _internal_set_administrationproposal(from._internal_administrationproposal());
  }
  if (from.holderproposal() != 0) {
    _internal_set_holderproposal(from._internal_holderproposal());
  }
  if (from.contractfee() != 0) {
    _internal_set_contractfee(from._internal_contractfee());
  }
  if (from.restrictedqtyinstruments() != 0) {
    _internal_set_restrictedqtyinstruments(from._internal_restrictedqtyinstruments());
  }
  if (from.contracttype() != 0) {
    _internal_set_contracttype(from._internal_contracttype());
  }
}

void ContractOffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ContractOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOffer::CopyFrom(const ContractOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ContractOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOffer::IsInitialized() const {
  return true;
}

void ContractOffer::InternalSwap(ContractOffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supportingdocs_.InternalSwap(&other->supportingdocs_);
  votingsystems_.InternalSwap(&other->votingsystems_);
  oracles_.InternalSwap(&other->oracles_);
  services_.InternalSwap(&other->services_);
  adminidentitycertificates_.InternalSwap(&other->adminidentitycertificates_);
  contractname_.Swap(&other->contractname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.Swap(&other->bodyofagreement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.Swap(&other->contracturi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractpermissions_.Swap(&other->contractpermissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masteraddress_.Swap(&other->masteraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entitycontract_.Swap(&other->entitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatorentitycontract_.Swap(&other->operatorentitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.Swap(&other->governinglaw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.Swap(&other->jurisdiction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractOffer, contracttype_)
      + sizeof(ContractOffer::contracttype_)
      - PROTOBUF_FIELD_OFFSET(ContractOffer, issuer_)>(
          reinterpret_cast<char*>(&issuer_),
          reinterpret_cast<char*>(&other->issuer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractFormation::InitAsDefaultInstance() {
  ::actions::_ContractFormation_default_instance_._instance.get_mutable()->issuer_ = const_cast< ::actions::EntityField*>(
      ::actions::EntityField::internal_default_instance());
}
class ContractFormation::_Internal {
 public:
  static const ::actions::EntityField& issuer(const ContractFormation* msg);
};

const ::actions::EntityField&
ContractFormation::_Internal::issuer(const ContractFormation* msg) {
  return *msg->issuer_;
}
ContractFormation::ContractFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supportingdocs_(arena),
  votingsystems_(arena),
  oracles_(arena),
  services_(arena),
  adminidentitycertificates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ContractFormation)
}
ContractFormation::ContractFormation(const ContractFormation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supportingdocs_(from.supportingdocs_),
      votingsystems_(from.votingsystems_),
      oracles_(from.oracles_),
      services_(from.services_),
      adminidentitycertificates_(from.adminidentitycertificates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractname().empty()) {
    contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractname(),
      GetArena());
  }
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodyofagreement().empty()) {
    bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bodyofagreement(),
      GetArena());
  }
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contracturi().empty()) {
    contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contracturi(),
      GetArena());
  }
  contractpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractpermissions().empty()) {
    contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractpermissions(),
      GetArena());
  }
  masteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_masteraddress().empty()) {
    masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_masteraddress(),
      GetArena());
  }
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitycontract().empty()) {
    entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entitycontract(),
      GetArena());
  }
  operatorentitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operatorentitycontract().empty()) {
    operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operatorentitycontract(),
      GetArena());
  }
  adminaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_adminaddress().empty()) {
    adminaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_adminaddress(),
      GetArena());
  }
  operatoraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operatoraddress().empty()) {
    operatoraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operatoraddress(),
      GetArena());
  }
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_governinglaw().empty()) {
    governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_governinglaw(),
      GetArena());
  }
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jurisdiction().empty()) {
    jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jurisdiction(),
      GetArena());
  }
  requestpeerchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requestpeerchannel().empty()) {
    requestpeerchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_requestpeerchannel(),
      GetArena());
  }
  if (from._internal_has_issuer()) {
    issuer_ = new ::actions::EntityField(*from.issuer_);
  } else {
    issuer_ = nullptr;
  }
  ::memcpy(&contractexpiration_, &from.contractexpiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&contracttype_) -
    reinterpret_cast<char*>(&contractexpiration_)) + sizeof(contracttype_));
  // @@protoc_insertion_point(copy_constructor:actions.ContractFormation)
}

void ContractFormation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractFormation_actions_2eproto.base);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masteraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatorentitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adminaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatoraddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestpeerchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracttype_) -
      reinterpret_cast<char*>(&issuer_)) + sizeof(contracttype_));
}

ContractFormation::~ContractFormation() {
  // @@protoc_insertion_point(destructor:actions.ContractFormation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractFormation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contractname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractpermissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  masteraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatorentitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  adminaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operatoraddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestpeerchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete issuer_;
}

void ContractFormation::ArenaDtor(void* object) {
  ContractFormation* _this = reinterpret_cast< ContractFormation* >(object);
  (void)_this;
}
void ContractFormation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractFormation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractFormation& ContractFormation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractFormation_actions_2eproto.base);
  return *internal_default_instance();
}


void ContractFormation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ContractFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supportingdocs_.Clear();
  votingsystems_.Clear();
  oracles_.Clear();
  services_.Clear();
  adminidentitycertificates_.Clear();
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masteraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatorentitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  adminaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatoraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requestpeerchannel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
  ::memset(&contractexpiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contracttype_) -
      reinterpret_cast<char*>(&contractexpiration_)) + sizeof(contracttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractFormation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContractName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contractname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractFormation.ContractName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BodyOfAgreementType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bodyofagreementtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes BodyOfAgreement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bodyofagreement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.DocumentField SupportingDocs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supportingdocs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 ContractExpiration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          contractexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContractURI = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_contracturi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractFormation.ContractURI"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .actions.EntityField Issuer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_issuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ContractFee = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          contractfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.VotingSystemField VotingSystems = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_votingsystems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes ContractPermissions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_contractpermissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 RestrictedQtyInstruments = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          restrictedqtyinstruments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AdministrationProposal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          administrationproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HolderProposal = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          holderproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.OracleField Oracles = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_oracles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes MasterAddress = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_masteraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ContractRevision = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          contractrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes EntityContract = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_entitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OperatorEntityContract = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_operatorentitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ContractType = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          contracttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.ServiceField Services = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adminidentitycertificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes AdminAddress = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_adminaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OperatorAddress = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_operatoraddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string GoverningLaw = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_governinglaw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractFormation.GoverningLaw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Jurisdiction = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_jurisdiction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractFormation.Jurisdiction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string RequestPeerChannel = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_requestpeerchannel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ContractFormation.RequestPeerChannel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractFormation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ContractFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractname().data(), static_cast<int>(this->_internal_contractname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractFormation.ContractName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contractname(), target);
  }

  // uint32 BodyOfAgreementType = 2;
  if (this->bodyofagreementtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bodyofagreementtype(), target);
  }

  // bytes BodyOfAgreement = 3;
  if (this->bodyofagreement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_bodyofagreement(), target);
  }

  // repeated .actions.DocumentField SupportingDocs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supportingdocs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_supportingdocs(i), target, stream);
  }

  // uint64 ContractExpiration = 8;
  if (this->contractexpiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_contractexpiration(), target);
  }

  // string ContractURI = 9;
  if (this->contracturi().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contracturi().data(), static_cast<int>(this->_internal_contracturi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractFormation.ContractURI");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_contracturi(), target);
  }

  // .actions.EntityField Issuer = 10;
  if (this->has_issuer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::issuer(this), target, stream);
  }

  // uint64 ContractFee = 16;
  if (this->contractfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_contractfee(), target);
  }

  // repeated .actions.VotingSystemField VotingSystems = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votingsystems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_votingsystems(i), target, stream);
  }

  // bytes ContractPermissions = 18;
  if (this->contractpermissions().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_contractpermissions(), target);
  }

  // uint64 RestrictedQtyInstruments = 19;
  if (this->restrictedqtyinstruments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_restrictedqtyinstruments(), target);
  }

  // bool AdministrationProposal = 20;
  if (this->administrationproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_administrationproposal(), target);
  }

  // bool HolderProposal = 21;
  if (this->holderproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_holderproposal(), target);
  }

  // repeated .actions.OracleField Oracles = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oracles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_oracles(i), target, stream);
  }

  // bytes MasterAddress = 23;
  if (this->masteraddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_masteraddress(), target);
  }

  // uint32 ContractRevision = 24;
  if (this->contractrevision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_contractrevision(), target);
  }

  // uint64 Timestamp = 25;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_timestamp(), target);
  }

  // bytes EntityContract = 26;
  if (this->entitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_entitycontract(), target);
  }

  // bytes OperatorEntityContract = 27;
  if (this->operatorentitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_operatorentitycontract(), target);
  }

  // uint32 ContractType = 28;
  if (this->contracttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_contracttype(), target);
  }

  // repeated .actions.ServiceField Services = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_services_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_services(i), target, stream);
  }

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adminidentitycertificates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_adminidentitycertificates(i), target, stream);
  }

  // bytes AdminAddress = 31;
  if (this->adminaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_adminaddress(), target);
  }

  // bytes OperatorAddress = 32;
  if (this->operatoraddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        32, this->_internal_operatoraddress(), target);
  }

  // string GoverningLaw = 33;
  if (this->governinglaw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_governinglaw().data(), static_cast<int>(this->_internal_governinglaw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractFormation.GoverningLaw");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_governinglaw(), target);
  }

  // string Jurisdiction = 34;
  if (this->jurisdiction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jurisdiction().data(), static_cast<int>(this->_internal_jurisdiction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractFormation.Jurisdiction");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_jurisdiction(), target);
  }

  // string RequestPeerChannel = 35;
  if (this->requestpeerchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requestpeerchannel().data(), static_cast<int>(this->_internal_requestpeerchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ContractFormation.RequestPeerChannel");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_requestpeerchannel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ContractFormation)
  return target;
}

size_t ContractFormation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ContractFormation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.DocumentField SupportingDocs = 5;
  total_size += 1UL * this->_internal_supportingdocs_size();
  for (const auto& msg : this->supportingdocs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.VotingSystemField VotingSystems = 17;
  total_size += 2UL * this->_internal_votingsystems_size();
  for (const auto& msg : this->votingsystems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.OracleField Oracles = 22;
  total_size += 2UL * this->_internal_oracles_size();
  for (const auto& msg : this->oracles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.ServiceField Services = 29;
  total_size += 2UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 30;
  total_size += 2UL * this->_internal_adminidentitycertificates_size();
  for (const auto& msg : this->adminidentitycertificates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractname());
  }

  // bytes BodyOfAgreement = 3;
  if (this->bodyofagreement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bodyofagreement());
  }

  // string ContractURI = 9;
  if (this->contracturi().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contracturi());
  }

  // bytes ContractPermissions = 18;
  if (this->contractpermissions().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractpermissions());
  }

  // bytes MasterAddress = 23;
  if (this->masteraddress().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_masteraddress());
  }

  // bytes EntityContract = 26;
  if (this->entitycontract().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entitycontract());
  }

  // bytes OperatorEntityContract = 27;
  if (this->operatorentitycontract().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operatorentitycontract());
  }

  // bytes AdminAddress = 31;
  if (this->adminaddress().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_adminaddress());
  }

  // bytes OperatorAddress = 32;
  if (this->operatoraddress().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_operatoraddress());
  }

  // string GoverningLaw = 33;
  if (this->governinglaw().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_governinglaw());
  }

  // string Jurisdiction = 34;
  if (this->jurisdiction().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jurisdiction());
  }

  // string RequestPeerChannel = 35;
  if (this->requestpeerchannel().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestpeerchannel());
  }

  // .actions.EntityField Issuer = 10;
  if (this->has_issuer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *issuer_);
  }

  // uint64 ContractExpiration = 8;
  if (this->contractexpiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contractexpiration());
  }

  // uint32 BodyOfAgreementType = 2;
  if (this->bodyofagreementtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodyofagreementtype());
  }

  // bool AdministrationProposal = 20;
  if (this->administrationproposal() != 0) {
    total_size += 2 + 1;
  }

  // bool HolderProposal = 21;
  if (this->holderproposal() != 0) {
    total_size += 2 + 1;
  }

  // uint64 ContractFee = 16;
  if (this->contractfee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contractfee());
  }

  // uint64 RestrictedQtyInstruments = 19;
  if (this->restrictedqtyinstruments() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_restrictedqtyinstruments());
  }

  // uint64 Timestamp = 25;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 ContractRevision = 24;
  if (this->contractrevision() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contractrevision());
  }

  // uint32 ContractType = 28;
  if (this->contracttype() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contracttype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractFormation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ContractFormation)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractFormation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractFormation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ContractFormation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ContractFormation)
    MergeFrom(*source);
  }
}

void ContractFormation::MergeFrom(const ContractFormation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ContractFormation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supportingdocs_.MergeFrom(from.supportingdocs_);
  votingsystems_.MergeFrom(from.votingsystems_);
  oracles_.MergeFrom(from.oracles_);
  services_.MergeFrom(from.services_);
  adminidentitycertificates_.MergeFrom(from.adminidentitycertificates_);
  if (from.contractname().size() > 0) {
    _internal_set_contractname(from._internal_contractname());
  }
  if (from.bodyofagreement().size() > 0) {
    _internal_set_bodyofagreement(from._internal_bodyofagreement());
  }
  if (from.contracturi().size() > 0) {
    _internal_set_contracturi(from._internal_contracturi());
  }
  if (from.contractpermissions().size() > 0) {
    _internal_set_contractpermissions(from._internal_contractpermissions());
  }
  if (from.masteraddress().size() > 0) {
    _internal_set_masteraddress(from._internal_masteraddress());
  }
  if (from.entitycontract().size() > 0) {
    _internal_set_entitycontract(from._internal_entitycontract());
  }
  if (from.operatorentitycontract().size() > 0) {
    _internal_set_operatorentitycontract(from._internal_operatorentitycontract());
  }
  if (from.adminaddress().size() > 0) {
    _internal_set_adminaddress(from._internal_adminaddress());
  }
  if (from.operatoraddress().size() > 0) {
    _internal_set_operatoraddress(from._internal_operatoraddress());
  }
  if (from.governinglaw().size() > 0) {
    _internal_set_governinglaw(from._internal_governinglaw());
  }
  if (from.jurisdiction().size() > 0) {
    _internal_set_jurisdiction(from._internal_jurisdiction());
  }
  if (from.requestpeerchannel().size() > 0) {
    _internal_set_requestpeerchannel(from._internal_requestpeerchannel());
  }
  if (from.has_issuer()) {
    _internal_mutable_issuer()->::actions::EntityField::MergeFrom(from._internal_issuer());
  }
  if (from.contractexpiration() != 0) {
    _internal_set_contractexpiration(from._internal_contractexpiration());
  }
  if (from.bodyofagreementtype() != 0) {
    _internal_set_bodyofagreementtype(from._internal_bodyofagreementtype());
  }
  if (from.administrationproposal() != 0) {
    _internal_set_administrationproposal(from._internal_administrationproposal());
  }
  if (from.holderproposal() != 0) {
    _internal_set_holderproposal(from._internal_holderproposal());
  }
  if (from.contractfee() != 0) {
    _internal_set_contractfee(from._internal_contractfee());
  }
  if (from.restrictedqtyinstruments() != 0) {
    _internal_set_restrictedqtyinstruments(from._internal_restrictedqtyinstruments());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.contractrevision() != 0) {
    _internal_set_contractrevision(from._internal_contractrevision());
  }
  if (from.contracttype() != 0) {
    _internal_set_contracttype(from._internal_contracttype());
  }
}

void ContractFormation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ContractFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractFormation::CopyFrom(const ContractFormation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ContractFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractFormation::IsInitialized() const {
  return true;
}

void ContractFormation::InternalSwap(ContractFormation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supportingdocs_.InternalSwap(&other->supportingdocs_);
  votingsystems_.InternalSwap(&other->votingsystems_);
  oracles_.InternalSwap(&other->oracles_);
  services_.InternalSwap(&other->services_);
  adminidentitycertificates_.InternalSwap(&other->adminidentitycertificates_);
  contractname_.Swap(&other->contractname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.Swap(&other->bodyofagreement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.Swap(&other->contracturi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractpermissions_.Swap(&other->contractpermissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  masteraddress_.Swap(&other->masteraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entitycontract_.Swap(&other->entitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatorentitycontract_.Swap(&other->operatorentitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  adminaddress_.Swap(&other->adminaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operatoraddress_.Swap(&other->operatoraddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.Swap(&other->governinglaw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.Swap(&other->jurisdiction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  requestpeerchannel_.Swap(&other->requestpeerchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractFormation, contracttype_)
      + sizeof(ContractFormation::contracttype_)
      - PROTOBUF_FIELD_OFFSET(ContractFormation, issuer_)>(
          reinterpret_cast<char*>(&issuer_),
          reinterpret_cast<char*>(&other->issuer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractFormation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractAmendment::InitAsDefaultInstance() {
}
class ContractAmendment::_Internal {
 public:
};

ContractAmendment::ContractAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amendments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ContractAmendment)
}
ContractAmendment::ContractAmendment(const ContractAmendment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amendments_(from.amendments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reftxid().empty()) {
    reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reftxid(),
      GetArena());
  }
  ::memcpy(&changeadministrationaddress_, &from.changeadministrationaddress_,
    static_cast<size_t>(reinterpret_cast<char*>(&contractrevision_) -
    reinterpret_cast<char*>(&changeadministrationaddress_)) + sizeof(contractrevision_));
  // @@protoc_insertion_point(copy_constructor:actions.ContractAmendment)
}

void ContractAmendment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractAmendment_actions_2eproto.base);
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&changeadministrationaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contractrevision_) -
      reinterpret_cast<char*>(&changeadministrationaddress_)) + sizeof(contractrevision_));
}

ContractAmendment::~ContractAmendment() {
  // @@protoc_insertion_point(destructor:actions.ContractAmendment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractAmendment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reftxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractAmendment::ArenaDtor(void* object) {
  ContractAmendment* _this = reinterpret_cast< ContractAmendment* >(object);
  (void)_this;
}
void ContractAmendment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractAmendment& ContractAmendment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractAmendment_actions_2eproto.base);
  return *internal_default_instance();
}


void ContractAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ContractAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amendments_.Clear();
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&changeadministrationaddress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contractrevision_) -
      reinterpret_cast<char*>(&changeadministrationaddress_)) + sizeof(contractrevision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractAmendment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool ChangeAdministrationAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          changeadministrationaddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ChangeOperatorAddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          changeoperatoraddress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ContractRevision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          contractrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AmendmentField Amendments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes RefTxID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reftxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractAmendment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ContractAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ChangeAdministrationAddress = 1;
  if (this->changeadministrationaddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_changeadministrationaddress(), target);
  }

  // bool ChangeOperatorAddress = 2;
  if (this->changeoperatoraddress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_changeoperatoraddress(), target);
  }

  // uint32 ContractRevision = 3;
  if (this->contractrevision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_contractrevision(), target);
  }

  // repeated .actions.AmendmentField Amendments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amendments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_amendments(i), target, stream);
  }

  // bytes RefTxID = 5;
  if (this->reftxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reftxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ContractAmendment)
  return target;
}

size_t ContractAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ContractAmendment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AmendmentField Amendments = 4;
  total_size += 1UL * this->_internal_amendments_size();
  for (const auto& msg : this->amendments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes RefTxID = 5;
  if (this->reftxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reftxid());
  }

  // bool ChangeAdministrationAddress = 1;
  if (this->changeadministrationaddress() != 0) {
    total_size += 1 + 1;
  }

  // bool ChangeOperatorAddress = 2;
  if (this->changeoperatoraddress() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ContractRevision = 3;
  if (this->contractrevision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contractrevision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractAmendment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ContractAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractAmendment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractAmendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ContractAmendment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ContractAmendment)
    MergeFrom(*source);
  }
}

void ContractAmendment::MergeFrom(const ContractAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ContractAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amendments_.MergeFrom(from.amendments_);
  if (from.reftxid().size() > 0) {
    _internal_set_reftxid(from._internal_reftxid());
  }
  if (from.changeadministrationaddress() != 0) {
    _internal_set_changeadministrationaddress(from._internal_changeadministrationaddress());
  }
  if (from.changeoperatoraddress() != 0) {
    _internal_set_changeoperatoraddress(from._internal_changeoperatoraddress());
  }
  if (from.contractrevision() != 0) {
    _internal_set_contractrevision(from._internal_contractrevision());
  }
}

void ContractAmendment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ContractAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractAmendment::CopyFrom(const ContractAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ContractAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractAmendment::IsInitialized() const {
  return true;
}

void ContractAmendment::InternalSwap(ContractAmendment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amendments_.InternalSwap(&other->amendments_);
  reftxid_.Swap(&other->reftxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContractAmendment, contractrevision_)
      + sizeof(ContractAmendment::contractrevision_)
      - PROTOBUF_FIELD_OFFSET(ContractAmendment, changeadministrationaddress_)>(
          reinterpret_cast<char*>(&changeadministrationaddress_),
          reinterpret_cast<char*>(&other->changeadministrationaddress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractAmendment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticContractFormation::InitAsDefaultInstance() {
  ::actions::_StaticContractFormation_default_instance_._instance.get_mutable()->entityoracle_ = const_cast< ::actions::OracleField*>(
      ::actions::OracleField::internal_default_instance());
}
class StaticContractFormation::_Internal {
 public:
  static const ::actions::OracleField& entityoracle(const StaticContractFormation* msg);
};

const ::actions::OracleField&
StaticContractFormation::_Internal::entityoracle(const StaticContractFormation* msg) {
  return *msg->entityoracle_;
}
StaticContractFormation::StaticContractFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supportingdocs_(arena),
  entities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.StaticContractFormation)
}
StaticContractFormation::StaticContractFormation(const StaticContractFormation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supportingdocs_(from.supportingdocs_),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractname().empty()) {
    contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractname(),
      GetArena());
  }
  contractcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contractcode().empty()) {
    contractcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contractcode(),
      GetArena());
  }
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bodyofagreement().empty()) {
    bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bodyofagreement(),
      GetArena());
  }
  contracttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contracttype().empty()) {
    contracttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contracttype(),
      GetArena());
  }
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contracturi().empty()) {
    contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contracturi(),
      GetArena());
  }
  prevrevtxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prevrevtxid().empty()) {
    prevrevtxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prevrevtxid(),
      GetArena());
  }
  entityoraclesignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entityoraclesignature().empty()) {
    entityoraclesignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entityoraclesignature(),
      GetArena());
  }
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_governinglaw().empty()) {
    governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_governinglaw(),
      GetArena());
  }
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jurisdiction().empty()) {
    jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jurisdiction(),
      GetArena());
  }
  if (from._internal_has_entityoracle()) {
    entityoracle_ = new ::actions::OracleField(*from.entityoracle_);
  } else {
    entityoracle_ = nullptr;
  }
  ::memcpy(&bodyofagreementtype_, &from.bodyofagreementtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&entityoraclesigblockheight_) -
    reinterpret_cast<char*>(&bodyofagreementtype_)) + sizeof(entityoraclesigblockheight_));
  // @@protoc_insertion_point(copy_constructor:actions.StaticContractFormation)
}

void StaticContractFormation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticContractFormation_actions_2eproto.base);
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prevrevtxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entityoraclesignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&entityoracle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entityoraclesigblockheight_) -
      reinterpret_cast<char*>(&entityoracle_)) + sizeof(entityoraclesigblockheight_));
}

StaticContractFormation::~StaticContractFormation() {
  // @@protoc_insertion_point(destructor:actions.StaticContractFormation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StaticContractFormation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  contractname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bodyofagreement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contracturi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prevrevtxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entityoraclesignature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  governinglaw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jurisdiction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete entityoracle_;
}

void StaticContractFormation::ArenaDtor(void* object) {
  StaticContractFormation* _this = reinterpret_cast< StaticContractFormation* >(object);
  (void)_this;
}
void StaticContractFormation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaticContractFormation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticContractFormation& StaticContractFormation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticContractFormation_actions_2eproto.base);
  return *internal_default_instance();
}


void StaticContractFormation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.StaticContractFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supportingdocs_.Clear();
  entities_.Clear();
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prevrevtxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entityoraclesignature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && entityoracle_ != nullptr) {
    delete entityoracle_;
  }
  entityoracle_ = nullptr;
  ::memset(&bodyofagreementtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entityoraclesigblockheight_) -
      reinterpret_cast<char*>(&bodyofagreementtype_)) + sizeof(entityoraclesigblockheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticContractFormation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ContractName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contractname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.StaticContractFormation.ContractName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ContractCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_contractcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BodyOfAgreementType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bodyofagreementtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes BodyOfAgreement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bodyofagreement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContractType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_contracttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.StaticContractFormation.ContractType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.DocumentField SupportingDocs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supportingdocs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 ContractRevision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          contractrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 EffectiveDate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          effectivedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ContractExpiration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          contractexpiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ContractURI = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_contracturi();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.StaticContractFormation.ContractURI"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes PrevRevTxID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_prevrevtxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.EntityField Entities = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // .actions.OracleField EntityOracle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_entityoracle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes EntityOracleSignature = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_entityoraclesignature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 EntityOracleSigBlockHeight = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          entityoraclesigblockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string GoverningLaw = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_governinglaw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.StaticContractFormation.GoverningLaw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Jurisdiction = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_jurisdiction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.StaticContractFormation.Jurisdiction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticContractFormation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.StaticContractFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contractname().data(), static_cast<int>(this->_internal_contractname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.StaticContractFormation.ContractName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contractname(), target);
  }

  // bytes ContractCode = 2;
  if (this->contractcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contractcode(), target);
  }

  // uint32 BodyOfAgreementType = 3;
  if (this->bodyofagreementtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bodyofagreementtype(), target);
  }

  // bytes BodyOfAgreement = 4;
  if (this->bodyofagreement().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bodyofagreement(), target);
  }

  // string ContractType = 5;
  if (this->contracttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contracttype().data(), static_cast<int>(this->_internal_contracttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.StaticContractFormation.ContractType");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contracttype(), target);
  }

  // repeated .actions.DocumentField SupportingDocs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supportingdocs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_supportingdocs(i), target, stream);
  }

  // uint32 ContractRevision = 7;
  if (this->contractrevision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_contractrevision(), target);
  }

  // uint64 EffectiveDate = 10;
  if (this->effectivedate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_effectivedate(), target);
  }

  // uint64 ContractExpiration = 11;
  if (this->contractexpiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_contractexpiration(), target);
  }

  // string ContractURI = 12;
  if (this->contracturi().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contracturi().data(), static_cast<int>(this->_internal_contracturi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.StaticContractFormation.ContractURI");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_contracturi(), target);
  }

  // bytes PrevRevTxID = 13;
  if (this->prevrevtxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_prevrevtxid(), target);
  }

  // repeated .actions.EntityField Entities = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_entities(i), target, stream);
  }

  // .actions.OracleField EntityOracle = 15;
  if (this->has_entityoracle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::entityoracle(this), target, stream);
  }

  // bytes EntityOracleSignature = 16;
  if (this->entityoraclesignature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_entityoraclesignature(), target);
  }

  // uint32 EntityOracleSigBlockHeight = 17;
  if (this->entityoraclesigblockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_entityoraclesigblockheight(), target);
  }

  // string GoverningLaw = 18;
  if (this->governinglaw().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_governinglaw().data(), static_cast<int>(this->_internal_governinglaw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.StaticContractFormation.GoverningLaw");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_governinglaw(), target);
  }

  // string Jurisdiction = 19;
  if (this->jurisdiction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jurisdiction().data(), static_cast<int>(this->_internal_jurisdiction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.StaticContractFormation.Jurisdiction");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_jurisdiction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.StaticContractFormation)
  return target;
}

size_t StaticContractFormation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.StaticContractFormation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.DocumentField SupportingDocs = 6;
  total_size += 1UL * this->_internal_supportingdocs_size();
  for (const auto& msg : this->supportingdocs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.EntityField Entities = 14;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ContractName = 1;
  if (this->contractname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contractname());
  }

  // bytes ContractCode = 2;
  if (this->contractcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contractcode());
  }

  // bytes BodyOfAgreement = 4;
  if (this->bodyofagreement().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bodyofagreement());
  }

  // string ContractType = 5;
  if (this->contracttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contracttype());
  }

  // string ContractURI = 12;
  if (this->contracturi().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contracturi());
  }

  // bytes PrevRevTxID = 13;
  if (this->prevrevtxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prevrevtxid());
  }

  // bytes EntityOracleSignature = 16;
  if (this->entityoraclesignature().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entityoraclesignature());
  }

  // string GoverningLaw = 18;
  if (this->governinglaw().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_governinglaw());
  }

  // string Jurisdiction = 19;
  if (this->jurisdiction().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jurisdiction());
  }

  // .actions.OracleField EntityOracle = 15;
  if (this->has_entityoracle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entityoracle_);
  }

  // uint32 BodyOfAgreementType = 3;
  if (this->bodyofagreementtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodyofagreementtype());
  }

  // uint32 ContractRevision = 7;
  if (this->contractrevision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contractrevision());
  }

  // uint64 EffectiveDate = 10;
  if (this->effectivedate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_effectivedate());
  }

  // uint64 ContractExpiration = 11;
  if (this->contractexpiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_contractexpiration());
  }

  // uint32 EntityOracleSigBlockHeight = 17;
  if (this->entityoraclesigblockheight() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entityoraclesigblockheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticContractFormation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.StaticContractFormation)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticContractFormation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticContractFormation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.StaticContractFormation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.StaticContractFormation)
    MergeFrom(*source);
  }
}

void StaticContractFormation::MergeFrom(const StaticContractFormation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.StaticContractFormation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supportingdocs_.MergeFrom(from.supportingdocs_);
  entities_.MergeFrom(from.entities_);
  if (from.contractname().size() > 0) {
    _internal_set_contractname(from._internal_contractname());
  }
  if (from.contractcode().size() > 0) {
    _internal_set_contractcode(from._internal_contractcode());
  }
  if (from.bodyofagreement().size() > 0) {
    _internal_set_bodyofagreement(from._internal_bodyofagreement());
  }
  if (from.contracttype().size() > 0) {
    _internal_set_contracttype(from._internal_contracttype());
  }
  if (from.contracturi().size() > 0) {
    _internal_set_contracturi(from._internal_contracturi());
  }
  if (from.prevrevtxid().size() > 0) {
    _internal_set_prevrevtxid(from._internal_prevrevtxid());
  }
  if (from.entityoraclesignature().size() > 0) {
    _internal_set_entityoraclesignature(from._internal_entityoraclesignature());
  }
  if (from.governinglaw().size() > 0) {
    _internal_set_governinglaw(from._internal_governinglaw());
  }
  if (from.jurisdiction().size() > 0) {
    _internal_set_jurisdiction(from._internal_jurisdiction());
  }
  if (from.has_entityoracle()) {
    _internal_mutable_entityoracle()->::actions::OracleField::MergeFrom(from._internal_entityoracle());
  }
  if (from.bodyofagreementtype() != 0) {
    _internal_set_bodyofagreementtype(from._internal_bodyofagreementtype());
  }
  if (from.contractrevision() != 0) {
    _internal_set_contractrevision(from._internal_contractrevision());
  }
  if (from.effectivedate() != 0) {
    _internal_set_effectivedate(from._internal_effectivedate());
  }
  if (from.contractexpiration() != 0) {
    _internal_set_contractexpiration(from._internal_contractexpiration());
  }
  if (from.entityoraclesigblockheight() != 0) {
    _internal_set_entityoraclesigblockheight(from._internal_entityoraclesigblockheight());
  }
}

void StaticContractFormation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.StaticContractFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticContractFormation::CopyFrom(const StaticContractFormation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.StaticContractFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticContractFormation::IsInitialized() const {
  return true;
}

void StaticContractFormation::InternalSwap(StaticContractFormation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supportingdocs_.InternalSwap(&other->supportingdocs_);
  entities_.InternalSwap(&other->entities_);
  contractname_.Swap(&other->contractname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractcode_.Swap(&other->contractcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bodyofagreement_.Swap(&other->bodyofagreement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracttype_.Swap(&other->contracttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contracturi_.Swap(&other->contracturi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prevrevtxid_.Swap(&other->prevrevtxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entityoraclesignature_.Swap(&other->entityoraclesignature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  governinglaw_.Swap(&other->governinglaw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jurisdiction_.Swap(&other->jurisdiction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticContractFormation, entityoraclesigblockheight_)
      + sizeof(StaticContractFormation::entityoraclesigblockheight_)
      - PROTOBUF_FIELD_OFFSET(StaticContractFormation, entityoracle_)>(
          reinterpret_cast<char*>(&entityoracle_),
          reinterpret_cast<char*>(&other->entityoracle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticContractFormation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractAddressChange::InitAsDefaultInstance() {
}
class ContractAddressChange::_Internal {
 public:
};

ContractAddressChange::ContractAddressChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ContractAddressChange)
}
ContractAddressChange::ContractAddressChange(const ContractAddressChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  newcontractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newcontractaddress().empty()) {
    newcontractaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_newcontractaddress(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.ContractAddressChange)
}

void ContractAddressChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractAddressChange_actions_2eproto.base);
  newcontractaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

ContractAddressChange::~ContractAddressChange() {
  // @@protoc_insertion_point(destructor:actions.ContractAddressChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ContractAddressChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  newcontractaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractAddressChange::ArenaDtor(void* object) {
  ContractAddressChange* _this = reinterpret_cast< ContractAddressChange* >(object);
  (void)_this;
}
void ContractAddressChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContractAddressChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractAddressChange& ContractAddressChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractAddressChange_actions_2eproto.base);
  return *internal_default_instance();
}


void ContractAddressChange::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ContractAddressChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newcontractaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractAddressChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes NewContractAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newcontractaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractAddressChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ContractAddressChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes NewContractAddress = 1;
  if (this->newcontractaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_newcontractaddress(), target);
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ContractAddressChange)
  return target;
}

size_t ContractAddressChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ContractAddressChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes NewContractAddress = 1;
  if (this->newcontractaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_newcontractaddress());
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractAddressChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ContractAddressChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractAddressChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractAddressChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ContractAddressChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ContractAddressChange)
    MergeFrom(*source);
  }
}

void ContractAddressChange::MergeFrom(const ContractAddressChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ContractAddressChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newcontractaddress().size() > 0) {
    _internal_set_newcontractaddress(from._internal_newcontractaddress());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ContractAddressChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ContractAddressChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractAddressChange::CopyFrom(const ContractAddressChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ContractAddressChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractAddressChange::IsInitialized() const {
  return true;
}

void ContractAddressChange::InternalSwap(ContractAddressChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  newcontractaddress_.Swap(&other->newcontractaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractAddressChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyOfAgreementOffer::InitAsDefaultInstance() {
}
class BodyOfAgreementOffer::_Internal {
 public:
};

BodyOfAgreementOffer::BodyOfAgreementOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chapters_(arena),
  definitions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.BodyOfAgreementOffer)
}
BodyOfAgreementOffer::BodyOfAgreementOffer(const BodyOfAgreementOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chapters_(from.chapters_),
      definitions_(from.definitions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:actions.BodyOfAgreementOffer)
}

void BodyOfAgreementOffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyOfAgreementOffer_actions_2eproto.base);
}

BodyOfAgreementOffer::~BodyOfAgreementOffer() {
  // @@protoc_insertion_point(destructor:actions.BodyOfAgreementOffer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyOfAgreementOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BodyOfAgreementOffer::ArenaDtor(void* object) {
  BodyOfAgreementOffer* _this = reinterpret_cast< BodyOfAgreementOffer* >(object);
  (void)_this;
}
void BodyOfAgreementOffer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyOfAgreementOffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyOfAgreementOffer& BodyOfAgreementOffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyOfAgreementOffer_actions_2eproto.base);
  return *internal_default_instance();
}


void BodyOfAgreementOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.BodyOfAgreementOffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chapters_.Clear();
  definitions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyOfAgreementOffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .actions.ChapterField Chapters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.DefinedTermField Definitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_definitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyOfAgreementOffer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.BodyOfAgreementOffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .actions.ChapterField Chapters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chapters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chapters(i), target, stream);
  }

  // repeated .actions.DefinedTermField Definitions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_definitions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_definitions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.BodyOfAgreementOffer)
  return target;
}

size_t BodyOfAgreementOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.BodyOfAgreementOffer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.ChapterField Chapters = 1;
  total_size += 1UL * this->_internal_chapters_size();
  for (const auto& msg : this->chapters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.DefinedTermField Definitions = 2;
  total_size += 1UL * this->_internal_definitions_size();
  for (const auto& msg : this->definitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyOfAgreementOffer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.BodyOfAgreementOffer)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyOfAgreementOffer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyOfAgreementOffer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.BodyOfAgreementOffer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.BodyOfAgreementOffer)
    MergeFrom(*source);
  }
}

void BodyOfAgreementOffer::MergeFrom(const BodyOfAgreementOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.BodyOfAgreementOffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chapters_.MergeFrom(from.chapters_);
  definitions_.MergeFrom(from.definitions_);
}

void BodyOfAgreementOffer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.BodyOfAgreementOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyOfAgreementOffer::CopyFrom(const BodyOfAgreementOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.BodyOfAgreementOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyOfAgreementOffer::IsInitialized() const {
  return true;
}

void BodyOfAgreementOffer::InternalSwap(BodyOfAgreementOffer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chapters_.InternalSwap(&other->chapters_);
  definitions_.InternalSwap(&other->definitions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyOfAgreementOffer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyOfAgreementFormation::InitAsDefaultInstance() {
}
class BodyOfAgreementFormation::_Internal {
 public:
};

BodyOfAgreementFormation::BodyOfAgreementFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chapters_(arena),
  definitions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.BodyOfAgreementFormation)
}
BodyOfAgreementFormation::BodyOfAgreementFormation(const BodyOfAgreementFormation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chapters_(from.chapters_),
      definitions_(from.definitions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:actions.BodyOfAgreementFormation)
}

void BodyOfAgreementFormation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyOfAgreementFormation_actions_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(revision_));
}

BodyOfAgreementFormation::~BodyOfAgreementFormation() {
  // @@protoc_insertion_point(destructor:actions.BodyOfAgreementFormation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyOfAgreementFormation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BodyOfAgreementFormation::ArenaDtor(void* object) {
  BodyOfAgreementFormation* _this = reinterpret_cast< BodyOfAgreementFormation* >(object);
  (void)_this;
}
void BodyOfAgreementFormation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyOfAgreementFormation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyOfAgreementFormation& BodyOfAgreementFormation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyOfAgreementFormation_actions_2eproto.base);
  return *internal_default_instance();
}


void BodyOfAgreementFormation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.BodyOfAgreementFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chapters_.Clear();
  definitions_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(revision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyOfAgreementFormation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .actions.ChapterField Chapters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.DefinedTermField Definitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_definitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 Revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyOfAgreementFormation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.BodyOfAgreementFormation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .actions.ChapterField Chapters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chapters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chapters(i), target, stream);
  }

  // repeated .actions.DefinedTermField Definitions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_definitions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_definitions(i), target, stream);
  }

  // uint32 Revision = 3;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_revision(), target);
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.BodyOfAgreementFormation)
  return target;
}

size_t BodyOfAgreementFormation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.BodyOfAgreementFormation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.ChapterField Chapters = 1;
  total_size += 1UL * this->_internal_chapters_size();
  for (const auto& msg : this->chapters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.DefinedTermField Definitions = 2;
  total_size += 1UL * this->_internal_definitions_size();
  for (const auto& msg : this->definitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint32 Revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyOfAgreementFormation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.BodyOfAgreementFormation)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyOfAgreementFormation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyOfAgreementFormation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.BodyOfAgreementFormation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.BodyOfAgreementFormation)
    MergeFrom(*source);
  }
}

void BodyOfAgreementFormation::MergeFrom(const BodyOfAgreementFormation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.BodyOfAgreementFormation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chapters_.MergeFrom(from.chapters_);
  definitions_.MergeFrom(from.definitions_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void BodyOfAgreementFormation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.BodyOfAgreementFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyOfAgreementFormation::CopyFrom(const BodyOfAgreementFormation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.BodyOfAgreementFormation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyOfAgreementFormation::IsInitialized() const {
  return true;
}

void BodyOfAgreementFormation::InternalSwap(BodyOfAgreementFormation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chapters_.InternalSwap(&other->chapters_);
  definitions_.InternalSwap(&other->definitions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyOfAgreementFormation, revision_)
      + sizeof(BodyOfAgreementFormation::revision_)
      - PROTOBUF_FIELD_OFFSET(BodyOfAgreementFormation, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyOfAgreementFormation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyOfAgreementAmendment::InitAsDefaultInstance() {
}
class BodyOfAgreementAmendment::_Internal {
 public:
};

BodyOfAgreementAmendment::BodyOfAgreementAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amendments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.BodyOfAgreementAmendment)
}
BodyOfAgreementAmendment::BodyOfAgreementAmendment(const BodyOfAgreementAmendment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amendments_(from.amendments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reftxid().empty()) {
    reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reftxid(),
      GetArena());
  }
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:actions.BodyOfAgreementAmendment)
}

void BodyOfAgreementAmendment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyOfAgreementAmendment_actions_2eproto.base);
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revision_ = 0u;
}

BodyOfAgreementAmendment::~BodyOfAgreementAmendment() {
  // @@protoc_insertion_point(destructor:actions.BodyOfAgreementAmendment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyOfAgreementAmendment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reftxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BodyOfAgreementAmendment::ArenaDtor(void* object) {
  BodyOfAgreementAmendment* _this = reinterpret_cast< BodyOfAgreementAmendment* >(object);
  (void)_this;
}
void BodyOfAgreementAmendment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyOfAgreementAmendment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyOfAgreementAmendment& BodyOfAgreementAmendment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyOfAgreementAmendment_actions_2eproto.base);
  return *internal_default_instance();
}


void BodyOfAgreementAmendment::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.BodyOfAgreementAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amendments_.Clear();
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  revision_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyOfAgreementAmendment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AmendmentField Amendments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes RefTxID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reftxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyOfAgreementAmendment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.BodyOfAgreementAmendment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Revision = 1;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_revision(), target);
  }

  // repeated .actions.AmendmentField Amendments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amendments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_amendments(i), target, stream);
  }

  // bytes RefTxID = 3;
  if (this->reftxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_reftxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.BodyOfAgreementAmendment)
  return target;
}

size_t BodyOfAgreementAmendment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.BodyOfAgreementAmendment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AmendmentField Amendments = 2;
  total_size += 1UL * this->_internal_amendments_size();
  for (const auto& msg : this->amendments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes RefTxID = 3;
  if (this->reftxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reftxid());
  }

  // uint32 Revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyOfAgreementAmendment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.BodyOfAgreementAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyOfAgreementAmendment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyOfAgreementAmendment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.BodyOfAgreementAmendment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.BodyOfAgreementAmendment)
    MergeFrom(*source);
  }
}

void BodyOfAgreementAmendment::MergeFrom(const BodyOfAgreementAmendment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.BodyOfAgreementAmendment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amendments_.MergeFrom(from.amendments_);
  if (from.reftxid().size() > 0) {
    _internal_set_reftxid(from._internal_reftxid());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void BodyOfAgreementAmendment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.BodyOfAgreementAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyOfAgreementAmendment::CopyFrom(const BodyOfAgreementAmendment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.BodyOfAgreementAmendment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyOfAgreementAmendment::IsInitialized() const {
  return true;
}

void BodyOfAgreementAmendment::InternalSwap(BodyOfAgreementAmendment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amendments_.InternalSwap(&other->amendments_);
  reftxid_.Swap(&other->reftxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyOfAgreementAmendment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentDefinition::InitAsDefaultInstance() {
  ::actions::_InstrumentDefinition_default_instance_._instance.get_mutable()->transferfee_ = const_cast< ::actions::FeeField*>(
      ::actions::FeeField::internal_default_instance());
}
class InstrumentDefinition::_Internal {
 public:
  static const ::actions::FeeField& transferfee(const InstrumentDefinition* msg);
};

const ::actions::FeeField&
InstrumentDefinition::_Internal::transferfee(const InstrumentDefinition* msg) {
  return *msg->transferfee_;
}
InstrumentDefinition::InstrumentDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traderestrictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentDefinition)
}
InstrumentDefinition::InstrumentDefinition(const InstrumentDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traderestrictions_(from.traderestrictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumentpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentpermissions().empty()) {
    instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentpermissions(),
      GetArena());
  }
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentpayload().empty()) {
    instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentpayload(),
      GetArena());
  }
  if (from._internal_has_transferfee()) {
    transferfee_ = new ::actions::FeeField(*from.transferfee_);
  } else {
    transferfee_ = nullptr;
  }
  ::memcpy(&votemultiplier_, &from.votemultiplier_,
    static_cast<size_t>(reinterpret_cast<char*>(&instrumentmodificationgovernance_) -
    reinterpret_cast<char*>(&votemultiplier_)) + sizeof(instrumentmodificationgovernance_));
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentDefinition)
}

void InstrumentDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentDefinition_actions_2eproto.base);
  instrumentpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transferfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instrumentmodificationgovernance_) -
      reinterpret_cast<char*>(&transferfee_)) + sizeof(instrumentmodificationgovernance_));
}

InstrumentDefinition::~InstrumentDefinition() {
  // @@protoc_insertion_point(destructor:actions.InstrumentDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumentpermissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpayload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transferfee_;
}

void InstrumentDefinition::ArenaDtor(void* object) {
  InstrumentDefinition* _this = reinterpret_cast< InstrumentDefinition* >(object);
  (void)_this;
}
void InstrumentDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentDefinition& InstrumentDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentDefinition_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traderestrictions_.Clear();
  instrumentpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transferfee_ != nullptr) {
    delete transferfee_;
  }
  transferfee_ = nullptr;
  ::memset(&votemultiplier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&instrumentmodificationgovernance_) -
      reinterpret_cast<char*>(&votemultiplier_)) + sizeof(instrumentmodificationgovernance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes InstrumentPermissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumentpermissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EnforcementOrdersPermitted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enforcementorderspermitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool VotingRights = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          votingrights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VoteMultiplier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          votemultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AdministrationProposal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          administrationproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HolderProposal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          holderproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 InstrumentModificationGovernance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          instrumentmodificationgovernance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AuthorizedTokenQty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          authorizedtokenqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentDefinition.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentPayload = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_instrumentpayload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string TradeRestrictions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_traderestrictions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentDefinition.TradeRestrictions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // .actions.FeeField TransferFee = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_transferfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes InstrumentPermissions = 1;
  if (this->instrumentpermissions().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_instrumentpermissions(), target);
  }

  // bool EnforcementOrdersPermitted = 4;
  if (this->enforcementorderspermitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enforcementorderspermitted(), target);
  }

  // bool VotingRights = 5;
  if (this->votingrights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_votingrights(), target);
  }

  // uint32 VoteMultiplier = 6;
  if (this->votemultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_votemultiplier(), target);
  }

  // bool AdministrationProposal = 7;
  if (this->administrationproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_administrationproposal(), target);
  }

  // bool HolderProposal = 8;
  if (this->holderproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_holderproposal(), target);
  }

  // uint32 InstrumentModificationGovernance = 9;
  if (this->instrumentmodificationgovernance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_instrumentmodificationgovernance(), target);
  }

  // uint64 AuthorizedTokenQty = 10;
  if (this->authorizedtokenqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_authorizedtokenqty(), target);
  }

  // string InstrumentType = 11;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentDefinition.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentPayload = 12;
  if (this->instrumentpayload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_instrumentpayload(), target);
  }

  // repeated string TradeRestrictions = 13;
  for (int i = 0, n = this->_internal_traderestrictions_size(); i < n; i++) {
    const auto& s = this->_internal_traderestrictions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentDefinition.TradeRestrictions");
    target = stream->WriteString(13, s, target);
  }

  // .actions.FeeField TransferFee = 14;
  if (this->has_transferfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::transferfee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentDefinition)
  return target;
}

size_t InstrumentDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string TradeRestrictions = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(traderestrictions_.size());
  for (int i = 0, n = traderestrictions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      traderestrictions_.Get(i));
  }

  // bytes InstrumentPermissions = 1;
  if (this->instrumentpermissions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentpermissions());
  }

  // string InstrumentType = 11;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentPayload = 12;
  if (this->instrumentpayload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentpayload());
  }

  // .actions.FeeField TransferFee = 14;
  if (this->has_transferfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transferfee_);
  }

  // uint32 VoteMultiplier = 6;
  if (this->votemultiplier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_votemultiplier());
  }

  // bool EnforcementOrdersPermitted = 4;
  if (this->enforcementorderspermitted() != 0) {
    total_size += 1 + 1;
  }

  // bool VotingRights = 5;
  if (this->votingrights() != 0) {
    total_size += 1 + 1;
  }

  // bool AdministrationProposal = 7;
  if (this->administrationproposal() != 0) {
    total_size += 1 + 1;
  }

  // bool HolderProposal = 8;
  if (this->holderproposal() != 0) {
    total_size += 1 + 1;
  }

  // uint64 AuthorizedTokenQty = 10;
  if (this->authorizedtokenqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_authorizedtokenqty());
  }

  // uint32 InstrumentModificationGovernance = 9;
  if (this->instrumentmodificationgovernance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instrumentmodificationgovernance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentDefinition)
    MergeFrom(*source);
  }
}

void InstrumentDefinition::MergeFrom(const InstrumentDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traderestrictions_.MergeFrom(from.traderestrictions_);
  if (from.instrumentpermissions().size() > 0) {
    _internal_set_instrumentpermissions(from._internal_instrumentpermissions());
  }
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentpayload().size() > 0) {
    _internal_set_instrumentpayload(from._internal_instrumentpayload());
  }
  if (from.has_transferfee()) {
    _internal_mutable_transferfee()->::actions::FeeField::MergeFrom(from._internal_transferfee());
  }
  if (from.votemultiplier() != 0) {
    _internal_set_votemultiplier(from._internal_votemultiplier());
  }
  if (from.enforcementorderspermitted() != 0) {
    _internal_set_enforcementorderspermitted(from._internal_enforcementorderspermitted());
  }
  if (from.votingrights() != 0) {
    _internal_set_votingrights(from._internal_votingrights());
  }
  if (from.administrationproposal() != 0) {
    _internal_set_administrationproposal(from._internal_administrationproposal());
  }
  if (from.holderproposal() != 0) {
    _internal_set_holderproposal(from._internal_holderproposal());
  }
  if (from.authorizedtokenqty() != 0) {
    _internal_set_authorizedtokenqty(from._internal_authorizedtokenqty());
  }
  if (from.instrumentmodificationgovernance() != 0) {
    _internal_set_instrumentmodificationgovernance(from._internal_instrumentmodificationgovernance());
  }
}

void InstrumentDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentDefinition::CopyFrom(const InstrumentDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentDefinition::IsInitialized() const {
  return true;
}

void InstrumentDefinition::InternalSwap(InstrumentDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traderestrictions_.InternalSwap(&other->traderestrictions_);
  instrumentpermissions_.Swap(&other->instrumentpermissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpayload_.Swap(&other->instrumentpayload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentDefinition, instrumentmodificationgovernance_)
      + sizeof(InstrumentDefinition::instrumentmodificationgovernance_)
      - PROTOBUF_FIELD_OFFSET(InstrumentDefinition, transferfee_)>(
          reinterpret_cast<char*>(&transferfee_),
          reinterpret_cast<char*>(&other->transferfee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentCreation::InitAsDefaultInstance() {
  ::actions::_InstrumentCreation_default_instance_._instance.get_mutable()->transferfee_ = const_cast< ::actions::FeeField*>(
      ::actions::FeeField::internal_default_instance());
}
class InstrumentCreation::_Internal {
 public:
  static const ::actions::FeeField& transferfee(const InstrumentCreation* msg);
};

const ::actions::FeeField&
InstrumentCreation::_Internal::transferfee(const InstrumentCreation* msg) {
  return *msg->transferfee_;
}
InstrumentCreation::InstrumentCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traderestrictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentCreation)
}
InstrumentCreation::InstrumentCreation(const InstrumentCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traderestrictions_(from.traderestrictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  instrumentpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentpermissions().empty()) {
    instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentpermissions(),
      GetArena());
  }
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentpayload().empty()) {
    instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentpayload(),
      GetArena());
  }
  if (from._internal_has_transferfee()) {
    transferfee_ = new ::actions::FeeField(*from.transferfee_);
  } else {
    transferfee_ = nullptr;
  }
  ::memcpy(&instrumentindex_, &from.instrumentindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&instrumentindex_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentCreation)
}

void InstrumentCreation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentCreation_actions_2eproto.base);
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpermissions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transferfee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&transferfee_)) + sizeof(timestamp_));
}

InstrumentCreation::~InstrumentCreation() {
  // @@protoc_insertion_point(destructor:actions.InstrumentCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpermissions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentpayload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transferfee_;
}

void InstrumentCreation::ArenaDtor(void* object) {
  InstrumentCreation* _this = reinterpret_cast< InstrumentCreation* >(object);
  (void)_this;
}
void InstrumentCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentCreation& InstrumentCreation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentCreation_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traderestrictions_.Clear();
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && transferfee_ != nullptr) {
    delete transferfee_;
  }
  transferfee_ = nullptr;
  ::memset(&instrumentindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&instrumentindex_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes InstrumentCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 InstrumentIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          instrumentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentPermissions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrumentpermissions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EnforcementOrdersPermitted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enforcementorderspermitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool VotingRights = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          votingrights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VoteMultiplier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          votemultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool AdministrationProposal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          administrationproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool HolderProposal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          holderproposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 InstrumentModificationGovernance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          instrumentmodificationgovernance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 AuthorizedTokenQty = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          authorizedtokenqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentCreation.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentPayload = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_instrumentpayload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 InstrumentRevision = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          instrumentrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string TradeRestrictions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_traderestrictions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentCreation.TradeRestrictions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // .actions.FeeField TransferFee = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_transferfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes InstrumentCode = 1;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_instrumentcode(), target);
  }

  // uint64 InstrumentIndex = 2;
  if (this->instrumentindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_instrumentindex(), target);
  }

  // bytes InstrumentPermissions = 3;
  if (this->instrumentpermissions().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrumentpermissions(), target);
  }

  // bool EnforcementOrdersPermitted = 6;
  if (this->enforcementorderspermitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enforcementorderspermitted(), target);
  }

  // bool VotingRights = 7;
  if (this->votingrights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_votingrights(), target);
  }

  // uint32 VoteMultiplier = 8;
  if (this->votemultiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_votemultiplier(), target);
  }

  // bool AdministrationProposal = 9;
  if (this->administrationproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_administrationproposal(), target);
  }

  // bool HolderProposal = 10;
  if (this->holderproposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_holderproposal(), target);
  }

  // uint32 InstrumentModificationGovernance = 11;
  if (this->instrumentmodificationgovernance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_instrumentmodificationgovernance(), target);
  }

  // uint64 AuthorizedTokenQty = 12;
  if (this->authorizedtokenqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_authorizedtokenqty(), target);
  }

  // string InstrumentType = 13;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentCreation.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentPayload = 14;
  if (this->instrumentpayload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_instrumentpayload(), target);
  }

  // uint32 InstrumentRevision = 15;
  if (this->instrumentrevision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_instrumentrevision(), target);
  }

  // uint64 Timestamp = 16;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_timestamp(), target);
  }

  // repeated string TradeRestrictions = 17;
  for (int i = 0, n = this->_internal_traderestrictions_size(); i < n; i++) {
    const auto& s = this->_internal_traderestrictions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentCreation.TradeRestrictions");
    target = stream->WriteString(17, s, target);
  }

  // .actions.FeeField TransferFee = 18;
  if (this->has_transferfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::transferfee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentCreation)
  return target;
}

size_t InstrumentCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string TradeRestrictions = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(traderestrictions_.size());
  for (int i = 0, n = traderestrictions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      traderestrictions_.Get(i));
  }

  // bytes InstrumentCode = 1;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // bytes InstrumentPermissions = 3;
  if (this->instrumentpermissions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentpermissions());
  }

  // string InstrumentType = 13;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentPayload = 14;
  if (this->instrumentpayload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentpayload());
  }

  // .actions.FeeField TransferFee = 18;
  if (this->has_transferfee()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transferfee_);
  }

  // uint64 InstrumentIndex = 2;
  if (this->instrumentindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_instrumentindex());
  }

  // uint32 VoteMultiplier = 8;
  if (this->votemultiplier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_votemultiplier());
  }

  // bool EnforcementOrdersPermitted = 6;
  if (this->enforcementorderspermitted() != 0) {
    total_size += 1 + 1;
  }

  // bool VotingRights = 7;
  if (this->votingrights() != 0) {
    total_size += 1 + 1;
  }

  // bool AdministrationProposal = 9;
  if (this->administrationproposal() != 0) {
    total_size += 1 + 1;
  }

  // bool HolderProposal = 10;
  if (this->holderproposal() != 0) {
    total_size += 1 + 1;
  }

  // uint64 AuthorizedTokenQty = 12;
  if (this->authorizedtokenqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_authorizedtokenqty());
  }

  // uint32 InstrumentModificationGovernance = 11;
  if (this->instrumentmodificationgovernance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instrumentmodificationgovernance());
  }

  // uint32 InstrumentRevision = 15;
  if (this->instrumentrevision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instrumentrevision());
  }

  // uint64 Timestamp = 16;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentCreation)
    MergeFrom(*source);
  }
}

void InstrumentCreation::MergeFrom(const InstrumentCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traderestrictions_.MergeFrom(from.traderestrictions_);
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.instrumentpermissions().size() > 0) {
    _internal_set_instrumentpermissions(from._internal_instrumentpermissions());
  }
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentpayload().size() > 0) {
    _internal_set_instrumentpayload(from._internal_instrumentpayload());
  }
  if (from.has_transferfee()) {
    _internal_mutable_transferfee()->::actions::FeeField::MergeFrom(from._internal_transferfee());
  }
  if (from.instrumentindex() != 0) {
    _internal_set_instrumentindex(from._internal_instrumentindex());
  }
  if (from.votemultiplier() != 0) {
    _internal_set_votemultiplier(from._internal_votemultiplier());
  }
  if (from.enforcementorderspermitted() != 0) {
    _internal_set_enforcementorderspermitted(from._internal_enforcementorderspermitted());
  }
  if (from.votingrights() != 0) {
    _internal_set_votingrights(from._internal_votingrights());
  }
  if (from.administrationproposal() != 0) {
    _internal_set_administrationproposal(from._internal_administrationproposal());
  }
  if (from.holderproposal() != 0) {
    _internal_set_holderproposal(from._internal_holderproposal());
  }
  if (from.authorizedtokenqty() != 0) {
    _internal_set_authorizedtokenqty(from._internal_authorizedtokenqty());
  }
  if (from.instrumentmodificationgovernance() != 0) {
    _internal_set_instrumentmodificationgovernance(from._internal_instrumentmodificationgovernance());
  }
  if (from.instrumentrevision() != 0) {
    _internal_set_instrumentrevision(from._internal_instrumentrevision());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void InstrumentCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentCreation::CopyFrom(const InstrumentCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentCreation::IsInitialized() const {
  return true;
}

void InstrumentCreation::InternalSwap(InstrumentCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traderestrictions_.InternalSwap(&other->traderestrictions_);
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpermissions_.Swap(&other->instrumentpermissions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentpayload_.Swap(&other->instrumentpayload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentCreation, timestamp_)
      + sizeof(InstrumentCreation::timestamp_)
      - PROTOBUF_FIELD_OFFSET(InstrumentCreation, transferfee_)>(
          reinterpret_cast<char*>(&transferfee_),
          reinterpret_cast<char*>(&other->transferfee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentModification::InitAsDefaultInstance() {
}
class InstrumentModification::_Internal {
 public:
};

InstrumentModification::InstrumentModification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amendments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentModification)
}
InstrumentModification::InstrumentModification(const InstrumentModification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amendments_(from.amendments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reftxid().empty()) {
    reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reftxid(),
      GetArena());
  }
  instrumentrevision_ = from.instrumentrevision_;
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentModification)
}

void InstrumentModification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentModification_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reftxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentrevision_ = 0u;
}

InstrumentModification::~InstrumentModification() {
  // @@protoc_insertion_point(destructor:actions.InstrumentModification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentModification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reftxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentModification::ArenaDtor(void* object) {
  InstrumentModification* _this = reinterpret_cast< InstrumentModification* >(object);
  (void)_this;
}
void InstrumentModification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentModification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentModification& InstrumentModification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentModification_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentModification::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentModification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amendments_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentrevision_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentModification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentModification.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 InstrumentRevision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          instrumentrevision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AmendmentField Amendments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes RefTxID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reftxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentModification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentModification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentModification.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_instrumentcode(), target);
  }

  // uint32 InstrumentRevision = 3;
  if (this->instrumentrevision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_instrumentrevision(), target);
  }

  // repeated .actions.AmendmentField Amendments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_amendments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_amendments(i), target, stream);
  }

  // bytes RefTxID = 5;
  if (this->reftxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_reftxid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentModification)
  return target;
}

size_t InstrumentModification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentModification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AmendmentField Amendments = 4;
  total_size += 1UL * this->_internal_amendments_size();
  for (const auto& msg : this->amendments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // bytes RefTxID = 5;
  if (this->reftxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_reftxid());
  }

  // uint32 InstrumentRevision = 3;
  if (this->instrumentrevision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_instrumentrevision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentModification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentModification)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentModification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentModification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentModification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentModification)
    MergeFrom(*source);
  }
}

void InstrumentModification::MergeFrom(const InstrumentModification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentModification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amendments_.MergeFrom(from.amendments_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.reftxid().size() > 0) {
    _internal_set_reftxid(from._internal_reftxid());
  }
  if (from.instrumentrevision() != 0) {
    _internal_set_instrumentrevision(from._internal_instrumentrevision());
  }
}

void InstrumentModification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentModification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentModification::CopyFrom(const InstrumentModification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentModification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentModification::IsInitialized() const {
  return true;
}

void InstrumentModification::InternalSwap(InstrumentModification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amendments_.InternalSwap(&other->amendments_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reftxid_.Swap(&other->reftxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(instrumentrevision_, other->instrumentrevision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentModification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transfer::InitAsDefaultInstance() {
}
class Transfer::_Internal {
 public:
};

Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instruments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instruments_(from.instruments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchangefeeaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchangefeeaddress().empty()) {
    exchangefeeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchangefeeaddress(),
      GetArena());
  }
  ::memcpy(&offerexpiry_, &from.offerexpiry_,
    static_cast<size_t>(reinterpret_cast<char*>(&exchangefee_) -
    reinterpret_cast<char*>(&offerexpiry_)) + sizeof(exchangefee_));
  // @@protoc_insertion_point(copy_constructor:actions.Transfer)
}

void Transfer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transfer_actions_2eproto.base);
  exchangefeeaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&offerexpiry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchangefee_) -
      reinterpret_cast<char*>(&offerexpiry_)) + sizeof(exchangefee_));
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:actions.Transfer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transfer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exchangefeeaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transfer::ArenaDtor(void* object) {
  Transfer* _this = reinterpret_cast< Transfer* >(object);
  (void)_this;
}
void Transfer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transfer& Transfer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transfer_actions_2eproto.base);
  return *internal_default_instance();
}


void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruments_.Clear();
  exchangefeeaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&offerexpiry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exchangefee_) -
      reinterpret_cast<char*>(&offerexpiry_)) + sizeof(exchangefee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .actions.InstrumentTransferField Instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 OfferExpiry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offerexpiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ExchangeFee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exchangefee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ExchangeFeeAddress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchangefeeaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transfer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Transfer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .actions.InstrumentTransferField Instruments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instruments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instruments(i), target, stream);
  }

  // uint64 OfferExpiry = 2;
  if (this->offerexpiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_offerexpiry(), target);
  }

  // uint64 ExchangeFee = 3;
  if (this->exchangefee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_exchangefee(), target);
  }

  // bytes ExchangeFeeAddress = 4;
  if (this->exchangefeeaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_exchangefeeaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Transfer)
  return target;
}

size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Transfer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.InstrumentTransferField Instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes ExchangeFeeAddress = 4;
  if (this->exchangefeeaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_exchangefeeaddress());
  }

  // uint64 OfferExpiry = 2;
  if (this->offerexpiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_offerexpiry());
  }

  // uint64 ExchangeFee = 3;
  if (this->exchangefee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_exchangefee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transfer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  const Transfer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transfer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Transfer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Transfer)
    MergeFrom(*source);
  }
}

void Transfer::MergeFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Transfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instruments_.MergeFrom(from.instruments_);
  if (from.exchangefeeaddress().size() > 0) {
    _internal_set_exchangefeeaddress(from._internal_exchangefeeaddress());
  }
  if (from.offerexpiry() != 0) {
    _internal_set_offerexpiry(from._internal_offerexpiry());
  }
  if (from.exchangefee() != 0) {
    _internal_set_exchangefee(from._internal_exchangefee());
  }
}

void Transfer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instruments_.InternalSwap(&other->instruments_);
  exchangefeeaddress_.Swap(&other->exchangefeeaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, exchangefee_)
      + sizeof(Transfer::exchangefee_)
      - PROTOBUF_FIELD_OFFSET(Transfer, offerexpiry_)>(
          reinterpret_cast<char*>(&offerexpiry_),
          reinterpret_cast<char*>(&other->offerexpiry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Settlement::InitAsDefaultInstance() {
}
class Settlement::_Internal {
 public:
};

Settlement::Settlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instruments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Settlement)
}
Settlement::Settlement(const Settlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instruments_(from.instruments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.Settlement)
}

void Settlement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Settlement_actions_2eproto.base);
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Settlement::~Settlement() {
  // @@protoc_insertion_point(destructor:actions.Settlement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Settlement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Settlement::ArenaDtor(void* object) {
  Settlement* _this = reinterpret_cast< Settlement* >(object);
  (void)_this;
}
void Settlement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Settlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Settlement& Settlement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Settlement_actions_2eproto.base);
  return *internal_default_instance();
}


void Settlement::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Settlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruments_.Clear();
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Settlement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .actions.InstrumentSettlementField Instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Settlement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Settlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .actions.InstrumentSettlementField Instruments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instruments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instruments(i), target, stream);
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Settlement)
  return target;
}

size_t Settlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Settlement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.InstrumentSettlementField Instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settlement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Settlement)
  GOOGLE_DCHECK_NE(&from, this);
  const Settlement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Settlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Settlement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Settlement)
    MergeFrom(*source);
  }
}

void Settlement::MergeFrom(const Settlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Settlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instruments_.MergeFrom(from.instruments_);
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Settlement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Settlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settlement::CopyFrom(const Settlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Settlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settlement::IsInitialized() const {
  return true;
}

void Settlement::InternalSwap(Settlement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instruments_.InternalSwap(&other->instruments_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Settlement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RectificationSettlement::InitAsDefaultInstance() {
  ::actions::_RectificationSettlement_default_instance_._instance.get_mutable()->transfer_ = const_cast< ::actions::ReferenceTransactionField*>(
      ::actions::ReferenceTransactionField::internal_default_instance());
}
class RectificationSettlement::_Internal {
 public:
  static const ::actions::ReferenceTransactionField& transfer(const RectificationSettlement* msg);
};

const ::actions::ReferenceTransactionField&
RectificationSettlement::_Internal::transfer(const RectificationSettlement* msg) {
  return *msg->transfer_;
}
RectificationSettlement::RectificationSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instruments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.RectificationSettlement)
}
RectificationSettlement::RectificationSettlement(const RectificationSettlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instruments_(from.instruments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transfer()) {
    transfer_ = new ::actions::ReferenceTransactionField(*from.transfer_);
  } else {
    transfer_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.RectificationSettlement)
}

void RectificationSettlement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RectificationSettlement_actions_2eproto.base);
  ::memset(&transfer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&transfer_)) + sizeof(timestamp_));
}

RectificationSettlement::~RectificationSettlement() {
  // @@protoc_insertion_point(destructor:actions.RectificationSettlement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RectificationSettlement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transfer_;
}

void RectificationSettlement::ArenaDtor(void* object) {
  RectificationSettlement* _this = reinterpret_cast< RectificationSettlement* >(object);
  (void)_this;
}
void RectificationSettlement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RectificationSettlement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RectificationSettlement& RectificationSettlement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RectificationSettlement_actions_2eproto.base);
  return *internal_default_instance();
}


void RectificationSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.RectificationSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruments_.Clear();
  if (GetArena() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectificationSettlement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .actions.ReferenceTransactionField Transfer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.InstrumentSettlementField Instruments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RectificationSettlement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.RectificationSettlement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .actions.ReferenceTransactionField Transfer = 1;
  if (this->has_transfer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::transfer(this), target, stream);
  }

  // repeated .actions.InstrumentSettlementField Instruments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instruments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_instruments(i), target, stream);
  }

  // uint64 Timestamp = 3;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.RectificationSettlement)
  return target;
}

size_t RectificationSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.RectificationSettlement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.InstrumentSettlementField Instruments = 2;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .actions.ReferenceTransactionField Transfer = 1;
  if (this->has_transfer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transfer_);
  }

  // uint64 Timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RectificationSettlement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.RectificationSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  const RectificationSettlement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RectificationSettlement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.RectificationSettlement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.RectificationSettlement)
    MergeFrom(*source);
  }
}

void RectificationSettlement::MergeFrom(const RectificationSettlement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.RectificationSettlement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instruments_.MergeFrom(from.instruments_);
  if (from.has_transfer()) {
    _internal_mutable_transfer()->::actions::ReferenceTransactionField::MergeFrom(from._internal_transfer());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void RectificationSettlement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.RectificationSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectificationSettlement::CopyFrom(const RectificationSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.RectificationSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectificationSettlement::IsInitialized() const {
  return true;
}

void RectificationSettlement::InternalSwap(RectificationSettlement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instruments_.InternalSwap(&other->instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectificationSettlement, timestamp_)
      + sizeof(RectificationSettlement::timestamp_)
      - PROTOBUF_FIELD_OFFSET(RectificationSettlement, transfer_)>(
          reinterpret_cast<char*>(&transfer_),
          reinterpret_cast<char*>(&other->transfer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectificationSettlement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
}
class Proposal::_Internal {
 public:
};

Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposedamendments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposedamendments_(from.proposedamendments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  voteoptions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voteoptions().empty()) {
    voteoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_voteoptions(),
      GetArena());
  }
  proposaldescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposaldescription().empty()) {
    proposaldescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposaldescription(),
      GetArena());
  }
  proposaldocumenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposaldocumenthash().empty()) {
    proposaldocumenthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_proposaldocumenthash(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&votemax_) -
    reinterpret_cast<char*>(&type_)) + sizeof(votemax_));
  // @@protoc_insertion_point(copy_constructor:actions.Proposal)
}

void Proposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proposal_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voteoptions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposaldescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposaldocumenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votemax_) -
      reinterpret_cast<char*>(&type_)) + sizeof(votemax_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:actions.Proposal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proposal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  voteoptions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposaldescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposaldocumenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proposal::ArenaDtor(void* object) {
  Proposal* _this = reinterpret_cast< Proposal* >(object);
  (void)_this;
}
void Proposal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proposal_actions_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposedamendments_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  voteoptions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposaldescription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposaldocumenthash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votemax_) -
      reinterpret_cast<char*>(&type_)) + sizeof(votemax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Proposal.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VoteSystem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          votesystem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AmendmentField ProposedAmendments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposedamendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // string VoteOptions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_voteoptions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Proposal.VoteOptions"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 VoteMax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          votemax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ProposalDescription = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_proposaldescription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Proposal.ProposalDescription"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ProposalDocumentHash = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_proposaldocumenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 VoteCutOffTimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          votecutofftimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Proposal.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrumentcode(), target);
  }

  // uint32 VoteSystem = 4;
  if (this->votesystem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_votesystem(), target);
  }

  // repeated .actions.AmendmentField ProposedAmendments = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposedamendments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_proposedamendments(i), target, stream);
  }

  // string VoteOptions = 6;
  if (this->voteoptions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voteoptions().data(), static_cast<int>(this->_internal_voteoptions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Proposal.VoteOptions");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_voteoptions(), target);
  }

  // uint32 VoteMax = 7;
  if (this->votemax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_votemax(), target);
  }

  // string ProposalDescription = 8;
  if (this->proposaldescription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposaldescription().data(), static_cast<int>(this->_internal_proposaldescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Proposal.ProposalDescription");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_proposaldescription(), target);
  }

  // bytes ProposalDocumentHash = 9;
  if (this->proposaldocumenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_proposaldocumenthash(), target);
  }

  // uint64 VoteCutOffTimestamp = 10;
  if (this->votecutofftimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_votecutofftimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Proposal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AmendmentField ProposedAmendments = 5;
  total_size += 1UL * this->_internal_proposedamendments_size();
  for (const auto& msg : this->proposedamendments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // string VoteOptions = 6;
  if (this->voteoptions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voteoptions());
  }

  // string ProposalDescription = 8;
  if (this->proposaldescription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposaldescription());
  }

  // bytes ProposalDocumentHash = 9;
  if (this->proposaldocumenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_proposaldocumenthash());
  }

  // uint32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 VoteSystem = 4;
  if (this->votesystem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_votesystem());
  }

  // uint64 VoteCutOffTimestamp = 10;
  if (this->votecutofftimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_votecutofftimestamp());
  }

  // uint32 VoteMax = 7;
  if (this->votemax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_votemax());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Proposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposedamendments_.MergeFrom(from.proposedamendments_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.voteoptions().size() > 0) {
    _internal_set_voteoptions(from._internal_voteoptions());
  }
  if (from.proposaldescription().size() > 0) {
    _internal_set_proposaldescription(from._internal_proposaldescription());
  }
  if (from.proposaldocumenthash().size() > 0) {
    _internal_set_proposaldocumenthash(from._internal_proposaldocumenthash());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.votesystem() != 0) {
    _internal_set_votesystem(from._internal_votesystem());
  }
  if (from.votecutofftimestamp() != 0) {
    _internal_set_votecutofftimestamp(from._internal_votecutofftimestamp());
  }
  if (from.votemax() != 0) {
    _internal_set_votemax(from._internal_votemax());
  }
}

void Proposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposedamendments_.InternalSwap(&other->proposedamendments_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  voteoptions_.Swap(&other->voteoptions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposaldescription_.Swap(&other->proposaldescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  proposaldocumenthash_.Swap(&other->proposaldocumenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, votemax_)
      + sizeof(Proposal::votemax_)
      - PROTOBUF_FIELD_OFFSET(Proposal, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vote::InitAsDefaultInstance() {
}
class Vote::_Internal {
 public:
};

Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.Vote)
}

void Vote::SharedCtor() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:actions.Vote)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vote::ArenaDtor(void* object) {
  Vote* _this = reinterpret_cast< Vote* >(object);
  (void)_this;
}
void Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vote_actions_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BallotCast::InitAsDefaultInstance() {
}
class BallotCast::_Internal {
 public:
};

BallotCast::BallotCast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.BallotCast)
}
BallotCast::BallotCast(const BallotCast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_votetxid().empty()) {
    votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_votetxid(),
      GetArena());
  }
  vote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote().empty()) {
    vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vote(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.BallotCast)
}

void BallotCast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BallotCast_actions_2eproto.base);
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BallotCast::~BallotCast() {
  // @@protoc_insertion_point(destructor:actions.BallotCast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BallotCast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  votetxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BallotCast::ArenaDtor(void* object) {
  BallotCast* _this = reinterpret_cast< BallotCast* >(object);
  (void)_this;
}
void BallotCast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BallotCast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallotCast& BallotCast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BallotCast_actions_2eproto.base);
  return *internal_default_instance();
}


void BallotCast::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.BallotCast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BallotCast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes VoteTxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_votetxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.BallotCast.Vote"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BallotCast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.BallotCast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes VoteTxId = 1;
  if (this->votetxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_votetxid(), target);
  }

  // string Vote = 2;
  if (this->vote().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote().data(), static_cast<int>(this->_internal_vote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.BallotCast.Vote");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vote(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.BallotCast)
  return target;
}

size_t BallotCast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.BallotCast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes VoteTxId = 1;
  if (this->votetxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_votetxid());
  }

  // string Vote = 2;
  if (this->vote().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallotCast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.BallotCast)
  GOOGLE_DCHECK_NE(&from, this);
  const BallotCast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BallotCast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.BallotCast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.BallotCast)
    MergeFrom(*source);
  }
}

void BallotCast::MergeFrom(const BallotCast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.BallotCast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.votetxid().size() > 0) {
    _internal_set_votetxid(from._internal_votetxid());
  }
  if (from.vote().size() > 0) {
    _internal_set_vote(from._internal_vote());
  }
}

void BallotCast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.BallotCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallotCast::CopyFrom(const BallotCast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.BallotCast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallotCast::IsInitialized() const {
  return true;
}

void BallotCast::InternalSwap(BallotCast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votetxid_.Swap(&other->votetxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vote_.Swap(&other->vote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BallotCast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BallotCounted::InitAsDefaultInstance() {
}
class BallotCounted::_Internal {
 public:
};

BallotCounted::BallotCounted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.BallotCounted)
}
BallotCounted::BallotCounted(const BallotCounted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_votetxid().empty()) {
    votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_votetxid(),
      GetArena());
  }
  vote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote().empty()) {
    vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vote(),
      GetArena());
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:actions.BallotCounted)
}

void BallotCounted::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BallotCounted_actions_2eproto.base);
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(timestamp_));
}

BallotCounted::~BallotCounted() {
  // @@protoc_insertion_point(destructor:actions.BallotCounted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BallotCounted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  votetxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BallotCounted::ArenaDtor(void* object) {
  BallotCounted* _this = reinterpret_cast< BallotCounted* >(object);
  (void)_this;
}
void BallotCounted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BallotCounted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BallotCounted& BallotCounted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BallotCounted_actions_2eproto.base);
  return *internal_default_instance();
}


void BallotCounted::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.BallotCounted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BallotCounted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes VoteTxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_votetxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Vote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_vote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.BallotCounted.Vote"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BallotCounted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.BallotCounted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes VoteTxId = 1;
  if (this->votetxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_votetxid(), target);
  }

  // string Vote = 2;
  if (this->vote().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote().data(), static_cast<int>(this->_internal_vote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.BallotCounted.Vote");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vote(), target);
  }

  // uint64 Quantity = 3;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_quantity(), target);
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.BallotCounted)
  return target;
}

size_t BallotCounted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.BallotCounted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes VoteTxId = 1;
  if (this->votetxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_votetxid());
  }

  // string Vote = 2;
  if (this->vote().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote());
  }

  // uint64 Quantity = 3;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BallotCounted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.BallotCounted)
  GOOGLE_DCHECK_NE(&from, this);
  const BallotCounted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BallotCounted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.BallotCounted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.BallotCounted)
    MergeFrom(*source);
  }
}

void BallotCounted::MergeFrom(const BallotCounted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.BallotCounted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.votetxid().size() > 0) {
    _internal_set_votetxid(from._internal_votetxid());
  }
  if (from.vote().size() > 0) {
    _internal_set_vote(from._internal_vote());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void BallotCounted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.BallotCounted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallotCounted::CopyFrom(const BallotCounted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.BallotCounted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallotCounted::IsInitialized() const {
  return true;
}

void BallotCounted::InternalSwap(BallotCounted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  votetxid_.Swap(&other->votetxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vote_.Swap(&other->vote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BallotCounted, timestamp_)
      + sizeof(BallotCounted::timestamp_)
      - PROTOBUF_FIELD_OFFSET(BallotCounted, quantity_)>(
          reinterpret_cast<char*>(&quantity_),
          reinterpret_cast<char*>(&other->quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BallotCounted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Result::InitAsDefaultInstance() {
}
class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proposedamendments_(arena),
  optiontally_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposedamendments_(from.proposedamendments_),
      optiontally_(from.optiontally_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_votetxid().empty()) {
    votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_votetxid(),
      GetArena());
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_result(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.Result)
}

void Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Result_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  votetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:actions.Result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  votetxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Result::ArenaDtor(void* object) {
  Result* _this = reinterpret_cast< Result* >(object);
  (void)_this;
}
void Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Result& Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Result_actions_2eproto.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposedamendments_.Clear();
  optiontally_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Result.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AmendmentField ProposedAmendments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposedamendments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes VoteTxId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_votetxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 OptionTally = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_optiontally(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_optiontally(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Result = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Result.Result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Result.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.AmendmentField ProposedAmendments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proposedamendments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_proposedamendments(i), target, stream);
  }

  // bytes VoteTxId = 4;
  if (this->votetxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_votetxid(), target);
  }

  // repeated uint64 OptionTally = 5;
  {
    int byte_size = _optiontally_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_optiontally(), byte_size, target);
    }
  }

  // string Result = 6;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Result.Result");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_result(), target);
  }

  // uint64 Timestamp = 7;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AmendmentField ProposedAmendments = 3;
  total_size += 1UL * this->_internal_proposedamendments_size();
  for (const auto& msg : this->proposedamendments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 OptionTally = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->optiontally_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _optiontally_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // bytes VoteTxId = 4;
  if (this->votetxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_votetxid());
  }

  // string Result = 6;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // uint64 Timestamp = 7;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proposedamendments_.MergeFrom(from.proposedamendments_);
  optiontally_.MergeFrom(from.optiontally_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.votetxid().size() > 0) {
    _internal_set_votetxid(from._internal_votetxid());
  }
  if (from.result().size() > 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  proposedamendments_.InternalSwap(&other->proposedamendments_);
  optiontally_.InternalSwap(&other->optiontally_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  votetxid_.Swap(&other->votetxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Order::InitAsDefaultInstance() {
}
class Order::_Internal {
 public:
};

Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targetaddresses_(arena),
  bitcoindispersions_(arena),
  referencetransactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targetaddresses_(from.targetaddresses_),
      bitcoindispersions_(from.bitcoindispersions_),
      referencetransactions_(from.referencetransactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  complianceaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_complianceaction().empty()) {
    complianceaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_complianceaction(),
      GetArena());
  }
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  freezetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_freezetxid().empty()) {
    freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_freezetxid(),
      GetArena());
  }
  depositaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_depositaddress().empty()) {
    depositaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_depositaddress(),
      GetArena());
  }
  authorityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authorityname().empty()) {
    authorityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_authorityname(),
      GetArena());
  }
  authoritypublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_authoritypublickey().empty()) {
    authoritypublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_authoritypublickey(),
      GetArena());
  }
  ordersignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordersignature().empty()) {
    ordersignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordersignature(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  supportingevidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supportingevidence().empty()) {
    supportingevidence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_supportingevidence(),
      GetArena());
  }
  ::memcpy(&freezeperiod_, &from.freezeperiod_,
    static_cast<size_t>(reinterpret_cast<char*>(&supportingevidenceformat_) -
    reinterpret_cast<char*>(&freezeperiod_)) + sizeof(supportingevidenceformat_));
  // @@protoc_insertion_point(copy_constructor:actions.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_actions_2eproto.base);
  complianceaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  freezetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depositaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authorityname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authoritypublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordersignature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportingevidence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&freezeperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supportingevidenceformat_) -
      reinterpret_cast<char*>(&freezeperiod_)) + sizeof(supportingevidenceformat_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:actions.Order)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  complianceaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  freezetxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  depositaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authorityname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  authoritypublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordersignature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supportingevidence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Order::ArenaDtor(void* object) {
  Order* _this = reinterpret_cast< Order* >(object);
  (void)_this;
}
void Order::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_actions_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetaddresses_.Clear();
  bitcoindispersions_.Clear();
  referencetransactions_.Clear();
  complianceaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  freezetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  depositaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authorityname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authoritypublickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordersignature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  supportingevidence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&freezeperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supportingevidenceformat_) -
      reinterpret_cast<char*>(&freezeperiod_)) + sizeof(supportingevidenceformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ComplianceAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_complianceaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Order.ComplianceAction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Order.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.TargetAddressField TargetAddresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targetaddresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes FreezeTxId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_freezetxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 FreezePeriod = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          freezeperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes DepositAddress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_depositaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string AuthorityName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_authorityname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Order.AuthorityName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes AuthorityPublicKey = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_authoritypublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SignatureAlgorithm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          signaturealgorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OrderSignature = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_ordersignature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField BitcoinDispersions = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bitcoindispersions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string Message = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Order.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SupportingEvidenceFormat = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          supportingevidenceformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes SupportingEvidence = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_supportingevidence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.ReferenceTransactionField ReferenceTransactions = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_referencetransactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ComplianceAction = 1;
  if (this->complianceaction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_complianceaction().data(), static_cast<int>(this->_internal_complianceaction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Order.ComplianceAction");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_complianceaction(), target);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Order.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.TargetAddressField TargetAddresses = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targetaddresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_targetaddresses(i), target, stream);
  }

  // bytes FreezeTxId = 5;
  if (this->freezetxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_freezetxid(), target);
  }

  // uint64 FreezePeriod = 6;
  if (this->freezeperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_freezeperiod(), target);
  }

  // bytes DepositAddress = 7;
  if (this->depositaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_depositaddress(), target);
  }

  // string AuthorityName = 8;
  if (this->authorityname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authorityname().data(), static_cast<int>(this->_internal_authorityname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Order.AuthorityName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_authorityname(), target);
  }

  // bytes AuthorityPublicKey = 9;
  if (this->authoritypublickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_authoritypublickey(), target);
  }

  // uint32 SignatureAlgorithm = 10;
  if (this->signaturealgorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_signaturealgorithm(), target);
  }

  // bytes OrderSignature = 11;
  if (this->ordersignature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_ordersignature(), target);
  }

  // repeated .actions.QuantityIndexField BitcoinDispersions = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bitcoindispersions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_bitcoindispersions(i), target, stream);
  }

  // string Message = 15;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Order.Message");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_message(), target);
  }

  // uint32 SupportingEvidenceFormat = 16;
  if (this->supportingevidenceformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_supportingevidenceformat(), target);
  }

  // bytes SupportingEvidence = 17;
  if (this->supportingevidence().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_supportingevidence(), target);
  }

  // repeated .actions.ReferenceTransactionField ReferenceTransactions = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_referencetransactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_referencetransactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.TargetAddressField TargetAddresses = 4;
  total_size += 1UL * this->_internal_targetaddresses_size();
  for (const auto& msg : this->targetaddresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.QuantityIndexField BitcoinDispersions = 14;
  total_size += 1UL * this->_internal_bitcoindispersions_size();
  for (const auto& msg : this->bitcoindispersions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.ReferenceTransactionField ReferenceTransactions = 18;
  total_size += 2UL * this->_internal_referencetransactions_size();
  for (const auto& msg : this->referencetransactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ComplianceAction = 1;
  if (this->complianceaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_complianceaction());
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // bytes FreezeTxId = 5;
  if (this->freezetxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_freezetxid());
  }

  // bytes DepositAddress = 7;
  if (this->depositaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_depositaddress());
  }

  // string AuthorityName = 8;
  if (this->authorityname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authorityname());
  }

  // bytes AuthorityPublicKey = 9;
  if (this->authoritypublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_authoritypublickey());
  }

  // bytes OrderSignature = 11;
  if (this->ordersignature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ordersignature());
  }

  // string Message = 15;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes SupportingEvidence = 17;
  if (this->supportingevidence().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_supportingevidence());
  }

  // uint64 FreezePeriod = 6;
  if (this->freezeperiod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_freezeperiod());
  }

  // uint32 SignatureAlgorithm = 10;
  if (this->signaturealgorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_signaturealgorithm());
  }

  // uint32 SupportingEvidenceFormat = 16;
  if (this->supportingevidenceformat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_supportingevidenceformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targetaddresses_.MergeFrom(from.targetaddresses_);
  bitcoindispersions_.MergeFrom(from.bitcoindispersions_);
  referencetransactions_.MergeFrom(from.referencetransactions_);
  if (from.complianceaction().size() > 0) {
    _internal_set_complianceaction(from._internal_complianceaction());
  }
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.freezetxid().size() > 0) {
    _internal_set_freezetxid(from._internal_freezetxid());
  }
  if (from.depositaddress().size() > 0) {
    _internal_set_depositaddress(from._internal_depositaddress());
  }
  if (from.authorityname().size() > 0) {
    _internal_set_authorityname(from._internal_authorityname());
  }
  if (from.authoritypublickey().size() > 0) {
    _internal_set_authoritypublickey(from._internal_authoritypublickey());
  }
  if (from.ordersignature().size() > 0) {
    _internal_set_ordersignature(from._internal_ordersignature());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.supportingevidence().size() > 0) {
    _internal_set_supportingevidence(from._internal_supportingevidence());
  }
  if (from.freezeperiod() != 0) {
    _internal_set_freezeperiod(from._internal_freezeperiod());
  }
  if (from.signaturealgorithm() != 0) {
    _internal_set_signaturealgorithm(from._internal_signaturealgorithm());
  }
  if (from.supportingevidenceformat() != 0) {
    _internal_set_supportingevidenceformat(from._internal_supportingevidenceformat());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targetaddresses_.InternalSwap(&other->targetaddresses_);
  bitcoindispersions_.InternalSwap(&other->bitcoindispersions_);
  referencetransactions_.InternalSwap(&other->referencetransactions_);
  complianceaction_.Swap(&other->complianceaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  freezetxid_.Swap(&other->freezetxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  depositaddress_.Swap(&other->depositaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authorityname_.Swap(&other->authorityname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  authoritypublickey_.Swap(&other->authoritypublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ordersignature_.Swap(&other->ordersignature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  supportingevidence_.Swap(&other->supportingevidence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, supportingevidenceformat_)
      + sizeof(Order::supportingevidenceformat_)
      - PROTOBUF_FIELD_OFFSET(Order, freezeperiod_)>(
          reinterpret_cast<char*>(&freezeperiod_),
          reinterpret_cast<char*>(&other->freezeperiod_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Freeze::InitAsDefaultInstance() {
}
class Freeze::_Internal {
 public:
};

Freeze::Freeze(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quantities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Freeze)
}
Freeze::Freeze(const Freeze& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quantities_(from.quantities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  ::memcpy(&freezeperiod_, &from.freezeperiod_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&freezeperiod_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:actions.Freeze)
}

void Freeze::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Freeze_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&freezeperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&freezeperiod_)) + sizeof(timestamp_));
}

Freeze::~Freeze() {
  // @@protoc_insertion_point(destructor:actions.Freeze)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Freeze::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Freeze::ArenaDtor(void* object) {
  Freeze* _this = reinterpret_cast< Freeze* >(object);
  (void)_this;
}
void Freeze::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Freeze::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Freeze& Freeze::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Freeze_actions_2eproto.base);
  return *internal_default_instance();
}


void Freeze::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Freeze)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantities_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&freezeperiod_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&freezeperiod_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Freeze::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Freeze.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField Quantities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 FreezePeriod = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          freezeperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Freeze::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Freeze)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Freeze.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.QuantityIndexField Quantities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_quantities(i), target, stream);
  }

  // uint64 FreezePeriod = 4;
  if (this->freezeperiod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_freezeperiod(), target);
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Freeze)
  return target;
}

size_t Freeze::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Freeze)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.QuantityIndexField Quantities = 3;
  total_size += 1UL * this->_internal_quantities_size();
  for (const auto& msg : this->quantities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // uint64 FreezePeriod = 4;
  if (this->freezeperiod() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_freezeperiod());
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Freeze::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Freeze)
  GOOGLE_DCHECK_NE(&from, this);
  const Freeze* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Freeze>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Freeze)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Freeze)
    MergeFrom(*source);
  }
}

void Freeze::MergeFrom(const Freeze& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Freeze)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantities_.MergeFrom(from.quantities_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.freezeperiod() != 0) {
    _internal_set_freezeperiod(from._internal_freezeperiod());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Freeze::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Freeze)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Freeze::CopyFrom(const Freeze& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Freeze)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Freeze::IsInitialized() const {
  return true;
}

void Freeze::InternalSwap(Freeze* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quantities_.InternalSwap(&other->quantities_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Freeze, timestamp_)
      + sizeof(Freeze::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Freeze, freezeperiod_)>(
          reinterpret_cast<char*>(&freezeperiod_),
          reinterpret_cast<char*>(&other->freezeperiod_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Freeze::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Thaw::InitAsDefaultInstance() {
}
class Thaw::_Internal {
 public:
};

Thaw::Thaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Thaw)
}
Thaw::Thaw(const Thaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  freezetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_freezetxid().empty()) {
    freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_freezetxid(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.Thaw)
}

void Thaw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Thaw_actions_2eproto.base);
  freezetxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Thaw::~Thaw() {
  // @@protoc_insertion_point(destructor:actions.Thaw)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Thaw::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  freezetxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Thaw::ArenaDtor(void* object) {
  Thaw* _this = reinterpret_cast< Thaw* >(object);
  (void)_this;
}
void Thaw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Thaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Thaw& Thaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Thaw_actions_2eproto.base);
  return *internal_default_instance();
}


void Thaw::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Thaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freezetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Thaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes FreezeTxId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_freezetxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Thaw::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Thaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FreezeTxId = 1;
  if (this->freezetxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_freezetxid(), target);
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Thaw)
  return target;
}

size_t Thaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Thaw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FreezeTxId = 1;
  if (this->freezetxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_freezetxid());
  }

  // uint64 Timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Thaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Thaw)
  GOOGLE_DCHECK_NE(&from, this);
  const Thaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Thaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Thaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Thaw)
    MergeFrom(*source);
  }
}

void Thaw::MergeFrom(const Thaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Thaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.freezetxid().size() > 0) {
    _internal_set_freezetxid(from._internal_freezetxid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Thaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Thaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thaw::CopyFrom(const Thaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Thaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thaw::IsInitialized() const {
  return true;
}

void Thaw::InternalSwap(Thaw* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  freezetxid_.Swap(&other->freezetxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Thaw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Confiscation::InitAsDefaultInstance() {
}
class Confiscation::_Internal {
 public:
};

Confiscation::Confiscation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quantities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Confiscation)
}
Confiscation::Confiscation(const Confiscation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quantities_(from.quantities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  ::memcpy(&depositqty_, &from.depositqty_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&depositqty_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:actions.Confiscation)
}

void Confiscation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Confiscation_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&depositqty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&depositqty_)) + sizeof(timestamp_));
}

Confiscation::~Confiscation() {
  // @@protoc_insertion_point(destructor:actions.Confiscation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Confiscation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Confiscation::ArenaDtor(void* object) {
  Confiscation* _this = reinterpret_cast< Confiscation* >(object);
  (void)_this;
}
void Confiscation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Confiscation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Confiscation& Confiscation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Confiscation_actions_2eproto.base);
  return *internal_default_instance();
}


void Confiscation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Confiscation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantities_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&depositqty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&depositqty_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Confiscation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Confiscation.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField Quantities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 DepositQty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          depositqty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Confiscation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Confiscation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Confiscation.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.QuantityIndexField Quantities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_quantities(i), target, stream);
  }

  // uint64 DepositQty = 4;
  if (this->depositqty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_depositqty(), target);
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Confiscation)
  return target;
}

size_t Confiscation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Confiscation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.QuantityIndexField Quantities = 3;
  total_size += 1UL * this->_internal_quantities_size();
  for (const auto& msg : this->quantities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // uint64 DepositQty = 4;
  if (this->depositqty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_depositqty());
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Confiscation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Confiscation)
  GOOGLE_DCHECK_NE(&from, this);
  const Confiscation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Confiscation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Confiscation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Confiscation)
    MergeFrom(*source);
  }
}

void Confiscation::MergeFrom(const Confiscation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Confiscation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantities_.MergeFrom(from.quantities_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.depositqty() != 0) {
    _internal_set_depositqty(from._internal_depositqty());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Confiscation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Confiscation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Confiscation::CopyFrom(const Confiscation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Confiscation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confiscation::IsInitialized() const {
  return true;
}

void Confiscation::InternalSwap(Confiscation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quantities_.InternalSwap(&other->quantities_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Confiscation, timestamp_)
      + sizeof(Confiscation::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Confiscation, depositqty_)>(
          reinterpret_cast<char*>(&depositqty_),
          reinterpret_cast<char*>(&other->depositqty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Confiscation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeprecatedReconciliation::InitAsDefaultInstance() {
}
class DeprecatedReconciliation::_Internal {
 public:
};

DeprecatedReconciliation::DeprecatedReconciliation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quantities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.DeprecatedReconciliation)
}
DeprecatedReconciliation::DeprecatedReconciliation(const DeprecatedReconciliation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quantities_(from.quantities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:actions.DeprecatedReconciliation)
}

void DeprecatedReconciliation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeprecatedReconciliation_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

DeprecatedReconciliation::~DeprecatedReconciliation() {
  // @@protoc_insertion_point(destructor:actions.DeprecatedReconciliation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeprecatedReconciliation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeprecatedReconciliation::ArenaDtor(void* object) {
  DeprecatedReconciliation* _this = reinterpret_cast< DeprecatedReconciliation* >(object);
  (void)_this;
}
void DeprecatedReconciliation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeprecatedReconciliation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeprecatedReconciliation& DeprecatedReconciliation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeprecatedReconciliation_actions_2eproto.base);
  return *internal_default_instance();
}


void DeprecatedReconciliation::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.DeprecatedReconciliation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quantities_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecatedReconciliation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string InstrumentType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.DeprecatedReconciliation.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField Quantities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quantities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeprecatedReconciliation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.DeprecatedReconciliation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.DeprecatedReconciliation.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.QuantityIndexField Quantities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quantities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_quantities(i), target, stream);
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.DeprecatedReconciliation)
  return target;
}

size_t DeprecatedReconciliation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.DeprecatedReconciliation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.QuantityIndexField Quantities = 3;
  total_size += 1UL * this->_internal_quantities_size();
  for (const auto& msg : this->quantities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 1;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 2;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // uint64 Timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeprecatedReconciliation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.DeprecatedReconciliation)
  GOOGLE_DCHECK_NE(&from, this);
  const DeprecatedReconciliation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeprecatedReconciliation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.DeprecatedReconciliation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.DeprecatedReconciliation)
    MergeFrom(*source);
  }
}

void DeprecatedReconciliation::MergeFrom(const DeprecatedReconciliation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.DeprecatedReconciliation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quantities_.MergeFrom(from.quantities_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void DeprecatedReconciliation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.DeprecatedReconciliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeprecatedReconciliation::CopyFrom(const DeprecatedReconciliation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.DeprecatedReconciliation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecatedReconciliation::IsInitialized() const {
  return true;
}

void DeprecatedReconciliation::InternalSwap(DeprecatedReconciliation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  quantities_.InternalSwap(&other->quantities_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecatedReconciliation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Establishment::InitAsDefaultInstance() {
}
class Establishment::_Internal {
 public:
};

Establishment::Establishment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Establishment)
}
Establishment::Establishment(const Establishment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.Establishment)
}

void Establishment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Establishment_actions_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Establishment::~Establishment() {
  // @@protoc_insertion_point(destructor:actions.Establishment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Establishment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Establishment::ArenaDtor(void* object) {
  Establishment* _this = reinterpret_cast< Establishment* >(object);
  (void)_this;
}
void Establishment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Establishment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Establishment& Establishment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Establishment_actions_2eproto.base);
  return *internal_default_instance();
}


void Establishment::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Establishment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Establishment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Establishment.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Establishment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Establishment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Establishment.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Establishment)
  return target;
}

size_t Establishment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Establishment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Establishment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Establishment)
  GOOGLE_DCHECK_NE(&from, this);
  const Establishment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Establishment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Establishment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Establishment)
    MergeFrom(*source);
  }
}

void Establishment::MergeFrom(const Establishment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Establishment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Establishment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Establishment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Establishment::CopyFrom(const Establishment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Establishment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Establishment::IsInitialized() const {
  return true;
}

void Establishment::InternalSwap(Establishment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Establishment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Addition::InitAsDefaultInstance() {
}
class Addition::_Internal {
 public:
};

Addition::Addition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Addition)
}
Addition::Addition(const Addition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.Addition)
}

void Addition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Addition_actions_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Addition::~Addition() {
  // @@protoc_insertion_point(destructor:actions.Addition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Addition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Addition::ArenaDtor(void* object) {
  Addition* _this = reinterpret_cast< Addition* >(object);
  (void)_this;
}
void Addition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Addition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Addition& Addition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Addition_actions_2eproto.base);
  return *internal_default_instance();
}


void Addition::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Addition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Addition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Addition.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Addition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Addition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Addition.Message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Addition)
  return target;
}

size_t Addition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Addition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Addition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Addition)
  GOOGLE_DCHECK_NE(&from, this);
  const Addition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Addition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Addition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Addition)
    MergeFrom(*source);
  }
}

void Addition::MergeFrom(const Addition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Addition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Addition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Addition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addition::CopyFrom(const Addition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Addition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addition::IsInitialized() const {
  return true;
}

void Addition::InternalSwap(Addition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Addition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Alteration::InitAsDefaultInstance() {
}
class Alteration::_Internal {
 public:
};

Alteration::Alteration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Alteration)
}
Alteration::Alteration(const Alteration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entrytxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entrytxid().empty()) {
    entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entrytxid(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.Alteration)
}

void Alteration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Alteration_actions_2eproto.base);
  entrytxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Alteration::~Alteration() {
  // @@protoc_insertion_point(destructor:actions.Alteration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alteration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entrytxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Alteration::ArenaDtor(void* object) {
  Alteration* _this = reinterpret_cast< Alteration* >(object);
  (void)_this;
}
void Alteration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alteration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alteration& Alteration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alteration_actions_2eproto.base);
  return *internal_default_instance();
}


void Alteration::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Alteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrytxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alteration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes EntryTxID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entrytxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Alteration.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alteration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Alteration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes EntryTxID = 1;
  if (this->entrytxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entrytxid(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Alteration.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Alteration)
  return target;
}

size_t Alteration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Alteration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EntryTxID = 1;
  if (this->entrytxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entrytxid());
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alteration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Alteration)
  GOOGLE_DCHECK_NE(&from, this);
  const Alteration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alteration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Alteration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Alteration)
    MergeFrom(*source);
  }
}

void Alteration::MergeFrom(const Alteration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Alteration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entrytxid().size() > 0) {
    _internal_set_entrytxid(from._internal_entrytxid());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Alteration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Alteration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alteration::CopyFrom(const Alteration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Alteration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alteration::IsInitialized() const {
  return true;
}

void Alteration::InternalSwap(Alteration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entrytxid_.Swap(&other->entrytxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Alteration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Removal::InitAsDefaultInstance() {
}
class Removal::_Internal {
 public:
};

Removal::Removal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Removal)
}
Removal::Removal(const Removal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entrytxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entrytxid().empty()) {
    entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entrytxid(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.Removal)
}

void Removal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Removal_actions_2eproto.base);
  entrytxid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Removal::~Removal() {
  // @@protoc_insertion_point(destructor:actions.Removal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Removal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entrytxid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Removal::ArenaDtor(void* object) {
  Removal* _this = reinterpret_cast< Removal* >(object);
  (void)_this;
}
void Removal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Removal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Removal& Removal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Removal_actions_2eproto.base);
  return *internal_default_instance();
}


void Removal::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Removal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entrytxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Removal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes EntryTxID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entrytxid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Removal.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Removal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Removal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes EntryTxID = 1;
  if (this->entrytxid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entrytxid(), target);
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Removal.Message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Removal)
  return target;
}

size_t Removal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Removal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EntryTxID = 1;
  if (this->entrytxid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entrytxid());
  }

  // string Message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Removal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Removal)
  GOOGLE_DCHECK_NE(&from, this);
  const Removal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Removal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Removal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Removal)
    MergeFrom(*source);
  }
}

void Removal::MergeFrom(const Removal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Removal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entrytxid().size() > 0) {
    _internal_set_entrytxid(from._internal_entrytxid());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void Removal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Removal::CopyFrom(const Removal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Removal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Removal::IsInitialized() const {
  return true;
}

void Removal::InternalSwap(Removal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entrytxid_.Swap(&other->entrytxid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Removal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  senderindexes_(arena),
  receiverindexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      senderindexes_(from.senderindexes_),
      receiverindexes_(from.receiverindexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  messagepayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messagepayload().empty()) {
    messagepayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_messagepayload(),
      GetArena());
  }
  messagecode_ = from.messagecode_;
  // @@protoc_insertion_point(copy_constructor:actions.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_actions_2eproto.base);
  messagepayload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  messagecode_ = 0u;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:actions.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  messagepayload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_actions_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  senderindexes_.Clear();
  receiverindexes_.Clear();
  messagepayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  messagecode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 SenderIndexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_senderindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_senderindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ReceiverIndexes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_receiverindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_receiverindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 MessageCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          messagecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes MessagePayload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_messagepayload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 SenderIndexes = 1;
  {
    int byte_size = _senderindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_senderindexes(), byte_size, target);
    }
  }

  // repeated uint32 ReceiverIndexes = 2;
  {
    int byte_size = _receiverindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_receiverindexes(), byte_size, target);
    }
  }

  // uint32 MessageCode = 3;
  if (this->messagecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_messagecode(), target);
  }

  // bytes MessagePayload = 4;
  if (this->messagepayload().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_messagepayload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 SenderIndexes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->senderindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _senderindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ReceiverIndexes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->receiverindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _receiverindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes MessagePayload = 4;
  if (this->messagepayload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_messagepayload());
  }

  // uint32 MessageCode = 3;
  if (this->messagecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_messagecode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  senderindexes_.MergeFrom(from.senderindexes_);
  receiverindexes_.MergeFrom(from.receiverindexes_);
  if (from.messagepayload().size() > 0) {
    _internal_set_messagepayload(from._internal_messagepayload());
  }
  if (from.messagecode() != 0) {
    _internal_set_messagecode(from._internal_messagecode());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  senderindexes_.InternalSwap(&other->senderindexes_);
  receiverindexes_.InternalSwap(&other->receiverindexes_);
  messagepayload_.Swap(&other->messagepayload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(messagecode_, other->messagecode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rejection::InitAsDefaultInstance() {
}
class Rejection::_Internal {
 public:
};

Rejection::Rejection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  addressindexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.Rejection)
}
Rejection::Rejection(const Rejection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addressindexes_(from.addressindexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  ::memcpy(&rejectaddressindex_, &from.rejectaddressindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&rejectaddressindex_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:actions.Rejection)
}

void Rejection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rejection_actions_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rejectaddressindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&rejectaddressindex_)) + sizeof(timestamp_));
}

Rejection::~Rejection() {
  // @@protoc_insertion_point(destructor:actions.Rejection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rejection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Rejection::ArenaDtor(void* object) {
  Rejection* _this = reinterpret_cast< Rejection* >(object);
  (void)_this;
}
void Rejection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rejection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rejection& Rejection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rejection_actions_2eproto.base);
  return *internal_default_instance();
}


void Rejection::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.Rejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addressindexes_.Clear();
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&rejectaddressindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&rejectaddressindex_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rejection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 AddressIndexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_addressindexes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_addressindexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RejectAddressIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rejectaddressindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 RejectionCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rejectioncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.Rejection.Message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rejection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.Rejection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 AddressIndexes = 1;
  {
    int byte_size = _addressindexes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_addressindexes(), byte_size, target);
    }
  }

  // uint32 RejectAddressIndex = 2;
  if (this->rejectaddressindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rejectaddressindex(), target);
  }

  // uint32 RejectionCode = 3;
  if (this->rejectioncode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rejectioncode(), target);
  }

  // string Message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.Rejection.Message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.Rejection)
  return target;
}

size_t Rejection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.Rejection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 AddressIndexes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->addressindexes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _addressindexes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // uint32 RejectAddressIndex = 2;
  if (this->rejectaddressindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rejectaddressindex());
  }

  // uint32 RejectionCode = 3;
  if (this->rejectioncode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rejectioncode());
  }

  // uint64 Timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rejection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.Rejection)
  GOOGLE_DCHECK_NE(&from, this);
  const Rejection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rejection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.Rejection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.Rejection)
    MergeFrom(*source);
  }
}

void Rejection::MergeFrom(const Rejection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.Rejection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addressindexes_.MergeFrom(from.addressindexes_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.rejectaddressindex() != 0) {
    _internal_set_rejectaddressindex(from._internal_rejectaddressindex());
  }
  if (from.rejectioncode() != 0) {
    _internal_set_rejectioncode(from._internal_rejectioncode());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void Rejection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.Rejection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rejection::CopyFrom(const Rejection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.Rejection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rejection::IsInitialized() const {
  return true;
}

void Rejection::InternalSwap(Rejection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addressindexes_.InternalSwap(&other->addressindexes_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rejection, timestamp_)
      + sizeof(Rejection::timestamp_)
      - PROTOBUF_FIELD_OFFSET(Rejection, rejectaddressindex_)>(
          reinterpret_cast<char*>(&rejectaddressindex_),
          reinterpret_cast<char*>(&other->rejectaddressindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rejection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdministratorField::InitAsDefaultInstance() {
}
class AdministratorField::_Internal {
 public:
};

AdministratorField::AdministratorField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.AdministratorField)
}
AdministratorField::AdministratorField(const AdministratorField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:actions.AdministratorField)
}

void AdministratorField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdministratorField_actions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

AdministratorField::~AdministratorField() {
  // @@protoc_insertion_point(destructor:actions.AdministratorField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdministratorField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdministratorField::ArenaDtor(void* object) {
  AdministratorField* _this = reinterpret_cast< AdministratorField* >(object);
  (void)_this;
}
void AdministratorField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdministratorField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdministratorField& AdministratorField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdministratorField_actions_2eproto.base);
  return *internal_default_instance();
}


void AdministratorField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.AdministratorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdministratorField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.AdministratorField.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdministratorField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.AdministratorField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.AdministratorField.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.AdministratorField)
  return target;
}

size_t AdministratorField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.AdministratorField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdministratorField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.AdministratorField)
  GOOGLE_DCHECK_NE(&from, this);
  const AdministratorField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdministratorField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.AdministratorField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.AdministratorField)
    MergeFrom(*source);
  }
}

void AdministratorField::MergeFrom(const AdministratorField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.AdministratorField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void AdministratorField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.AdministratorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministratorField::CopyFrom(const AdministratorField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.AdministratorField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministratorField::IsInitialized() const {
  return true;
}

void AdministratorField::InternalSwap(AdministratorField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdministratorField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AdminIdentityCertificateField::InitAsDefaultInstance() {
}
class AdminIdentityCertificateField::_Internal {
 public:
};

AdminIdentityCertificateField::AdminIdentityCertificateField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.AdminIdentityCertificateField)
}
AdminIdentityCertificateField::AdminIdentityCertificateField(const AdminIdentityCertificateField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitycontract().empty()) {
    entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entitycontract(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  ::memcpy(&expiration_, &from.expiration_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockheight_) -
    reinterpret_cast<char*>(&expiration_)) + sizeof(blockheight_));
  // @@protoc_insertion_point(copy_constructor:actions.AdminIdentityCertificateField)
}

void AdminIdentityCertificateField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdminIdentityCertificateField_actions_2eproto.base);
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(blockheight_));
}

AdminIdentityCertificateField::~AdminIdentityCertificateField() {
  // @@protoc_insertion_point(destructor:actions.AdminIdentityCertificateField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdminIdentityCertificateField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdminIdentityCertificateField::ArenaDtor(void* object) {
  AdminIdentityCertificateField* _this = reinterpret_cast< AdminIdentityCertificateField* >(object);
  (void)_this;
}
void AdminIdentityCertificateField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdminIdentityCertificateField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdminIdentityCertificateField& AdminIdentityCertificateField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdminIdentityCertificateField_actions_2eproto.base);
  return *internal_default_instance();
}


void AdminIdentityCertificateField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.AdminIdentityCertificateField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&expiration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockheight_) -
      reinterpret_cast<char*>(&expiration_)) + sizeof(blockheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdminIdentityCertificateField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes EntityContract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BlockHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdminIdentityCertificateField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.AdminIdentityCertificateField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes EntityContract = 1;
  if (this->entitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_entitycontract(), target);
  }

  // bytes Signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  // uint32 BlockHeight = 3;
  if (this->blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blockheight(), target);
  }

  // uint64 Expiration = 4;
  if (this->expiration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_expiration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.AdminIdentityCertificateField)
  return target;
}

size_t AdminIdentityCertificateField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.AdminIdentityCertificateField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes EntityContract = 1;
  if (this->entitycontract().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entitycontract());
  }

  // bytes Signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // uint64 Expiration = 4;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_expiration());
  }

  // uint32 BlockHeight = 3;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blockheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdminIdentityCertificateField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.AdminIdentityCertificateField)
  GOOGLE_DCHECK_NE(&from, this);
  const AdminIdentityCertificateField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdminIdentityCertificateField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.AdminIdentityCertificateField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.AdminIdentityCertificateField)
    MergeFrom(*source);
  }
}

void AdminIdentityCertificateField::MergeFrom(const AdminIdentityCertificateField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.AdminIdentityCertificateField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entitycontract().size() > 0) {
    _internal_set_entitycontract(from._internal_entitycontract());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.expiration() != 0) {
    _internal_set_expiration(from._internal_expiration());
  }
  if (from.blockheight() != 0) {
    _internal_set_blockheight(from._internal_blockheight());
  }
}

void AdminIdentityCertificateField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.AdminIdentityCertificateField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminIdentityCertificateField::CopyFrom(const AdminIdentityCertificateField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.AdminIdentityCertificateField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminIdentityCertificateField::IsInitialized() const {
  return true;
}

void AdminIdentityCertificateField::InternalSwap(AdminIdentityCertificateField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  entitycontract_.Swap(&other->entitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AdminIdentityCertificateField, blockheight_)
      + sizeof(AdminIdentityCertificateField::blockheight_)
      - PROTOBUF_FIELD_OFFSET(AdminIdentityCertificateField, expiration_)>(
          reinterpret_cast<char*>(&expiration_),
          reinterpret_cast<char*>(&other->expiration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AdminIdentityCertificateField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AmendmentField::InitAsDefaultInstance() {
}
class AmendmentField::_Internal {
 public:
};

AmendmentField::AmendmentField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.AmendmentField)
}
AmendmentField::AmendmentField(const AmendmentField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fieldindexpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fieldindexpath().empty()) {
    fieldindexpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fieldindexpath(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:actions.AmendmentField)
}

void AmendmentField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AmendmentField_actions_2eproto.base);
  fieldindexpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
}

AmendmentField::~AmendmentField() {
  // @@protoc_insertion_point(destructor:actions.AmendmentField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AmendmentField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fieldindexpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AmendmentField::ArenaDtor(void* object) {
  AmendmentField* _this = reinterpret_cast< AmendmentField* >(object);
  (void)_this;
}
void AmendmentField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AmendmentField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AmendmentField& AmendmentField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AmendmentField_actions_2eproto.base);
  return *internal_default_instance();
}


void AmendmentField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.AmendmentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldindexpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operation_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmendmentField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes FieldIndexPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fieldindexpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AmendmentField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.AmendmentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FieldIndexPath = 1;
  if (this->fieldindexpath().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_fieldindexpath(), target);
  }

  // uint32 Operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operation(), target);
  }

  // bytes Data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.AmendmentField)
  return target;
}

size_t AmendmentField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.AmendmentField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FieldIndexPath = 1;
  if (this->fieldindexpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fieldindexpath());
  }

  // bytes Data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 Operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AmendmentField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.AmendmentField)
  GOOGLE_DCHECK_NE(&from, this);
  const AmendmentField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AmendmentField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.AmendmentField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.AmendmentField)
    MergeFrom(*source);
  }
}

void AmendmentField::MergeFrom(const AmendmentField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.AmendmentField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldindexpath().size() > 0) {
    _internal_set_fieldindexpath(from._internal_fieldindexpath());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void AmendmentField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.AmendmentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmendmentField::CopyFrom(const AmendmentField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.AmendmentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmendmentField::IsInitialized() const {
  return true;
}

void AmendmentField::InternalSwap(AmendmentField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fieldindexpath_.Swap(&other->fieldindexpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmendmentField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentReceiverField::InitAsDefaultInstance() {
}
class InstrumentReceiverField::_Internal {
 public:
};

InstrumentReceiverField::InstrumentReceiverField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentReceiverField)
}
InstrumentReceiverField::InstrumentReceiverField(const InstrumentReceiverField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  oracleconfirmationsig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_oracleconfirmationsig().empty()) {
    oracleconfirmationsig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_oracleconfirmationsig(),
      GetArena());
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&oraclesigblockheight_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(oraclesigblockheight_));
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentReceiverField)
}

void InstrumentReceiverField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentReceiverField_actions_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oracleconfirmationsig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oraclesigblockheight_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(oraclesigblockheight_));
}

InstrumentReceiverField::~InstrumentReceiverField() {
  // @@protoc_insertion_point(destructor:actions.InstrumentReceiverField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentReceiverField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  oracleconfirmationsig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentReceiverField::ArenaDtor(void* object) {
  InstrumentReceiverField* _this = reinterpret_cast< InstrumentReceiverField* >(object);
  (void)_this;
}
void InstrumentReceiverField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentReceiverField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentReceiverField& InstrumentReceiverField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentReceiverField_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentReceiverField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentReceiverField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oracleconfirmationsig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oraclesigblockheight_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(oraclesigblockheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentReceiverField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OracleSigAlgorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          oraclesigalgorithm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OracleIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          oracleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes OracleConfirmationSig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_oracleconfirmationsig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 OracleSigBlockHeight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          oraclesigblockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 OracleSigExpiry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          oraclesigexpiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentReceiverField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentReceiverField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint32 OracleSigAlgorithm = 3;
  if (this->oraclesigalgorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oraclesigalgorithm(), target);
  }

  // uint32 OracleIndex = 4;
  if (this->oracleindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_oracleindex(), target);
  }

  // bytes OracleConfirmationSig = 5;
  if (this->oracleconfirmationsig().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_oracleconfirmationsig(), target);
  }

  // uint32 OracleSigBlockHeight = 6;
  if (this->oraclesigblockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_oraclesigblockheight(), target);
  }

  // uint64 OracleSigExpiry = 7;
  if (this->oraclesigexpiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_oraclesigexpiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentReceiverField)
  return target;
}

size_t InstrumentReceiverField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentReceiverField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // bytes OracleConfirmationSig = 5;
  if (this->oracleconfirmationsig().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_oracleconfirmationsig());
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint32 OracleSigAlgorithm = 3;
  if (this->oraclesigalgorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oraclesigalgorithm());
  }

  // uint32 OracleIndex = 4;
  if (this->oracleindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oracleindex());
  }

  // uint64 OracleSigExpiry = 7;
  if (this->oraclesigexpiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_oraclesigexpiry());
  }

  // uint32 OracleSigBlockHeight = 6;
  if (this->oraclesigblockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_oraclesigblockheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentReceiverField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentReceiverField)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentReceiverField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentReceiverField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentReceiverField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentReceiverField)
    MergeFrom(*source);
  }
}

void InstrumentReceiverField::MergeFrom(const InstrumentReceiverField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentReceiverField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.oracleconfirmationsig().size() > 0) {
    _internal_set_oracleconfirmationsig(from._internal_oracleconfirmationsig());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.oraclesigalgorithm() != 0) {
    _internal_set_oraclesigalgorithm(from._internal_oraclesigalgorithm());
  }
  if (from.oracleindex() != 0) {
    _internal_set_oracleindex(from._internal_oracleindex());
  }
  if (from.oraclesigexpiry() != 0) {
    _internal_set_oraclesigexpiry(from._internal_oraclesigexpiry());
  }
  if (from.oraclesigblockheight() != 0) {
    _internal_set_oraclesigblockheight(from._internal_oraclesigblockheight());
  }
}

void InstrumentReceiverField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentReceiverField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentReceiverField::CopyFrom(const InstrumentReceiverField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentReceiverField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentReceiverField::IsInitialized() const {
  return true;
}

void InstrumentReceiverField::InternalSwap(InstrumentReceiverField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  oracleconfirmationsig_.Swap(&other->oracleconfirmationsig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentReceiverField, oraclesigblockheight_)
      + sizeof(InstrumentReceiverField::oraclesigblockheight_)
      - PROTOBUF_FIELD_OFFSET(InstrumentReceiverField, quantity_)>(
          reinterpret_cast<char*>(&quantity_),
          reinterpret_cast<char*>(&other->quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentReceiverField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentSettlementField::InitAsDefaultInstance() {
}
class InstrumentSettlementField::_Internal {
 public:
};

InstrumentSettlementField::InstrumentSettlementField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  settlements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentSettlementField)
}
InstrumentSettlementField::InstrumentSettlementField(const InstrumentSettlementField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      settlements_(from.settlements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  contractindex_ = from.contractindex_;
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentSettlementField)
}

void InstrumentSettlementField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentSettlementField_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractindex_ = 0u;
}

InstrumentSettlementField::~InstrumentSettlementField() {
  // @@protoc_insertion_point(destructor:actions.InstrumentSettlementField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentSettlementField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentSettlementField::ArenaDtor(void* object) {
  InstrumentSettlementField* _this = reinterpret_cast< InstrumentSettlementField* >(object);
  (void)_this;
}
void InstrumentSettlementField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentSettlementField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentSettlementField& InstrumentSettlementField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentSettlementField_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentSettlementField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentSettlementField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settlements_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentSettlementField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ContractIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contractindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentSettlementField.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField Settlements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_settlements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentSettlementField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentSettlementField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ContractIndex = 1;
  if (this->contractindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_contractindex(), target);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentSettlementField.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.QuantityIndexField Settlements = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_settlements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_settlements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentSettlementField)
  return target;
}

size_t InstrumentSettlementField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentSettlementField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.QuantityIndexField Settlements = 4;
  total_size += 1UL * this->_internal_settlements_size();
  for (const auto& msg : this->settlements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // uint32 ContractIndex = 1;
  if (this->contractindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contractindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentSettlementField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentSettlementField)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentSettlementField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentSettlementField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentSettlementField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentSettlementField)
    MergeFrom(*source);
  }
}

void InstrumentSettlementField::MergeFrom(const InstrumentSettlementField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentSettlementField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settlements_.MergeFrom(from.settlements_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.contractindex() != 0) {
    _internal_set_contractindex(from._internal_contractindex());
  }
}

void InstrumentSettlementField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentSettlementField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentSettlementField::CopyFrom(const InstrumentSettlementField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentSettlementField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentSettlementField::IsInitialized() const {
  return true;
}

void InstrumentSettlementField::InternalSwap(InstrumentSettlementField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  settlements_.InternalSwap(&other->settlements_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(contractindex_, other->contractindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentSettlementField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentTransferField::InitAsDefaultInstance() {
}
class InstrumentTransferField::_Internal {
 public:
};

InstrumentTransferField::InstrumentTransferField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instrumentsenders_(arena),
  instrumentreceivers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.InstrumentTransferField)
}
InstrumentTransferField::InstrumentTransferField(const InstrumentTransferField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instrumentsenders_(from.instrumentsenders_),
      instrumentreceivers_(from.instrumentreceivers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumenttype().empty()) {
    instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumenttype(),
      GetArena());
  }
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrumentcode().empty()) {
    instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrumentcode(),
      GetArena());
  }
  refundaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refundaddress().empty()) {
    refundaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_refundaddress(),
      GetArena());
  }
  contractindex_ = from.contractindex_;
  // @@protoc_insertion_point(copy_constructor:actions.InstrumentTransferField)
}

void InstrumentTransferField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentTransferField_actions_2eproto.base);
  instrumenttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refundaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractindex_ = 0u;
}

InstrumentTransferField::~InstrumentTransferField() {
  // @@protoc_insertion_point(destructor:actions.InstrumentTransferField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentTransferField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrumenttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrumentcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refundaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentTransferField::ArenaDtor(void* object) {
  InstrumentTransferField* _this = reinterpret_cast< InstrumentTransferField* >(object);
  (void)_this;
}
void InstrumentTransferField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentTransferField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentTransferField& InstrumentTransferField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentTransferField_actions_2eproto.base);
  return *internal_default_instance();
}


void InstrumentTransferField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.InstrumentTransferField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrumentsenders_.Clear();
  instrumentreceivers_.Clear();
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refundaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contractindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentTransferField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ContractIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          contractindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstrumentType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrumenttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.InstrumentTransferField.InstrumentType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes InstrumentCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrumentcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.QuantityIndexField InstrumentSenders = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentsenders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.InstrumentReceiverField InstrumentReceivers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instrumentreceivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes RefundAddress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_refundaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentTransferField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.InstrumentTransferField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ContractIndex = 1;
  if (this->contractindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_contractindex(), target);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrumenttype().data(), static_cast<int>(this->_internal_instrumenttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.InstrumentTransferField.InstrumentType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrumenttype(), target);
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_instrumentcode(), target);
  }

  // repeated .actions.QuantityIndexField InstrumentSenders = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentsenders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_instrumentsenders(i), target, stream);
  }

  // repeated .actions.InstrumentReceiverField InstrumentReceivers = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instrumentreceivers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_instrumentreceivers(i), target, stream);
  }

  // bytes RefundAddress = 6;
  if (this->refundaddress().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_refundaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.InstrumentTransferField)
  return target;
}

size_t InstrumentTransferField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.InstrumentTransferField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.QuantityIndexField InstrumentSenders = 4;
  total_size += 1UL * this->_internal_instrumentsenders_size();
  for (const auto& msg : this->instrumentsenders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.InstrumentReceiverField InstrumentReceivers = 5;
  total_size += 1UL * this->_internal_instrumentreceivers_size();
  for (const auto& msg : this->instrumentreceivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string InstrumentType = 2;
  if (this->instrumenttype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrumenttype());
  }

  // bytes InstrumentCode = 3;
  if (this->instrumentcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumentcode());
  }

  // bytes RefundAddress = 6;
  if (this->refundaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_refundaddress());
  }

  // uint32 ContractIndex = 1;
  if (this->contractindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_contractindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentTransferField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.InstrumentTransferField)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentTransferField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentTransferField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.InstrumentTransferField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.InstrumentTransferField)
    MergeFrom(*source);
  }
}

void InstrumentTransferField::MergeFrom(const InstrumentTransferField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.InstrumentTransferField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrumentsenders_.MergeFrom(from.instrumentsenders_);
  instrumentreceivers_.MergeFrom(from.instrumentreceivers_);
  if (from.instrumenttype().size() > 0) {
    _internal_set_instrumenttype(from._internal_instrumenttype());
  }
  if (from.instrumentcode().size() > 0) {
    _internal_set_instrumentcode(from._internal_instrumentcode());
  }
  if (from.refundaddress().size() > 0) {
    _internal_set_refundaddress(from._internal_refundaddress());
  }
  if (from.contractindex() != 0) {
    _internal_set_contractindex(from._internal_contractindex());
  }
}

void InstrumentTransferField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.InstrumentTransferField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentTransferField::CopyFrom(const InstrumentTransferField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.InstrumentTransferField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentTransferField::IsInitialized() const {
  return true;
}

void InstrumentTransferField::InternalSwap(InstrumentTransferField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrumentsenders_.InternalSwap(&other->instrumentsenders_);
  instrumentreceivers_.InternalSwap(&other->instrumentreceivers_);
  instrumenttype_.Swap(&other->instrumenttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrumentcode_.Swap(&other->instrumentcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  refundaddress_.Swap(&other->refundaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(contractindex_, other->contractindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentTransferField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChapterField::InitAsDefaultInstance() {
}
class ChapterField::_Internal {
 public:
};

ChapterField::ChapterField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  articles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ChapterField)
}
ChapterField::ChapterField(const ChapterField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      articles_(from.articles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preamble().empty()) {
    preamble_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preamble(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.ChapterField)
}

void ChapterField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChapterField_actions_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preamble_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChapterField::~ChapterField() {
  // @@protoc_insertion_point(destructor:actions.ChapterField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChapterField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preamble_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChapterField::ArenaDtor(void* object) {
  ChapterField* _this = reinterpret_cast< ChapterField* >(object);
  (void)_this;
}
void ChapterField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChapterField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChapterField& ChapterField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChapterField_actions_2eproto.base);
  return *internal_default_instance();
}


void ChapterField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ChapterField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  articles_.Clear();
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preamble_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChapterField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ChapterField.Title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Preamble = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_preamble();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ChapterField.Preamble"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.ClauseField Articles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_articles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChapterField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ChapterField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ChapterField.Title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string Preamble = 2;
  if (this->preamble().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preamble().data(), static_cast<int>(this->_internal_preamble().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ChapterField.Preamble");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preamble(), target);
  }

  // repeated .actions.ClauseField Articles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_articles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_articles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ChapterField)
  return target;
}

size_t ChapterField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ChapterField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.ClauseField Articles = 3;
  total_size += 1UL * this->_internal_articles_size();
  for (const auto& msg : this->articles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Preamble = 2;
  if (this->preamble().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preamble());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChapterField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ChapterField)
  GOOGLE_DCHECK_NE(&from, this);
  const ChapterField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChapterField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ChapterField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ChapterField)
    MergeFrom(*source);
  }
}

void ChapterField::MergeFrom(const ChapterField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ChapterField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  articles_.MergeFrom(from.articles_);
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.preamble().size() > 0) {
    _internal_set_preamble(from._internal_preamble());
  }
}

void ChapterField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ChapterField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterField::CopyFrom(const ChapterField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ChapterField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterField::IsInitialized() const {
  return true;
}

void ChapterField::InternalSwap(ChapterField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  articles_.InternalSwap(&other->articles_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preamble_.Swap(&other->preamble_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChapterField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClauseField::InitAsDefaultInstance() {
}
class ClauseField::_Internal {
 public:
};

ClauseField::ClauseField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ClauseField)
}
ClauseField::ClauseField(const ClauseField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_title(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.ClauseField)
}

void ClauseField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClauseField_actions_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClauseField::~ClauseField() {
  // @@protoc_insertion_point(destructor:actions.ClauseField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClauseField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClauseField::ArenaDtor(void* object) {
  ClauseField* _this = reinterpret_cast< ClauseField* >(object);
  (void)_this;
}
void ClauseField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClauseField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClauseField& ClauseField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClauseField_actions_2eproto.base);
  return *internal_default_instance();
}


void ClauseField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ClauseField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClauseField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ClauseField.Title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ClauseField.Body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.ClauseField Children = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClauseField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ClauseField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Title = 1;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ClauseField.Title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string Body = 2;
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ClauseField.Body");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_body(), target);
  }

  // repeated .actions.ClauseField Children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ClauseField)
  return target;
}

size_t ClauseField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ClauseField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.ClauseField Children = 3;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Title = 1;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClauseField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ClauseField)
  GOOGLE_DCHECK_NE(&from, this);
  const ClauseField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClauseField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ClauseField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ClauseField)
    MergeFrom(*source);
  }
}

void ClauseField::MergeFrom(const ClauseField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ClauseField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
}

void ClauseField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ClauseField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClauseField::CopyFrom(const ClauseField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ClauseField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClauseField::IsInitialized() const {
  return true;
}

void ClauseField::InternalSwap(ClauseField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClauseField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefinedTermField::InitAsDefaultInstance() {
}
class DefinedTermField::_Internal {
 public:
};

DefinedTermField::DefinedTermField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.DefinedTermField)
}
DefinedTermField::DefinedTermField(const DefinedTermField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_term().empty()) {
    term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_term(),
      GetArena());
  }
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_definition().empty()) {
    definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_definition(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.DefinedTermField)
}

void DefinedTermField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefinedTermField_actions_2eproto.base);
  term_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DefinedTermField::~DefinedTermField() {
  // @@protoc_insertion_point(destructor:actions.DefinedTermField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefinedTermField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  term_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  definition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefinedTermField::ArenaDtor(void* object) {
  DefinedTermField* _this = reinterpret_cast< DefinedTermField* >(object);
  (void)_this;
}
void DefinedTermField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefinedTermField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefinedTermField& DefinedTermField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefinedTermField_actions_2eproto.base);
  return *internal_default_instance();
}


void DefinedTermField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.DefinedTermField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  term_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  definition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefinedTermField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_term();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.DefinedTermField.Term"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Definition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_definition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.DefinedTermField.Definition"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefinedTermField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.DefinedTermField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Term = 1;
  if (this->term().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_term().data(), static_cast<int>(this->_internal_term().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.DefinedTermField.Term");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_term(), target);
  }

  // string Definition = 2;
  if (this->definition().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_definition().data(), static_cast<int>(this->_internal_definition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.DefinedTermField.Definition");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_definition(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.DefinedTermField)
  return target;
}

size_t DefinedTermField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.DefinedTermField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Term = 1;
  if (this->term().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_term());
  }

  // string Definition = 2;
  if (this->definition().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_definition());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefinedTermField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.DefinedTermField)
  GOOGLE_DCHECK_NE(&from, this);
  const DefinedTermField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefinedTermField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.DefinedTermField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.DefinedTermField)
    MergeFrom(*source);
  }
}

void DefinedTermField::MergeFrom(const DefinedTermField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.DefinedTermField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term().size() > 0) {
    _internal_set_term(from._internal_term());
  }
  if (from.definition().size() > 0) {
    _internal_set_definition(from._internal_definition());
  }
}

void DefinedTermField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.DefinedTermField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefinedTermField::CopyFrom(const DefinedTermField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.DefinedTermField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefinedTermField::IsInitialized() const {
  return true;
}

void DefinedTermField::InternalSwap(DefinedTermField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  term_.Swap(&other->term_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  definition_.Swap(&other->definition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DefinedTermField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DocumentField::InitAsDefaultInstance() {
}
class DocumentField::_Internal {
 public:
};

DocumentField::DocumentField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.DocumentField)
}
DocumentField::DocumentField(const DocumentField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contents().empty()) {
    contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_contents(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.DocumentField)
}

void DocumentField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DocumentField_actions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DocumentField::~DocumentField() {
  // @@protoc_insertion_point(destructor:actions.DocumentField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DocumentField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DocumentField::ArenaDtor(void* object) {
  DocumentField* _this = reinterpret_cast< DocumentField* >(object);
  (void)_this;
}
void DocumentField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DocumentField& DocumentField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DocumentField_actions_2eproto.base);
  return *internal_default_instance();
}


void DocumentField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.DocumentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contents_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.DocumentField.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.DocumentField.Type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes Contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DocumentField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.DocumentField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.DocumentField.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.DocumentField.Type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // bytes Contents = 3;
  if (this->contents().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.DocumentField)
  return target;
}

size_t DocumentField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.DocumentField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes Contents = 3;
  if (this->contents().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contents());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DocumentField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.DocumentField)
  GOOGLE_DCHECK_NE(&from, this);
  const DocumentField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DocumentField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.DocumentField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.DocumentField)
    MergeFrom(*source);
  }
}

void DocumentField::MergeFrom(const DocumentField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.DocumentField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.contents().size() > 0) {
    _internal_set_contents(from._internal_contents());
  }
}

void DocumentField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.DocumentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentField::CopyFrom(const DocumentField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.DocumentField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentField::IsInitialized() const {
  return true;
}

void DocumentField::InternalSwap(DocumentField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  contents_.Swap(&other->contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EntityField::InitAsDefaultInstance() {
}
class EntityField::_Internal {
 public:
};

EntityField::EntityField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  administration_(arena),
  management_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.EntityField)
}
EntityField::EntityField(const EntityField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      administration_(from.administration_),
      management_(from.management_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  lei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lei().empty()) {
    lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lei(),
      GetArena());
  }
  unitnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unitnumber().empty()) {
    unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unitnumber(),
      GetArena());
  }
  buildingnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buildingnumber().empty()) {
    buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buildingnumber(),
      GetArena());
  }
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_street().empty()) {
    street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_street(),
      GetArena());
  }
  suburbcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_suburbcity().empty()) {
    suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_suburbcity(),
      GetArena());
  }
  territorystateprovincecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_territorystateprovincecode().empty()) {
    territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_territorystateprovincecode(),
      GetArena());
  }
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_countrycode().empty()) {
    countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_countrycode(),
      GetArena());
  }
  postalzipcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postalzipcode().empty()) {
    postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_postalzipcode(),
      GetArena());
  }
  emailaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_emailaddress().empty()) {
    emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_emailaddress(),
      GetArena());
  }
  phonenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phonenumber().empty()) {
    phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_phonenumber(),
      GetArena());
  }
  domainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_domainname().empty()) {
    domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_domainname(),
      GetArena());
  }
  paymailhandle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymailhandle().empty()) {
    paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paymailhandle(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.EntityField)
}

void EntityField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EntityField_actions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lei_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unitnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buildingnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suburbcity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  territorystateprovincecode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalzipcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emailaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domainname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymailhandle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EntityField::~EntityField() {
  // @@protoc_insertion_point(destructor:actions.EntityField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EntityField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lei_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unitnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buildingnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  street_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suburbcity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  territorystateprovincecode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postalzipcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  emailaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phonenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domainname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymailhandle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EntityField::ArenaDtor(void* object) {
  EntityField* _this = reinterpret_cast< EntityField* >(object);
  (void)_this;
}
void EntityField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EntityField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EntityField& EntityField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EntityField_actions_2eproto.base);
  return *internal_default_instance();
}


void EntityField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.EntityField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  administration_.Clear();
  management_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lei_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unitnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buildingnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suburbcity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  territorystateprovincecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countrycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postalzipcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  emailaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phonenumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domainname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paymailhandle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.Type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string LEI = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lei();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.LEI"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UnitNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_unitnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.UnitNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string BuildingNumber = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_buildingnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.BuildingNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Street = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_street();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.Street"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string SuburbCity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_suburbcity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.SuburbCity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TerritoryStateProvinceCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_territorystateprovincecode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.TerritoryStateProvinceCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CountryCode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.CountryCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PostalZIPCode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_postalzipcode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.PostalZIPCode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string EmailAddress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_emailaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.EmailAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PhoneNumber = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.PhoneNumber"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .actions.AdministratorField Administration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_administration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .actions.ManagerField Management = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_management(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // string DomainName = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_domainname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.DomainName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PaymailHandle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_paymailhandle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.EntityField.PaymailHandle"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EntityField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.EntityField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.Type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string LEI = 3;
  if (this->lei().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lei().data(), static_cast<int>(this->_internal_lei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.LEI");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lei(), target);
  }

  // string UnitNumber = 4;
  if (this->unitnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unitnumber().data(), static_cast<int>(this->_internal_unitnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.UnitNumber");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_unitnumber(), target);
  }

  // string BuildingNumber = 5;
  if (this->buildingnumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buildingnumber().data(), static_cast<int>(this->_internal_buildingnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.BuildingNumber");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_buildingnumber(), target);
  }

  // string Street = 6;
  if (this->street().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_street().data(), static_cast<int>(this->_internal_street().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.Street");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_street(), target);
  }

  // string SuburbCity = 7;
  if (this->suburbcity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suburbcity().data(), static_cast<int>(this->_internal_suburbcity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.SuburbCity");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_suburbcity(), target);
  }

  // string TerritoryStateProvinceCode = 8;
  if (this->territorystateprovincecode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_territorystateprovincecode().data(), static_cast<int>(this->_internal_territorystateprovincecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.TerritoryStateProvinceCode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_territorystateprovincecode(), target);
  }

  // string CountryCode = 9;
  if (this->countrycode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_countrycode().data(), static_cast<int>(this->_internal_countrycode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.CountryCode");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_countrycode(), target);
  }

  // string PostalZIPCode = 10;
  if (this->postalzipcode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postalzipcode().data(), static_cast<int>(this->_internal_postalzipcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.PostalZIPCode");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_postalzipcode(), target);
  }

  // string EmailAddress = 11;
  if (this->emailaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emailaddress().data(), static_cast<int>(this->_internal_emailaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.EmailAddress");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_emailaddress(), target);
  }

  // string PhoneNumber = 12;
  if (this->phonenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phonenumber().data(), static_cast<int>(this->_internal_phonenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.PhoneNumber");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phonenumber(), target);
  }

  // repeated .actions.AdministratorField Administration = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_administration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_administration(i), target, stream);
  }

  // repeated .actions.ManagerField Management = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_management_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_management(i), target, stream);
  }

  // string DomainName = 15;
  if (this->domainname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_domainname().data(), static_cast<int>(this->_internal_domainname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.DomainName");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_domainname(), target);
  }

  // string PaymailHandle = 17;
  if (this->paymailhandle().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paymailhandle().data(), static_cast<int>(this->_internal_paymailhandle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.EntityField.PaymailHandle");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_paymailhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.EntityField)
  return target;
}

size_t EntityField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.EntityField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .actions.AdministratorField Administration = 13;
  total_size += 1UL * this->_internal_administration_size();
  for (const auto& msg : this->administration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .actions.ManagerField Management = 14;
  total_size += 1UL * this->_internal_management_size();
  for (const auto& msg : this->management_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string LEI = 3;
  if (this->lei().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lei());
  }

  // string UnitNumber = 4;
  if (this->unitnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unitnumber());
  }

  // string BuildingNumber = 5;
  if (this->buildingnumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buildingnumber());
  }

  // string Street = 6;
  if (this->street().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_street());
  }

  // string SuburbCity = 7;
  if (this->suburbcity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suburbcity());
  }

  // string TerritoryStateProvinceCode = 8;
  if (this->territorystateprovincecode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_territorystateprovincecode());
  }

  // string CountryCode = 9;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_countrycode());
  }

  // string PostalZIPCode = 10;
  if (this->postalzipcode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postalzipcode());
  }

  // string EmailAddress = 11;
  if (this->emailaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emailaddress());
  }

  // string PhoneNumber = 12;
  if (this->phonenumber().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phonenumber());
  }

  // string DomainName = 15;
  if (this->domainname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_domainname());
  }

  // string PaymailHandle = 17;
  if (this->paymailhandle().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paymailhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EntityField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.EntityField)
  GOOGLE_DCHECK_NE(&from, this);
  const EntityField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EntityField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.EntityField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.EntityField)
    MergeFrom(*source);
  }
}

void EntityField::MergeFrom(const EntityField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.EntityField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  administration_.MergeFrom(from.administration_);
  management_.MergeFrom(from.management_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.lei().size() > 0) {
    _internal_set_lei(from._internal_lei());
  }
  if (from.unitnumber().size() > 0) {
    _internal_set_unitnumber(from._internal_unitnumber());
  }
  if (from.buildingnumber().size() > 0) {
    _internal_set_buildingnumber(from._internal_buildingnumber());
  }
  if (from.street().size() > 0) {
    _internal_set_street(from._internal_street());
  }
  if (from.suburbcity().size() > 0) {
    _internal_set_suburbcity(from._internal_suburbcity());
  }
  if (from.territorystateprovincecode().size() > 0) {
    _internal_set_territorystateprovincecode(from._internal_territorystateprovincecode());
  }
  if (from.countrycode().size() > 0) {
    _internal_set_countrycode(from._internal_countrycode());
  }
  if (from.postalzipcode().size() > 0) {
    _internal_set_postalzipcode(from._internal_postalzipcode());
  }
  if (from.emailaddress().size() > 0) {
    _internal_set_emailaddress(from._internal_emailaddress());
  }
  if (from.phonenumber().size() > 0) {
    _internal_set_phonenumber(from._internal_phonenumber());
  }
  if (from.domainname().size() > 0) {
    _internal_set_domainname(from._internal_domainname());
  }
  if (from.paymailhandle().size() > 0) {
    _internal_set_paymailhandle(from._internal_paymailhandle());
  }
}

void EntityField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.EntityField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityField::CopyFrom(const EntityField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.EntityField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityField::IsInitialized() const {
  return true;
}

void EntityField::InternalSwap(EntityField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  administration_.InternalSwap(&other->administration_);
  management_.InternalSwap(&other->management_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lei_.Swap(&other->lei_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unitnumber_.Swap(&other->unitnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buildingnumber_.Swap(&other->buildingnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  street_.Swap(&other->street_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  suburbcity_.Swap(&other->suburbcity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  territorystateprovincecode_.Swap(&other->territorystateprovincecode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  countrycode_.Swap(&other->countrycode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postalzipcode_.Swap(&other->postalzipcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  emailaddress_.Swap(&other->emailaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  phonenumber_.Swap(&other->phonenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  domainname_.Swap(&other->domainname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paymailhandle_.Swap(&other->paymailhandle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeField::InitAsDefaultInstance() {
}
class FeeField::_Internal {
 public:
};

FeeField::FeeField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.FeeField)
}
FeeField::FeeField(const FeeField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:actions.FeeField)
}

void FeeField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeField_actions_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = PROTOBUF_ULONGLONG(0);
}

FeeField::~FeeField() {
  // @@protoc_insertion_point(destructor:actions.FeeField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeeField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FeeField::ArenaDtor(void* object) {
  FeeField* _this = reinterpret_cast< FeeField* >(object);
  (void)_this;
}
void FeeField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeeField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeField& FeeField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeField_actions_2eproto.base);
  return *internal_default_instance();
}


void FeeField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.FeeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.FeeField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.FeeField)
  return target;
}

size_t FeeField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.FeeField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.FeeField)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.FeeField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.FeeField)
    MergeFrom(*source);
  }
}

void FeeField::MergeFrom(const FeeField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.FeeField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void FeeField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.FeeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeField::CopyFrom(const FeeField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.FeeField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeField::IsInitialized() const {
  return true;
}

void FeeField::InternalSwap(FeeField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManagerField::InitAsDefaultInstance() {
}
class ManagerField::_Internal {
 public:
};

ManagerField::ManagerField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ManagerField)
}
ManagerField::ManagerField(const ManagerField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:actions.ManagerField)
}

void ManagerField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManagerField_actions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

ManagerField::~ManagerField() {
  // @@protoc_insertion_point(destructor:actions.ManagerField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ManagerField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ManagerField::ArenaDtor(void* object) {
  ManagerField* _this = reinterpret_cast< ManagerField* >(object);
  (void)_this;
}
void ManagerField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManagerField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManagerField& ManagerField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManagerField_actions_2eproto.base);
  return *internal_default_instance();
}


void ManagerField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ManagerField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManagerField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ManagerField.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManagerField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ManagerField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ManagerField.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ManagerField)
  return target;
}

size_t ManagerField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ManagerField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManagerField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ManagerField)
  GOOGLE_DCHECK_NE(&from, this);
  const ManagerField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManagerField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ManagerField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ManagerField)
    MergeFrom(*source);
  }
}

void ManagerField::MergeFrom(const ManagerField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ManagerField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ManagerField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ManagerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerField::CopyFrom(const ManagerField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ManagerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerField::IsInitialized() const {
  return true;
}

void ManagerField::InternalSwap(ManagerField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManagerField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OracleField::InitAsDefaultInstance() {
}
class OracleField::_Internal {
 public:
};

OracleField::OracleField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  oracletypes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.OracleField)
}
OracleField::OracleField(const OracleField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      oracletypes_(from.oracletypes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entitycontract().empty()) {
    entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_entitycontract(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.OracleField)
}

void OracleField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OracleField_actions_2eproto.base);
  entitycontract_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OracleField::~OracleField() {
  // @@protoc_insertion_point(destructor:actions.OracleField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OracleField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entitycontract_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OracleField::ArenaDtor(void* object) {
  OracleField* _this = reinterpret_cast< OracleField* >(object);
  (void)_this;
}
void OracleField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OracleField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OracleField& OracleField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OracleField_actions_2eproto.base);
  return *internal_default_instance();
}


void OracleField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.OracleField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oracletypes_.Clear();
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 OracleTypes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_oracletypes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_oracletypes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes EntityContract = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_entitycontract();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OracleField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.OracleField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 OracleTypes = 4;
  {
    int byte_size = _oracletypes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_oracletypes(), byte_size, target);
    }
  }

  // bytes EntityContract = 5;
  if (this->entitycontract().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_entitycontract(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.OracleField)
  return target;
}

size_t OracleField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.OracleField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 OracleTypes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->oracletypes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _oracletypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes EntityContract = 5;
  if (this->entitycontract().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_entitycontract());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OracleField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.OracleField)
  GOOGLE_DCHECK_NE(&from, this);
  const OracleField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OracleField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.OracleField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.OracleField)
    MergeFrom(*source);
  }
}

void OracleField::MergeFrom(const OracleField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.OracleField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oracletypes_.MergeFrom(from.oracletypes_);
  if (from.entitycontract().size() > 0) {
    _internal_set_entitycontract(from._internal_entitycontract());
  }
}

void OracleField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.OracleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OracleField::CopyFrom(const OracleField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.OracleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleField::IsInitialized() const {
  return true;
}

void OracleField::InternalSwap(OracleField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  oracletypes_.InternalSwap(&other->oracletypes_);
  entitycontract_.Swap(&other->entitycontract_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuantityIndexField::InitAsDefaultInstance() {
}
class QuantityIndexField::_Internal {
 public:
};

QuantityIndexField::QuantityIndexField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.QuantityIndexField)
}
QuantityIndexField::QuantityIndexField(const QuantityIndexField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:actions.QuantityIndexField)
}

void QuantityIndexField::SharedCtor() {
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(index_));
}

QuantityIndexField::~QuantityIndexField() {
  // @@protoc_insertion_point(destructor:actions.QuantityIndexField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QuantityIndexField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QuantityIndexField::ArenaDtor(void* object) {
  QuantityIndexField* _this = reinterpret_cast< QuantityIndexField* >(object);
  (void)_this;
}
void QuantityIndexField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuantityIndexField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantityIndexField& QuantityIndexField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantityIndexField_actions_2eproto.base);
  return *internal_default_instance();
}


void QuantityIndexField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.QuantityIndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuantityIndexField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuantityIndexField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.QuantityIndexField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.QuantityIndexField)
  return target;
}

size_t QuantityIndexField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.QuantityIndexField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  // uint32 Index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantityIndexField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.QuantityIndexField)
  GOOGLE_DCHECK_NE(&from, this);
  const QuantityIndexField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuantityIndexField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.QuantityIndexField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.QuantityIndexField)
    MergeFrom(*source);
  }
}

void QuantityIndexField::MergeFrom(const QuantityIndexField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.QuantityIndexField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void QuantityIndexField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.QuantityIndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuantityIndexField::CopyFrom(const QuantityIndexField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.QuantityIndexField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantityIndexField::IsInitialized() const {
  return true;
}

void QuantityIndexField::InternalSwap(QuantityIndexField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuantityIndexField, index_)
      + sizeof(QuantityIndexField::index_)
      - PROTOBUF_FIELD_OFFSET(QuantityIndexField, quantity_)>(
          reinterpret_cast<char*>(&quantity_),
          reinterpret_cast<char*>(&other->quantity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuantityIndexField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReferenceTransactionField::InitAsDefaultInstance() {
}
class ReferenceTransactionField::_Internal {
 public:
};

ReferenceTransactionField::ReferenceTransactionField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  outputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ReferenceTransactionField)
}
ReferenceTransactionField::ReferenceTransactionField(const ReferenceTransactionField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction().empty()) {
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transaction(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:actions.ReferenceTransactionField)
}

void ReferenceTransactionField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReferenceTransactionField_actions_2eproto.base);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReferenceTransactionField::~ReferenceTransactionField() {
  // @@protoc_insertion_point(destructor:actions.ReferenceTransactionField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceTransactionField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReferenceTransactionField::ArenaDtor(void* object) {
  ReferenceTransactionField* _this = reinterpret_cast< ReferenceTransactionField* >(object);
  (void)_this;
}
void ReferenceTransactionField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceTransactionField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReferenceTransactionField& ReferenceTransactionField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReferenceTransactionField_actions_2eproto.base);
  return *internal_default_instance();
}


void ReferenceTransactionField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ReferenceTransactionField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceTransactionField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes Outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_outputs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceTransactionField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ReferenceTransactionField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Transaction = 1;
  if (this->transaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction(), target);
  }

  // repeated bytes Outputs = 2;
  for (int i = 0, n = this->_internal_outputs_size(); i < n; i++) {
    const auto& s = this->_internal_outputs(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ReferenceTransactionField)
  return target;
}

size_t ReferenceTransactionField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ReferenceTransactionField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes Outputs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(outputs_.size());
  for (int i = 0, n = outputs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      outputs_.Get(i));
  }

  // bytes Transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceTransactionField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ReferenceTransactionField)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceTransactionField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceTransactionField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ReferenceTransactionField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ReferenceTransactionField)
    MergeFrom(*source);
  }
}

void ReferenceTransactionField::MergeFrom(const ReferenceTransactionField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ReferenceTransactionField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
  if (from.transaction().size() > 0) {
    _internal_set_transaction(from._internal_transaction());
  }
}

void ReferenceTransactionField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ReferenceTransactionField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceTransactionField::CopyFrom(const ReferenceTransactionField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ReferenceTransactionField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceTransactionField::IsInitialized() const {
  return true;
}

void ReferenceTransactionField::InternalSwap(ReferenceTransactionField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputs_.InternalSwap(&other->outputs_);
  transaction_.Swap(&other->transaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceTransactionField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServiceField::InitAsDefaultInstance() {
}
class ServiceField::_Internal {
 public:
};

ServiceField::ServiceField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.ServiceField)
}
ServiceField::ServiceField(const ServiceField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_url(),
      GetArena());
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_publickey(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:actions.ServiceField)
}

void ServiceField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceField_actions_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

ServiceField::~ServiceField() {
  // @@protoc_insertion_point(destructor:actions.ServiceField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServiceField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceField::ArenaDtor(void* object) {
  ServiceField* _this = reinterpret_cast< ServiceField* >(object);
  (void)_this;
}
void ServiceField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceField& ServiceField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceField_actions_2eproto.base);
  return *internal_default_instance();
}


void ServiceField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.ServiceField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string URL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.ServiceField.URL"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes PublicKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.ServiceField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // string URL = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.ServiceField.URL");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // bytes PublicKey = 3;
  if (this->publickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.ServiceField)
  return target;
}

size_t ServiceField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.ServiceField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string URL = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // bytes PublicKey = 3;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  // uint32 Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.ServiceField)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.ServiceField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.ServiceField)
    MergeFrom(*source);
  }
}

void ServiceField::MergeFrom(const ServiceField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.ServiceField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {
    _internal_set_url(from._internal_url());
  }
  if (from.publickey().size() > 0) {
    _internal_set_publickey(from._internal_publickey());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ServiceField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.ServiceField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceField::CopyFrom(const ServiceField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.ServiceField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceField::IsInitialized() const {
  return true;
}

void ServiceField::InternalSwap(ServiceField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetAddressField::InitAsDefaultInstance() {
}
class TargetAddressField::_Internal {
 public:
};

TargetAddressField::TargetAddressField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.TargetAddressField)
}
TargetAddressField::TargetAddressField(const TargetAddressField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  quantity_ = from.quantity_;
  // @@protoc_insertion_point(copy_constructor:actions.TargetAddressField)
}

void TargetAddressField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TargetAddressField_actions_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quantity_ = PROTOBUF_ULONGLONG(0);
}

TargetAddressField::~TargetAddressField() {
  // @@protoc_insertion_point(destructor:actions.TargetAddressField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetAddressField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TargetAddressField::ArenaDtor(void* object) {
  TargetAddressField* _this = reinterpret_cast< TargetAddressField* >(object);
  (void)_this;
}
void TargetAddressField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetAddressField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetAddressField& TargetAddressField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetAddressField_actions_2eproto.base);
  return *internal_default_instance();
}


void TargetAddressField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.TargetAddressField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  quantity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetAddressField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes Address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 Quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetAddressField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.TargetAddressField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.TargetAddressField)
  return target;
}

size_t TargetAddressField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.TargetAddressField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_address());
  }

  // uint64 Quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetAddressField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.TargetAddressField)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetAddressField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetAddressField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.TargetAddressField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.TargetAddressField)
    MergeFrom(*source);
  }
}

void TargetAddressField::MergeFrom(const TargetAddressField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.TargetAddressField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void TargetAddressField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.TargetAddressField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetAddressField::CopyFrom(const TargetAddressField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.TargetAddressField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetAddressField::IsInitialized() const {
  return true;
}

void TargetAddressField::InternalSwap(TargetAddressField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(quantity_, other->quantity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetAddressField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VotingSystemField::InitAsDefaultInstance() {
}
class VotingSystemField::_Internal {
 public:
};

VotingSystemField::VotingSystemField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:actions.VotingSystemField)
}
VotingSystemField::VotingSystemField(const VotingSystemField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  votetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_votetype().empty()) {
    votetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_votetype(),
      GetArena());
  }
  ::memcpy(&tallylogic_, &from.tallylogic_,
    static_cast<size_t>(reinterpret_cast<char*>(&votemultiplierpermitted_) -
    reinterpret_cast<char*>(&tallylogic_)) + sizeof(votemultiplierpermitted_));
  // @@protoc_insertion_point(copy_constructor:actions.VotingSystemField)
}

void VotingSystemField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VotingSystemField_actions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  votetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tallylogic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votemultiplierpermitted_) -
      reinterpret_cast<char*>(&tallylogic_)) + sizeof(votemultiplierpermitted_));
}

VotingSystemField::~VotingSystemField() {
  // @@protoc_insertion_point(destructor:actions.VotingSystemField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VotingSystemField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  votetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VotingSystemField::ArenaDtor(void* object) {
  VotingSystemField* _this = reinterpret_cast< VotingSystemField* >(object);
  (void)_this;
}
void VotingSystemField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VotingSystemField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VotingSystemField& VotingSystemField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VotingSystemField_actions_2eproto.base);
  return *internal_default_instance();
}


void VotingSystemField::Clear() {
// @@protoc_insertion_point(message_clear_start:actions.VotingSystemField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  votetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tallylogic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votemultiplierpermitted_) -
      reinterpret_cast<char*>(&tallylogic_)) + sizeof(votemultiplierpermitted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VotingSystemField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.VotingSystemField.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string VoteType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_votetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "actions.VotingSystemField.VoteType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 TallyLogic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tallylogic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ThresholdPercentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          thresholdpercentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool VoteMultiplierPermitted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          votemultiplierpermitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 HolderProposalFee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          holderproposalfee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VotingSystemField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:actions.VotingSystemField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.VotingSystemField.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string VoteType = 2;
  if (this->votetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_votetype().data(), static_cast<int>(this->_internal_votetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "actions.VotingSystemField.VoteType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_votetype(), target);
  }

  // uint32 TallyLogic = 3;
  if (this->tallylogic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tallylogic(), target);
  }

  // uint32 ThresholdPercentage = 4;
  if (this->thresholdpercentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_thresholdpercentage(), target);
  }

  // bool VoteMultiplierPermitted = 5;
  if (this->votemultiplierpermitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_votemultiplierpermitted(), target);
  }

  // uint64 HolderProposalFee = 6;
  if (this->holderproposalfee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_holderproposalfee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:actions.VotingSystemField)
  return target;
}

size_t VotingSystemField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:actions.VotingSystemField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string VoteType = 2;
  if (this->votetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_votetype());
  }

  // uint32 TallyLogic = 3;
  if (this->tallylogic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tallylogic());
  }

  // uint32 ThresholdPercentage = 4;
  if (this->thresholdpercentage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thresholdpercentage());
  }

  // uint64 HolderProposalFee = 6;
  if (this->holderproposalfee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_holderproposalfee());
  }

  // bool VoteMultiplierPermitted = 5;
  if (this->votemultiplierpermitted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VotingSystemField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:actions.VotingSystemField)
  GOOGLE_DCHECK_NE(&from, this);
  const VotingSystemField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VotingSystemField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:actions.VotingSystemField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:actions.VotingSystemField)
    MergeFrom(*source);
  }
}

void VotingSystemField::MergeFrom(const VotingSystemField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:actions.VotingSystemField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.votetype().size() > 0) {
    _internal_set_votetype(from._internal_votetype());
  }
  if (from.tallylogic() != 0) {
    _internal_set_tallylogic(from._internal_tallylogic());
  }
  if (from.thresholdpercentage() != 0) {
    _internal_set_thresholdpercentage(from._internal_thresholdpercentage());
  }
  if (from.holderproposalfee() != 0) {
    _internal_set_holderproposalfee(from._internal_holderproposalfee());
  }
  if (from.votemultiplierpermitted() != 0) {
    _internal_set_votemultiplierpermitted(from._internal_votemultiplierpermitted());
  }
}

void VotingSystemField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:actions.VotingSystemField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VotingSystemField::CopyFrom(const VotingSystemField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:actions.VotingSystemField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotingSystemField::IsInitialized() const {
  return true;
}

void VotingSystemField::InternalSwap(VotingSystemField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  votetype_.Swap(&other->votetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VotingSystemField, votemultiplierpermitted_)
      + sizeof(VotingSystemField::votemultiplierpermitted_)
      - PROTOBUF_FIELD_OFFSET(VotingSystemField, tallylogic_)>(
          reinterpret_cast<char*>(&tallylogic_),
          reinterpret_cast<char*>(&other->tallylogic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VotingSystemField::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace actions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::actions::ContractOffer* Arena::CreateMaybeMessage< ::actions::ContractOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ContractOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ContractFormation* Arena::CreateMaybeMessage< ::actions::ContractFormation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ContractFormation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ContractAmendment* Arena::CreateMaybeMessage< ::actions::ContractAmendment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ContractAmendment >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::StaticContractFormation* Arena::CreateMaybeMessage< ::actions::StaticContractFormation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::StaticContractFormation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ContractAddressChange* Arena::CreateMaybeMessage< ::actions::ContractAddressChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ContractAddressChange >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::BodyOfAgreementOffer* Arena::CreateMaybeMessage< ::actions::BodyOfAgreementOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::BodyOfAgreementOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::BodyOfAgreementFormation* Arena::CreateMaybeMessage< ::actions::BodyOfAgreementFormation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::BodyOfAgreementFormation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::BodyOfAgreementAmendment* Arena::CreateMaybeMessage< ::actions::BodyOfAgreementAmendment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::BodyOfAgreementAmendment >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentDefinition* Arena::CreateMaybeMessage< ::actions::InstrumentDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentCreation* Arena::CreateMaybeMessage< ::actions::InstrumentCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentModification* Arena::CreateMaybeMessage< ::actions::InstrumentModification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentModification >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Transfer* Arena::CreateMaybeMessage< ::actions::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Settlement* Arena::CreateMaybeMessage< ::actions::Settlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Settlement >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::RectificationSettlement* Arena::CreateMaybeMessage< ::actions::RectificationSettlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::RectificationSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Proposal* Arena::CreateMaybeMessage< ::actions::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Vote* Arena::CreateMaybeMessage< ::actions::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::BallotCast* Arena::CreateMaybeMessage< ::actions::BallotCast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::BallotCast >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::BallotCounted* Arena::CreateMaybeMessage< ::actions::BallotCounted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::BallotCounted >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Result* Arena::CreateMaybeMessage< ::actions::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Order* Arena::CreateMaybeMessage< ::actions::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Freeze* Arena::CreateMaybeMessage< ::actions::Freeze >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Freeze >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Thaw* Arena::CreateMaybeMessage< ::actions::Thaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Thaw >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Confiscation* Arena::CreateMaybeMessage< ::actions::Confiscation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Confiscation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::DeprecatedReconciliation* Arena::CreateMaybeMessage< ::actions::DeprecatedReconciliation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::DeprecatedReconciliation >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Establishment* Arena::CreateMaybeMessage< ::actions::Establishment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Establishment >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Addition* Arena::CreateMaybeMessage< ::actions::Addition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Addition >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Alteration* Arena::CreateMaybeMessage< ::actions::Alteration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Alteration >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Removal* Arena::CreateMaybeMessage< ::actions::Removal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Removal >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Message* Arena::CreateMaybeMessage< ::actions::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::Rejection* Arena::CreateMaybeMessage< ::actions::Rejection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::Rejection >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::AdministratorField* Arena::CreateMaybeMessage< ::actions::AdministratorField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::AdministratorField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::AdminIdentityCertificateField* Arena::CreateMaybeMessage< ::actions::AdminIdentityCertificateField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::AdminIdentityCertificateField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::AmendmentField* Arena::CreateMaybeMessage< ::actions::AmendmentField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::AmendmentField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentReceiverField* Arena::CreateMaybeMessage< ::actions::InstrumentReceiverField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentReceiverField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentSettlementField* Arena::CreateMaybeMessage< ::actions::InstrumentSettlementField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentSettlementField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::InstrumentTransferField* Arena::CreateMaybeMessage< ::actions::InstrumentTransferField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::InstrumentTransferField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ChapterField* Arena::CreateMaybeMessage< ::actions::ChapterField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ChapterField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ClauseField* Arena::CreateMaybeMessage< ::actions::ClauseField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ClauseField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::DefinedTermField* Arena::CreateMaybeMessage< ::actions::DefinedTermField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::DefinedTermField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::DocumentField* Arena::CreateMaybeMessage< ::actions::DocumentField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::DocumentField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::EntityField* Arena::CreateMaybeMessage< ::actions::EntityField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::EntityField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::FeeField* Arena::CreateMaybeMessage< ::actions::FeeField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::FeeField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ManagerField* Arena::CreateMaybeMessage< ::actions::ManagerField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ManagerField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::OracleField* Arena::CreateMaybeMessage< ::actions::OracleField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::OracleField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::QuantityIndexField* Arena::CreateMaybeMessage< ::actions::QuantityIndexField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::QuantityIndexField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ReferenceTransactionField* Arena::CreateMaybeMessage< ::actions::ReferenceTransactionField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ReferenceTransactionField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::ServiceField* Arena::CreateMaybeMessage< ::actions::ServiceField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::ServiceField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::TargetAddressField* Arena::CreateMaybeMessage< ::actions::TargetAddressField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::TargetAddressField >(arena);
}
template<> PROTOBUF_NOINLINE ::actions::VotingSystemField* Arena::CreateMaybeMessage< ::actions::VotingSystemField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::actions::VotingSystemField >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
