// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: actions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_actions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_actions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_actions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_actions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_actions_2eproto;
namespace actions {
class Addition;
class AdditionDefaultTypeInternal;
extern AdditionDefaultTypeInternal _Addition_default_instance_;
class AdminIdentityCertificateField;
class AdminIdentityCertificateFieldDefaultTypeInternal;
extern AdminIdentityCertificateFieldDefaultTypeInternal _AdminIdentityCertificateField_default_instance_;
class AdministratorField;
class AdministratorFieldDefaultTypeInternal;
extern AdministratorFieldDefaultTypeInternal _AdministratorField_default_instance_;
class Alteration;
class AlterationDefaultTypeInternal;
extern AlterationDefaultTypeInternal _Alteration_default_instance_;
class AmendmentField;
class AmendmentFieldDefaultTypeInternal;
extern AmendmentFieldDefaultTypeInternal _AmendmentField_default_instance_;
class BallotCast;
class BallotCastDefaultTypeInternal;
extern BallotCastDefaultTypeInternal _BallotCast_default_instance_;
class BallotCounted;
class BallotCountedDefaultTypeInternal;
extern BallotCountedDefaultTypeInternal _BallotCounted_default_instance_;
class BodyOfAgreementAmendment;
class BodyOfAgreementAmendmentDefaultTypeInternal;
extern BodyOfAgreementAmendmentDefaultTypeInternal _BodyOfAgreementAmendment_default_instance_;
class BodyOfAgreementFormation;
class BodyOfAgreementFormationDefaultTypeInternal;
extern BodyOfAgreementFormationDefaultTypeInternal _BodyOfAgreementFormation_default_instance_;
class BodyOfAgreementOffer;
class BodyOfAgreementOfferDefaultTypeInternal;
extern BodyOfAgreementOfferDefaultTypeInternal _BodyOfAgreementOffer_default_instance_;
class ChapterField;
class ChapterFieldDefaultTypeInternal;
extern ChapterFieldDefaultTypeInternal _ChapterField_default_instance_;
class ClauseField;
class ClauseFieldDefaultTypeInternal;
extern ClauseFieldDefaultTypeInternal _ClauseField_default_instance_;
class Confiscation;
class ConfiscationDefaultTypeInternal;
extern ConfiscationDefaultTypeInternal _Confiscation_default_instance_;
class ContractAddressChange;
class ContractAddressChangeDefaultTypeInternal;
extern ContractAddressChangeDefaultTypeInternal _ContractAddressChange_default_instance_;
class ContractAmendment;
class ContractAmendmentDefaultTypeInternal;
extern ContractAmendmentDefaultTypeInternal _ContractAmendment_default_instance_;
class ContractFormation;
class ContractFormationDefaultTypeInternal;
extern ContractFormationDefaultTypeInternal _ContractFormation_default_instance_;
class ContractOffer;
class ContractOfferDefaultTypeInternal;
extern ContractOfferDefaultTypeInternal _ContractOffer_default_instance_;
class DefinedTermField;
class DefinedTermFieldDefaultTypeInternal;
extern DefinedTermFieldDefaultTypeInternal _DefinedTermField_default_instance_;
class DeprecatedReconciliation;
class DeprecatedReconciliationDefaultTypeInternal;
extern DeprecatedReconciliationDefaultTypeInternal _DeprecatedReconciliation_default_instance_;
class DocumentField;
class DocumentFieldDefaultTypeInternal;
extern DocumentFieldDefaultTypeInternal _DocumentField_default_instance_;
class EntityField;
class EntityFieldDefaultTypeInternal;
extern EntityFieldDefaultTypeInternal _EntityField_default_instance_;
class Establishment;
class EstablishmentDefaultTypeInternal;
extern EstablishmentDefaultTypeInternal _Establishment_default_instance_;
class FeeField;
class FeeFieldDefaultTypeInternal;
extern FeeFieldDefaultTypeInternal _FeeField_default_instance_;
class Freeze;
class FreezeDefaultTypeInternal;
extern FreezeDefaultTypeInternal _Freeze_default_instance_;
class InstrumentCreation;
class InstrumentCreationDefaultTypeInternal;
extern InstrumentCreationDefaultTypeInternal _InstrumentCreation_default_instance_;
class InstrumentDefinition;
class InstrumentDefinitionDefaultTypeInternal;
extern InstrumentDefinitionDefaultTypeInternal _InstrumentDefinition_default_instance_;
class InstrumentModification;
class InstrumentModificationDefaultTypeInternal;
extern InstrumentModificationDefaultTypeInternal _InstrumentModification_default_instance_;
class InstrumentReceiverField;
class InstrumentReceiverFieldDefaultTypeInternal;
extern InstrumentReceiverFieldDefaultTypeInternal _InstrumentReceiverField_default_instance_;
class InstrumentSettlementField;
class InstrumentSettlementFieldDefaultTypeInternal;
extern InstrumentSettlementFieldDefaultTypeInternal _InstrumentSettlementField_default_instance_;
class InstrumentTransferField;
class InstrumentTransferFieldDefaultTypeInternal;
extern InstrumentTransferFieldDefaultTypeInternal _InstrumentTransferField_default_instance_;
class ManagerField;
class ManagerFieldDefaultTypeInternal;
extern ManagerFieldDefaultTypeInternal _ManagerField_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class OracleField;
class OracleFieldDefaultTypeInternal;
extern OracleFieldDefaultTypeInternal _OracleField_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class Proposal;
class ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class QuantityIndexField;
class QuantityIndexFieldDefaultTypeInternal;
extern QuantityIndexFieldDefaultTypeInternal _QuantityIndexField_default_instance_;
class RectificationSettlement;
class RectificationSettlementDefaultTypeInternal;
extern RectificationSettlementDefaultTypeInternal _RectificationSettlement_default_instance_;
class ReferenceTransactionField;
class ReferenceTransactionFieldDefaultTypeInternal;
extern ReferenceTransactionFieldDefaultTypeInternal _ReferenceTransactionField_default_instance_;
class Rejection;
class RejectionDefaultTypeInternal;
extern RejectionDefaultTypeInternal _Rejection_default_instance_;
class Removal;
class RemovalDefaultTypeInternal;
extern RemovalDefaultTypeInternal _Removal_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ServiceField;
class ServiceFieldDefaultTypeInternal;
extern ServiceFieldDefaultTypeInternal _ServiceField_default_instance_;
class Settlement;
class SettlementDefaultTypeInternal;
extern SettlementDefaultTypeInternal _Settlement_default_instance_;
class StaticContractFormation;
class StaticContractFormationDefaultTypeInternal;
extern StaticContractFormationDefaultTypeInternal _StaticContractFormation_default_instance_;
class TargetAddressField;
class TargetAddressFieldDefaultTypeInternal;
extern TargetAddressFieldDefaultTypeInternal _TargetAddressField_default_instance_;
class Thaw;
class ThawDefaultTypeInternal;
extern ThawDefaultTypeInternal _Thaw_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
class Vote;
class VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VotingSystemField;
class VotingSystemFieldDefaultTypeInternal;
extern VotingSystemFieldDefaultTypeInternal _VotingSystemField_default_instance_;
}  // namespace actions
PROTOBUF_NAMESPACE_OPEN
template<> ::actions::Addition* Arena::CreateMaybeMessage<::actions::Addition>(Arena*);
template<> ::actions::AdminIdentityCertificateField* Arena::CreateMaybeMessage<::actions::AdminIdentityCertificateField>(Arena*);
template<> ::actions::AdministratorField* Arena::CreateMaybeMessage<::actions::AdministratorField>(Arena*);
template<> ::actions::Alteration* Arena::CreateMaybeMessage<::actions::Alteration>(Arena*);
template<> ::actions::AmendmentField* Arena::CreateMaybeMessage<::actions::AmendmentField>(Arena*);
template<> ::actions::BallotCast* Arena::CreateMaybeMessage<::actions::BallotCast>(Arena*);
template<> ::actions::BallotCounted* Arena::CreateMaybeMessage<::actions::BallotCounted>(Arena*);
template<> ::actions::BodyOfAgreementAmendment* Arena::CreateMaybeMessage<::actions::BodyOfAgreementAmendment>(Arena*);
template<> ::actions::BodyOfAgreementFormation* Arena::CreateMaybeMessage<::actions::BodyOfAgreementFormation>(Arena*);
template<> ::actions::BodyOfAgreementOffer* Arena::CreateMaybeMessage<::actions::BodyOfAgreementOffer>(Arena*);
template<> ::actions::ChapterField* Arena::CreateMaybeMessage<::actions::ChapterField>(Arena*);
template<> ::actions::ClauseField* Arena::CreateMaybeMessage<::actions::ClauseField>(Arena*);
template<> ::actions::Confiscation* Arena::CreateMaybeMessage<::actions::Confiscation>(Arena*);
template<> ::actions::ContractAddressChange* Arena::CreateMaybeMessage<::actions::ContractAddressChange>(Arena*);
template<> ::actions::ContractAmendment* Arena::CreateMaybeMessage<::actions::ContractAmendment>(Arena*);
template<> ::actions::ContractFormation* Arena::CreateMaybeMessage<::actions::ContractFormation>(Arena*);
template<> ::actions::ContractOffer* Arena::CreateMaybeMessage<::actions::ContractOffer>(Arena*);
template<> ::actions::DefinedTermField* Arena::CreateMaybeMessage<::actions::DefinedTermField>(Arena*);
template<> ::actions::DeprecatedReconciliation* Arena::CreateMaybeMessage<::actions::DeprecatedReconciliation>(Arena*);
template<> ::actions::DocumentField* Arena::CreateMaybeMessage<::actions::DocumentField>(Arena*);
template<> ::actions::EntityField* Arena::CreateMaybeMessage<::actions::EntityField>(Arena*);
template<> ::actions::Establishment* Arena::CreateMaybeMessage<::actions::Establishment>(Arena*);
template<> ::actions::FeeField* Arena::CreateMaybeMessage<::actions::FeeField>(Arena*);
template<> ::actions::Freeze* Arena::CreateMaybeMessage<::actions::Freeze>(Arena*);
template<> ::actions::InstrumentCreation* Arena::CreateMaybeMessage<::actions::InstrumentCreation>(Arena*);
template<> ::actions::InstrumentDefinition* Arena::CreateMaybeMessage<::actions::InstrumentDefinition>(Arena*);
template<> ::actions::InstrumentModification* Arena::CreateMaybeMessage<::actions::InstrumentModification>(Arena*);
template<> ::actions::InstrumentReceiverField* Arena::CreateMaybeMessage<::actions::InstrumentReceiverField>(Arena*);
template<> ::actions::InstrumentSettlementField* Arena::CreateMaybeMessage<::actions::InstrumentSettlementField>(Arena*);
template<> ::actions::InstrumentTransferField* Arena::CreateMaybeMessage<::actions::InstrumentTransferField>(Arena*);
template<> ::actions::ManagerField* Arena::CreateMaybeMessage<::actions::ManagerField>(Arena*);
template<> ::actions::Message* Arena::CreateMaybeMessage<::actions::Message>(Arena*);
template<> ::actions::OracleField* Arena::CreateMaybeMessage<::actions::OracleField>(Arena*);
template<> ::actions::Order* Arena::CreateMaybeMessage<::actions::Order>(Arena*);
template<> ::actions::Proposal* Arena::CreateMaybeMessage<::actions::Proposal>(Arena*);
template<> ::actions::QuantityIndexField* Arena::CreateMaybeMessage<::actions::QuantityIndexField>(Arena*);
template<> ::actions::RectificationSettlement* Arena::CreateMaybeMessage<::actions::RectificationSettlement>(Arena*);
template<> ::actions::ReferenceTransactionField* Arena::CreateMaybeMessage<::actions::ReferenceTransactionField>(Arena*);
template<> ::actions::Rejection* Arena::CreateMaybeMessage<::actions::Rejection>(Arena*);
template<> ::actions::Removal* Arena::CreateMaybeMessage<::actions::Removal>(Arena*);
template<> ::actions::Result* Arena::CreateMaybeMessage<::actions::Result>(Arena*);
template<> ::actions::ServiceField* Arena::CreateMaybeMessage<::actions::ServiceField>(Arena*);
template<> ::actions::Settlement* Arena::CreateMaybeMessage<::actions::Settlement>(Arena*);
template<> ::actions::StaticContractFormation* Arena::CreateMaybeMessage<::actions::StaticContractFormation>(Arena*);
template<> ::actions::TargetAddressField* Arena::CreateMaybeMessage<::actions::TargetAddressField>(Arena*);
template<> ::actions::Thaw* Arena::CreateMaybeMessage<::actions::Thaw>(Arena*);
template<> ::actions::Transfer* Arena::CreateMaybeMessage<::actions::Transfer>(Arena*);
template<> ::actions::Vote* Arena::CreateMaybeMessage<::actions::Vote>(Arena*);
template<> ::actions::VotingSystemField* Arena::CreateMaybeMessage<::actions::VotingSystemField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace actions {

// ===================================================================

class ContractOffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ContractOffer) */ {
 public:
  inline ContractOffer() : ContractOffer(nullptr) {};
  virtual ~ContractOffer();

  ContractOffer(const ContractOffer& from);
  ContractOffer(ContractOffer&& from) noexcept
    : ContractOffer() {
    *this = ::std::move(from);
  }

  inline ContractOffer& operator=(const ContractOffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOffer& operator=(ContractOffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOffer* internal_default_instance() {
    return reinterpret_cast<const ContractOffer*>(
               &_ContractOffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractOffer& a, ContractOffer& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractOffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOffer* New() const final {
    return CreateMaybeMessage<ContractOffer>(nullptr);
  }

  ContractOffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOffer& from);
  void MergeFrom(const ContractOffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ContractOffer";
  }
  protected:
  explicit ContractOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportingDocsFieldNumber = 5,
    kVotingSystemsFieldNumber = 18,
    kOraclesFieldNumber = 23,
    kServicesFieldNumber = 28,
    kAdminIdentityCertificatesFieldNumber = 29,
    kContractNameFieldNumber = 1,
    kBodyOfAgreementFieldNumber = 3,
    kContractURIFieldNumber = 9,
    kContractPermissionsFieldNumber = 19,
    kMasterAddressFieldNumber = 24,
    kEntityContractFieldNumber = 25,
    kOperatorEntityContractFieldNumber = 26,
    kGoverningLawFieldNumber = 30,
    kJurisdictionFieldNumber = 31,
    kIssuerFieldNumber = 10,
    kContractExpirationFieldNumber = 8,
    kBodyOfAgreementTypeFieldNumber = 2,
    kContractOperatorIncludedFieldNumber = 12,
    kAdministrationProposalFieldNumber = 21,
    kHolderProposalFieldNumber = 22,
    kContractFeeFieldNumber = 17,
    kRestrictedQtyInstrumentsFieldNumber = 20,
    kContractTypeFieldNumber = 27,
  };
  // repeated .actions.DocumentField SupportingDocs = 5;
  int supportingdocs_size() const;
  private:
  int _internal_supportingdocs_size() const;
  public:
  void clear_supportingdocs();
  ::actions::DocumentField* mutable_supportingdocs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
      mutable_supportingdocs();
  private:
  const ::actions::DocumentField& _internal_supportingdocs(int index) const;
  ::actions::DocumentField* _internal_add_supportingdocs();
  public:
  const ::actions::DocumentField& supportingdocs(int index) const;
  ::actions::DocumentField* add_supportingdocs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
      supportingdocs() const;

  // repeated .actions.VotingSystemField VotingSystems = 18;
  int votingsystems_size() const;
  private:
  int _internal_votingsystems_size() const;
  public:
  void clear_votingsystems();
  ::actions::VotingSystemField* mutable_votingsystems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >*
      mutable_votingsystems();
  private:
  const ::actions::VotingSystemField& _internal_votingsystems(int index) const;
  ::actions::VotingSystemField* _internal_add_votingsystems();
  public:
  const ::actions::VotingSystemField& votingsystems(int index) const;
  ::actions::VotingSystemField* add_votingsystems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >&
      votingsystems() const;

  // repeated .actions.OracleField Oracles = 23;
  int oracles_size() const;
  private:
  int _internal_oracles_size() const;
  public:
  void clear_oracles();
  ::actions::OracleField* mutable_oracles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >*
      mutable_oracles();
  private:
  const ::actions::OracleField& _internal_oracles(int index) const;
  ::actions::OracleField* _internal_add_oracles();
  public:
  const ::actions::OracleField& oracles(int index) const;
  ::actions::OracleField* add_oracles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >&
      oracles() const;

  // repeated .actions.ServiceField Services = 28;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::actions::ServiceField* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >*
      mutable_services();
  private:
  const ::actions::ServiceField& _internal_services(int index) const;
  ::actions::ServiceField* _internal_add_services();
  public:
  const ::actions::ServiceField& services(int index) const;
  ::actions::ServiceField* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >&
      services() const;

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 29;
  int adminidentitycertificates_size() const;
  private:
  int _internal_adminidentitycertificates_size() const;
  public:
  void clear_adminidentitycertificates();
  ::actions::AdminIdentityCertificateField* mutable_adminidentitycertificates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >*
      mutable_adminidentitycertificates();
  private:
  const ::actions::AdminIdentityCertificateField& _internal_adminidentitycertificates(int index) const;
  ::actions::AdminIdentityCertificateField* _internal_add_adminidentitycertificates();
  public:
  const ::actions::AdminIdentityCertificateField& adminidentitycertificates(int index) const;
  ::actions::AdminIdentityCertificateField* add_adminidentitycertificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >&
      adminidentitycertificates() const;

  // string ContractName = 1;
  void clear_contractname();
  const std::string& contractname() const;
  void set_contractname(const std::string& value);
  void set_contractname(std::string&& value);
  void set_contractname(const char* value);
  void set_contractname(const char* value, size_t size);
  std::string* mutable_contractname();
  std::string* release_contractname();
  void set_allocated_contractname(std::string* contractname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractname(
      std::string* contractname);
  private:
  const std::string& _internal_contractname() const;
  void _internal_set_contractname(const std::string& value);
  std::string* _internal_mutable_contractname();
  public:

  // bytes BodyOfAgreement = 3;
  void clear_bodyofagreement();
  const std::string& bodyofagreement() const;
  void set_bodyofagreement(const std::string& value);
  void set_bodyofagreement(std::string&& value);
  void set_bodyofagreement(const char* value);
  void set_bodyofagreement(const void* value, size_t size);
  std::string* mutable_bodyofagreement();
  std::string* release_bodyofagreement();
  void set_allocated_bodyofagreement(std::string* bodyofagreement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bodyofagreement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bodyofagreement(
      std::string* bodyofagreement);
  private:
  const std::string& _internal_bodyofagreement() const;
  void _internal_set_bodyofagreement(const std::string& value);
  std::string* _internal_mutable_bodyofagreement();
  public:

  // string ContractURI = 9;
  void clear_contracturi();
  const std::string& contracturi() const;
  void set_contracturi(const std::string& value);
  void set_contracturi(std::string&& value);
  void set_contracturi(const char* value);
  void set_contracturi(const char* value, size_t size);
  std::string* mutable_contracturi();
  std::string* release_contracturi();
  void set_allocated_contracturi(std::string* contracturi);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contracturi();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contracturi(
      std::string* contracturi);
  private:
  const std::string& _internal_contracturi() const;
  void _internal_set_contracturi(const std::string& value);
  std::string* _internal_mutable_contracturi();
  public:

  // bytes ContractPermissions = 19;
  void clear_contractpermissions();
  const std::string& contractpermissions() const;
  void set_contractpermissions(const std::string& value);
  void set_contractpermissions(std::string&& value);
  void set_contractpermissions(const char* value);
  void set_contractpermissions(const void* value, size_t size);
  std::string* mutable_contractpermissions();
  std::string* release_contractpermissions();
  void set_allocated_contractpermissions(std::string* contractpermissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractpermissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractpermissions(
      std::string* contractpermissions);
  private:
  const std::string& _internal_contractpermissions() const;
  void _internal_set_contractpermissions(const std::string& value);
  std::string* _internal_mutable_contractpermissions();
  public:

  // bytes MasterAddress = 24;
  void clear_masteraddress();
  const std::string& masteraddress() const;
  void set_masteraddress(const std::string& value);
  void set_masteraddress(std::string&& value);
  void set_masteraddress(const char* value);
  void set_masteraddress(const void* value, size_t size);
  std::string* mutable_masteraddress();
  std::string* release_masteraddress();
  void set_allocated_masteraddress(std::string* masteraddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_masteraddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_masteraddress(
      std::string* masteraddress);
  private:
  const std::string& _internal_masteraddress() const;
  void _internal_set_masteraddress(const std::string& value);
  std::string* _internal_mutable_masteraddress();
  public:

  // bytes EntityContract = 25;
  void clear_entitycontract();
  const std::string& entitycontract() const;
  void set_entitycontract(const std::string& value);
  void set_entitycontract(std::string&& value);
  void set_entitycontract(const char* value);
  void set_entitycontract(const void* value, size_t size);
  std::string* mutable_entitycontract();
  std::string* release_entitycontract();
  void set_allocated_entitycontract(std::string* entitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entitycontract(
      std::string* entitycontract);
  private:
  const std::string& _internal_entitycontract() const;
  void _internal_set_entitycontract(const std::string& value);
  std::string* _internal_mutable_entitycontract();
  public:

  // bytes OperatorEntityContract = 26;
  void clear_operatorentitycontract();
  const std::string& operatorentitycontract() const;
  void set_operatorentitycontract(const std::string& value);
  void set_operatorentitycontract(std::string&& value);
  void set_operatorentitycontract(const char* value);
  void set_operatorentitycontract(const void* value, size_t size);
  std::string* mutable_operatorentitycontract();
  std::string* release_operatorentitycontract();
  void set_allocated_operatorentitycontract(std::string* operatorentitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operatorentitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operatorentitycontract(
      std::string* operatorentitycontract);
  private:
  const std::string& _internal_operatorentitycontract() const;
  void _internal_set_operatorentitycontract(const std::string& value);
  std::string* _internal_mutable_operatorentitycontract();
  public:

  // string GoverningLaw = 30;
  void clear_governinglaw();
  const std::string& governinglaw() const;
  void set_governinglaw(const std::string& value);
  void set_governinglaw(std::string&& value);
  void set_governinglaw(const char* value);
  void set_governinglaw(const char* value, size_t size);
  std::string* mutable_governinglaw();
  std::string* release_governinglaw();
  void set_allocated_governinglaw(std::string* governinglaw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_governinglaw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_governinglaw(
      std::string* governinglaw);
  private:
  const std::string& _internal_governinglaw() const;
  void _internal_set_governinglaw(const std::string& value);
  std::string* _internal_mutable_governinglaw();
  public:

  // string Jurisdiction = 31;
  void clear_jurisdiction();
  const std::string& jurisdiction() const;
  void set_jurisdiction(const std::string& value);
  void set_jurisdiction(std::string&& value);
  void set_jurisdiction(const char* value);
  void set_jurisdiction(const char* value, size_t size);
  std::string* mutable_jurisdiction();
  std::string* release_jurisdiction();
  void set_allocated_jurisdiction(std::string* jurisdiction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jurisdiction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jurisdiction(
      std::string* jurisdiction);
  private:
  const std::string& _internal_jurisdiction() const;
  void _internal_set_jurisdiction(const std::string& value);
  std::string* _internal_mutable_jurisdiction();
  public:

  // .actions.EntityField Issuer = 10;
  bool has_issuer() const;
  private:
  bool _internal_has_issuer() const;
  public:
  void clear_issuer();
  const ::actions::EntityField& issuer() const;
  ::actions::EntityField* release_issuer();
  ::actions::EntityField* mutable_issuer();
  void set_allocated_issuer(::actions::EntityField* issuer);
  private:
  const ::actions::EntityField& _internal_issuer() const;
  ::actions::EntityField* _internal_mutable_issuer();
  public:
  void unsafe_arena_set_allocated_issuer(
      ::actions::EntityField* issuer);
  ::actions::EntityField* unsafe_arena_release_issuer();

  // uint64 ContractExpiration = 8;
  void clear_contractexpiration();
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration() const;
  void set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contractexpiration() const;
  void _internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 BodyOfAgreementType = 2;
  void clear_bodyofagreementtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype() const;
  void set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyofagreementtype() const;
  void _internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ContractOperatorIncluded = 12;
  void clear_contractoperatorincluded();
  bool contractoperatorincluded() const;
  void set_contractoperatorincluded(bool value);
  private:
  bool _internal_contractoperatorincluded() const;
  void _internal_set_contractoperatorincluded(bool value);
  public:

  // bool AdministrationProposal = 21;
  void clear_administrationproposal();
  bool administrationproposal() const;
  void set_administrationproposal(bool value);
  private:
  bool _internal_administrationproposal() const;
  void _internal_set_administrationproposal(bool value);
  public:

  // bool HolderProposal = 22;
  void clear_holderproposal();
  bool holderproposal() const;
  void set_holderproposal(bool value);
  private:
  bool _internal_holderproposal() const;
  void _internal_set_holderproposal(bool value);
  public:

  // uint64 ContractFee = 17;
  void clear_contractfee();
  ::PROTOBUF_NAMESPACE_ID::uint64 contractfee() const;
  void set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contractfee() const;
  void _internal_set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 RestrictedQtyInstruments = 20;
  void clear_restrictedqtyinstruments();
  ::PROTOBUF_NAMESPACE_ID::uint64 restrictedqtyinstruments() const;
  void set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_restrictedqtyinstruments() const;
  void _internal_set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ContractType = 27;
  void clear_contracttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 contracttype() const;
  void set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contracttype() const;
  void _internal_set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ContractOffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField > supportingdocs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField > votingsystems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField > oracles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField > services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField > adminidentitycertificates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodyofagreement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contracturi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractpermissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masteraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitycontract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operatorentitycontract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr governinglaw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jurisdiction_;
  ::actions::EntityField* issuer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype_;
  bool contractoperatorincluded_;
  bool administrationproposal_;
  bool holderproposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contractfee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restrictedqtyinstruments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contracttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ContractFormation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ContractFormation) */ {
 public:
  inline ContractFormation() : ContractFormation(nullptr) {};
  virtual ~ContractFormation();

  ContractFormation(const ContractFormation& from);
  ContractFormation(ContractFormation&& from) noexcept
    : ContractFormation() {
    *this = ::std::move(from);
  }

  inline ContractFormation& operator=(const ContractFormation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractFormation& operator=(ContractFormation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractFormation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractFormation* internal_default_instance() {
    return reinterpret_cast<const ContractFormation*>(
               &_ContractFormation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContractFormation& a, ContractFormation& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractFormation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractFormation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractFormation* New() const final {
    return CreateMaybeMessage<ContractFormation>(nullptr);
  }

  ContractFormation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractFormation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractFormation& from);
  void MergeFrom(const ContractFormation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractFormation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ContractFormation";
  }
  protected:
  explicit ContractFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportingDocsFieldNumber = 5,
    kVotingSystemsFieldNumber = 17,
    kOraclesFieldNumber = 22,
    kServicesFieldNumber = 29,
    kAdminIdentityCertificatesFieldNumber = 30,
    kContractNameFieldNumber = 1,
    kBodyOfAgreementFieldNumber = 3,
    kContractURIFieldNumber = 9,
    kContractPermissionsFieldNumber = 18,
    kMasterAddressFieldNumber = 23,
    kEntityContractFieldNumber = 26,
    kOperatorEntityContractFieldNumber = 27,
    kAdminAddressFieldNumber = 31,
    kOperatorAddressFieldNumber = 32,
    kGoverningLawFieldNumber = 33,
    kJurisdictionFieldNumber = 34,
    kRequestPeerChannelFieldNumber = 35,
    kIssuerFieldNumber = 10,
    kContractExpirationFieldNumber = 8,
    kBodyOfAgreementTypeFieldNumber = 2,
    kAdministrationProposalFieldNumber = 20,
    kHolderProposalFieldNumber = 21,
    kContractFeeFieldNumber = 16,
    kRestrictedQtyInstrumentsFieldNumber = 19,
    kTimestampFieldNumber = 25,
    kContractRevisionFieldNumber = 24,
    kContractTypeFieldNumber = 28,
  };
  // repeated .actions.DocumentField SupportingDocs = 5;
  int supportingdocs_size() const;
  private:
  int _internal_supportingdocs_size() const;
  public:
  void clear_supportingdocs();
  ::actions::DocumentField* mutable_supportingdocs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
      mutable_supportingdocs();
  private:
  const ::actions::DocumentField& _internal_supportingdocs(int index) const;
  ::actions::DocumentField* _internal_add_supportingdocs();
  public:
  const ::actions::DocumentField& supportingdocs(int index) const;
  ::actions::DocumentField* add_supportingdocs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
      supportingdocs() const;

  // repeated .actions.VotingSystemField VotingSystems = 17;
  int votingsystems_size() const;
  private:
  int _internal_votingsystems_size() const;
  public:
  void clear_votingsystems();
  ::actions::VotingSystemField* mutable_votingsystems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >*
      mutable_votingsystems();
  private:
  const ::actions::VotingSystemField& _internal_votingsystems(int index) const;
  ::actions::VotingSystemField* _internal_add_votingsystems();
  public:
  const ::actions::VotingSystemField& votingsystems(int index) const;
  ::actions::VotingSystemField* add_votingsystems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >&
      votingsystems() const;

  // repeated .actions.OracleField Oracles = 22;
  int oracles_size() const;
  private:
  int _internal_oracles_size() const;
  public:
  void clear_oracles();
  ::actions::OracleField* mutable_oracles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >*
      mutable_oracles();
  private:
  const ::actions::OracleField& _internal_oracles(int index) const;
  ::actions::OracleField* _internal_add_oracles();
  public:
  const ::actions::OracleField& oracles(int index) const;
  ::actions::OracleField* add_oracles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >&
      oracles() const;

  // repeated .actions.ServiceField Services = 29;
  int services_size() const;
  private:
  int _internal_services_size() const;
  public:
  void clear_services();
  ::actions::ServiceField* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >*
      mutable_services();
  private:
  const ::actions::ServiceField& _internal_services(int index) const;
  ::actions::ServiceField* _internal_add_services();
  public:
  const ::actions::ServiceField& services(int index) const;
  ::actions::ServiceField* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >&
      services() const;

  // repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 30;
  int adminidentitycertificates_size() const;
  private:
  int _internal_adminidentitycertificates_size() const;
  public:
  void clear_adminidentitycertificates();
  ::actions::AdminIdentityCertificateField* mutable_adminidentitycertificates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >*
      mutable_adminidentitycertificates();
  private:
  const ::actions::AdminIdentityCertificateField& _internal_adminidentitycertificates(int index) const;
  ::actions::AdminIdentityCertificateField* _internal_add_adminidentitycertificates();
  public:
  const ::actions::AdminIdentityCertificateField& adminidentitycertificates(int index) const;
  ::actions::AdminIdentityCertificateField* add_adminidentitycertificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >&
      adminidentitycertificates() const;

  // string ContractName = 1;
  void clear_contractname();
  const std::string& contractname() const;
  void set_contractname(const std::string& value);
  void set_contractname(std::string&& value);
  void set_contractname(const char* value);
  void set_contractname(const char* value, size_t size);
  std::string* mutable_contractname();
  std::string* release_contractname();
  void set_allocated_contractname(std::string* contractname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractname(
      std::string* contractname);
  private:
  const std::string& _internal_contractname() const;
  void _internal_set_contractname(const std::string& value);
  std::string* _internal_mutable_contractname();
  public:

  // bytes BodyOfAgreement = 3;
  void clear_bodyofagreement();
  const std::string& bodyofagreement() const;
  void set_bodyofagreement(const std::string& value);
  void set_bodyofagreement(std::string&& value);
  void set_bodyofagreement(const char* value);
  void set_bodyofagreement(const void* value, size_t size);
  std::string* mutable_bodyofagreement();
  std::string* release_bodyofagreement();
  void set_allocated_bodyofagreement(std::string* bodyofagreement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bodyofagreement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bodyofagreement(
      std::string* bodyofagreement);
  private:
  const std::string& _internal_bodyofagreement() const;
  void _internal_set_bodyofagreement(const std::string& value);
  std::string* _internal_mutable_bodyofagreement();
  public:

  // string ContractURI = 9;
  void clear_contracturi();
  const std::string& contracturi() const;
  void set_contracturi(const std::string& value);
  void set_contracturi(std::string&& value);
  void set_contracturi(const char* value);
  void set_contracturi(const char* value, size_t size);
  std::string* mutable_contracturi();
  std::string* release_contracturi();
  void set_allocated_contracturi(std::string* contracturi);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contracturi();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contracturi(
      std::string* contracturi);
  private:
  const std::string& _internal_contracturi() const;
  void _internal_set_contracturi(const std::string& value);
  std::string* _internal_mutable_contracturi();
  public:

  // bytes ContractPermissions = 18;
  void clear_contractpermissions();
  const std::string& contractpermissions() const;
  void set_contractpermissions(const std::string& value);
  void set_contractpermissions(std::string&& value);
  void set_contractpermissions(const char* value);
  void set_contractpermissions(const void* value, size_t size);
  std::string* mutable_contractpermissions();
  std::string* release_contractpermissions();
  void set_allocated_contractpermissions(std::string* contractpermissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractpermissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractpermissions(
      std::string* contractpermissions);
  private:
  const std::string& _internal_contractpermissions() const;
  void _internal_set_contractpermissions(const std::string& value);
  std::string* _internal_mutable_contractpermissions();
  public:

  // bytes MasterAddress = 23;
  void clear_masteraddress();
  const std::string& masteraddress() const;
  void set_masteraddress(const std::string& value);
  void set_masteraddress(std::string&& value);
  void set_masteraddress(const char* value);
  void set_masteraddress(const void* value, size_t size);
  std::string* mutable_masteraddress();
  std::string* release_masteraddress();
  void set_allocated_masteraddress(std::string* masteraddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_masteraddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_masteraddress(
      std::string* masteraddress);
  private:
  const std::string& _internal_masteraddress() const;
  void _internal_set_masteraddress(const std::string& value);
  std::string* _internal_mutable_masteraddress();
  public:

  // bytes EntityContract = 26;
  void clear_entitycontract();
  const std::string& entitycontract() const;
  void set_entitycontract(const std::string& value);
  void set_entitycontract(std::string&& value);
  void set_entitycontract(const char* value);
  void set_entitycontract(const void* value, size_t size);
  std::string* mutable_entitycontract();
  std::string* release_entitycontract();
  void set_allocated_entitycontract(std::string* entitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entitycontract(
      std::string* entitycontract);
  private:
  const std::string& _internal_entitycontract() const;
  void _internal_set_entitycontract(const std::string& value);
  std::string* _internal_mutable_entitycontract();
  public:

  // bytes OperatorEntityContract = 27;
  void clear_operatorentitycontract();
  const std::string& operatorentitycontract() const;
  void set_operatorentitycontract(const std::string& value);
  void set_operatorentitycontract(std::string&& value);
  void set_operatorentitycontract(const char* value);
  void set_operatorentitycontract(const void* value, size_t size);
  std::string* mutable_operatorentitycontract();
  std::string* release_operatorentitycontract();
  void set_allocated_operatorentitycontract(std::string* operatorentitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operatorentitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operatorentitycontract(
      std::string* operatorentitycontract);
  private:
  const std::string& _internal_operatorentitycontract() const;
  void _internal_set_operatorentitycontract(const std::string& value);
  std::string* _internal_mutable_operatorentitycontract();
  public:

  // bytes AdminAddress = 31;
  void clear_adminaddress();
  const std::string& adminaddress() const;
  void set_adminaddress(const std::string& value);
  void set_adminaddress(std::string&& value);
  void set_adminaddress(const char* value);
  void set_adminaddress(const void* value, size_t size);
  std::string* mutable_adminaddress();
  std::string* release_adminaddress();
  void set_allocated_adminaddress(std::string* adminaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_adminaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_adminaddress(
      std::string* adminaddress);
  private:
  const std::string& _internal_adminaddress() const;
  void _internal_set_adminaddress(const std::string& value);
  std::string* _internal_mutable_adminaddress();
  public:

  // bytes OperatorAddress = 32;
  void clear_operatoraddress();
  const std::string& operatoraddress() const;
  void set_operatoraddress(const std::string& value);
  void set_operatoraddress(std::string&& value);
  void set_operatoraddress(const char* value);
  void set_operatoraddress(const void* value, size_t size);
  std::string* mutable_operatoraddress();
  std::string* release_operatoraddress();
  void set_allocated_operatoraddress(std::string* operatoraddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operatoraddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operatoraddress(
      std::string* operatoraddress);
  private:
  const std::string& _internal_operatoraddress() const;
  void _internal_set_operatoraddress(const std::string& value);
  std::string* _internal_mutable_operatoraddress();
  public:

  // string GoverningLaw = 33;
  void clear_governinglaw();
  const std::string& governinglaw() const;
  void set_governinglaw(const std::string& value);
  void set_governinglaw(std::string&& value);
  void set_governinglaw(const char* value);
  void set_governinglaw(const char* value, size_t size);
  std::string* mutable_governinglaw();
  std::string* release_governinglaw();
  void set_allocated_governinglaw(std::string* governinglaw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_governinglaw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_governinglaw(
      std::string* governinglaw);
  private:
  const std::string& _internal_governinglaw() const;
  void _internal_set_governinglaw(const std::string& value);
  std::string* _internal_mutable_governinglaw();
  public:

  // string Jurisdiction = 34;
  void clear_jurisdiction();
  const std::string& jurisdiction() const;
  void set_jurisdiction(const std::string& value);
  void set_jurisdiction(std::string&& value);
  void set_jurisdiction(const char* value);
  void set_jurisdiction(const char* value, size_t size);
  std::string* mutable_jurisdiction();
  std::string* release_jurisdiction();
  void set_allocated_jurisdiction(std::string* jurisdiction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jurisdiction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jurisdiction(
      std::string* jurisdiction);
  private:
  const std::string& _internal_jurisdiction() const;
  void _internal_set_jurisdiction(const std::string& value);
  std::string* _internal_mutable_jurisdiction();
  public:

  // string RequestPeerChannel = 35;
  void clear_requestpeerchannel();
  const std::string& requestpeerchannel() const;
  void set_requestpeerchannel(const std::string& value);
  void set_requestpeerchannel(std::string&& value);
  void set_requestpeerchannel(const char* value);
  void set_requestpeerchannel(const char* value, size_t size);
  std::string* mutable_requestpeerchannel();
  std::string* release_requestpeerchannel();
  void set_allocated_requestpeerchannel(std::string* requestpeerchannel);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_requestpeerchannel();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_requestpeerchannel(
      std::string* requestpeerchannel);
  private:
  const std::string& _internal_requestpeerchannel() const;
  void _internal_set_requestpeerchannel(const std::string& value);
  std::string* _internal_mutable_requestpeerchannel();
  public:

  // .actions.EntityField Issuer = 10;
  bool has_issuer() const;
  private:
  bool _internal_has_issuer() const;
  public:
  void clear_issuer();
  const ::actions::EntityField& issuer() const;
  ::actions::EntityField* release_issuer();
  ::actions::EntityField* mutable_issuer();
  void set_allocated_issuer(::actions::EntityField* issuer);
  private:
  const ::actions::EntityField& _internal_issuer() const;
  ::actions::EntityField* _internal_mutable_issuer();
  public:
  void unsafe_arena_set_allocated_issuer(
      ::actions::EntityField* issuer);
  ::actions::EntityField* unsafe_arena_release_issuer();

  // uint64 ContractExpiration = 8;
  void clear_contractexpiration();
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration() const;
  void set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contractexpiration() const;
  void _internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 BodyOfAgreementType = 2;
  void clear_bodyofagreementtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype() const;
  void set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyofagreementtype() const;
  void _internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool AdministrationProposal = 20;
  void clear_administrationproposal();
  bool administrationproposal() const;
  void set_administrationproposal(bool value);
  private:
  bool _internal_administrationproposal() const;
  void _internal_set_administrationproposal(bool value);
  public:

  // bool HolderProposal = 21;
  void clear_holderproposal();
  bool holderproposal() const;
  void set_holderproposal(bool value);
  private:
  bool _internal_holderproposal() const;
  void _internal_set_holderproposal(bool value);
  public:

  // uint64 ContractFee = 16;
  void clear_contractfee();
  ::PROTOBUF_NAMESPACE_ID::uint64 contractfee() const;
  void set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contractfee() const;
  void _internal_set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 RestrictedQtyInstruments = 19;
  void clear_restrictedqtyinstruments();
  ::PROTOBUF_NAMESPACE_ID::uint64 restrictedqtyinstruments() const;
  void set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_restrictedqtyinstruments() const;
  void _internal_set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Timestamp = 25;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 ContractRevision = 24;
  void clear_contractrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision() const;
  void set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractrevision() const;
  void _internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ContractType = 28;
  void clear_contracttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 contracttype() const;
  void set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contracttype() const;
  void _internal_set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ContractFormation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField > supportingdocs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField > votingsystems_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField > oracles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField > services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField > adminidentitycertificates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodyofagreement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contracturi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractpermissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr masteraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitycontract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operatorentitycontract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adminaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operatoraddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr governinglaw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jurisdiction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestpeerchannel_;
  ::actions::EntityField* issuer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype_;
  bool administrationproposal_;
  bool holderproposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contractfee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restrictedqtyinstruments_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contracttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ContractAmendment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ContractAmendment) */ {
 public:
  inline ContractAmendment() : ContractAmendment(nullptr) {};
  virtual ~ContractAmendment();

  ContractAmendment(const ContractAmendment& from);
  ContractAmendment(ContractAmendment&& from) noexcept
    : ContractAmendment() {
    *this = ::std::move(from);
  }

  inline ContractAmendment& operator=(const ContractAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractAmendment& operator=(ContractAmendment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractAmendment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractAmendment* internal_default_instance() {
    return reinterpret_cast<const ContractAmendment*>(
               &_ContractAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContractAmendment& a, ContractAmendment& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractAmendment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractAmendment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractAmendment* New() const final {
    return CreateMaybeMessage<ContractAmendment>(nullptr);
  }

  ContractAmendment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractAmendment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractAmendment& from);
  void MergeFrom(const ContractAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractAmendment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ContractAmendment";
  }
  protected:
  explicit ContractAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmendmentsFieldNumber = 4,
    kRefTxIDFieldNumber = 5,
    kChangeAdministrationAddressFieldNumber = 1,
    kChangeOperatorAddressFieldNumber = 2,
    kContractRevisionFieldNumber = 3,
  };
  // repeated .actions.AmendmentField Amendments = 4;
  int amendments_size() const;
  private:
  int _internal_amendments_size() const;
  public:
  void clear_amendments();
  ::actions::AmendmentField* mutable_amendments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
      mutable_amendments();
  private:
  const ::actions::AmendmentField& _internal_amendments(int index) const;
  ::actions::AmendmentField* _internal_add_amendments();
  public:
  const ::actions::AmendmentField& amendments(int index) const;
  ::actions::AmendmentField* add_amendments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
      amendments() const;

  // bytes RefTxID = 5;
  void clear_reftxid();
  const std::string& reftxid() const;
  void set_reftxid(const std::string& value);
  void set_reftxid(std::string&& value);
  void set_reftxid(const char* value);
  void set_reftxid(const void* value, size_t size);
  std::string* mutable_reftxid();
  std::string* release_reftxid();
  void set_allocated_reftxid(std::string* reftxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reftxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reftxid(
      std::string* reftxid);
  private:
  const std::string& _internal_reftxid() const;
  void _internal_set_reftxid(const std::string& value);
  std::string* _internal_mutable_reftxid();
  public:

  // bool ChangeAdministrationAddress = 1;
  void clear_changeadministrationaddress();
  bool changeadministrationaddress() const;
  void set_changeadministrationaddress(bool value);
  private:
  bool _internal_changeadministrationaddress() const;
  void _internal_set_changeadministrationaddress(bool value);
  public:

  // bool ChangeOperatorAddress = 2;
  void clear_changeoperatoraddress();
  bool changeoperatoraddress() const;
  void set_changeoperatoraddress(bool value);
  private:
  bool _internal_changeoperatoraddress() const;
  void _internal_set_changeoperatoraddress(bool value);
  public:

  // uint32 ContractRevision = 3;
  void clear_contractrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision() const;
  void set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractrevision() const;
  void _internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ContractAmendment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField > amendments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reftxid_;
  bool changeadministrationaddress_;
  bool changeoperatoraddress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class StaticContractFormation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.StaticContractFormation) */ {
 public:
  inline StaticContractFormation() : StaticContractFormation(nullptr) {};
  virtual ~StaticContractFormation();

  StaticContractFormation(const StaticContractFormation& from);
  StaticContractFormation(StaticContractFormation&& from) noexcept
    : StaticContractFormation() {
    *this = ::std::move(from);
  }

  inline StaticContractFormation& operator=(const StaticContractFormation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticContractFormation& operator=(StaticContractFormation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticContractFormation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticContractFormation* internal_default_instance() {
    return reinterpret_cast<const StaticContractFormation*>(
               &_StaticContractFormation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StaticContractFormation& a, StaticContractFormation& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticContractFormation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticContractFormation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticContractFormation* New() const final {
    return CreateMaybeMessage<StaticContractFormation>(nullptr);
  }

  StaticContractFormation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticContractFormation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticContractFormation& from);
  void MergeFrom(const StaticContractFormation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticContractFormation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.StaticContractFormation";
  }
  protected:
  explicit StaticContractFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportingDocsFieldNumber = 6,
    kEntitiesFieldNumber = 14,
    kContractNameFieldNumber = 1,
    kContractCodeFieldNumber = 2,
    kBodyOfAgreementFieldNumber = 4,
    kContractTypeFieldNumber = 5,
    kContractURIFieldNumber = 12,
    kPrevRevTxIDFieldNumber = 13,
    kEntityOracleSignatureFieldNumber = 16,
    kGoverningLawFieldNumber = 18,
    kJurisdictionFieldNumber = 19,
    kEntityOracleFieldNumber = 15,
    kBodyOfAgreementTypeFieldNumber = 3,
    kContractRevisionFieldNumber = 7,
    kEffectiveDateFieldNumber = 10,
    kContractExpirationFieldNumber = 11,
    kEntityOracleSigBlockHeightFieldNumber = 17,
  };
  // repeated .actions.DocumentField SupportingDocs = 6;
  int supportingdocs_size() const;
  private:
  int _internal_supportingdocs_size() const;
  public:
  void clear_supportingdocs();
  ::actions::DocumentField* mutable_supportingdocs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
      mutable_supportingdocs();
  private:
  const ::actions::DocumentField& _internal_supportingdocs(int index) const;
  ::actions::DocumentField* _internal_add_supportingdocs();
  public:
  const ::actions::DocumentField& supportingdocs(int index) const;
  ::actions::DocumentField* add_supportingdocs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
      supportingdocs() const;

  // repeated .actions.EntityField Entities = 14;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::actions::EntityField* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::EntityField >*
      mutable_entities();
  private:
  const ::actions::EntityField& _internal_entities(int index) const;
  ::actions::EntityField* _internal_add_entities();
  public:
  const ::actions::EntityField& entities(int index) const;
  ::actions::EntityField* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::EntityField >&
      entities() const;

  // string ContractName = 1;
  void clear_contractname();
  const std::string& contractname() const;
  void set_contractname(const std::string& value);
  void set_contractname(std::string&& value);
  void set_contractname(const char* value);
  void set_contractname(const char* value, size_t size);
  std::string* mutable_contractname();
  std::string* release_contractname();
  void set_allocated_contractname(std::string* contractname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractname(
      std::string* contractname);
  private:
  const std::string& _internal_contractname() const;
  void _internal_set_contractname(const std::string& value);
  std::string* _internal_mutable_contractname();
  public:

  // bytes ContractCode = 2;
  void clear_contractcode();
  const std::string& contractcode() const;
  void set_contractcode(const std::string& value);
  void set_contractcode(std::string&& value);
  void set_contractcode(const char* value);
  void set_contractcode(const void* value, size_t size);
  std::string* mutable_contractcode();
  std::string* release_contractcode();
  void set_allocated_contractcode(std::string* contractcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contractcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contractcode(
      std::string* contractcode);
  private:
  const std::string& _internal_contractcode() const;
  void _internal_set_contractcode(const std::string& value);
  std::string* _internal_mutable_contractcode();
  public:

  // bytes BodyOfAgreement = 4;
  void clear_bodyofagreement();
  const std::string& bodyofagreement() const;
  void set_bodyofagreement(const std::string& value);
  void set_bodyofagreement(std::string&& value);
  void set_bodyofagreement(const char* value);
  void set_bodyofagreement(const void* value, size_t size);
  std::string* mutable_bodyofagreement();
  std::string* release_bodyofagreement();
  void set_allocated_bodyofagreement(std::string* bodyofagreement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bodyofagreement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bodyofagreement(
      std::string* bodyofagreement);
  private:
  const std::string& _internal_bodyofagreement() const;
  void _internal_set_bodyofagreement(const std::string& value);
  std::string* _internal_mutable_bodyofagreement();
  public:

  // string ContractType = 5;
  void clear_contracttype();
  const std::string& contracttype() const;
  void set_contracttype(const std::string& value);
  void set_contracttype(std::string&& value);
  void set_contracttype(const char* value);
  void set_contracttype(const char* value, size_t size);
  std::string* mutable_contracttype();
  std::string* release_contracttype();
  void set_allocated_contracttype(std::string* contracttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contracttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contracttype(
      std::string* contracttype);
  private:
  const std::string& _internal_contracttype() const;
  void _internal_set_contracttype(const std::string& value);
  std::string* _internal_mutable_contracttype();
  public:

  // string ContractURI = 12;
  void clear_contracturi();
  const std::string& contracturi() const;
  void set_contracturi(const std::string& value);
  void set_contracturi(std::string&& value);
  void set_contracturi(const char* value);
  void set_contracturi(const char* value, size_t size);
  std::string* mutable_contracturi();
  std::string* release_contracturi();
  void set_allocated_contracturi(std::string* contracturi);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contracturi();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contracturi(
      std::string* contracturi);
  private:
  const std::string& _internal_contracturi() const;
  void _internal_set_contracturi(const std::string& value);
  std::string* _internal_mutable_contracturi();
  public:

  // bytes PrevRevTxID = 13;
  void clear_prevrevtxid();
  const std::string& prevrevtxid() const;
  void set_prevrevtxid(const std::string& value);
  void set_prevrevtxid(std::string&& value);
  void set_prevrevtxid(const char* value);
  void set_prevrevtxid(const void* value, size_t size);
  std::string* mutable_prevrevtxid();
  std::string* release_prevrevtxid();
  void set_allocated_prevrevtxid(std::string* prevrevtxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prevrevtxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prevrevtxid(
      std::string* prevrevtxid);
  private:
  const std::string& _internal_prevrevtxid() const;
  void _internal_set_prevrevtxid(const std::string& value);
  std::string* _internal_mutable_prevrevtxid();
  public:

  // bytes EntityOracleSignature = 16;
  void clear_entityoraclesignature();
  const std::string& entityoraclesignature() const;
  void set_entityoraclesignature(const std::string& value);
  void set_entityoraclesignature(std::string&& value);
  void set_entityoraclesignature(const char* value);
  void set_entityoraclesignature(const void* value, size_t size);
  std::string* mutable_entityoraclesignature();
  std::string* release_entityoraclesignature();
  void set_allocated_entityoraclesignature(std::string* entityoraclesignature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entityoraclesignature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entityoraclesignature(
      std::string* entityoraclesignature);
  private:
  const std::string& _internal_entityoraclesignature() const;
  void _internal_set_entityoraclesignature(const std::string& value);
  std::string* _internal_mutable_entityoraclesignature();
  public:

  // string GoverningLaw = 18;
  void clear_governinglaw();
  const std::string& governinglaw() const;
  void set_governinglaw(const std::string& value);
  void set_governinglaw(std::string&& value);
  void set_governinglaw(const char* value);
  void set_governinglaw(const char* value, size_t size);
  std::string* mutable_governinglaw();
  std::string* release_governinglaw();
  void set_allocated_governinglaw(std::string* governinglaw);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_governinglaw();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_governinglaw(
      std::string* governinglaw);
  private:
  const std::string& _internal_governinglaw() const;
  void _internal_set_governinglaw(const std::string& value);
  std::string* _internal_mutable_governinglaw();
  public:

  // string Jurisdiction = 19;
  void clear_jurisdiction();
  const std::string& jurisdiction() const;
  void set_jurisdiction(const std::string& value);
  void set_jurisdiction(std::string&& value);
  void set_jurisdiction(const char* value);
  void set_jurisdiction(const char* value, size_t size);
  std::string* mutable_jurisdiction();
  std::string* release_jurisdiction();
  void set_allocated_jurisdiction(std::string* jurisdiction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jurisdiction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jurisdiction(
      std::string* jurisdiction);
  private:
  const std::string& _internal_jurisdiction() const;
  void _internal_set_jurisdiction(const std::string& value);
  std::string* _internal_mutable_jurisdiction();
  public:

  // .actions.OracleField EntityOracle = 15;
  bool has_entityoracle() const;
  private:
  bool _internal_has_entityoracle() const;
  public:
  void clear_entityoracle();
  const ::actions::OracleField& entityoracle() const;
  ::actions::OracleField* release_entityoracle();
  ::actions::OracleField* mutable_entityoracle();
  void set_allocated_entityoracle(::actions::OracleField* entityoracle);
  private:
  const ::actions::OracleField& _internal_entityoracle() const;
  ::actions::OracleField* _internal_mutable_entityoracle();
  public:
  void unsafe_arena_set_allocated_entityoracle(
      ::actions::OracleField* entityoracle);
  ::actions::OracleField* unsafe_arena_release_entityoracle();

  // uint32 BodyOfAgreementType = 3;
  void clear_bodyofagreementtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype() const;
  void set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodyofagreementtype() const;
  void _internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ContractRevision = 7;
  void clear_contractrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision() const;
  void set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractrevision() const;
  void _internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 EffectiveDate = 10;
  void clear_effectivedate();
  ::PROTOBUF_NAMESPACE_ID::uint64 effectivedate() const;
  void set_effectivedate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_effectivedate() const;
  void _internal_set_effectivedate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ContractExpiration = 11;
  void clear_contractexpiration();
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration() const;
  void set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_contractexpiration() const;
  void _internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 EntityOracleSigBlockHeight = 17;
  void clear_entityoraclesigblockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 entityoraclesigblockheight() const;
  void set_entityoraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entityoraclesigblockheight() const;
  void _internal_set_entityoraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.StaticContractFormation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField > supportingdocs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::EntityField > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bodyofagreement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contracttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contracturi_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prevrevtxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityoraclesignature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr governinglaw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jurisdiction_;
  ::actions::OracleField* entityoracle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodyofagreementtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractrevision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 effectivedate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 contractexpiration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entityoraclesigblockheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ContractAddressChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ContractAddressChange) */ {
 public:
  inline ContractAddressChange() : ContractAddressChange(nullptr) {};
  virtual ~ContractAddressChange();

  ContractAddressChange(const ContractAddressChange& from);
  ContractAddressChange(ContractAddressChange&& from) noexcept
    : ContractAddressChange() {
    *this = ::std::move(from);
  }

  inline ContractAddressChange& operator=(const ContractAddressChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractAddressChange& operator=(ContractAddressChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractAddressChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractAddressChange* internal_default_instance() {
    return reinterpret_cast<const ContractAddressChange*>(
               &_ContractAddressChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContractAddressChange& a, ContractAddressChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractAddressChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractAddressChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractAddressChange* New() const final {
    return CreateMaybeMessage<ContractAddressChange>(nullptr);
  }

  ContractAddressChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractAddressChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractAddressChange& from);
  void MergeFrom(const ContractAddressChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractAddressChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ContractAddressChange";
  }
  protected:
  explicit ContractAddressChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewContractAddressFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes NewContractAddress = 1;
  void clear_newcontractaddress();
  const std::string& newcontractaddress() const;
  void set_newcontractaddress(const std::string& value);
  void set_newcontractaddress(std::string&& value);
  void set_newcontractaddress(const char* value);
  void set_newcontractaddress(const void* value, size_t size);
  std::string* mutable_newcontractaddress();
  std::string* release_newcontractaddress();
  void set_allocated_newcontractaddress(std::string* newcontractaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_newcontractaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_newcontractaddress(
      std::string* newcontractaddress);
  private:
  const std::string& _internal_newcontractaddress() const;
  void _internal_set_newcontractaddress(const std::string& value);
  std::string* _internal_mutable_newcontractaddress();
  public:

  // uint64 Timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ContractAddressChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newcontractaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class BodyOfAgreementOffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.BodyOfAgreementOffer) */ {
 public:
  inline BodyOfAgreementOffer() : BodyOfAgreementOffer(nullptr) {};
  virtual ~BodyOfAgreementOffer();

  BodyOfAgreementOffer(const BodyOfAgreementOffer& from);
  BodyOfAgreementOffer(BodyOfAgreementOffer&& from) noexcept
    : BodyOfAgreementOffer() {
    *this = ::std::move(from);
  }

  inline BodyOfAgreementOffer& operator=(const BodyOfAgreementOffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyOfAgreementOffer& operator=(BodyOfAgreementOffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyOfAgreementOffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyOfAgreementOffer* internal_default_instance() {
    return reinterpret_cast<const BodyOfAgreementOffer*>(
               &_BodyOfAgreementOffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BodyOfAgreementOffer& a, BodyOfAgreementOffer& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyOfAgreementOffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyOfAgreementOffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyOfAgreementOffer* New() const final {
    return CreateMaybeMessage<BodyOfAgreementOffer>(nullptr);
  }

  BodyOfAgreementOffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyOfAgreementOffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyOfAgreementOffer& from);
  void MergeFrom(const BodyOfAgreementOffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyOfAgreementOffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.BodyOfAgreementOffer";
  }
  protected:
  explicit BodyOfAgreementOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaptersFieldNumber = 1,
    kDefinitionsFieldNumber = 2,
  };
  // repeated .actions.ChapterField Chapters = 1;
  int chapters_size() const;
  private:
  int _internal_chapters_size() const;
  public:
  void clear_chapters();
  ::actions::ChapterField* mutable_chapters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >*
      mutable_chapters();
  private:
  const ::actions::ChapterField& _internal_chapters(int index) const;
  ::actions::ChapterField* _internal_add_chapters();
  public:
  const ::actions::ChapterField& chapters(int index) const;
  ::actions::ChapterField* add_chapters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >&
      chapters() const;

  // repeated .actions.DefinedTermField Definitions = 2;
  int definitions_size() const;
  private:
  int _internal_definitions_size() const;
  public:
  void clear_definitions();
  ::actions::DefinedTermField* mutable_definitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >*
      mutable_definitions();
  private:
  const ::actions::DefinedTermField& _internal_definitions(int index) const;
  ::actions::DefinedTermField* _internal_add_definitions();
  public:
  const ::actions::DefinedTermField& definitions(int index) const;
  ::actions::DefinedTermField* add_definitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >&
      definitions() const;

  // @@protoc_insertion_point(class_scope:actions.BodyOfAgreementOffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField > chapters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField > definitions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class BodyOfAgreementFormation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.BodyOfAgreementFormation) */ {
 public:
  inline BodyOfAgreementFormation() : BodyOfAgreementFormation(nullptr) {};
  virtual ~BodyOfAgreementFormation();

  BodyOfAgreementFormation(const BodyOfAgreementFormation& from);
  BodyOfAgreementFormation(BodyOfAgreementFormation&& from) noexcept
    : BodyOfAgreementFormation() {
    *this = ::std::move(from);
  }

  inline BodyOfAgreementFormation& operator=(const BodyOfAgreementFormation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyOfAgreementFormation& operator=(BodyOfAgreementFormation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyOfAgreementFormation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyOfAgreementFormation* internal_default_instance() {
    return reinterpret_cast<const BodyOfAgreementFormation*>(
               &_BodyOfAgreementFormation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BodyOfAgreementFormation& a, BodyOfAgreementFormation& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyOfAgreementFormation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyOfAgreementFormation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyOfAgreementFormation* New() const final {
    return CreateMaybeMessage<BodyOfAgreementFormation>(nullptr);
  }

  BodyOfAgreementFormation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyOfAgreementFormation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyOfAgreementFormation& from);
  void MergeFrom(const BodyOfAgreementFormation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyOfAgreementFormation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.BodyOfAgreementFormation";
  }
  protected:
  explicit BodyOfAgreementFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaptersFieldNumber = 1,
    kDefinitionsFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kRevisionFieldNumber = 3,
  };
  // repeated .actions.ChapterField Chapters = 1;
  int chapters_size() const;
  private:
  int _internal_chapters_size() const;
  public:
  void clear_chapters();
  ::actions::ChapterField* mutable_chapters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >*
      mutable_chapters();
  private:
  const ::actions::ChapterField& _internal_chapters(int index) const;
  ::actions::ChapterField* _internal_add_chapters();
  public:
  const ::actions::ChapterField& chapters(int index) const;
  ::actions::ChapterField* add_chapters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >&
      chapters() const;

  // repeated .actions.DefinedTermField Definitions = 2;
  int definitions_size() const;
  private:
  int _internal_definitions_size() const;
  public:
  void clear_definitions();
  ::actions::DefinedTermField* mutable_definitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >*
      mutable_definitions();
  private:
  const ::actions::DefinedTermField& _internal_definitions(int index) const;
  ::actions::DefinedTermField* _internal_add_definitions();
  public:
  const ::actions::DefinedTermField& definitions(int index) const;
  ::actions::DefinedTermField* add_definitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >&
      definitions() const;

  // uint64 Timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.BodyOfAgreementFormation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField > chapters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField > definitions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class BodyOfAgreementAmendment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.BodyOfAgreementAmendment) */ {
 public:
  inline BodyOfAgreementAmendment() : BodyOfAgreementAmendment(nullptr) {};
  virtual ~BodyOfAgreementAmendment();

  BodyOfAgreementAmendment(const BodyOfAgreementAmendment& from);
  BodyOfAgreementAmendment(BodyOfAgreementAmendment&& from) noexcept
    : BodyOfAgreementAmendment() {
    *this = ::std::move(from);
  }

  inline BodyOfAgreementAmendment& operator=(const BodyOfAgreementAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyOfAgreementAmendment& operator=(BodyOfAgreementAmendment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BodyOfAgreementAmendment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyOfAgreementAmendment* internal_default_instance() {
    return reinterpret_cast<const BodyOfAgreementAmendment*>(
               &_BodyOfAgreementAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BodyOfAgreementAmendment& a, BodyOfAgreementAmendment& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyOfAgreementAmendment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyOfAgreementAmendment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyOfAgreementAmendment* New() const final {
    return CreateMaybeMessage<BodyOfAgreementAmendment>(nullptr);
  }

  BodyOfAgreementAmendment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyOfAgreementAmendment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BodyOfAgreementAmendment& from);
  void MergeFrom(const BodyOfAgreementAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyOfAgreementAmendment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.BodyOfAgreementAmendment";
  }
  protected:
  explicit BodyOfAgreementAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmendmentsFieldNumber = 2,
    kRefTxIDFieldNumber = 3,
    kRevisionFieldNumber = 1,
  };
  // repeated .actions.AmendmentField Amendments = 2;
  int amendments_size() const;
  private:
  int _internal_amendments_size() const;
  public:
  void clear_amendments();
  ::actions::AmendmentField* mutable_amendments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
      mutable_amendments();
  private:
  const ::actions::AmendmentField& _internal_amendments(int index) const;
  ::actions::AmendmentField* _internal_add_amendments();
  public:
  const ::actions::AmendmentField& amendments(int index) const;
  ::actions::AmendmentField* add_amendments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
      amendments() const;

  // bytes RefTxID = 3;
  void clear_reftxid();
  const std::string& reftxid() const;
  void set_reftxid(const std::string& value);
  void set_reftxid(std::string&& value);
  void set_reftxid(const char* value);
  void set_reftxid(const void* value, size_t size);
  std::string* mutable_reftxid();
  std::string* release_reftxid();
  void set_allocated_reftxid(std::string* reftxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reftxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reftxid(
      std::string* reftxid);
  private:
  const std::string& _internal_reftxid() const;
  void _internal_set_reftxid(const std::string& value);
  std::string* _internal_mutable_reftxid();
  public:

  // uint32 Revision = 1;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.BodyOfAgreementAmendment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField > amendments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reftxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentDefinition) */ {
 public:
  inline InstrumentDefinition() : InstrumentDefinition(nullptr) {};
  virtual ~InstrumentDefinition();

  InstrumentDefinition(const InstrumentDefinition& from);
  InstrumentDefinition(InstrumentDefinition&& from) noexcept
    : InstrumentDefinition() {
    *this = ::std::move(from);
  }

  inline InstrumentDefinition& operator=(const InstrumentDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentDefinition& operator=(InstrumentDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentDefinition* internal_default_instance() {
    return reinterpret_cast<const InstrumentDefinition*>(
               &_InstrumentDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InstrumentDefinition& a, InstrumentDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentDefinition* New() const final {
    return CreateMaybeMessage<InstrumentDefinition>(nullptr);
  }

  InstrumentDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentDefinition& from);
  void MergeFrom(const InstrumentDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentDefinition";
  }
  protected:
  explicit InstrumentDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeRestrictionsFieldNumber = 13,
    kInstrumentPermissionsFieldNumber = 1,
    kInstrumentTypeFieldNumber = 11,
    kInstrumentPayloadFieldNumber = 12,
    kTransferFeeFieldNumber = 14,
    kVoteMultiplierFieldNumber = 6,
    kEnforcementOrdersPermittedFieldNumber = 4,
    kVotingRightsFieldNumber = 5,
    kAdministrationProposalFieldNumber = 7,
    kHolderProposalFieldNumber = 8,
    kAuthorizedTokenQtyFieldNumber = 10,
    kInstrumentModificationGovernanceFieldNumber = 9,
  };
  // repeated string TradeRestrictions = 13;
  int traderestrictions_size() const;
  private:
  int _internal_traderestrictions_size() const;
  public:
  void clear_traderestrictions();
  const std::string& traderestrictions(int index) const;
  std::string* mutable_traderestrictions(int index);
  void set_traderestrictions(int index, const std::string& value);
  void set_traderestrictions(int index, std::string&& value);
  void set_traderestrictions(int index, const char* value);
  void set_traderestrictions(int index, const char* value, size_t size);
  std::string* add_traderestrictions();
  void add_traderestrictions(const std::string& value);
  void add_traderestrictions(std::string&& value);
  void add_traderestrictions(const char* value);
  void add_traderestrictions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& traderestrictions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_traderestrictions();
  private:
  const std::string& _internal_traderestrictions(int index) const;
  std::string* _internal_add_traderestrictions();
  public:

  // bytes InstrumentPermissions = 1;
  void clear_instrumentpermissions();
  const std::string& instrumentpermissions() const;
  void set_instrumentpermissions(const std::string& value);
  void set_instrumentpermissions(std::string&& value);
  void set_instrumentpermissions(const char* value);
  void set_instrumentpermissions(const void* value, size_t size);
  std::string* mutable_instrumentpermissions();
  std::string* release_instrumentpermissions();
  void set_allocated_instrumentpermissions(std::string* instrumentpermissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentpermissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentpermissions(
      std::string* instrumentpermissions);
  private:
  const std::string& _internal_instrumentpermissions() const;
  void _internal_set_instrumentpermissions(const std::string& value);
  std::string* _internal_mutable_instrumentpermissions();
  public:

  // string InstrumentType = 11;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentPayload = 12;
  void clear_instrumentpayload();
  const std::string& instrumentpayload() const;
  void set_instrumentpayload(const std::string& value);
  void set_instrumentpayload(std::string&& value);
  void set_instrumentpayload(const char* value);
  void set_instrumentpayload(const void* value, size_t size);
  std::string* mutable_instrumentpayload();
  std::string* release_instrumentpayload();
  void set_allocated_instrumentpayload(std::string* instrumentpayload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentpayload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentpayload(
      std::string* instrumentpayload);
  private:
  const std::string& _internal_instrumentpayload() const;
  void _internal_set_instrumentpayload(const std::string& value);
  std::string* _internal_mutable_instrumentpayload();
  public:

  // .actions.FeeField TransferFee = 14;
  bool has_transferfee() const;
  private:
  bool _internal_has_transferfee() const;
  public:
  void clear_transferfee();
  const ::actions::FeeField& transferfee() const;
  ::actions::FeeField* release_transferfee();
  ::actions::FeeField* mutable_transferfee();
  void set_allocated_transferfee(::actions::FeeField* transferfee);
  private:
  const ::actions::FeeField& _internal_transferfee() const;
  ::actions::FeeField* _internal_mutable_transferfee();
  public:
  void unsafe_arena_set_allocated_transferfee(
      ::actions::FeeField* transferfee);
  ::actions::FeeField* unsafe_arena_release_transferfee();

  // uint32 VoteMultiplier = 6;
  void clear_votemultiplier();
  ::PROTOBUF_NAMESPACE_ID::uint32 votemultiplier() const;
  void set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votemultiplier() const;
  void _internal_set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool EnforcementOrdersPermitted = 4;
  void clear_enforcementorderspermitted();
  bool enforcementorderspermitted() const;
  void set_enforcementorderspermitted(bool value);
  private:
  bool _internal_enforcementorderspermitted() const;
  void _internal_set_enforcementorderspermitted(bool value);
  public:

  // bool VotingRights = 5;
  void clear_votingrights();
  bool votingrights() const;
  void set_votingrights(bool value);
  private:
  bool _internal_votingrights() const;
  void _internal_set_votingrights(bool value);
  public:

  // bool AdministrationProposal = 7;
  void clear_administrationproposal();
  bool administrationproposal() const;
  void set_administrationproposal(bool value);
  private:
  bool _internal_administrationproposal() const;
  void _internal_set_administrationproposal(bool value);
  public:

  // bool HolderProposal = 8;
  void clear_holderproposal();
  bool holderproposal() const;
  void set_holderproposal(bool value);
  private:
  bool _internal_holderproposal() const;
  void _internal_set_holderproposal(bool value);
  public:

  // uint64 AuthorizedTokenQty = 10;
  void clear_authorizedtokenqty();
  ::PROTOBUF_NAMESPACE_ID::uint64 authorizedtokenqty() const;
  void set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authorizedtokenqty() const;
  void _internal_set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 InstrumentModificationGovernance = 9;
  void clear_instrumentmodificationgovernance();
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentmodificationgovernance() const;
  void set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instrumentmodificationgovernance() const;
  void _internal_set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> traderestrictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentpermissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentpayload_;
  ::actions::FeeField* transferfee_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votemultiplier_;
  bool enforcementorderspermitted_;
  bool votingrights_;
  bool administrationproposal_;
  bool holderproposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authorizedtokenqty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentmodificationgovernance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentCreation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentCreation) */ {
 public:
  inline InstrumentCreation() : InstrumentCreation(nullptr) {};
  virtual ~InstrumentCreation();

  InstrumentCreation(const InstrumentCreation& from);
  InstrumentCreation(InstrumentCreation&& from) noexcept
    : InstrumentCreation() {
    *this = ::std::move(from);
  }

  inline InstrumentCreation& operator=(const InstrumentCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentCreation& operator=(InstrumentCreation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentCreation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentCreation* internal_default_instance() {
    return reinterpret_cast<const InstrumentCreation*>(
               &_InstrumentCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InstrumentCreation& a, InstrumentCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentCreation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentCreation* New() const final {
    return CreateMaybeMessage<InstrumentCreation>(nullptr);
  }

  InstrumentCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentCreation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentCreation& from);
  void MergeFrom(const InstrumentCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentCreation";
  }
  protected:
  explicit InstrumentCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeRestrictionsFieldNumber = 17,
    kInstrumentCodeFieldNumber = 1,
    kInstrumentPermissionsFieldNumber = 3,
    kInstrumentTypeFieldNumber = 13,
    kInstrumentPayloadFieldNumber = 14,
    kTransferFeeFieldNumber = 18,
    kInstrumentIndexFieldNumber = 2,
    kVoteMultiplierFieldNumber = 8,
    kEnforcementOrdersPermittedFieldNumber = 6,
    kVotingRightsFieldNumber = 7,
    kAdministrationProposalFieldNumber = 9,
    kHolderProposalFieldNumber = 10,
    kAuthorizedTokenQtyFieldNumber = 12,
    kInstrumentModificationGovernanceFieldNumber = 11,
    kInstrumentRevisionFieldNumber = 15,
    kTimestampFieldNumber = 16,
  };
  // repeated string TradeRestrictions = 17;
  int traderestrictions_size() const;
  private:
  int _internal_traderestrictions_size() const;
  public:
  void clear_traderestrictions();
  const std::string& traderestrictions(int index) const;
  std::string* mutable_traderestrictions(int index);
  void set_traderestrictions(int index, const std::string& value);
  void set_traderestrictions(int index, std::string&& value);
  void set_traderestrictions(int index, const char* value);
  void set_traderestrictions(int index, const char* value, size_t size);
  std::string* add_traderestrictions();
  void add_traderestrictions(const std::string& value);
  void add_traderestrictions(std::string&& value);
  void add_traderestrictions(const char* value);
  void add_traderestrictions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& traderestrictions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_traderestrictions();
  private:
  const std::string& _internal_traderestrictions(int index) const;
  std::string* _internal_add_traderestrictions();
  public:

  // bytes InstrumentCode = 1;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // bytes InstrumentPermissions = 3;
  void clear_instrumentpermissions();
  const std::string& instrumentpermissions() const;
  void set_instrumentpermissions(const std::string& value);
  void set_instrumentpermissions(std::string&& value);
  void set_instrumentpermissions(const char* value);
  void set_instrumentpermissions(const void* value, size_t size);
  std::string* mutable_instrumentpermissions();
  std::string* release_instrumentpermissions();
  void set_allocated_instrumentpermissions(std::string* instrumentpermissions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentpermissions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentpermissions(
      std::string* instrumentpermissions);
  private:
  const std::string& _internal_instrumentpermissions() const;
  void _internal_set_instrumentpermissions(const std::string& value);
  std::string* _internal_mutable_instrumentpermissions();
  public:

  // string InstrumentType = 13;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentPayload = 14;
  void clear_instrumentpayload();
  const std::string& instrumentpayload() const;
  void set_instrumentpayload(const std::string& value);
  void set_instrumentpayload(std::string&& value);
  void set_instrumentpayload(const char* value);
  void set_instrumentpayload(const void* value, size_t size);
  std::string* mutable_instrumentpayload();
  std::string* release_instrumentpayload();
  void set_allocated_instrumentpayload(std::string* instrumentpayload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentpayload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentpayload(
      std::string* instrumentpayload);
  private:
  const std::string& _internal_instrumentpayload() const;
  void _internal_set_instrumentpayload(const std::string& value);
  std::string* _internal_mutable_instrumentpayload();
  public:

  // .actions.FeeField TransferFee = 18;
  bool has_transferfee() const;
  private:
  bool _internal_has_transferfee() const;
  public:
  void clear_transferfee();
  const ::actions::FeeField& transferfee() const;
  ::actions::FeeField* release_transferfee();
  ::actions::FeeField* mutable_transferfee();
  void set_allocated_transferfee(::actions::FeeField* transferfee);
  private:
  const ::actions::FeeField& _internal_transferfee() const;
  ::actions::FeeField* _internal_mutable_transferfee();
  public:
  void unsafe_arena_set_allocated_transferfee(
      ::actions::FeeField* transferfee);
  ::actions::FeeField* unsafe_arena_release_transferfee();

  // uint64 InstrumentIndex = 2;
  void clear_instrumentindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 instrumentindex() const;
  void set_instrumentindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instrumentindex() const;
  void _internal_set_instrumentindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 VoteMultiplier = 8;
  void clear_votemultiplier();
  ::PROTOBUF_NAMESPACE_ID::uint32 votemultiplier() const;
  void set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votemultiplier() const;
  void _internal_set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool EnforcementOrdersPermitted = 6;
  void clear_enforcementorderspermitted();
  bool enforcementorderspermitted() const;
  void set_enforcementorderspermitted(bool value);
  private:
  bool _internal_enforcementorderspermitted() const;
  void _internal_set_enforcementorderspermitted(bool value);
  public:

  // bool VotingRights = 7;
  void clear_votingrights();
  bool votingrights() const;
  void set_votingrights(bool value);
  private:
  bool _internal_votingrights() const;
  void _internal_set_votingrights(bool value);
  public:

  // bool AdministrationProposal = 9;
  void clear_administrationproposal();
  bool administrationproposal() const;
  void set_administrationproposal(bool value);
  private:
  bool _internal_administrationproposal() const;
  void _internal_set_administrationproposal(bool value);
  public:

  // bool HolderProposal = 10;
  void clear_holderproposal();
  bool holderproposal() const;
  void set_holderproposal(bool value);
  private:
  bool _internal_holderproposal() const;
  void _internal_set_holderproposal(bool value);
  public:

  // uint64 AuthorizedTokenQty = 12;
  void clear_authorizedtokenqty();
  ::PROTOBUF_NAMESPACE_ID::uint64 authorizedtokenqty() const;
  void set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_authorizedtokenqty() const;
  void _internal_set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 InstrumentModificationGovernance = 11;
  void clear_instrumentmodificationgovernance();
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentmodificationgovernance() const;
  void set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instrumentmodificationgovernance() const;
  void _internal_set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 InstrumentRevision = 15;
  void clear_instrumentrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentrevision() const;
  void set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instrumentrevision() const;
  void _internal_set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 Timestamp = 16;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> traderestrictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentpermissions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentpayload_;
  ::actions::FeeField* transferfee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instrumentindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votemultiplier_;
  bool enforcementorderspermitted_;
  bool votingrights_;
  bool administrationproposal_;
  bool holderproposal_;
  ::PROTOBUF_NAMESPACE_ID::uint64 authorizedtokenqty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentmodificationgovernance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentrevision_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentModification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentModification) */ {
 public:
  inline InstrumentModification() : InstrumentModification(nullptr) {};
  virtual ~InstrumentModification();

  InstrumentModification(const InstrumentModification& from);
  InstrumentModification(InstrumentModification&& from) noexcept
    : InstrumentModification() {
    *this = ::std::move(from);
  }

  inline InstrumentModification& operator=(const InstrumentModification& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentModification& operator=(InstrumentModification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentModification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentModification* internal_default_instance() {
    return reinterpret_cast<const InstrumentModification*>(
               &_InstrumentModification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InstrumentModification& a, InstrumentModification& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentModification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentModification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentModification* New() const final {
    return CreateMaybeMessage<InstrumentModification>(nullptr);
  }

  InstrumentModification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentModification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentModification& from);
  void MergeFrom(const InstrumentModification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentModification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentModification";
  }
  protected:
  explicit InstrumentModification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmendmentsFieldNumber = 4,
    kInstrumentTypeFieldNumber = 1,
    kInstrumentCodeFieldNumber = 2,
    kRefTxIDFieldNumber = 5,
    kInstrumentRevisionFieldNumber = 3,
  };
  // repeated .actions.AmendmentField Amendments = 4;
  int amendments_size() const;
  private:
  int _internal_amendments_size() const;
  public:
  void clear_amendments();
  ::actions::AmendmentField* mutable_amendments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
      mutable_amendments();
  private:
  const ::actions::AmendmentField& _internal_amendments(int index) const;
  ::actions::AmendmentField* _internal_add_amendments();
  public:
  const ::actions::AmendmentField& amendments(int index) const;
  ::actions::AmendmentField* add_amendments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
      amendments() const;

  // string InstrumentType = 1;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 2;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // bytes RefTxID = 5;
  void clear_reftxid();
  const std::string& reftxid() const;
  void set_reftxid(const std::string& value);
  void set_reftxid(std::string&& value);
  void set_reftxid(const char* value);
  void set_reftxid(const void* value, size_t size);
  std::string* mutable_reftxid();
  std::string* release_reftxid();
  void set_allocated_reftxid(std::string* reftxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reftxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reftxid(
      std::string* reftxid);
  private:
  const std::string& _internal_reftxid() const;
  void _internal_set_reftxid(const std::string& value);
  std::string* _internal_mutable_reftxid();
  public:

  // uint32 InstrumentRevision = 3;
  void clear_instrumentrevision();
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentrevision() const;
  void set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instrumentrevision() const;
  void _internal_set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentModification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField > amendments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reftxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instrumentrevision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Transfer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {};
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
    kExchangeFeeAddressFieldNumber = 4,
    kOfferExpiryFieldNumber = 2,
    kExchangeFeeFieldNumber = 3,
  };
  // repeated .actions.InstrumentTransferField Instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;
  public:
  void clear_instruments();
  ::actions::InstrumentTransferField* mutable_instruments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentTransferField >*
      mutable_instruments();
  private:
  const ::actions::InstrumentTransferField& _internal_instruments(int index) const;
  ::actions::InstrumentTransferField* _internal_add_instruments();
  public:
  const ::actions::InstrumentTransferField& instruments(int index) const;
  ::actions::InstrumentTransferField* add_instruments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentTransferField >&
      instruments() const;

  // bytes ExchangeFeeAddress = 4;
  void clear_exchangefeeaddress();
  const std::string& exchangefeeaddress() const;
  void set_exchangefeeaddress(const std::string& value);
  void set_exchangefeeaddress(std::string&& value);
  void set_exchangefeeaddress(const char* value);
  void set_exchangefeeaddress(const void* value, size_t size);
  std::string* mutable_exchangefeeaddress();
  std::string* release_exchangefeeaddress();
  void set_allocated_exchangefeeaddress(std::string* exchangefeeaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchangefeeaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchangefeeaddress(
      std::string* exchangefeeaddress);
  private:
  const std::string& _internal_exchangefeeaddress() const;
  void _internal_set_exchangefeeaddress(const std::string& value);
  std::string* _internal_mutable_exchangefeeaddress();
  public:

  // uint64 OfferExpiry = 2;
  void clear_offerexpiry();
  ::PROTOBUF_NAMESPACE_ID::uint64 offerexpiry() const;
  void set_offerexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offerexpiry() const;
  void _internal_set_offerexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ExchangeFee = 3;
  void clear_exchangefee();
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangefee() const;
  void set_exchangefee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_exchangefee() const;
  void _internal_set_exchangefee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentTransferField > instruments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchangefeeaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offerexpiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 exchangefee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Settlement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Settlement) */ {
 public:
  inline Settlement() : Settlement(nullptr) {};
  virtual ~Settlement();

  Settlement(const Settlement& from);
  Settlement(Settlement&& from) noexcept
    : Settlement() {
    *this = ::std::move(from);
  }

  inline Settlement& operator=(const Settlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Settlement& operator=(Settlement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Settlement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Settlement* internal_default_instance() {
    return reinterpret_cast<const Settlement*>(
               &_Settlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Settlement& a, Settlement& b) {
    a.Swap(&b);
  }
  inline void Swap(Settlement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Settlement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Settlement* New() const final {
    return CreateMaybeMessage<Settlement>(nullptr);
  }

  Settlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Settlement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Settlement& from);
  void MergeFrom(const Settlement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Settlement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Settlement";
  }
  protected:
  explicit Settlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // repeated .actions.InstrumentSettlementField Instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;
  public:
  void clear_instruments();
  ::actions::InstrumentSettlementField* mutable_instruments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >*
      mutable_instruments();
  private:
  const ::actions::InstrumentSettlementField& _internal_instruments(int index) const;
  ::actions::InstrumentSettlementField* _internal_add_instruments();
  public:
  const ::actions::InstrumentSettlementField& instruments(int index) const;
  ::actions::InstrumentSettlementField* add_instruments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >&
      instruments() const;

  // uint64 Timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Settlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField > instruments_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class RectificationSettlement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.RectificationSettlement) */ {
 public:
  inline RectificationSettlement() : RectificationSettlement(nullptr) {};
  virtual ~RectificationSettlement();

  RectificationSettlement(const RectificationSettlement& from);
  RectificationSettlement(RectificationSettlement&& from) noexcept
    : RectificationSettlement() {
    *this = ::std::move(from);
  }

  inline RectificationSettlement& operator=(const RectificationSettlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectificationSettlement& operator=(RectificationSettlement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RectificationSettlement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RectificationSettlement* internal_default_instance() {
    return reinterpret_cast<const RectificationSettlement*>(
               &_RectificationSettlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RectificationSettlement& a, RectificationSettlement& b) {
    a.Swap(&b);
  }
  inline void Swap(RectificationSettlement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectificationSettlement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RectificationSettlement* New() const final {
    return CreateMaybeMessage<RectificationSettlement>(nullptr);
  }

  RectificationSettlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RectificationSettlement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RectificationSettlement& from);
  void MergeFrom(const RectificationSettlement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectificationSettlement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.RectificationSettlement";
  }
  protected:
  explicit RectificationSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 2,
    kTransferFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // repeated .actions.InstrumentSettlementField Instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;
  public:
  void clear_instruments();
  ::actions::InstrumentSettlementField* mutable_instruments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >*
      mutable_instruments();
  private:
  const ::actions::InstrumentSettlementField& _internal_instruments(int index) const;
  ::actions::InstrumentSettlementField* _internal_add_instruments();
  public:
  const ::actions::InstrumentSettlementField& instruments(int index) const;
  ::actions::InstrumentSettlementField* add_instruments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >&
      instruments() const;

  // .actions.ReferenceTransactionField Transfer = 1;
  bool has_transfer() const;
  private:
  bool _internal_has_transfer() const;
  public:
  void clear_transfer();
  const ::actions::ReferenceTransactionField& transfer() const;
  ::actions::ReferenceTransactionField* release_transfer();
  ::actions::ReferenceTransactionField* mutable_transfer();
  void set_allocated_transfer(::actions::ReferenceTransactionField* transfer);
  private:
  const ::actions::ReferenceTransactionField& _internal_transfer() const;
  ::actions::ReferenceTransactionField* _internal_mutable_transfer();
  public:
  void unsafe_arena_set_allocated_transfer(
      ::actions::ReferenceTransactionField* transfer);
  ::actions::ReferenceTransactionField* unsafe_arena_release_transfer();

  // uint64 Timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.RectificationSettlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField > instruments_;
  ::actions::ReferenceTransactionField* transfer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Proposal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {};
  virtual ~Proposal();

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proposal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proposal* New() const final {
    return CreateMaybeMessage<Proposal>(nullptr);
  }

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proposal& from);
  void MergeFrom(const Proposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposedAmendmentsFieldNumber = 5,
    kInstrumentTypeFieldNumber = 2,
    kInstrumentCodeFieldNumber = 3,
    kVoteOptionsFieldNumber = 6,
    kProposalDescriptionFieldNumber = 8,
    kProposalDocumentHashFieldNumber = 9,
    kTypeFieldNumber = 1,
    kVoteSystemFieldNumber = 4,
    kVoteCutOffTimestampFieldNumber = 10,
    kVoteMaxFieldNumber = 7,
  };
  // repeated .actions.AmendmentField ProposedAmendments = 5;
  int proposedamendments_size() const;
  private:
  int _internal_proposedamendments_size() const;
  public:
  void clear_proposedamendments();
  ::actions::AmendmentField* mutable_proposedamendments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
      mutable_proposedamendments();
  private:
  const ::actions::AmendmentField& _internal_proposedamendments(int index) const;
  ::actions::AmendmentField* _internal_add_proposedamendments();
  public:
  const ::actions::AmendmentField& proposedamendments(int index) const;
  ::actions::AmendmentField* add_proposedamendments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
      proposedamendments() const;

  // string InstrumentType = 2;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 3;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // string VoteOptions = 6;
  void clear_voteoptions();
  const std::string& voteoptions() const;
  void set_voteoptions(const std::string& value);
  void set_voteoptions(std::string&& value);
  void set_voteoptions(const char* value);
  void set_voteoptions(const char* value, size_t size);
  std::string* mutable_voteoptions();
  std::string* release_voteoptions();
  void set_allocated_voteoptions(std::string* voteoptions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_voteoptions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_voteoptions(
      std::string* voteoptions);
  private:
  const std::string& _internal_voteoptions() const;
  void _internal_set_voteoptions(const std::string& value);
  std::string* _internal_mutable_voteoptions();
  public:

  // string ProposalDescription = 8;
  void clear_proposaldescription();
  const std::string& proposaldescription() const;
  void set_proposaldescription(const std::string& value);
  void set_proposaldescription(std::string&& value);
  void set_proposaldescription(const char* value);
  void set_proposaldescription(const char* value, size_t size);
  std::string* mutable_proposaldescription();
  std::string* release_proposaldescription();
  void set_allocated_proposaldescription(std::string* proposaldescription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposaldescription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposaldescription(
      std::string* proposaldescription);
  private:
  const std::string& _internal_proposaldescription() const;
  void _internal_set_proposaldescription(const std::string& value);
  std::string* _internal_mutable_proposaldescription();
  public:

  // bytes ProposalDocumentHash = 9;
  void clear_proposaldocumenthash();
  const std::string& proposaldocumenthash() const;
  void set_proposaldocumenthash(const std::string& value);
  void set_proposaldocumenthash(std::string&& value);
  void set_proposaldocumenthash(const char* value);
  void set_proposaldocumenthash(const void* value, size_t size);
  std::string* mutable_proposaldocumenthash();
  std::string* release_proposaldocumenthash();
  void set_allocated_proposaldocumenthash(std::string* proposaldocumenthash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proposaldocumenthash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proposaldocumenthash(
      std::string* proposaldocumenthash);
  private:
  const std::string& _internal_proposaldocumenthash() const;
  void _internal_set_proposaldocumenthash(const std::string& value);
  std::string* _internal_mutable_proposaldocumenthash();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 VoteSystem = 4;
  void clear_votesystem();
  ::PROTOBUF_NAMESPACE_ID::uint32 votesystem() const;
  void set_votesystem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votesystem() const;
  void _internal_set_votesystem(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 VoteCutOffTimestamp = 10;
  void clear_votecutofftimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 votecutofftimestamp() const;
  void set_votecutofftimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_votecutofftimestamp() const;
  void _internal_set_votecutofftimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 VoteMax = 7;
  void clear_votemax();
  ::PROTOBUF_NAMESPACE_ID::uint32 votemax() const;
  void set_votemax(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_votemax() const;
  void _internal_set_votemax(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField > proposedamendments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voteoptions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposaldescription_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposaldocumenthash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votesystem_;
  ::PROTOBUF_NAMESPACE_ID::uint64 votecutofftimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 votemax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Vote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {};
  virtual ~Vote();

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vote* New() const final {
    return CreateMaybeMessage<Vote>(nullptr);
  }

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class BallotCast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.BallotCast) */ {
 public:
  inline BallotCast() : BallotCast(nullptr) {};
  virtual ~BallotCast();

  BallotCast(const BallotCast& from);
  BallotCast(BallotCast&& from) noexcept
    : BallotCast() {
    *this = ::std::move(from);
  }

  inline BallotCast& operator=(const BallotCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallotCast& operator=(BallotCast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BallotCast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallotCast* internal_default_instance() {
    return reinterpret_cast<const BallotCast*>(
               &_BallotCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BallotCast& a, BallotCast& b) {
    a.Swap(&b);
  }
  inline void Swap(BallotCast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallotCast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BallotCast* New() const final {
    return CreateMaybeMessage<BallotCast>(nullptr);
  }

  BallotCast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BallotCast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BallotCast& from);
  void MergeFrom(const BallotCast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallotCast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.BallotCast";
  }
  protected:
  explicit BallotCast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteTxIdFieldNumber = 1,
    kVoteFieldNumber = 2,
  };
  // bytes VoteTxId = 1;
  void clear_votetxid();
  const std::string& votetxid() const;
  void set_votetxid(const std::string& value);
  void set_votetxid(std::string&& value);
  void set_votetxid(const char* value);
  void set_votetxid(const void* value, size_t size);
  std::string* mutable_votetxid();
  std::string* release_votetxid();
  void set_allocated_votetxid(std::string* votetxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_votetxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_votetxid(
      std::string* votetxid);
  private:
  const std::string& _internal_votetxid() const;
  void _internal_set_votetxid(const std::string& value);
  std::string* _internal_mutable_votetxid();
  public:

  // string Vote = 2;
  void clear_vote();
  const std::string& vote() const;
  void set_vote(const std::string& value);
  void set_vote(std::string&& value);
  void set_vote(const char* value);
  void set_vote(const char* value, size_t size);
  std::string* mutable_vote();
  std::string* release_vote();
  void set_allocated_vote(std::string* vote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vote(
      std::string* vote);
  private:
  const std::string& _internal_vote() const;
  void _internal_set_vote(const std::string& value);
  std::string* _internal_mutable_vote();
  public:

  // @@protoc_insertion_point(class_scope:actions.BallotCast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr votetxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class BallotCounted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.BallotCounted) */ {
 public:
  inline BallotCounted() : BallotCounted(nullptr) {};
  virtual ~BallotCounted();

  BallotCounted(const BallotCounted& from);
  BallotCounted(BallotCounted&& from) noexcept
    : BallotCounted() {
    *this = ::std::move(from);
  }

  inline BallotCounted& operator=(const BallotCounted& from) {
    CopyFrom(from);
    return *this;
  }
  inline BallotCounted& operator=(BallotCounted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BallotCounted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallotCounted* internal_default_instance() {
    return reinterpret_cast<const BallotCounted*>(
               &_BallotCounted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BallotCounted& a, BallotCounted& b) {
    a.Swap(&b);
  }
  inline void Swap(BallotCounted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BallotCounted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BallotCounted* New() const final {
    return CreateMaybeMessage<BallotCounted>(nullptr);
  }

  BallotCounted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BallotCounted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BallotCounted& from);
  void MergeFrom(const BallotCounted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallotCounted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.BallotCounted";
  }
  protected:
  explicit BallotCounted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteTxIdFieldNumber = 1,
    kVoteFieldNumber = 2,
    kQuantityFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // bytes VoteTxId = 1;
  void clear_votetxid();
  const std::string& votetxid() const;
  void set_votetxid(const std::string& value);
  void set_votetxid(std::string&& value);
  void set_votetxid(const char* value);
  void set_votetxid(const void* value, size_t size);
  std::string* mutable_votetxid();
  std::string* release_votetxid();
  void set_allocated_votetxid(std::string* votetxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_votetxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_votetxid(
      std::string* votetxid);
  private:
  const std::string& _internal_votetxid() const;
  void _internal_set_votetxid(const std::string& value);
  std::string* _internal_mutable_votetxid();
  public:

  // string Vote = 2;
  void clear_vote();
  const std::string& vote() const;
  void set_vote(const std::string& value);
  void set_vote(std::string&& value);
  void set_vote(const char* value);
  void set_vote(const char* value, size_t size);
  std::string* mutable_vote();
  std::string* release_vote();
  void set_allocated_vote(std::string* vote);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vote();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vote(
      std::string* vote);
  private:
  const std::string& _internal_vote() const;
  void _internal_set_vote(const std::string& value);
  std::string* _internal_mutable_vote();
  public:

  // uint64 Quantity = 3;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.BallotCounted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr votetxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Result) */ {
 public:
  inline Result() : Result(nullptr) {};
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposedAmendmentsFieldNumber = 3,
    kOptionTallyFieldNumber = 5,
    kInstrumentTypeFieldNumber = 1,
    kInstrumentCodeFieldNumber = 2,
    kVoteTxIdFieldNumber = 4,
    kResultFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // repeated .actions.AmendmentField ProposedAmendments = 3;
  int proposedamendments_size() const;
  private:
  int _internal_proposedamendments_size() const;
  public:
  void clear_proposedamendments();
  ::actions::AmendmentField* mutable_proposedamendments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
      mutable_proposedamendments();
  private:
  const ::actions::AmendmentField& _internal_proposedamendments(int index) const;
  ::actions::AmendmentField* _internal_add_proposedamendments();
  public:
  const ::actions::AmendmentField& proposedamendments(int index) const;
  ::actions::AmendmentField* add_proposedamendments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
      proposedamendments() const;

  // repeated uint64 OptionTally = 5;
  int optiontally_size() const;
  private:
  int _internal_optiontally_size() const;
  public:
  void clear_optiontally();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_optiontally(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_optiontally() const;
  void _internal_add_optiontally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_optiontally();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 optiontally(int index) const;
  void set_optiontally(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_optiontally(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      optiontally() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_optiontally();

  // string InstrumentType = 1;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 2;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // bytes VoteTxId = 4;
  void clear_votetxid();
  const std::string& votetxid() const;
  void set_votetxid(const std::string& value);
  void set_votetxid(std::string&& value);
  void set_votetxid(const char* value);
  void set_votetxid(const void* value, size_t size);
  std::string* mutable_votetxid();
  std::string* release_votetxid();
  void set_allocated_votetxid(std::string* votetxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_votetxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_votetxid(
      std::string* votetxid);
  private:
  const std::string& _internal_votetxid() const;
  void _internal_set_votetxid(const std::string& value);
  std::string* _internal_mutable_votetxid();
  public:

  // string Result = 6;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_result();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_result(
      std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // uint64 Timestamp = 7;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField > proposedamendments_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > optiontally_;
  mutable std::atomic<int> _optiontally_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr votetxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Order) */ {
 public:
  inline Order() : Order(nullptr) {};
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAddressesFieldNumber = 4,
    kBitcoinDispersionsFieldNumber = 14,
    kReferenceTransactionsFieldNumber = 18,
    kComplianceActionFieldNumber = 1,
    kInstrumentTypeFieldNumber = 2,
    kInstrumentCodeFieldNumber = 3,
    kFreezeTxIdFieldNumber = 5,
    kDepositAddressFieldNumber = 7,
    kAuthorityNameFieldNumber = 8,
    kAuthorityPublicKeyFieldNumber = 9,
    kOrderSignatureFieldNumber = 11,
    kMessageFieldNumber = 15,
    kSupportingEvidenceFieldNumber = 17,
    kFreezePeriodFieldNumber = 6,
    kSignatureAlgorithmFieldNumber = 10,
    kSupportingEvidenceFormatFieldNumber = 16,
  };
  // repeated .actions.TargetAddressField TargetAddresses = 4;
  int targetaddresses_size() const;
  private:
  int _internal_targetaddresses_size() const;
  public:
  void clear_targetaddresses();
  ::actions::TargetAddressField* mutable_targetaddresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::TargetAddressField >*
      mutable_targetaddresses();
  private:
  const ::actions::TargetAddressField& _internal_targetaddresses(int index) const;
  ::actions::TargetAddressField* _internal_add_targetaddresses();
  public:
  const ::actions::TargetAddressField& targetaddresses(int index) const;
  ::actions::TargetAddressField* add_targetaddresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::TargetAddressField >&
      targetaddresses() const;

  // repeated .actions.QuantityIndexField BitcoinDispersions = 14;
  int bitcoindispersions_size() const;
  private:
  int _internal_bitcoindispersions_size() const;
  public:
  void clear_bitcoindispersions();
  ::actions::QuantityIndexField* mutable_bitcoindispersions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_bitcoindispersions();
  private:
  const ::actions::QuantityIndexField& _internal_bitcoindispersions(int index) const;
  ::actions::QuantityIndexField* _internal_add_bitcoindispersions();
  public:
  const ::actions::QuantityIndexField& bitcoindispersions(int index) const;
  ::actions::QuantityIndexField* add_bitcoindispersions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      bitcoindispersions() const;

  // repeated .actions.ReferenceTransactionField ReferenceTransactions = 18;
  int referencetransactions_size() const;
  private:
  int _internal_referencetransactions_size() const;
  public:
  void clear_referencetransactions();
  ::actions::ReferenceTransactionField* mutable_referencetransactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ReferenceTransactionField >*
      mutable_referencetransactions();
  private:
  const ::actions::ReferenceTransactionField& _internal_referencetransactions(int index) const;
  ::actions::ReferenceTransactionField* _internal_add_referencetransactions();
  public:
  const ::actions::ReferenceTransactionField& referencetransactions(int index) const;
  ::actions::ReferenceTransactionField* add_referencetransactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ReferenceTransactionField >&
      referencetransactions() const;

  // string ComplianceAction = 1;
  void clear_complianceaction();
  const std::string& complianceaction() const;
  void set_complianceaction(const std::string& value);
  void set_complianceaction(std::string&& value);
  void set_complianceaction(const char* value);
  void set_complianceaction(const char* value, size_t size);
  std::string* mutable_complianceaction();
  std::string* release_complianceaction();
  void set_allocated_complianceaction(std::string* complianceaction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_complianceaction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_complianceaction(
      std::string* complianceaction);
  private:
  const std::string& _internal_complianceaction() const;
  void _internal_set_complianceaction(const std::string& value);
  std::string* _internal_mutable_complianceaction();
  public:

  // string InstrumentType = 2;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 3;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // bytes FreezeTxId = 5;
  void clear_freezetxid();
  const std::string& freezetxid() const;
  void set_freezetxid(const std::string& value);
  void set_freezetxid(std::string&& value);
  void set_freezetxid(const char* value);
  void set_freezetxid(const void* value, size_t size);
  std::string* mutable_freezetxid();
  std::string* release_freezetxid();
  void set_allocated_freezetxid(std::string* freezetxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_freezetxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_freezetxid(
      std::string* freezetxid);
  private:
  const std::string& _internal_freezetxid() const;
  void _internal_set_freezetxid(const std::string& value);
  std::string* _internal_mutable_freezetxid();
  public:

  // bytes DepositAddress = 7;
  void clear_depositaddress();
  const std::string& depositaddress() const;
  void set_depositaddress(const std::string& value);
  void set_depositaddress(std::string&& value);
  void set_depositaddress(const char* value);
  void set_depositaddress(const void* value, size_t size);
  std::string* mutable_depositaddress();
  std::string* release_depositaddress();
  void set_allocated_depositaddress(std::string* depositaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_depositaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_depositaddress(
      std::string* depositaddress);
  private:
  const std::string& _internal_depositaddress() const;
  void _internal_set_depositaddress(const std::string& value);
  std::string* _internal_mutable_depositaddress();
  public:

  // string AuthorityName = 8;
  void clear_authorityname();
  const std::string& authorityname() const;
  void set_authorityname(const std::string& value);
  void set_authorityname(std::string&& value);
  void set_authorityname(const char* value);
  void set_authorityname(const char* value, size_t size);
  std::string* mutable_authorityname();
  std::string* release_authorityname();
  void set_allocated_authorityname(std::string* authorityname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authorityname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authorityname(
      std::string* authorityname);
  private:
  const std::string& _internal_authorityname() const;
  void _internal_set_authorityname(const std::string& value);
  std::string* _internal_mutable_authorityname();
  public:

  // bytes AuthorityPublicKey = 9;
  void clear_authoritypublickey();
  const std::string& authoritypublickey() const;
  void set_authoritypublickey(const std::string& value);
  void set_authoritypublickey(std::string&& value);
  void set_authoritypublickey(const char* value);
  void set_authoritypublickey(const void* value, size_t size);
  std::string* mutable_authoritypublickey();
  std::string* release_authoritypublickey();
  void set_allocated_authoritypublickey(std::string* authoritypublickey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_authoritypublickey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_authoritypublickey(
      std::string* authoritypublickey);
  private:
  const std::string& _internal_authoritypublickey() const;
  void _internal_set_authoritypublickey(const std::string& value);
  std::string* _internal_mutable_authoritypublickey();
  public:

  // bytes OrderSignature = 11;
  void clear_ordersignature();
  const std::string& ordersignature() const;
  void set_ordersignature(const std::string& value);
  void set_ordersignature(std::string&& value);
  void set_ordersignature(const char* value);
  void set_ordersignature(const void* value, size_t size);
  std::string* mutable_ordersignature();
  std::string* release_ordersignature();
  void set_allocated_ordersignature(std::string* ordersignature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ordersignature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ordersignature(
      std::string* ordersignature);
  private:
  const std::string& _internal_ordersignature() const;
  void _internal_set_ordersignature(const std::string& value);
  std::string* _internal_mutable_ordersignature();
  public:

  // string Message = 15;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bytes SupportingEvidence = 17;
  void clear_supportingevidence();
  const std::string& supportingevidence() const;
  void set_supportingevidence(const std::string& value);
  void set_supportingevidence(std::string&& value);
  void set_supportingevidence(const char* value);
  void set_supportingevidence(const void* value, size_t size);
  std::string* mutable_supportingevidence();
  std::string* release_supportingevidence();
  void set_allocated_supportingevidence(std::string* supportingevidence);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_supportingevidence();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_supportingevidence(
      std::string* supportingevidence);
  private:
  const std::string& _internal_supportingevidence() const;
  void _internal_set_supportingevidence(const std::string& value);
  std::string* _internal_mutable_supportingevidence();
  public:

  // uint64 FreezePeriod = 6;
  void clear_freezeperiod();
  ::PROTOBUF_NAMESPACE_ID::uint64 freezeperiod() const;
  void set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_freezeperiod() const;
  void _internal_set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 SignatureAlgorithm = 10;
  void clear_signaturealgorithm();
  ::PROTOBUF_NAMESPACE_ID::uint32 signaturealgorithm() const;
  void set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signaturealgorithm() const;
  void _internal_set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SupportingEvidenceFormat = 16;
  void clear_supportingevidenceformat();
  ::PROTOBUF_NAMESPACE_ID::uint32 supportingevidenceformat() const;
  void set_supportingevidenceformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_supportingevidenceformat() const;
  void _internal_set_supportingevidenceformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::TargetAddressField > targetaddresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > bitcoindispersions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ReferenceTransactionField > referencetransactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr complianceaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr freezetxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depositaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorityname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authoritypublickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordersignature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supportingevidence_;
  ::PROTOBUF_NAMESPACE_ID::uint64 freezeperiod_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signaturealgorithm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 supportingevidenceformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Freeze PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Freeze) */ {
 public:
  inline Freeze() : Freeze(nullptr) {};
  virtual ~Freeze();

  Freeze(const Freeze& from);
  Freeze(Freeze&& from) noexcept
    : Freeze() {
    *this = ::std::move(from);
  }

  inline Freeze& operator=(const Freeze& from) {
    CopyFrom(from);
    return *this;
  }
  inline Freeze& operator=(Freeze&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Freeze& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Freeze* internal_default_instance() {
    return reinterpret_cast<const Freeze*>(
               &_Freeze_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Freeze& a, Freeze& b) {
    a.Swap(&b);
  }
  inline void Swap(Freeze* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Freeze* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Freeze* New() const final {
    return CreateMaybeMessage<Freeze>(nullptr);
  }

  Freeze* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Freeze>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Freeze& from);
  void MergeFrom(const Freeze& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Freeze* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Freeze";
  }
  protected:
  explicit Freeze(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantitiesFieldNumber = 3,
    kInstrumentTypeFieldNumber = 1,
    kInstrumentCodeFieldNumber = 2,
    kFreezePeriodFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // repeated .actions.QuantityIndexField Quantities = 3;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  ::actions::QuantityIndexField* mutable_quantities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_quantities();
  private:
  const ::actions::QuantityIndexField& _internal_quantities(int index) const;
  ::actions::QuantityIndexField* _internal_add_quantities();
  public:
  const ::actions::QuantityIndexField& quantities(int index) const;
  ::actions::QuantityIndexField* add_quantities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      quantities() const;

  // string InstrumentType = 1;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 2;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint64 FreezePeriod = 4;
  void clear_freezeperiod();
  ::PROTOBUF_NAMESPACE_ID::uint64 freezeperiod() const;
  void set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_freezeperiod() const;
  void _internal_set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Freeze)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > quantities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 freezeperiod_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Thaw PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Thaw) */ {
 public:
  inline Thaw() : Thaw(nullptr) {};
  virtual ~Thaw();

  Thaw(const Thaw& from);
  Thaw(Thaw&& from) noexcept
    : Thaw() {
    *this = ::std::move(from);
  }

  inline Thaw& operator=(const Thaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thaw& operator=(Thaw&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Thaw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Thaw* internal_default_instance() {
    return reinterpret_cast<const Thaw*>(
               &_Thaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Thaw& a, Thaw& b) {
    a.Swap(&b);
  }
  inline void Swap(Thaw* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Thaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Thaw* New() const final {
    return CreateMaybeMessage<Thaw>(nullptr);
  }

  Thaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Thaw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Thaw& from);
  void MergeFrom(const Thaw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thaw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Thaw";
  }
  protected:
  explicit Thaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreezeTxIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes FreezeTxId = 1;
  void clear_freezetxid();
  const std::string& freezetxid() const;
  void set_freezetxid(const std::string& value);
  void set_freezetxid(std::string&& value);
  void set_freezetxid(const char* value);
  void set_freezetxid(const void* value, size_t size);
  std::string* mutable_freezetxid();
  std::string* release_freezetxid();
  void set_allocated_freezetxid(std::string* freezetxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_freezetxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_freezetxid(
      std::string* freezetxid);
  private:
  const std::string& _internal_freezetxid() const;
  void _internal_set_freezetxid(const std::string& value);
  std::string* _internal_mutable_freezetxid();
  public:

  // uint64 Timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Thaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr freezetxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Confiscation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Confiscation) */ {
 public:
  inline Confiscation() : Confiscation(nullptr) {};
  virtual ~Confiscation();

  Confiscation(const Confiscation& from);
  Confiscation(Confiscation&& from) noexcept
    : Confiscation() {
    *this = ::std::move(from);
  }

  inline Confiscation& operator=(const Confiscation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Confiscation& operator=(Confiscation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Confiscation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Confiscation* internal_default_instance() {
    return reinterpret_cast<const Confiscation*>(
               &_Confiscation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Confiscation& a, Confiscation& b) {
    a.Swap(&b);
  }
  inline void Swap(Confiscation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Confiscation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Confiscation* New() const final {
    return CreateMaybeMessage<Confiscation>(nullptr);
  }

  Confiscation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Confiscation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Confiscation& from);
  void MergeFrom(const Confiscation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Confiscation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Confiscation";
  }
  protected:
  explicit Confiscation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantitiesFieldNumber = 3,
    kInstrumentTypeFieldNumber = 1,
    kInstrumentCodeFieldNumber = 2,
    kDepositQtyFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // repeated .actions.QuantityIndexField Quantities = 3;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  ::actions::QuantityIndexField* mutable_quantities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_quantities();
  private:
  const ::actions::QuantityIndexField& _internal_quantities(int index) const;
  ::actions::QuantityIndexField* _internal_add_quantities();
  public:
  const ::actions::QuantityIndexField& quantities(int index) const;
  ::actions::QuantityIndexField* add_quantities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      quantities() const;

  // string InstrumentType = 1;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 2;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint64 DepositQty = 4;
  void clear_depositqty();
  ::PROTOBUF_NAMESPACE_ID::uint64 depositqty() const;
  void set_depositqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_depositqty() const;
  void _internal_set_depositqty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 Timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Confiscation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > quantities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 depositqty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedReconciliation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.DeprecatedReconciliation) */ {
 public:
  inline DeprecatedReconciliation() : DeprecatedReconciliation(nullptr) {};
  virtual ~DeprecatedReconciliation();

  DeprecatedReconciliation(const DeprecatedReconciliation& from);
  DeprecatedReconciliation(DeprecatedReconciliation&& from) noexcept
    : DeprecatedReconciliation() {
    *this = ::std::move(from);
  }

  inline DeprecatedReconciliation& operator=(const DeprecatedReconciliation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedReconciliation& operator=(DeprecatedReconciliation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeprecatedReconciliation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecatedReconciliation* internal_default_instance() {
    return reinterpret_cast<const DeprecatedReconciliation*>(
               &_DeprecatedReconciliation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeprecatedReconciliation& a, DeprecatedReconciliation& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedReconciliation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeprecatedReconciliation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedReconciliation* New() const final {
    return CreateMaybeMessage<DeprecatedReconciliation>(nullptr);
  }

  DeprecatedReconciliation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedReconciliation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeprecatedReconciliation& from);
  void MergeFrom(const DeprecatedReconciliation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeprecatedReconciliation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.DeprecatedReconciliation";
  }
  protected:
  explicit DeprecatedReconciliation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantitiesFieldNumber = 3,
    kInstrumentTypeFieldNumber = 1,
    kInstrumentCodeFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // repeated .actions.QuantityIndexField Quantities = 3;
  int quantities_size() const;
  private:
  int _internal_quantities_size() const;
  public:
  void clear_quantities();
  ::actions::QuantityIndexField* mutable_quantities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_quantities();
  private:
  const ::actions::QuantityIndexField& _internal_quantities(int index) const;
  ::actions::QuantityIndexField* _internal_add_quantities();
  public:
  const ::actions::QuantityIndexField& quantities(int index) const;
  ::actions::QuantityIndexField* add_quantities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      quantities() const;

  // string InstrumentType = 1;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 2;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint64 Timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.DeprecatedReconciliation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > quantities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Establishment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Establishment) */ {
 public:
  inline Establishment() : Establishment(nullptr) {};
  virtual ~Establishment();

  Establishment(const Establishment& from);
  Establishment(Establishment&& from) noexcept
    : Establishment() {
    *this = ::std::move(from);
  }

  inline Establishment& operator=(const Establishment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Establishment& operator=(Establishment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Establishment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Establishment* internal_default_instance() {
    return reinterpret_cast<const Establishment*>(
               &_Establishment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Establishment& a, Establishment& b) {
    a.Swap(&b);
  }
  inline void Swap(Establishment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Establishment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Establishment* New() const final {
    return CreateMaybeMessage<Establishment>(nullptr);
  }

  Establishment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Establishment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Establishment& from);
  void MergeFrom(const Establishment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Establishment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Establishment";
  }
  protected:
  explicit Establishment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string Message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:actions.Establishment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Addition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Addition) */ {
 public:
  inline Addition() : Addition(nullptr) {};
  virtual ~Addition();

  Addition(const Addition& from);
  Addition(Addition&& from) noexcept
    : Addition() {
    *this = ::std::move(from);
  }

  inline Addition& operator=(const Addition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Addition& operator=(Addition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Addition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Addition* internal_default_instance() {
    return reinterpret_cast<const Addition*>(
               &_Addition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Addition& a, Addition& b) {
    a.Swap(&b);
  }
  inline void Swap(Addition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Addition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Addition* New() const final {
    return CreateMaybeMessage<Addition>(nullptr);
  }

  Addition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Addition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Addition& from);
  void MergeFrom(const Addition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Addition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Addition";
  }
  protected:
  explicit Addition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string Message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:actions.Addition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Alteration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Alteration) */ {
 public:
  inline Alteration() : Alteration(nullptr) {};
  virtual ~Alteration();

  Alteration(const Alteration& from);
  Alteration(Alteration&& from) noexcept
    : Alteration() {
    *this = ::std::move(from);
  }

  inline Alteration& operator=(const Alteration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alteration& operator=(Alteration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alteration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alteration* internal_default_instance() {
    return reinterpret_cast<const Alteration*>(
               &_Alteration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Alteration& a, Alteration& b) {
    a.Swap(&b);
  }
  inline void Swap(Alteration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alteration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alteration* New() const final {
    return CreateMaybeMessage<Alteration>(nullptr);
  }

  Alteration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alteration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Alteration& from);
  void MergeFrom(const Alteration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alteration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Alteration";
  }
  protected:
  explicit Alteration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryTxIDFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // bytes EntryTxID = 1;
  void clear_entrytxid();
  const std::string& entrytxid() const;
  void set_entrytxid(const std::string& value);
  void set_entrytxid(std::string&& value);
  void set_entrytxid(const char* value);
  void set_entrytxid(const void* value, size_t size);
  std::string* mutable_entrytxid();
  std::string* release_entrytxid();
  void set_allocated_entrytxid(std::string* entrytxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entrytxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entrytxid(
      std::string* entrytxid);
  private:
  const std::string& _internal_entrytxid() const;
  void _internal_set_entrytxid(const std::string& value);
  std::string* _internal_mutable_entrytxid();
  public:

  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:actions.Alteration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entrytxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Removal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Removal) */ {
 public:
  inline Removal() : Removal(nullptr) {};
  virtual ~Removal();

  Removal(const Removal& from);
  Removal(Removal&& from) noexcept
    : Removal() {
    *this = ::std::move(from);
  }

  inline Removal& operator=(const Removal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Removal& operator=(Removal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Removal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Removal* internal_default_instance() {
    return reinterpret_cast<const Removal*>(
               &_Removal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Removal& a, Removal& b) {
    a.Swap(&b);
  }
  inline void Swap(Removal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Removal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Removal* New() const final {
    return CreateMaybeMessage<Removal>(nullptr);
  }

  Removal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Removal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Removal& from);
  void MergeFrom(const Removal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Removal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Removal";
  }
  protected:
  explicit Removal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryTxIDFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // bytes EntryTxID = 1;
  void clear_entrytxid();
  const std::string& entrytxid() const;
  void set_entrytxid(const std::string& value);
  void set_entrytxid(std::string&& value);
  void set_entrytxid(const char* value);
  void set_entrytxid(const void* value, size_t size);
  std::string* mutable_entrytxid();
  std::string* release_entrytxid();
  void set_allocated_entrytxid(std::string* entrytxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entrytxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entrytxid(
      std::string* entrytxid);
  private:
  const std::string& _internal_entrytxid() const;
  void _internal_set_entrytxid(const std::string& value);
  std::string* _internal_mutable_entrytxid();
  public:

  // string Message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:actions.Removal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entrytxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIndexesFieldNumber = 1,
    kReceiverIndexesFieldNumber = 2,
    kMessagePayloadFieldNumber = 4,
    kMessageCodeFieldNumber = 3,
  };
  // repeated uint32 SenderIndexes = 1;
  int senderindexes_size() const;
  private:
  int _internal_senderindexes_size() const;
  public:
  void clear_senderindexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_senderindexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_senderindexes() const;
  void _internal_add_senderindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_senderindexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 senderindexes(int index) const;
  void set_senderindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_senderindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      senderindexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_senderindexes();

  // repeated uint32 ReceiverIndexes = 2;
  int receiverindexes_size() const;
  private:
  int _internal_receiverindexes_size() const;
  public:
  void clear_receiverindexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_receiverindexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_receiverindexes() const;
  void _internal_add_receiverindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_receiverindexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 receiverindexes(int index) const;
  void set_receiverindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_receiverindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      receiverindexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_receiverindexes();

  // bytes MessagePayload = 4;
  void clear_messagepayload();
  const std::string& messagepayload() const;
  void set_messagepayload(const std::string& value);
  void set_messagepayload(std::string&& value);
  void set_messagepayload(const char* value);
  void set_messagepayload(const void* value, size_t size);
  std::string* mutable_messagepayload();
  std::string* release_messagepayload();
  void set_allocated_messagepayload(std::string* messagepayload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_messagepayload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_messagepayload(
      std::string* messagepayload);
  private:
  const std::string& _internal_messagepayload() const;
  void _internal_set_messagepayload(const std::string& value);
  std::string* _internal_mutable_messagepayload();
  public:

  // uint32 MessageCode = 3;
  void clear_messagecode();
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecode() const;
  void set_messagecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_messagecode() const;
  void _internal_set_messagecode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > senderindexes_;
  mutable std::atomic<int> _senderindexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > receiverindexes_;
  mutable std::atomic<int> _receiverindexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagepayload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 messagecode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class Rejection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.Rejection) */ {
 public:
  inline Rejection() : Rejection(nullptr) {};
  virtual ~Rejection();

  Rejection(const Rejection& from);
  Rejection(Rejection&& from) noexcept
    : Rejection() {
    *this = ::std::move(from);
  }

  inline Rejection& operator=(const Rejection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rejection& operator=(Rejection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rejection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rejection* internal_default_instance() {
    return reinterpret_cast<const Rejection*>(
               &_Rejection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Rejection& a, Rejection& b) {
    a.Swap(&b);
  }
  inline void Swap(Rejection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rejection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rejection* New() const final {
    return CreateMaybeMessage<Rejection>(nullptr);
  }

  Rejection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rejection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rejection& from);
  void MergeFrom(const Rejection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rejection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.Rejection";
  }
  protected:
  explicit Rejection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIndexesFieldNumber = 1,
    kMessageFieldNumber = 4,
    kRejectAddressIndexFieldNumber = 2,
    kRejectionCodeFieldNumber = 3,
    kTimestampFieldNumber = 5,
  };
  // repeated uint32 AddressIndexes = 1;
  int addressindexes_size() const;
  private:
  int _internal_addressindexes_size() const;
  public:
  void clear_addressindexes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_addressindexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_addressindexes() const;
  void _internal_add_addressindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_addressindexes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 addressindexes(int index) const;
  void set_addressindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_addressindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      addressindexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_addressindexes();

  // string Message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 RejectAddressIndex = 2;
  void clear_rejectaddressindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 rejectaddressindex() const;
  void set_rejectaddressindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rejectaddressindex() const;
  void _internal_set_rejectaddressindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 RejectionCode = 3;
  void clear_rejectioncode();
  ::PROTOBUF_NAMESPACE_ID::uint32 rejectioncode() const;
  void set_rejectioncode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rejectioncode() const;
  void _internal_set_rejectioncode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 Timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.Rejection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > addressindexes_;
  mutable std::atomic<int> _addressindexes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rejectaddressindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rejectioncode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class AdministratorField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.AdministratorField) */ {
 public:
  inline AdministratorField() : AdministratorField(nullptr) {};
  virtual ~AdministratorField();

  AdministratorField(const AdministratorField& from);
  AdministratorField(AdministratorField&& from) noexcept
    : AdministratorField() {
    *this = ::std::move(from);
  }

  inline AdministratorField& operator=(const AdministratorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdministratorField& operator=(AdministratorField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdministratorField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdministratorField* internal_default_instance() {
    return reinterpret_cast<const AdministratorField*>(
               &_AdministratorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(AdministratorField& a, AdministratorField& b) {
    a.Swap(&b);
  }
  inline void Swap(AdministratorField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdministratorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdministratorField* New() const final {
    return CreateMaybeMessage<AdministratorField>(nullptr);
  }

  AdministratorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdministratorField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdministratorField& from);
  void MergeFrom(const AdministratorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdministratorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.AdministratorField";
  }
  protected:
  explicit AdministratorField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.AdministratorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class AdminIdentityCertificateField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.AdminIdentityCertificateField) */ {
 public:
  inline AdminIdentityCertificateField() : AdminIdentityCertificateField(nullptr) {};
  virtual ~AdminIdentityCertificateField();

  AdminIdentityCertificateField(const AdminIdentityCertificateField& from);
  AdminIdentityCertificateField(AdminIdentityCertificateField&& from) noexcept
    : AdminIdentityCertificateField() {
    *this = ::std::move(from);
  }

  inline AdminIdentityCertificateField& operator=(const AdminIdentityCertificateField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdminIdentityCertificateField& operator=(AdminIdentityCertificateField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdminIdentityCertificateField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminIdentityCertificateField* internal_default_instance() {
    return reinterpret_cast<const AdminIdentityCertificateField*>(
               &_AdminIdentityCertificateField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(AdminIdentityCertificateField& a, AdminIdentityCertificateField& b) {
    a.Swap(&b);
  }
  inline void Swap(AdminIdentityCertificateField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdminIdentityCertificateField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdminIdentityCertificateField* New() const final {
    return CreateMaybeMessage<AdminIdentityCertificateField>(nullptr);
  }

  AdminIdentityCertificateField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdminIdentityCertificateField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdminIdentityCertificateField& from);
  void MergeFrom(const AdminIdentityCertificateField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdminIdentityCertificateField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.AdminIdentityCertificateField";
  }
  protected:
  explicit AdminIdentityCertificateField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityContractFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kExpirationFieldNumber = 4,
    kBlockHeightFieldNumber = 3,
  };
  // bytes EntityContract = 1;
  void clear_entitycontract();
  const std::string& entitycontract() const;
  void set_entitycontract(const std::string& value);
  void set_entitycontract(std::string&& value);
  void set_entitycontract(const char* value);
  void set_entitycontract(const void* value, size_t size);
  std::string* mutable_entitycontract();
  std::string* release_entitycontract();
  void set_allocated_entitycontract(std::string* entitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entitycontract(
      std::string* entitycontract);
  private:
  const std::string& _internal_entitycontract() const;
  void _internal_set_entitycontract(const std::string& value);
  std::string* _internal_mutable_entitycontract();
  public:

  // bytes Signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint64 Expiration = 4;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expiration() const;
  void _internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 BlockHeight = 3;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.AdminIdentityCertificateField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitycontract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expiration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class AmendmentField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.AmendmentField) */ {
 public:
  inline AmendmentField() : AmendmentField(nullptr) {};
  virtual ~AmendmentField();

  AmendmentField(const AmendmentField& from);
  AmendmentField(AmendmentField&& from) noexcept
    : AmendmentField() {
    *this = ::std::move(from);
  }

  inline AmendmentField& operator=(const AmendmentField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmendmentField& operator=(AmendmentField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmendmentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmendmentField* internal_default_instance() {
    return reinterpret_cast<const AmendmentField*>(
               &_AmendmentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(AmendmentField& a, AmendmentField& b) {
    a.Swap(&b);
  }
  inline void Swap(AmendmentField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmendmentField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmendmentField* New() const final {
    return CreateMaybeMessage<AmendmentField>(nullptr);
  }

  AmendmentField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmendmentField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmendmentField& from);
  void MergeFrom(const AmendmentField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmendmentField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.AmendmentField";
  }
  protected:
  explicit AmendmentField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldIndexPathFieldNumber = 1,
    kDataFieldNumber = 3,
    kOperationFieldNumber = 2,
  };
  // bytes FieldIndexPath = 1;
  void clear_fieldindexpath();
  const std::string& fieldindexpath() const;
  void set_fieldindexpath(const std::string& value);
  void set_fieldindexpath(std::string&& value);
  void set_fieldindexpath(const char* value);
  void set_fieldindexpath(const void* value, size_t size);
  std::string* mutable_fieldindexpath();
  std::string* release_fieldindexpath();
  void set_allocated_fieldindexpath(std::string* fieldindexpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fieldindexpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fieldindexpath(
      std::string* fieldindexpath);
  private:
  const std::string& _internal_fieldindexpath() const;
  void _internal_set_fieldindexpath(const std::string& value);
  std::string* _internal_mutable_fieldindexpath();
  public:

  // bytes Data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 Operation = 2;
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::uint32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.AmendmentField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldindexpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentReceiverField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentReceiverField) */ {
 public:
  inline InstrumentReceiverField() : InstrumentReceiverField(nullptr) {};
  virtual ~InstrumentReceiverField();

  InstrumentReceiverField(const InstrumentReceiverField& from);
  InstrumentReceiverField(InstrumentReceiverField&& from) noexcept
    : InstrumentReceiverField() {
    *this = ::std::move(from);
  }

  inline InstrumentReceiverField& operator=(const InstrumentReceiverField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentReceiverField& operator=(InstrumentReceiverField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentReceiverField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentReceiverField* internal_default_instance() {
    return reinterpret_cast<const InstrumentReceiverField*>(
               &_InstrumentReceiverField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(InstrumentReceiverField& a, InstrumentReceiverField& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentReceiverField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentReceiverField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentReceiverField* New() const final {
    return CreateMaybeMessage<InstrumentReceiverField>(nullptr);
  }

  InstrumentReceiverField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentReceiverField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentReceiverField& from);
  void MergeFrom(const InstrumentReceiverField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentReceiverField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentReceiverField";
  }
  protected:
  explicit InstrumentReceiverField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kOracleConfirmationSigFieldNumber = 5,
    kQuantityFieldNumber = 2,
    kOracleSigAlgorithmFieldNumber = 3,
    kOracleIndexFieldNumber = 4,
    kOracleSigExpiryFieldNumber = 7,
    kOracleSigBlockHeightFieldNumber = 6,
  };
  // bytes Address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // bytes OracleConfirmationSig = 5;
  void clear_oracleconfirmationsig();
  const std::string& oracleconfirmationsig() const;
  void set_oracleconfirmationsig(const std::string& value);
  void set_oracleconfirmationsig(std::string&& value);
  void set_oracleconfirmationsig(const char* value);
  void set_oracleconfirmationsig(const void* value, size_t size);
  std::string* mutable_oracleconfirmationsig();
  std::string* release_oracleconfirmationsig();
  void set_allocated_oracleconfirmationsig(std::string* oracleconfirmationsig);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oracleconfirmationsig();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oracleconfirmationsig(
      std::string* oracleconfirmationsig);
  private:
  const std::string& _internal_oracleconfirmationsig() const;
  void _internal_set_oracleconfirmationsig(const std::string& value);
  std::string* _internal_mutable_oracleconfirmationsig();
  public:

  // uint64 Quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 OracleSigAlgorithm = 3;
  void clear_oraclesigalgorithm();
  ::PROTOBUF_NAMESPACE_ID::uint32 oraclesigalgorithm() const;
  void set_oraclesigalgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oraclesigalgorithm() const;
  void _internal_set_oraclesigalgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 OracleIndex = 4;
  void clear_oracleindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 oracleindex() const;
  void set_oracleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oracleindex() const;
  void _internal_set_oracleindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 OracleSigExpiry = 7;
  void clear_oraclesigexpiry();
  ::PROTOBUF_NAMESPACE_ID::uint64 oraclesigexpiry() const;
  void set_oraclesigexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_oraclesigexpiry() const;
  void _internal_set_oraclesigexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 OracleSigBlockHeight = 6;
  void clear_oraclesigblockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 oraclesigblockheight() const;
  void set_oraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oraclesigblockheight() const;
  void _internal_set_oraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentReceiverField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracleconfirmationsig_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oraclesigalgorithm_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oracleindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 oraclesigexpiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oraclesigblockheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentSettlementField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentSettlementField) */ {
 public:
  inline InstrumentSettlementField() : InstrumentSettlementField(nullptr) {};
  virtual ~InstrumentSettlementField();

  InstrumentSettlementField(const InstrumentSettlementField& from);
  InstrumentSettlementField(InstrumentSettlementField&& from) noexcept
    : InstrumentSettlementField() {
    *this = ::std::move(from);
  }

  inline InstrumentSettlementField& operator=(const InstrumentSettlementField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentSettlementField& operator=(InstrumentSettlementField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentSettlementField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentSettlementField* internal_default_instance() {
    return reinterpret_cast<const InstrumentSettlementField*>(
               &_InstrumentSettlementField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InstrumentSettlementField& a, InstrumentSettlementField& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentSettlementField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentSettlementField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentSettlementField* New() const final {
    return CreateMaybeMessage<InstrumentSettlementField>(nullptr);
  }

  InstrumentSettlementField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentSettlementField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentSettlementField& from);
  void MergeFrom(const InstrumentSettlementField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentSettlementField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentSettlementField";
  }
  protected:
  explicit InstrumentSettlementField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettlementsFieldNumber = 4,
    kInstrumentTypeFieldNumber = 2,
    kInstrumentCodeFieldNumber = 3,
    kContractIndexFieldNumber = 1,
  };
  // repeated .actions.QuantityIndexField Settlements = 4;
  int settlements_size() const;
  private:
  int _internal_settlements_size() const;
  public:
  void clear_settlements();
  ::actions::QuantityIndexField* mutable_settlements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_settlements();
  private:
  const ::actions::QuantityIndexField& _internal_settlements(int index) const;
  ::actions::QuantityIndexField* _internal_add_settlements();
  public:
  const ::actions::QuantityIndexField& settlements(int index) const;
  ::actions::QuantityIndexField* add_settlements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      settlements() const;

  // string InstrumentType = 2;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 3;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint32 ContractIndex = 1;
  void clear_contractindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractindex() const;
  void set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractindex() const;
  void _internal_set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentSettlementField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > settlements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class InstrumentTransferField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.InstrumentTransferField) */ {
 public:
  inline InstrumentTransferField() : InstrumentTransferField(nullptr) {};
  virtual ~InstrumentTransferField();

  InstrumentTransferField(const InstrumentTransferField& from);
  InstrumentTransferField(InstrumentTransferField&& from) noexcept
    : InstrumentTransferField() {
    *this = ::std::move(from);
  }

  inline InstrumentTransferField& operator=(const InstrumentTransferField& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentTransferField& operator=(InstrumentTransferField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentTransferField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentTransferField* internal_default_instance() {
    return reinterpret_cast<const InstrumentTransferField*>(
               &_InstrumentTransferField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(InstrumentTransferField& a, InstrumentTransferField& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentTransferField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentTransferField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentTransferField* New() const final {
    return CreateMaybeMessage<InstrumentTransferField>(nullptr);
  }

  InstrumentTransferField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentTransferField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentTransferField& from);
  void MergeFrom(const InstrumentTransferField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentTransferField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.InstrumentTransferField";
  }
  protected:
  explicit InstrumentTransferField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentSendersFieldNumber = 4,
    kInstrumentReceiversFieldNumber = 5,
    kInstrumentTypeFieldNumber = 2,
    kInstrumentCodeFieldNumber = 3,
    kContractIndexFieldNumber = 1,
  };
  // repeated .actions.QuantityIndexField InstrumentSenders = 4;
  int instrumentsenders_size() const;
  private:
  int _internal_instrumentsenders_size() const;
  public:
  void clear_instrumentsenders();
  ::actions::QuantityIndexField* mutable_instrumentsenders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
      mutable_instrumentsenders();
  private:
  const ::actions::QuantityIndexField& _internal_instrumentsenders(int index) const;
  ::actions::QuantityIndexField* _internal_add_instrumentsenders();
  public:
  const ::actions::QuantityIndexField& instrumentsenders(int index) const;
  ::actions::QuantityIndexField* add_instrumentsenders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
      instrumentsenders() const;

  // repeated .actions.InstrumentReceiverField InstrumentReceivers = 5;
  int instrumentreceivers_size() const;
  private:
  int _internal_instrumentreceivers_size() const;
  public:
  void clear_instrumentreceivers();
  ::actions::InstrumentReceiverField* mutable_instrumentreceivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentReceiverField >*
      mutable_instrumentreceivers();
  private:
  const ::actions::InstrumentReceiverField& _internal_instrumentreceivers(int index) const;
  ::actions::InstrumentReceiverField* _internal_add_instrumentreceivers();
  public:
  const ::actions::InstrumentReceiverField& instrumentreceivers(int index) const;
  ::actions::InstrumentReceiverField* add_instrumentreceivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentReceiverField >&
      instrumentreceivers() const;

  // string InstrumentType = 2;
  void clear_instrumenttype();
  const std::string& instrumenttype() const;
  void set_instrumenttype(const std::string& value);
  void set_instrumenttype(std::string&& value);
  void set_instrumenttype(const char* value);
  void set_instrumenttype(const char* value, size_t size);
  std::string* mutable_instrumenttype();
  std::string* release_instrumenttype();
  void set_allocated_instrumenttype(std::string* instrumenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumenttype(
      std::string* instrumenttype);
  private:
  const std::string& _internal_instrumenttype() const;
  void _internal_set_instrumenttype(const std::string& value);
  std::string* _internal_mutable_instrumenttype();
  public:

  // bytes InstrumentCode = 3;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint32 ContractIndex = 1;
  void clear_contractindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 contractindex() const;
  void set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contractindex() const;
  void _internal_set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.InstrumentTransferField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField > instrumentsenders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentReceiverField > instrumentreceivers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contractindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ChapterField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ChapterField) */ {
 public:
  inline ChapterField() : ChapterField(nullptr) {};
  virtual ~ChapterField();

  ChapterField(const ChapterField& from);
  ChapterField(ChapterField&& from) noexcept
    : ChapterField() {
    *this = ::std::move(from);
  }

  inline ChapterField& operator=(const ChapterField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChapterField& operator=(ChapterField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChapterField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChapterField* internal_default_instance() {
    return reinterpret_cast<const ChapterField*>(
               &_ChapterField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ChapterField& a, ChapterField& b) {
    a.Swap(&b);
  }
  inline void Swap(ChapterField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChapterField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChapterField* New() const final {
    return CreateMaybeMessage<ChapterField>(nullptr);
  }

  ChapterField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChapterField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChapterField& from);
  void MergeFrom(const ChapterField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChapterField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ChapterField";
  }
  protected:
  explicit ChapterField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticlesFieldNumber = 3,
    kTitleFieldNumber = 1,
    kPreambleFieldNumber = 2,
  };
  // repeated .actions.ClauseField Articles = 3;
  int articles_size() const;
  private:
  int _internal_articles_size() const;
  public:
  void clear_articles();
  ::actions::ClauseField* mutable_articles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >*
      mutable_articles();
  private:
  const ::actions::ClauseField& _internal_articles(int index) const;
  ::actions::ClauseField* _internal_add_articles();
  public:
  const ::actions::ClauseField& articles(int index) const;
  ::actions::ClauseField* add_articles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >&
      articles() const;

  // string Title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Preamble = 2;
  void clear_preamble();
  const std::string& preamble() const;
  void set_preamble(const std::string& value);
  void set_preamble(std::string&& value);
  void set_preamble(const char* value);
  void set_preamble(const char* value, size_t size);
  std::string* mutable_preamble();
  std::string* release_preamble();
  void set_allocated_preamble(std::string* preamble);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preamble();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preamble(
      std::string* preamble);
  private:
  const std::string& _internal_preamble() const;
  void _internal_set_preamble(const std::string& value);
  std::string* _internal_mutable_preamble();
  public:

  // @@protoc_insertion_point(class_scope:actions.ChapterField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField > articles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preamble_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ClauseField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ClauseField) */ {
 public:
  inline ClauseField() : ClauseField(nullptr) {};
  virtual ~ClauseField();

  ClauseField(const ClauseField& from);
  ClauseField(ClauseField&& from) noexcept
    : ClauseField() {
    *this = ::std::move(from);
  }

  inline ClauseField& operator=(const ClauseField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClauseField& operator=(ClauseField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClauseField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClauseField* internal_default_instance() {
    return reinterpret_cast<const ClauseField*>(
               &_ClauseField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ClauseField& a, ClauseField& b) {
    a.Swap(&b);
  }
  inline void Swap(ClauseField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClauseField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClauseField* New() const final {
    return CreateMaybeMessage<ClauseField>(nullptr);
  }

  ClauseField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClauseField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClauseField& from);
  void MergeFrom(const ClauseField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClauseField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ClauseField";
  }
  protected:
  explicit ClauseField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 3,
    kTitleFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // repeated .actions.ClauseField Children = 3;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::actions::ClauseField* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >*
      mutable_children();
  private:
  const ::actions::ClauseField& _internal_children(int index) const;
  ::actions::ClauseField* _internal_add_children();
  public:
  const ::actions::ClauseField& children(int index) const;
  ::actions::ClauseField* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >&
      children() const;

  // string Title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string Body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:actions.ClauseField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField > children_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class DefinedTermField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.DefinedTermField) */ {
 public:
  inline DefinedTermField() : DefinedTermField(nullptr) {};
  virtual ~DefinedTermField();

  DefinedTermField(const DefinedTermField& from);
  DefinedTermField(DefinedTermField&& from) noexcept
    : DefinedTermField() {
    *this = ::std::move(from);
  }

  inline DefinedTermField& operator=(const DefinedTermField& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefinedTermField& operator=(DefinedTermField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefinedTermField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefinedTermField* internal_default_instance() {
    return reinterpret_cast<const DefinedTermField*>(
               &_DefinedTermField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DefinedTermField& a, DefinedTermField& b) {
    a.Swap(&b);
  }
  inline void Swap(DefinedTermField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefinedTermField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefinedTermField* New() const final {
    return CreateMaybeMessage<DefinedTermField>(nullptr);
  }

  DefinedTermField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefinedTermField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefinedTermField& from);
  void MergeFrom(const DefinedTermField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefinedTermField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.DefinedTermField";
  }
  protected:
  explicit DefinedTermField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kDefinitionFieldNumber = 2,
  };
  // string Term = 1;
  void clear_term();
  const std::string& term() const;
  void set_term(const std::string& value);
  void set_term(std::string&& value);
  void set_term(const char* value);
  void set_term(const char* value, size_t size);
  std::string* mutable_term();
  std::string* release_term();
  void set_allocated_term(std::string* term);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_term();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_term(
      std::string* term);
  private:
  const std::string& _internal_term() const;
  void _internal_set_term(const std::string& value);
  std::string* _internal_mutable_term();
  public:

  // string Definition = 2;
  void clear_definition();
  const std::string& definition() const;
  void set_definition(const std::string& value);
  void set_definition(std::string&& value);
  void set_definition(const char* value);
  void set_definition(const char* value, size_t size);
  std::string* mutable_definition();
  std::string* release_definition();
  void set_allocated_definition(std::string* definition);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_definition();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_definition(
      std::string* definition);
  private:
  const std::string& _internal_definition() const;
  void _internal_set_definition(const std::string& value);
  std::string* _internal_mutable_definition();
  public:

  // @@protoc_insertion_point(class_scope:actions.DefinedTermField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr term_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class DocumentField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.DocumentField) */ {
 public:
  inline DocumentField() : DocumentField(nullptr) {};
  virtual ~DocumentField();

  DocumentField(const DocumentField& from);
  DocumentField(DocumentField&& from) noexcept
    : DocumentField() {
    *this = ::std::move(from);
  }

  inline DocumentField& operator=(const DocumentField& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentField& operator=(DocumentField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentField* internal_default_instance() {
    return reinterpret_cast<const DocumentField*>(
               &_DocumentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DocumentField& a, DocumentField& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentField* New() const final {
    return CreateMaybeMessage<DocumentField>(nullptr);
  }

  DocumentField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentField& from);
  void MergeFrom(const DocumentField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.DocumentField";
  }
  protected:
  explicit DocumentField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kContentsFieldNumber = 3,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes Contents = 3;
  void clear_contents();
  const std::string& contents() const;
  void set_contents(const std::string& value);
  void set_contents(std::string&& value);
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  std::string* mutable_contents();
  std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contents();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contents(
      std::string* contents);
  private:
  const std::string& _internal_contents() const;
  void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // @@protoc_insertion_point(class_scope:actions.DocumentField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class EntityField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.EntityField) */ {
 public:
  inline EntityField() : EntityField(nullptr) {};
  virtual ~EntityField();

  EntityField(const EntityField& from);
  EntityField(EntityField&& from) noexcept
    : EntityField() {
    *this = ::std::move(from);
  }

  inline EntityField& operator=(const EntityField& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityField& operator=(EntityField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityField* internal_default_instance() {
    return reinterpret_cast<const EntityField*>(
               &_EntityField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(EntityField& a, EntityField& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityField* New() const final {
    return CreateMaybeMessage<EntityField>(nullptr);
  }

  EntityField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityField& from);
  void MergeFrom(const EntityField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.EntityField";
  }
  protected:
  explicit EntityField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdministrationFieldNumber = 13,
    kManagementFieldNumber = 14,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLEIFieldNumber = 3,
    kUnitNumberFieldNumber = 4,
    kBuildingNumberFieldNumber = 5,
    kStreetFieldNumber = 6,
    kSuburbCityFieldNumber = 7,
    kTerritoryStateProvinceCodeFieldNumber = 8,
    kCountryCodeFieldNumber = 9,
    kPostalZIPCodeFieldNumber = 10,
    kEmailAddressFieldNumber = 11,
    kPhoneNumberFieldNumber = 12,
    kDomainNameFieldNumber = 15,
    kPaymailHandleFieldNumber = 17,
  };
  // repeated .actions.AdministratorField Administration = 13;
  int administration_size() const;
  private:
  int _internal_administration_size() const;
  public:
  void clear_administration();
  ::actions::AdministratorField* mutable_administration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdministratorField >*
      mutable_administration();
  private:
  const ::actions::AdministratorField& _internal_administration(int index) const;
  ::actions::AdministratorField* _internal_add_administration();
  public:
  const ::actions::AdministratorField& administration(int index) const;
  ::actions::AdministratorField* add_administration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdministratorField >&
      administration() const;

  // repeated .actions.ManagerField Management = 14;
  int management_size() const;
  private:
  int _internal_management_size() const;
  public:
  void clear_management();
  ::actions::ManagerField* mutable_management(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ManagerField >*
      mutable_management();
  private:
  const ::actions::ManagerField& _internal_management(int index) const;
  ::actions::ManagerField* _internal_add_management();
  public:
  const ::actions::ManagerField& management(int index) const;
  ::actions::ManagerField* add_management();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ManagerField >&
      management() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string LEI = 3;
  void clear_lei();
  const std::string& lei() const;
  void set_lei(const std::string& value);
  void set_lei(std::string&& value);
  void set_lei(const char* value);
  void set_lei(const char* value, size_t size);
  std::string* mutable_lei();
  std::string* release_lei();
  void set_allocated_lei(std::string* lei);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lei();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lei(
      std::string* lei);
  private:
  const std::string& _internal_lei() const;
  void _internal_set_lei(const std::string& value);
  std::string* _internal_mutable_lei();
  public:

  // string UnitNumber = 4;
  void clear_unitnumber();
  const std::string& unitnumber() const;
  void set_unitnumber(const std::string& value);
  void set_unitnumber(std::string&& value);
  void set_unitnumber(const char* value);
  void set_unitnumber(const char* value, size_t size);
  std::string* mutable_unitnumber();
  std::string* release_unitnumber();
  void set_allocated_unitnumber(std::string* unitnumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unitnumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unitnumber(
      std::string* unitnumber);
  private:
  const std::string& _internal_unitnumber() const;
  void _internal_set_unitnumber(const std::string& value);
  std::string* _internal_mutable_unitnumber();
  public:

  // string BuildingNumber = 5;
  void clear_buildingnumber();
  const std::string& buildingnumber() const;
  void set_buildingnumber(const std::string& value);
  void set_buildingnumber(std::string&& value);
  void set_buildingnumber(const char* value);
  void set_buildingnumber(const char* value, size_t size);
  std::string* mutable_buildingnumber();
  std::string* release_buildingnumber();
  void set_allocated_buildingnumber(std::string* buildingnumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buildingnumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buildingnumber(
      std::string* buildingnumber);
  private:
  const std::string& _internal_buildingnumber() const;
  void _internal_set_buildingnumber(const std::string& value);
  std::string* _internal_mutable_buildingnumber();
  public:

  // string Street = 6;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_street();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_street(
      std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string SuburbCity = 7;
  void clear_suburbcity();
  const std::string& suburbcity() const;
  void set_suburbcity(const std::string& value);
  void set_suburbcity(std::string&& value);
  void set_suburbcity(const char* value);
  void set_suburbcity(const char* value, size_t size);
  std::string* mutable_suburbcity();
  std::string* release_suburbcity();
  void set_allocated_suburbcity(std::string* suburbcity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suburbcity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suburbcity(
      std::string* suburbcity);
  private:
  const std::string& _internal_suburbcity() const;
  void _internal_set_suburbcity(const std::string& value);
  std::string* _internal_mutable_suburbcity();
  public:

  // string TerritoryStateProvinceCode = 8;
  void clear_territorystateprovincecode();
  const std::string& territorystateprovincecode() const;
  void set_territorystateprovincecode(const std::string& value);
  void set_territorystateprovincecode(std::string&& value);
  void set_territorystateprovincecode(const char* value);
  void set_territorystateprovincecode(const char* value, size_t size);
  std::string* mutable_territorystateprovincecode();
  std::string* release_territorystateprovincecode();
  void set_allocated_territorystateprovincecode(std::string* territorystateprovincecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_territorystateprovincecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_territorystateprovincecode(
      std::string* territorystateprovincecode);
  private:
  const std::string& _internal_territorystateprovincecode() const;
  void _internal_set_territorystateprovincecode(const std::string& value);
  std::string* _internal_mutable_territorystateprovincecode();
  public:

  // string CountryCode = 9;
  void clear_countrycode();
  const std::string& countrycode() const;
  void set_countrycode(const std::string& value);
  void set_countrycode(std::string&& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  std::string* mutable_countrycode();
  std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_countrycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_countrycode(
      std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // string PostalZIPCode = 10;
  void clear_postalzipcode();
  const std::string& postalzipcode() const;
  void set_postalzipcode(const std::string& value);
  void set_postalzipcode(std::string&& value);
  void set_postalzipcode(const char* value);
  void set_postalzipcode(const char* value, size_t size);
  std::string* mutable_postalzipcode();
  std::string* release_postalzipcode();
  void set_allocated_postalzipcode(std::string* postalzipcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_postalzipcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_postalzipcode(
      std::string* postalzipcode);
  private:
  const std::string& _internal_postalzipcode() const;
  void _internal_set_postalzipcode(const std::string& value);
  std::string* _internal_mutable_postalzipcode();
  public:

  // string EmailAddress = 11;
  void clear_emailaddress();
  const std::string& emailaddress() const;
  void set_emailaddress(const std::string& value);
  void set_emailaddress(std::string&& value);
  void set_emailaddress(const char* value);
  void set_emailaddress(const char* value, size_t size);
  std::string* mutable_emailaddress();
  std::string* release_emailaddress();
  void set_allocated_emailaddress(std::string* emailaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_emailaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_emailaddress(
      std::string* emailaddress);
  private:
  const std::string& _internal_emailaddress() const;
  void _internal_set_emailaddress(const std::string& value);
  std::string* _internal_mutable_emailaddress();
  public:

  // string PhoneNumber = 12;
  void clear_phonenumber();
  const std::string& phonenumber() const;
  void set_phonenumber(const std::string& value);
  void set_phonenumber(std::string&& value);
  void set_phonenumber(const char* value);
  void set_phonenumber(const char* value, size_t size);
  std::string* mutable_phonenumber();
  std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* phonenumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phonenumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phonenumber(
      std::string* phonenumber);
  private:
  const std::string& _internal_phonenumber() const;
  void _internal_set_phonenumber(const std::string& value);
  std::string* _internal_mutable_phonenumber();
  public:

  // string DomainName = 15;
  void clear_domainname();
  const std::string& domainname() const;
  void set_domainname(const std::string& value);
  void set_domainname(std::string&& value);
  void set_domainname(const char* value);
  void set_domainname(const char* value, size_t size);
  std::string* mutable_domainname();
  std::string* release_domainname();
  void set_allocated_domainname(std::string* domainname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domainname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domainname(
      std::string* domainname);
  private:
  const std::string& _internal_domainname() const;
  void _internal_set_domainname(const std::string& value);
  std::string* _internal_mutable_domainname();
  public:

  // string PaymailHandle = 17;
  void clear_paymailhandle();
  const std::string& paymailhandle() const;
  void set_paymailhandle(const std::string& value);
  void set_paymailhandle(std::string&& value);
  void set_paymailhandle(const char* value);
  void set_paymailhandle(const char* value, size_t size);
  std::string* mutable_paymailhandle();
  std::string* release_paymailhandle();
  void set_allocated_paymailhandle(std::string* paymailhandle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paymailhandle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paymailhandle(
      std::string* paymailhandle);
  private:
  const std::string& _internal_paymailhandle() const;
  void _internal_set_paymailhandle(const std::string& value);
  std::string* _internal_mutable_paymailhandle();
  public:

  // @@protoc_insertion_point(class_scope:actions.EntityField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdministratorField > administration_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ManagerField > management_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unitnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildingnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suburbcity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr territorystateprovincecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postalzipcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emailaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domainname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymailhandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class FeeField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.FeeField) */ {
 public:
  inline FeeField() : FeeField(nullptr) {};
  virtual ~FeeField();

  FeeField(const FeeField& from);
  FeeField(FeeField&& from) noexcept
    : FeeField() {
    *this = ::std::move(from);
  }

  inline FeeField& operator=(const FeeField& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeField& operator=(FeeField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeField* internal_default_instance() {
    return reinterpret_cast<const FeeField*>(
               &_FeeField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(FeeField& a, FeeField& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeField* New() const final {
    return CreateMaybeMessage<FeeField>(nullptr);
  }

  FeeField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeField& from);
  void MergeFrom(const FeeField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.FeeField";
  }
  protected:
  explicit FeeField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantityFieldNumber = 1,
  };
  // uint64 Quantity = 1;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.FeeField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ManagerField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ManagerField) */ {
 public:
  inline ManagerField() : ManagerField(nullptr) {};
  virtual ~ManagerField();

  ManagerField(const ManagerField& from);
  ManagerField(ManagerField&& from) noexcept
    : ManagerField() {
    *this = ::std::move(from);
  }

  inline ManagerField& operator=(const ManagerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagerField& operator=(ManagerField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManagerField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagerField* internal_default_instance() {
    return reinterpret_cast<const ManagerField*>(
               &_ManagerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ManagerField& a, ManagerField& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagerField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManagerField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagerField* New() const final {
    return CreateMaybeMessage<ManagerField>(nullptr);
  }

  ManagerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagerField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManagerField& from);
  void MergeFrom(const ManagerField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagerField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ManagerField";
  }
  protected:
  explicit ManagerField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ManagerField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class OracleField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.OracleField) */ {
 public:
  inline OracleField() : OracleField(nullptr) {};
  virtual ~OracleField();

  OracleField(const OracleField& from);
  OracleField(OracleField&& from) noexcept
    : OracleField() {
    *this = ::std::move(from);
  }

  inline OracleField& operator=(const OracleField& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleField& operator=(OracleField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OracleField* internal_default_instance() {
    return reinterpret_cast<const OracleField*>(
               &_OracleField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(OracleField& a, OracleField& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleField* New() const final {
    return CreateMaybeMessage<OracleField>(nullptr);
  }

  OracleField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleField& from);
  void MergeFrom(const OracleField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.OracleField";
  }
  protected:
  explicit OracleField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOracleTypesFieldNumber = 4,
    kEntityContractFieldNumber = 5,
  };
  // repeated uint32 OracleTypes = 4;
  int oracletypes_size() const;
  private:
  int _internal_oracletypes_size() const;
  public:
  void clear_oracletypes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oracletypes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_oracletypes() const;
  void _internal_add_oracletypes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_oracletypes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 oracletypes(int index) const;
  void set_oracletypes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_oracletypes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      oracletypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_oracletypes();

  // bytes EntityContract = 5;
  void clear_entitycontract();
  const std::string& entitycontract() const;
  void set_entitycontract(const std::string& value);
  void set_entitycontract(std::string&& value);
  void set_entitycontract(const char* value);
  void set_entitycontract(const void* value, size_t size);
  std::string* mutable_entitycontract();
  std::string* release_entitycontract();
  void set_allocated_entitycontract(std::string* entitycontract);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_entitycontract();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_entitycontract(
      std::string* entitycontract);
  private:
  const std::string& _internal_entitycontract() const;
  void _internal_set_entitycontract(const std::string& value);
  std::string* _internal_mutable_entitycontract();
  public:

  // @@protoc_insertion_point(class_scope:actions.OracleField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > oracletypes_;
  mutable std::atomic<int> _oracletypes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitycontract_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class QuantityIndexField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.QuantityIndexField) */ {
 public:
  inline QuantityIndexField() : QuantityIndexField(nullptr) {};
  virtual ~QuantityIndexField();

  QuantityIndexField(const QuantityIndexField& from);
  QuantityIndexField(QuantityIndexField&& from) noexcept
    : QuantityIndexField() {
    *this = ::std::move(from);
  }

  inline QuantityIndexField& operator=(const QuantityIndexField& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantityIndexField& operator=(QuantityIndexField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuantityIndexField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantityIndexField* internal_default_instance() {
    return reinterpret_cast<const QuantityIndexField*>(
               &_QuantityIndexField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(QuantityIndexField& a, QuantityIndexField& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantityIndexField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantityIndexField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantityIndexField* New() const final {
    return CreateMaybeMessage<QuantityIndexField>(nullptr);
  }

  QuantityIndexField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantityIndexField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuantityIndexField& from);
  void MergeFrom(const QuantityIndexField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantityIndexField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.QuantityIndexField";
  }
  protected:
  explicit QuantityIndexField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantityFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // uint64 Quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.QuantityIndexField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ReferenceTransactionField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ReferenceTransactionField) */ {
 public:
  inline ReferenceTransactionField() : ReferenceTransactionField(nullptr) {};
  virtual ~ReferenceTransactionField();

  ReferenceTransactionField(const ReferenceTransactionField& from);
  ReferenceTransactionField(ReferenceTransactionField&& from) noexcept
    : ReferenceTransactionField() {
    *this = ::std::move(from);
  }

  inline ReferenceTransactionField& operator=(const ReferenceTransactionField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceTransactionField& operator=(ReferenceTransactionField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReferenceTransactionField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceTransactionField* internal_default_instance() {
    return reinterpret_cast<const ReferenceTransactionField*>(
               &_ReferenceTransactionField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ReferenceTransactionField& a, ReferenceTransactionField& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceTransactionField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReferenceTransactionField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceTransactionField* New() const final {
    return CreateMaybeMessage<ReferenceTransactionField>(nullptr);
  }

  ReferenceTransactionField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceTransactionField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceTransactionField& from);
  void MergeFrom(const ReferenceTransactionField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceTransactionField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ReferenceTransactionField";
  }
  protected:
  explicit ReferenceTransactionField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 2,
    kTransactionFieldNumber = 1,
  };
  // repeated bytes Outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  const std::string& outputs(int index) const;
  std::string* mutable_outputs(int index);
  void set_outputs(int index, const std::string& value);
  void set_outputs(int index, std::string&& value);
  void set_outputs(int index, const char* value);
  void set_outputs(int index, const void* value, size_t size);
  std::string* add_outputs();
  void add_outputs(const std::string& value);
  void add_outputs(std::string&& value);
  void add_outputs(const char* value);
  void add_outputs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputs();
  private:
  const std::string& _internal_outputs(int index) const;
  std::string* _internal_add_outputs();
  public:

  // bytes Transaction = 1;
  void clear_transaction();
  const std::string& transaction() const;
  void set_transaction(const std::string& value);
  void set_transaction(std::string&& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  std::string* mutable_transaction();
  std::string* release_transaction();
  void set_allocated_transaction(std::string* transaction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transaction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transaction(
      std::string* transaction);
  private:
  const std::string& _internal_transaction() const;
  void _internal_set_transaction(const std::string& value);
  std::string* _internal_mutable_transaction();
  public:

  // @@protoc_insertion_point(class_scope:actions.ReferenceTransactionField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class ServiceField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.ServiceField) */ {
 public:
  inline ServiceField() : ServiceField(nullptr) {};
  virtual ~ServiceField();

  ServiceField(const ServiceField& from);
  ServiceField(ServiceField&& from) noexcept
    : ServiceField() {
    *this = ::std::move(from);
  }

  inline ServiceField& operator=(const ServiceField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceField& operator=(ServiceField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceField* internal_default_instance() {
    return reinterpret_cast<const ServiceField*>(
               &_ServiceField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ServiceField& a, ServiceField& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceField* New() const final {
    return CreateMaybeMessage<ServiceField>(nullptr);
  }

  ServiceField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceField& from);
  void MergeFrom(const ServiceField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.ServiceField";
  }
  protected:
  explicit ServiceField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kURLFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string URL = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes PublicKey = 3;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_publickey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_publickey(
      std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.ServiceField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class TargetAddressField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.TargetAddressField) */ {
 public:
  inline TargetAddressField() : TargetAddressField(nullptr) {};
  virtual ~TargetAddressField();

  TargetAddressField(const TargetAddressField& from);
  TargetAddressField(TargetAddressField&& from) noexcept
    : TargetAddressField() {
    *this = ::std::move(from);
  }

  inline TargetAddressField& operator=(const TargetAddressField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetAddressField& operator=(TargetAddressField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetAddressField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetAddressField* internal_default_instance() {
    return reinterpret_cast<const TargetAddressField*>(
               &_TargetAddressField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TargetAddressField& a, TargetAddressField& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetAddressField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetAddressField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetAddressField* New() const final {
    return CreateMaybeMessage<TargetAddressField>(nullptr);
  }

  TargetAddressField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetAddressField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetAddressField& from);
  void MergeFrom(const TargetAddressField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetAddressField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.TargetAddressField";
  }
  protected:
  explicit TargetAddressField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // bytes Address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 Quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:actions.TargetAddressField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// -------------------------------------------------------------------

class VotingSystemField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:actions.VotingSystemField) */ {
 public:
  inline VotingSystemField() : VotingSystemField(nullptr) {};
  virtual ~VotingSystemField();

  VotingSystemField(const VotingSystemField& from);
  VotingSystemField(VotingSystemField&& from) noexcept
    : VotingSystemField() {
    *this = ::std::move(from);
  }

  inline VotingSystemField& operator=(const VotingSystemField& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingSystemField& operator=(VotingSystemField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VotingSystemField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VotingSystemField* internal_default_instance() {
    return reinterpret_cast<const VotingSystemField*>(
               &_VotingSystemField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(VotingSystemField& a, VotingSystemField& b) {
    a.Swap(&b);
  }
  inline void Swap(VotingSystemField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingSystemField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VotingSystemField* New() const final {
    return CreateMaybeMessage<VotingSystemField>(nullptr);
  }

  VotingSystemField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VotingSystemField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VotingSystemField& from);
  void MergeFrom(const VotingSystemField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VotingSystemField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "actions.VotingSystemField";
  }
  protected:
  explicit VotingSystemField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_actions_2eproto);
    return ::descriptor_table_actions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVoteTypeFieldNumber = 2,
    kTallyLogicFieldNumber = 3,
    kThresholdPercentageFieldNumber = 4,
    kHolderProposalFeeFieldNumber = 6,
    kVoteMultiplierPermittedFieldNumber = 5,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string VoteType = 2;
  void clear_votetype();
  const std::string& votetype() const;
  void set_votetype(const std::string& value);
  void set_votetype(std::string&& value);
  void set_votetype(const char* value);
  void set_votetype(const char* value, size_t size);
  std::string* mutable_votetype();
  std::string* release_votetype();
  void set_allocated_votetype(std::string* votetype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_votetype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_votetype(
      std::string* votetype);
  private:
  const std::string& _internal_votetype() const;
  void _internal_set_votetype(const std::string& value);
  std::string* _internal_mutable_votetype();
  public:

  // uint32 TallyLogic = 3;
  void clear_tallylogic();
  ::PROTOBUF_NAMESPACE_ID::uint32 tallylogic() const;
  void set_tallylogic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tallylogic() const;
  void _internal_set_tallylogic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ThresholdPercentage = 4;
  void clear_thresholdpercentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 thresholdpercentage() const;
  void set_thresholdpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thresholdpercentage() const;
  void _internal_set_thresholdpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 HolderProposalFee = 6;
  void clear_holderproposalfee();
  ::PROTOBUF_NAMESPACE_ID::uint64 holderproposalfee() const;
  void set_holderproposalfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_holderproposalfee() const;
  void _internal_set_holderproposalfee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool VoteMultiplierPermitted = 5;
  void clear_votemultiplierpermitted();
  bool votemultiplierpermitted() const;
  void set_votemultiplierpermitted(bool value);
  private:
  bool _internal_votemultiplierpermitted() const;
  void _internal_set_votemultiplierpermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:actions.VotingSystemField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr votetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tallylogic_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thresholdpercentage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 holderproposalfee_;
  bool votemultiplierpermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_actions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractOffer

// string ContractName = 1;
inline void ContractOffer::clear_contractname() {
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::contractname() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractName)
  return _internal_contractname();
}
inline void ContractOffer::set_contractname(const std::string& value) {
  _internal_set_contractname(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractName)
}
inline std::string* ContractOffer::mutable_contractname() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.ContractName)
  return _internal_mutable_contractname();
}
inline const std::string& ContractOffer::_internal_contractname() const {
  return contractname_.Get();
}
inline void ContractOffer::_internal_set_contractname(const std::string& value) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_contractname(std::string&& value) {
  
  contractname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.ContractName)
}
inline void ContractOffer::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.ContractName)
}
inline void ContractOffer::set_contractname(const char* value,
    size_t size) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.ContractName)
}
inline std::string* ContractOffer::_internal_mutable_contractname() {
  
  return contractname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_contractname() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.ContractName)
  return contractname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_contractname(std::string* contractname) {
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.ContractName)
}
inline std::string* ContractOffer::unsafe_arena_release_contractname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.ContractName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_contractname(
    std::string* contractname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.ContractName)
}

// uint32 BodyOfAgreementType = 2;
inline void ContractOffer::clear_bodyofagreementtype() {
  bodyofagreementtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractOffer::_internal_bodyofagreementtype() const {
  return bodyofagreementtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractOffer::bodyofagreementtype() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.BodyOfAgreementType)
  return _internal_bodyofagreementtype();
}
inline void ContractOffer::_internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bodyofagreementtype_ = value;
}
inline void ContractOffer::set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyofagreementtype(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.BodyOfAgreementType)
}

// bytes BodyOfAgreement = 3;
inline void ContractOffer::clear_bodyofagreement() {
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::bodyofagreement() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.BodyOfAgreement)
  return _internal_bodyofagreement();
}
inline void ContractOffer::set_bodyofagreement(const std::string& value) {
  _internal_set_bodyofagreement(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.BodyOfAgreement)
}
inline std::string* ContractOffer::mutable_bodyofagreement() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.BodyOfAgreement)
  return _internal_mutable_bodyofagreement();
}
inline const std::string& ContractOffer::_internal_bodyofagreement() const {
  return bodyofagreement_.Get();
}
inline void ContractOffer::_internal_set_bodyofagreement(const std::string& value) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_bodyofagreement(std::string&& value) {
  
  bodyofagreement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.BodyOfAgreement)
}
inline void ContractOffer::set_bodyofagreement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.BodyOfAgreement)
}
inline void ContractOffer::set_bodyofagreement(const void* value,
    size_t size) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.BodyOfAgreement)
}
inline std::string* ContractOffer::_internal_mutable_bodyofagreement() {
  
  return bodyofagreement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_bodyofagreement() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.BodyOfAgreement)
  return bodyofagreement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_bodyofagreement(std::string* bodyofagreement) {
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodyofagreement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.BodyOfAgreement)
}
inline std::string* ContractOffer::unsafe_arena_release_bodyofagreement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.BodyOfAgreement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bodyofagreement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_bodyofagreement(
    std::string* bodyofagreement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bodyofagreement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.BodyOfAgreement)
}

// repeated .actions.DocumentField SupportingDocs = 5;
inline int ContractOffer::_internal_supportingdocs_size() const {
  return supportingdocs_.size();
}
inline int ContractOffer::supportingdocs_size() const {
  return _internal_supportingdocs_size();
}
inline void ContractOffer::clear_supportingdocs() {
  supportingdocs_.Clear();
}
inline ::actions::DocumentField* ContractOffer::mutable_supportingdocs(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.SupportingDocs)
  return supportingdocs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
ContractOffer::mutable_supportingdocs() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractOffer.SupportingDocs)
  return &supportingdocs_;
}
inline const ::actions::DocumentField& ContractOffer::_internal_supportingdocs(int index) const {
  return supportingdocs_.Get(index);
}
inline const ::actions::DocumentField& ContractOffer::supportingdocs(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.SupportingDocs)
  return _internal_supportingdocs(index);
}
inline ::actions::DocumentField* ContractOffer::_internal_add_supportingdocs() {
  return supportingdocs_.Add();
}
inline ::actions::DocumentField* ContractOffer::add_supportingdocs() {
  // @@protoc_insertion_point(field_add:actions.ContractOffer.SupportingDocs)
  return _internal_add_supportingdocs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
ContractOffer::supportingdocs() const {
  // @@protoc_insertion_point(field_list:actions.ContractOffer.SupportingDocs)
  return supportingdocs_;
}

// uint64 ContractExpiration = 8;
inline void ContractOffer::clear_contractexpiration() {
  contractexpiration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::_internal_contractexpiration() const {
  return contractexpiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::contractexpiration() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractExpiration)
  return _internal_contractexpiration();
}
inline void ContractOffer::_internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contractexpiration_ = value;
}
inline void ContractOffer::set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contractexpiration(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractExpiration)
}

// string ContractURI = 9;
inline void ContractOffer::clear_contracturi() {
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::contracturi() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractURI)
  return _internal_contracturi();
}
inline void ContractOffer::set_contracturi(const std::string& value) {
  _internal_set_contracturi(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractURI)
}
inline std::string* ContractOffer::mutable_contracturi() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.ContractURI)
  return _internal_mutable_contracturi();
}
inline const std::string& ContractOffer::_internal_contracturi() const {
  return contracturi_.Get();
}
inline void ContractOffer::_internal_set_contracturi(const std::string& value) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_contracturi(std::string&& value) {
  
  contracturi_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.ContractURI)
}
inline void ContractOffer::set_contracturi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.ContractURI)
}
inline void ContractOffer::set_contracturi(const char* value,
    size_t size) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.ContractURI)
}
inline std::string* ContractOffer::_internal_mutable_contracturi() {
  
  return contracturi_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_contracturi() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.ContractURI)
  return contracturi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_contracturi(std::string* contracturi) {
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contracturi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.ContractURI)
}
inline std::string* ContractOffer::unsafe_arena_release_contracturi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.ContractURI)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contracturi_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_contracturi(
    std::string* contracturi) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contracturi, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.ContractURI)
}

// .actions.EntityField Issuer = 10;
inline bool ContractOffer::_internal_has_issuer() const {
  return this != internal_default_instance() && issuer_ != nullptr;
}
inline bool ContractOffer::has_issuer() const {
  return _internal_has_issuer();
}
inline void ContractOffer::clear_issuer() {
  if (GetArena() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
}
inline const ::actions::EntityField& ContractOffer::_internal_issuer() const {
  const ::actions::EntityField* p = issuer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::EntityField*>(
      &::actions::_EntityField_default_instance_);
}
inline const ::actions::EntityField& ContractOffer::issuer() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.Issuer)
  return _internal_issuer();
}
inline void ContractOffer::unsafe_arena_set_allocated_issuer(
    ::actions::EntityField* issuer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(issuer_);
  }
  issuer_ = issuer;
  if (issuer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.Issuer)
}
inline ::actions::EntityField* ContractOffer::release_issuer() {
  auto temp = unsafe_arena_release_issuer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::EntityField* ContractOffer::unsafe_arena_release_issuer() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.Issuer)
  
  ::actions::EntityField* temp = issuer_;
  issuer_ = nullptr;
  return temp;
}
inline ::actions::EntityField* ContractOffer::_internal_mutable_issuer() {
  
  if (issuer_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::EntityField>(GetArena());
    issuer_ = p;
  }
  return issuer_;
}
inline ::actions::EntityField* ContractOffer::mutable_issuer() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.Issuer)
  return _internal_mutable_issuer();
}
inline void ContractOffer::set_allocated_issuer(::actions::EntityField* issuer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete issuer_;
  }
  if (issuer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(issuer);
    if (message_arena != submessage_arena) {
      issuer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issuer, submessage_arena);
    }
    
  } else {
    
  }
  issuer_ = issuer;
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.Issuer)
}

// bool ContractOperatorIncluded = 12;
inline void ContractOffer::clear_contractoperatorincluded() {
  contractoperatorincluded_ = false;
}
inline bool ContractOffer::_internal_contractoperatorincluded() const {
  return contractoperatorincluded_;
}
inline bool ContractOffer::contractoperatorincluded() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractOperatorIncluded)
  return _internal_contractoperatorincluded();
}
inline void ContractOffer::_internal_set_contractoperatorincluded(bool value) {
  
  contractoperatorincluded_ = value;
}
inline void ContractOffer::set_contractoperatorincluded(bool value) {
  _internal_set_contractoperatorincluded(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractOperatorIncluded)
}

// uint64 ContractFee = 17;
inline void ContractOffer::clear_contractfee() {
  contractfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::_internal_contractfee() const {
  return contractfee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::contractfee() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractFee)
  return _internal_contractfee();
}
inline void ContractOffer::_internal_set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contractfee_ = value;
}
inline void ContractOffer::set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contractfee(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractFee)
}

// repeated .actions.VotingSystemField VotingSystems = 18;
inline int ContractOffer::_internal_votingsystems_size() const {
  return votingsystems_.size();
}
inline int ContractOffer::votingsystems_size() const {
  return _internal_votingsystems_size();
}
inline void ContractOffer::clear_votingsystems() {
  votingsystems_.Clear();
}
inline ::actions::VotingSystemField* ContractOffer::mutable_votingsystems(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.VotingSystems)
  return votingsystems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >*
ContractOffer::mutable_votingsystems() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractOffer.VotingSystems)
  return &votingsystems_;
}
inline const ::actions::VotingSystemField& ContractOffer::_internal_votingsystems(int index) const {
  return votingsystems_.Get(index);
}
inline const ::actions::VotingSystemField& ContractOffer::votingsystems(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.VotingSystems)
  return _internal_votingsystems(index);
}
inline ::actions::VotingSystemField* ContractOffer::_internal_add_votingsystems() {
  return votingsystems_.Add();
}
inline ::actions::VotingSystemField* ContractOffer::add_votingsystems() {
  // @@protoc_insertion_point(field_add:actions.ContractOffer.VotingSystems)
  return _internal_add_votingsystems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >&
ContractOffer::votingsystems() const {
  // @@protoc_insertion_point(field_list:actions.ContractOffer.VotingSystems)
  return votingsystems_;
}

// bytes ContractPermissions = 19;
inline void ContractOffer::clear_contractpermissions() {
  contractpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::contractpermissions() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractPermissions)
  return _internal_contractpermissions();
}
inline void ContractOffer::set_contractpermissions(const std::string& value) {
  _internal_set_contractpermissions(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractPermissions)
}
inline std::string* ContractOffer::mutable_contractpermissions() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.ContractPermissions)
  return _internal_mutable_contractpermissions();
}
inline const std::string& ContractOffer::_internal_contractpermissions() const {
  return contractpermissions_.Get();
}
inline void ContractOffer::_internal_set_contractpermissions(const std::string& value) {
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_contractpermissions(std::string&& value) {
  
  contractpermissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.ContractPermissions)
}
inline void ContractOffer::set_contractpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.ContractPermissions)
}
inline void ContractOffer::set_contractpermissions(const void* value,
    size_t size) {
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.ContractPermissions)
}
inline std::string* ContractOffer::_internal_mutable_contractpermissions() {
  
  return contractpermissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_contractpermissions() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.ContractPermissions)
  return contractpermissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_contractpermissions(std::string* contractpermissions) {
  if (contractpermissions != nullptr) {
    
  } else {
    
  }
  contractpermissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractpermissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.ContractPermissions)
}
inline std::string* ContractOffer::unsafe_arena_release_contractpermissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.ContractPermissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractpermissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_contractpermissions(
    std::string* contractpermissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractpermissions != nullptr) {
    
  } else {
    
  }
  contractpermissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractpermissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.ContractPermissions)
}

// uint64 RestrictedQtyInstruments = 20;
inline void ContractOffer::clear_restrictedqtyinstruments() {
  restrictedqtyinstruments_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::_internal_restrictedqtyinstruments() const {
  return restrictedqtyinstruments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractOffer::restrictedqtyinstruments() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.RestrictedQtyInstruments)
  return _internal_restrictedqtyinstruments();
}
inline void ContractOffer::_internal_set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  restrictedqtyinstruments_ = value;
}
inline void ContractOffer::set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_restrictedqtyinstruments(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.RestrictedQtyInstruments)
}

// bool AdministrationProposal = 21;
inline void ContractOffer::clear_administrationproposal() {
  administrationproposal_ = false;
}
inline bool ContractOffer::_internal_administrationproposal() const {
  return administrationproposal_;
}
inline bool ContractOffer::administrationproposal() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.AdministrationProposal)
  return _internal_administrationproposal();
}
inline void ContractOffer::_internal_set_administrationproposal(bool value) {
  
  administrationproposal_ = value;
}
inline void ContractOffer::set_administrationproposal(bool value) {
  _internal_set_administrationproposal(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.AdministrationProposal)
}

// bool HolderProposal = 22;
inline void ContractOffer::clear_holderproposal() {
  holderproposal_ = false;
}
inline bool ContractOffer::_internal_holderproposal() const {
  return holderproposal_;
}
inline bool ContractOffer::holderproposal() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.HolderProposal)
  return _internal_holderproposal();
}
inline void ContractOffer::_internal_set_holderproposal(bool value) {
  
  holderproposal_ = value;
}
inline void ContractOffer::set_holderproposal(bool value) {
  _internal_set_holderproposal(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.HolderProposal)
}

// repeated .actions.OracleField Oracles = 23;
inline int ContractOffer::_internal_oracles_size() const {
  return oracles_.size();
}
inline int ContractOffer::oracles_size() const {
  return _internal_oracles_size();
}
inline void ContractOffer::clear_oracles() {
  oracles_.Clear();
}
inline ::actions::OracleField* ContractOffer::mutable_oracles(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.Oracles)
  return oracles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >*
ContractOffer::mutable_oracles() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractOffer.Oracles)
  return &oracles_;
}
inline const ::actions::OracleField& ContractOffer::_internal_oracles(int index) const {
  return oracles_.Get(index);
}
inline const ::actions::OracleField& ContractOffer::oracles(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.Oracles)
  return _internal_oracles(index);
}
inline ::actions::OracleField* ContractOffer::_internal_add_oracles() {
  return oracles_.Add();
}
inline ::actions::OracleField* ContractOffer::add_oracles() {
  // @@protoc_insertion_point(field_add:actions.ContractOffer.Oracles)
  return _internal_add_oracles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >&
ContractOffer::oracles() const {
  // @@protoc_insertion_point(field_list:actions.ContractOffer.Oracles)
  return oracles_;
}

// bytes MasterAddress = 24;
inline void ContractOffer::clear_masteraddress() {
  masteraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::masteraddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.MasterAddress)
  return _internal_masteraddress();
}
inline void ContractOffer::set_masteraddress(const std::string& value) {
  _internal_set_masteraddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.MasterAddress)
}
inline std::string* ContractOffer::mutable_masteraddress() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.MasterAddress)
  return _internal_mutable_masteraddress();
}
inline const std::string& ContractOffer::_internal_masteraddress() const {
  return masteraddress_.Get();
}
inline void ContractOffer::_internal_set_masteraddress(const std::string& value) {
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_masteraddress(std::string&& value) {
  
  masteraddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.MasterAddress)
}
inline void ContractOffer::set_masteraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.MasterAddress)
}
inline void ContractOffer::set_masteraddress(const void* value,
    size_t size) {
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.MasterAddress)
}
inline std::string* ContractOffer::_internal_mutable_masteraddress() {
  
  return masteraddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_masteraddress() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.MasterAddress)
  return masteraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_masteraddress(std::string* masteraddress) {
  if (masteraddress != nullptr) {
    
  } else {
    
  }
  masteraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masteraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.MasterAddress)
}
inline std::string* ContractOffer::unsafe_arena_release_masteraddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.MasterAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return masteraddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_masteraddress(
    std::string* masteraddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (masteraddress != nullptr) {
    
  } else {
    
  }
  masteraddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      masteraddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.MasterAddress)
}

// bytes EntityContract = 25;
inline void ContractOffer::clear_entitycontract() {
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::entitycontract() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.EntityContract)
  return _internal_entitycontract();
}
inline void ContractOffer::set_entitycontract(const std::string& value) {
  _internal_set_entitycontract(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.EntityContract)
}
inline std::string* ContractOffer::mutable_entitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.EntityContract)
  return _internal_mutable_entitycontract();
}
inline const std::string& ContractOffer::_internal_entitycontract() const {
  return entitycontract_.Get();
}
inline void ContractOffer::_internal_set_entitycontract(const std::string& value) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_entitycontract(std::string&& value) {
  
  entitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.EntityContract)
}
inline void ContractOffer::set_entitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.EntityContract)
}
inline void ContractOffer::set_entitycontract(const void* value,
    size_t size) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.EntityContract)
}
inline std::string* ContractOffer::_internal_mutable_entitycontract() {
  
  return entitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_entitycontract() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.EntityContract)
  return entitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_entitycontract(std::string* entitycontract) {
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.EntityContract)
}
inline std::string* ContractOffer::unsafe_arena_release_entitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.EntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_entitycontract(
    std::string* entitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.EntityContract)
}

// bytes OperatorEntityContract = 26;
inline void ContractOffer::clear_operatorentitycontract() {
  operatorentitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::operatorentitycontract() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.OperatorEntityContract)
  return _internal_operatorentitycontract();
}
inline void ContractOffer::set_operatorentitycontract(const std::string& value) {
  _internal_set_operatorentitycontract(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.OperatorEntityContract)
}
inline std::string* ContractOffer::mutable_operatorentitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.OperatorEntityContract)
  return _internal_mutable_operatorentitycontract();
}
inline const std::string& ContractOffer::_internal_operatorentitycontract() const {
  return operatorentitycontract_.Get();
}
inline void ContractOffer::_internal_set_operatorentitycontract(const std::string& value) {
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_operatorentitycontract(std::string&& value) {
  
  operatorentitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.OperatorEntityContract)
}
inline void ContractOffer::set_operatorentitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.OperatorEntityContract)
}
inline void ContractOffer::set_operatorentitycontract(const void* value,
    size_t size) {
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.OperatorEntityContract)
}
inline std::string* ContractOffer::_internal_mutable_operatorentitycontract() {
  
  return operatorentitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_operatorentitycontract() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.OperatorEntityContract)
  return operatorentitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_operatorentitycontract(std::string* operatorentitycontract) {
  if (operatorentitycontract != nullptr) {
    
  } else {
    
  }
  operatorentitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operatorentitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.OperatorEntityContract)
}
inline std::string* ContractOffer::unsafe_arena_release_operatorentitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.OperatorEntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operatorentitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_operatorentitycontract(
    std::string* operatorentitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operatorentitycontract != nullptr) {
    
  } else {
    
  }
  operatorentitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operatorentitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.OperatorEntityContract)
}

// uint32 ContractType = 27;
inline void ContractOffer::clear_contracttype() {
  contracttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractOffer::_internal_contracttype() const {
  return contracttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractOffer::contracttype() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.ContractType)
  return _internal_contracttype();
}
inline void ContractOffer::_internal_set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contracttype_ = value;
}
inline void ContractOffer::set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contracttype(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.ContractType)
}

// repeated .actions.ServiceField Services = 28;
inline int ContractOffer::_internal_services_size() const {
  return services_.size();
}
inline int ContractOffer::services_size() const {
  return _internal_services_size();
}
inline void ContractOffer::clear_services() {
  services_.Clear();
}
inline ::actions::ServiceField* ContractOffer::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.Services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >*
ContractOffer::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractOffer.Services)
  return &services_;
}
inline const ::actions::ServiceField& ContractOffer::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::actions::ServiceField& ContractOffer::services(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.Services)
  return _internal_services(index);
}
inline ::actions::ServiceField* ContractOffer::_internal_add_services() {
  return services_.Add();
}
inline ::actions::ServiceField* ContractOffer::add_services() {
  // @@protoc_insertion_point(field_add:actions.ContractOffer.Services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >&
ContractOffer::services() const {
  // @@protoc_insertion_point(field_list:actions.ContractOffer.Services)
  return services_;
}

// repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 29;
inline int ContractOffer::_internal_adminidentitycertificates_size() const {
  return adminidentitycertificates_.size();
}
inline int ContractOffer::adminidentitycertificates_size() const {
  return _internal_adminidentitycertificates_size();
}
inline void ContractOffer::clear_adminidentitycertificates() {
  adminidentitycertificates_.Clear();
}
inline ::actions::AdminIdentityCertificateField* ContractOffer::mutable_adminidentitycertificates(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.AdminIdentityCertificates)
  return adminidentitycertificates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >*
ContractOffer::mutable_adminidentitycertificates() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractOffer.AdminIdentityCertificates)
  return &adminidentitycertificates_;
}
inline const ::actions::AdminIdentityCertificateField& ContractOffer::_internal_adminidentitycertificates(int index) const {
  return adminidentitycertificates_.Get(index);
}
inline const ::actions::AdminIdentityCertificateField& ContractOffer::adminidentitycertificates(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.AdminIdentityCertificates)
  return _internal_adminidentitycertificates(index);
}
inline ::actions::AdminIdentityCertificateField* ContractOffer::_internal_add_adminidentitycertificates() {
  return adminidentitycertificates_.Add();
}
inline ::actions::AdminIdentityCertificateField* ContractOffer::add_adminidentitycertificates() {
  // @@protoc_insertion_point(field_add:actions.ContractOffer.AdminIdentityCertificates)
  return _internal_add_adminidentitycertificates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >&
ContractOffer::adminidentitycertificates() const {
  // @@protoc_insertion_point(field_list:actions.ContractOffer.AdminIdentityCertificates)
  return adminidentitycertificates_;
}

// string GoverningLaw = 30;
inline void ContractOffer::clear_governinglaw() {
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::governinglaw() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.GoverningLaw)
  return _internal_governinglaw();
}
inline void ContractOffer::set_governinglaw(const std::string& value) {
  _internal_set_governinglaw(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.GoverningLaw)
}
inline std::string* ContractOffer::mutable_governinglaw() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.GoverningLaw)
  return _internal_mutable_governinglaw();
}
inline const std::string& ContractOffer::_internal_governinglaw() const {
  return governinglaw_.Get();
}
inline void ContractOffer::_internal_set_governinglaw(const std::string& value) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_governinglaw(std::string&& value) {
  
  governinglaw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.GoverningLaw)
}
inline void ContractOffer::set_governinglaw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.GoverningLaw)
}
inline void ContractOffer::set_governinglaw(const char* value,
    size_t size) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.GoverningLaw)
}
inline std::string* ContractOffer::_internal_mutable_governinglaw() {
  
  return governinglaw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_governinglaw() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.GoverningLaw)
  return governinglaw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_governinglaw(std::string* governinglaw) {
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), governinglaw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.GoverningLaw)
}
inline std::string* ContractOffer::unsafe_arena_release_governinglaw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.GoverningLaw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return governinglaw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_governinglaw(
    std::string* governinglaw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      governinglaw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.GoverningLaw)
}

// string Jurisdiction = 31;
inline void ContractOffer::clear_jurisdiction() {
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractOffer::jurisdiction() const {
  // @@protoc_insertion_point(field_get:actions.ContractOffer.Jurisdiction)
  return _internal_jurisdiction();
}
inline void ContractOffer::set_jurisdiction(const std::string& value) {
  _internal_set_jurisdiction(value);
  // @@protoc_insertion_point(field_set:actions.ContractOffer.Jurisdiction)
}
inline std::string* ContractOffer::mutable_jurisdiction() {
  // @@protoc_insertion_point(field_mutable:actions.ContractOffer.Jurisdiction)
  return _internal_mutable_jurisdiction();
}
inline const std::string& ContractOffer::_internal_jurisdiction() const {
  return jurisdiction_.Get();
}
inline void ContractOffer::_internal_set_jurisdiction(const std::string& value) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractOffer::set_jurisdiction(std::string&& value) {
  
  jurisdiction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractOffer.Jurisdiction)
}
inline void ContractOffer::set_jurisdiction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractOffer.Jurisdiction)
}
inline void ContractOffer::set_jurisdiction(const char* value,
    size_t size) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractOffer.Jurisdiction)
}
inline std::string* ContractOffer::_internal_mutable_jurisdiction() {
  
  return jurisdiction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractOffer::release_jurisdiction() {
  // @@protoc_insertion_point(field_release:actions.ContractOffer.Jurisdiction)
  return jurisdiction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractOffer::set_allocated_jurisdiction(std::string* jurisdiction) {
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jurisdiction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractOffer.Jurisdiction)
}
inline std::string* ContractOffer::unsafe_arena_release_jurisdiction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractOffer.Jurisdiction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jurisdiction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractOffer::unsafe_arena_set_allocated_jurisdiction(
    std::string* jurisdiction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jurisdiction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractOffer.Jurisdiction)
}

// -------------------------------------------------------------------

// ContractFormation

// string ContractName = 1;
inline void ContractFormation::clear_contractname() {
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::contractname() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractName)
  return _internal_contractname();
}
inline void ContractFormation::set_contractname(const std::string& value) {
  _internal_set_contractname(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractName)
}
inline std::string* ContractFormation::mutable_contractname() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.ContractName)
  return _internal_mutable_contractname();
}
inline const std::string& ContractFormation::_internal_contractname() const {
  return contractname_.Get();
}
inline void ContractFormation::_internal_set_contractname(const std::string& value) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_contractname(std::string&& value) {
  
  contractname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.ContractName)
}
inline void ContractFormation::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.ContractName)
}
inline void ContractFormation::set_contractname(const char* value,
    size_t size) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.ContractName)
}
inline std::string* ContractFormation::_internal_mutable_contractname() {
  
  return contractname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_contractname() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.ContractName)
  return contractname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_contractname(std::string* contractname) {
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.ContractName)
}
inline std::string* ContractFormation::unsafe_arena_release_contractname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.ContractName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_contractname(
    std::string* contractname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.ContractName)
}

// uint32 BodyOfAgreementType = 2;
inline void ContractFormation::clear_bodyofagreementtype() {
  bodyofagreementtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::_internal_bodyofagreementtype() const {
  return bodyofagreementtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::bodyofagreementtype() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.BodyOfAgreementType)
  return _internal_bodyofagreementtype();
}
inline void ContractFormation::_internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bodyofagreementtype_ = value;
}
inline void ContractFormation::set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyofagreementtype(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.BodyOfAgreementType)
}

// bytes BodyOfAgreement = 3;
inline void ContractFormation::clear_bodyofagreement() {
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::bodyofagreement() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.BodyOfAgreement)
  return _internal_bodyofagreement();
}
inline void ContractFormation::set_bodyofagreement(const std::string& value) {
  _internal_set_bodyofagreement(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.BodyOfAgreement)
}
inline std::string* ContractFormation::mutable_bodyofagreement() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.BodyOfAgreement)
  return _internal_mutable_bodyofagreement();
}
inline const std::string& ContractFormation::_internal_bodyofagreement() const {
  return bodyofagreement_.Get();
}
inline void ContractFormation::_internal_set_bodyofagreement(const std::string& value) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_bodyofagreement(std::string&& value) {
  
  bodyofagreement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.BodyOfAgreement)
}
inline void ContractFormation::set_bodyofagreement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.BodyOfAgreement)
}
inline void ContractFormation::set_bodyofagreement(const void* value,
    size_t size) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.BodyOfAgreement)
}
inline std::string* ContractFormation::_internal_mutable_bodyofagreement() {
  
  return bodyofagreement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_bodyofagreement() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.BodyOfAgreement)
  return bodyofagreement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_bodyofagreement(std::string* bodyofagreement) {
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodyofagreement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.BodyOfAgreement)
}
inline std::string* ContractFormation::unsafe_arena_release_bodyofagreement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.BodyOfAgreement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bodyofagreement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_bodyofagreement(
    std::string* bodyofagreement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bodyofagreement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.BodyOfAgreement)
}

// repeated .actions.DocumentField SupportingDocs = 5;
inline int ContractFormation::_internal_supportingdocs_size() const {
  return supportingdocs_.size();
}
inline int ContractFormation::supportingdocs_size() const {
  return _internal_supportingdocs_size();
}
inline void ContractFormation::clear_supportingdocs() {
  supportingdocs_.Clear();
}
inline ::actions::DocumentField* ContractFormation::mutable_supportingdocs(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.SupportingDocs)
  return supportingdocs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
ContractFormation::mutable_supportingdocs() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractFormation.SupportingDocs)
  return &supportingdocs_;
}
inline const ::actions::DocumentField& ContractFormation::_internal_supportingdocs(int index) const {
  return supportingdocs_.Get(index);
}
inline const ::actions::DocumentField& ContractFormation::supportingdocs(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.SupportingDocs)
  return _internal_supportingdocs(index);
}
inline ::actions::DocumentField* ContractFormation::_internal_add_supportingdocs() {
  return supportingdocs_.Add();
}
inline ::actions::DocumentField* ContractFormation::add_supportingdocs() {
  // @@protoc_insertion_point(field_add:actions.ContractFormation.SupportingDocs)
  return _internal_add_supportingdocs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
ContractFormation::supportingdocs() const {
  // @@protoc_insertion_point(field_list:actions.ContractFormation.SupportingDocs)
  return supportingdocs_;
}

// uint64 ContractExpiration = 8;
inline void ContractFormation::clear_contractexpiration() {
  contractexpiration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::_internal_contractexpiration() const {
  return contractexpiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::contractexpiration() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractExpiration)
  return _internal_contractexpiration();
}
inline void ContractFormation::_internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contractexpiration_ = value;
}
inline void ContractFormation::set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contractexpiration(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractExpiration)
}

// string ContractURI = 9;
inline void ContractFormation::clear_contracturi() {
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::contracturi() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractURI)
  return _internal_contracturi();
}
inline void ContractFormation::set_contracturi(const std::string& value) {
  _internal_set_contracturi(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractURI)
}
inline std::string* ContractFormation::mutable_contracturi() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.ContractURI)
  return _internal_mutable_contracturi();
}
inline const std::string& ContractFormation::_internal_contracturi() const {
  return contracturi_.Get();
}
inline void ContractFormation::_internal_set_contracturi(const std::string& value) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_contracturi(std::string&& value) {
  
  contracturi_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.ContractURI)
}
inline void ContractFormation::set_contracturi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.ContractURI)
}
inline void ContractFormation::set_contracturi(const char* value,
    size_t size) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.ContractURI)
}
inline std::string* ContractFormation::_internal_mutable_contracturi() {
  
  return contracturi_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_contracturi() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.ContractURI)
  return contracturi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_contracturi(std::string* contracturi) {
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contracturi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.ContractURI)
}
inline std::string* ContractFormation::unsafe_arena_release_contracturi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.ContractURI)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contracturi_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_contracturi(
    std::string* contracturi) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contracturi, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.ContractURI)
}

// .actions.EntityField Issuer = 10;
inline bool ContractFormation::_internal_has_issuer() const {
  return this != internal_default_instance() && issuer_ != nullptr;
}
inline bool ContractFormation::has_issuer() const {
  return _internal_has_issuer();
}
inline void ContractFormation::clear_issuer() {
  if (GetArena() == nullptr && issuer_ != nullptr) {
    delete issuer_;
  }
  issuer_ = nullptr;
}
inline const ::actions::EntityField& ContractFormation::_internal_issuer() const {
  const ::actions::EntityField* p = issuer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::EntityField*>(
      &::actions::_EntityField_default_instance_);
}
inline const ::actions::EntityField& ContractFormation::issuer() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.Issuer)
  return _internal_issuer();
}
inline void ContractFormation::unsafe_arena_set_allocated_issuer(
    ::actions::EntityField* issuer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(issuer_);
  }
  issuer_ = issuer;
  if (issuer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.Issuer)
}
inline ::actions::EntityField* ContractFormation::release_issuer() {
  auto temp = unsafe_arena_release_issuer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::EntityField* ContractFormation::unsafe_arena_release_issuer() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.Issuer)
  
  ::actions::EntityField* temp = issuer_;
  issuer_ = nullptr;
  return temp;
}
inline ::actions::EntityField* ContractFormation::_internal_mutable_issuer() {
  
  if (issuer_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::EntityField>(GetArena());
    issuer_ = p;
  }
  return issuer_;
}
inline ::actions::EntityField* ContractFormation::mutable_issuer() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.Issuer)
  return _internal_mutable_issuer();
}
inline void ContractFormation::set_allocated_issuer(::actions::EntityField* issuer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete issuer_;
  }
  if (issuer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(issuer);
    if (message_arena != submessage_arena) {
      issuer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, issuer, submessage_arena);
    }
    
  } else {
    
  }
  issuer_ = issuer;
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.Issuer)
}

// uint64 ContractFee = 16;
inline void ContractFormation::clear_contractfee() {
  contractfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::_internal_contractfee() const {
  return contractfee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::contractfee() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractFee)
  return _internal_contractfee();
}
inline void ContractFormation::_internal_set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contractfee_ = value;
}
inline void ContractFormation::set_contractfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contractfee(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractFee)
}

// repeated .actions.VotingSystemField VotingSystems = 17;
inline int ContractFormation::_internal_votingsystems_size() const {
  return votingsystems_.size();
}
inline int ContractFormation::votingsystems_size() const {
  return _internal_votingsystems_size();
}
inline void ContractFormation::clear_votingsystems() {
  votingsystems_.Clear();
}
inline ::actions::VotingSystemField* ContractFormation::mutable_votingsystems(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.VotingSystems)
  return votingsystems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >*
ContractFormation::mutable_votingsystems() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractFormation.VotingSystems)
  return &votingsystems_;
}
inline const ::actions::VotingSystemField& ContractFormation::_internal_votingsystems(int index) const {
  return votingsystems_.Get(index);
}
inline const ::actions::VotingSystemField& ContractFormation::votingsystems(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.VotingSystems)
  return _internal_votingsystems(index);
}
inline ::actions::VotingSystemField* ContractFormation::_internal_add_votingsystems() {
  return votingsystems_.Add();
}
inline ::actions::VotingSystemField* ContractFormation::add_votingsystems() {
  // @@protoc_insertion_point(field_add:actions.ContractFormation.VotingSystems)
  return _internal_add_votingsystems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::VotingSystemField >&
ContractFormation::votingsystems() const {
  // @@protoc_insertion_point(field_list:actions.ContractFormation.VotingSystems)
  return votingsystems_;
}

// bytes ContractPermissions = 18;
inline void ContractFormation::clear_contractpermissions() {
  contractpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::contractpermissions() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractPermissions)
  return _internal_contractpermissions();
}
inline void ContractFormation::set_contractpermissions(const std::string& value) {
  _internal_set_contractpermissions(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractPermissions)
}
inline std::string* ContractFormation::mutable_contractpermissions() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.ContractPermissions)
  return _internal_mutable_contractpermissions();
}
inline const std::string& ContractFormation::_internal_contractpermissions() const {
  return contractpermissions_.Get();
}
inline void ContractFormation::_internal_set_contractpermissions(const std::string& value) {
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_contractpermissions(std::string&& value) {
  
  contractpermissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.ContractPermissions)
}
inline void ContractFormation::set_contractpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.ContractPermissions)
}
inline void ContractFormation::set_contractpermissions(const void* value,
    size_t size) {
  
  contractpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.ContractPermissions)
}
inline std::string* ContractFormation::_internal_mutable_contractpermissions() {
  
  return contractpermissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_contractpermissions() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.ContractPermissions)
  return contractpermissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_contractpermissions(std::string* contractpermissions) {
  if (contractpermissions != nullptr) {
    
  } else {
    
  }
  contractpermissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractpermissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.ContractPermissions)
}
inline std::string* ContractFormation::unsafe_arena_release_contractpermissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.ContractPermissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractpermissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_contractpermissions(
    std::string* contractpermissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractpermissions != nullptr) {
    
  } else {
    
  }
  contractpermissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractpermissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.ContractPermissions)
}

// uint64 RestrictedQtyInstruments = 19;
inline void ContractFormation::clear_restrictedqtyinstruments() {
  restrictedqtyinstruments_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::_internal_restrictedqtyinstruments() const {
  return restrictedqtyinstruments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::restrictedqtyinstruments() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.RestrictedQtyInstruments)
  return _internal_restrictedqtyinstruments();
}
inline void ContractFormation::_internal_set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  restrictedqtyinstruments_ = value;
}
inline void ContractFormation::set_restrictedqtyinstruments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_restrictedqtyinstruments(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.RestrictedQtyInstruments)
}

// bool AdministrationProposal = 20;
inline void ContractFormation::clear_administrationproposal() {
  administrationproposal_ = false;
}
inline bool ContractFormation::_internal_administrationproposal() const {
  return administrationproposal_;
}
inline bool ContractFormation::administrationproposal() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.AdministrationProposal)
  return _internal_administrationproposal();
}
inline void ContractFormation::_internal_set_administrationproposal(bool value) {
  
  administrationproposal_ = value;
}
inline void ContractFormation::set_administrationproposal(bool value) {
  _internal_set_administrationproposal(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.AdministrationProposal)
}

// bool HolderProposal = 21;
inline void ContractFormation::clear_holderproposal() {
  holderproposal_ = false;
}
inline bool ContractFormation::_internal_holderproposal() const {
  return holderproposal_;
}
inline bool ContractFormation::holderproposal() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.HolderProposal)
  return _internal_holderproposal();
}
inline void ContractFormation::_internal_set_holderproposal(bool value) {
  
  holderproposal_ = value;
}
inline void ContractFormation::set_holderproposal(bool value) {
  _internal_set_holderproposal(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.HolderProposal)
}

// repeated .actions.OracleField Oracles = 22;
inline int ContractFormation::_internal_oracles_size() const {
  return oracles_.size();
}
inline int ContractFormation::oracles_size() const {
  return _internal_oracles_size();
}
inline void ContractFormation::clear_oracles() {
  oracles_.Clear();
}
inline ::actions::OracleField* ContractFormation::mutable_oracles(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.Oracles)
  return oracles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >*
ContractFormation::mutable_oracles() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractFormation.Oracles)
  return &oracles_;
}
inline const ::actions::OracleField& ContractFormation::_internal_oracles(int index) const {
  return oracles_.Get(index);
}
inline const ::actions::OracleField& ContractFormation::oracles(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.Oracles)
  return _internal_oracles(index);
}
inline ::actions::OracleField* ContractFormation::_internal_add_oracles() {
  return oracles_.Add();
}
inline ::actions::OracleField* ContractFormation::add_oracles() {
  // @@protoc_insertion_point(field_add:actions.ContractFormation.Oracles)
  return _internal_add_oracles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::OracleField >&
ContractFormation::oracles() const {
  // @@protoc_insertion_point(field_list:actions.ContractFormation.Oracles)
  return oracles_;
}

// bytes MasterAddress = 23;
inline void ContractFormation::clear_masteraddress() {
  masteraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::masteraddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.MasterAddress)
  return _internal_masteraddress();
}
inline void ContractFormation::set_masteraddress(const std::string& value) {
  _internal_set_masteraddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.MasterAddress)
}
inline std::string* ContractFormation::mutable_masteraddress() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.MasterAddress)
  return _internal_mutable_masteraddress();
}
inline const std::string& ContractFormation::_internal_masteraddress() const {
  return masteraddress_.Get();
}
inline void ContractFormation::_internal_set_masteraddress(const std::string& value) {
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_masteraddress(std::string&& value) {
  
  masteraddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.MasterAddress)
}
inline void ContractFormation::set_masteraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.MasterAddress)
}
inline void ContractFormation::set_masteraddress(const void* value,
    size_t size) {
  
  masteraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.MasterAddress)
}
inline std::string* ContractFormation::_internal_mutable_masteraddress() {
  
  return masteraddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_masteraddress() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.MasterAddress)
  return masteraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_masteraddress(std::string* masteraddress) {
  if (masteraddress != nullptr) {
    
  } else {
    
  }
  masteraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), masteraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.MasterAddress)
}
inline std::string* ContractFormation::unsafe_arena_release_masteraddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.MasterAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return masteraddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_masteraddress(
    std::string* masteraddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (masteraddress != nullptr) {
    
  } else {
    
  }
  masteraddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      masteraddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.MasterAddress)
}

// uint32 ContractRevision = 24;
inline void ContractFormation::clear_contractrevision() {
  contractrevision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::_internal_contractrevision() const {
  return contractrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::contractrevision() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractRevision)
  return _internal_contractrevision();
}
inline void ContractFormation::_internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractrevision_ = value;
}
inline void ContractFormation::set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractrevision(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractRevision)
}

// uint64 Timestamp = 25;
inline void ContractFormation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractFormation::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.Timestamp)
  return _internal_timestamp();
}
inline void ContractFormation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ContractFormation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.Timestamp)
}

// bytes EntityContract = 26;
inline void ContractFormation::clear_entitycontract() {
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::entitycontract() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.EntityContract)
  return _internal_entitycontract();
}
inline void ContractFormation::set_entitycontract(const std::string& value) {
  _internal_set_entitycontract(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.EntityContract)
}
inline std::string* ContractFormation::mutable_entitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.EntityContract)
  return _internal_mutable_entitycontract();
}
inline const std::string& ContractFormation::_internal_entitycontract() const {
  return entitycontract_.Get();
}
inline void ContractFormation::_internal_set_entitycontract(const std::string& value) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_entitycontract(std::string&& value) {
  
  entitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.EntityContract)
}
inline void ContractFormation::set_entitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.EntityContract)
}
inline void ContractFormation::set_entitycontract(const void* value,
    size_t size) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.EntityContract)
}
inline std::string* ContractFormation::_internal_mutable_entitycontract() {
  
  return entitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_entitycontract() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.EntityContract)
  return entitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_entitycontract(std::string* entitycontract) {
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.EntityContract)
}
inline std::string* ContractFormation::unsafe_arena_release_entitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.EntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_entitycontract(
    std::string* entitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.EntityContract)
}

// bytes OperatorEntityContract = 27;
inline void ContractFormation::clear_operatorentitycontract() {
  operatorentitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::operatorentitycontract() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.OperatorEntityContract)
  return _internal_operatorentitycontract();
}
inline void ContractFormation::set_operatorentitycontract(const std::string& value) {
  _internal_set_operatorentitycontract(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.OperatorEntityContract)
}
inline std::string* ContractFormation::mutable_operatorentitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.OperatorEntityContract)
  return _internal_mutable_operatorentitycontract();
}
inline const std::string& ContractFormation::_internal_operatorentitycontract() const {
  return operatorentitycontract_.Get();
}
inline void ContractFormation::_internal_set_operatorentitycontract(const std::string& value) {
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_operatorentitycontract(std::string&& value) {
  
  operatorentitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.OperatorEntityContract)
}
inline void ContractFormation::set_operatorentitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.OperatorEntityContract)
}
inline void ContractFormation::set_operatorentitycontract(const void* value,
    size_t size) {
  
  operatorentitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.OperatorEntityContract)
}
inline std::string* ContractFormation::_internal_mutable_operatorentitycontract() {
  
  return operatorentitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_operatorentitycontract() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.OperatorEntityContract)
  return operatorentitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_operatorentitycontract(std::string* operatorentitycontract) {
  if (operatorentitycontract != nullptr) {
    
  } else {
    
  }
  operatorentitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operatorentitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.OperatorEntityContract)
}
inline std::string* ContractFormation::unsafe_arena_release_operatorentitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.OperatorEntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operatorentitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_operatorentitycontract(
    std::string* operatorentitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operatorentitycontract != nullptr) {
    
  } else {
    
  }
  operatorentitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operatorentitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.OperatorEntityContract)
}

// uint32 ContractType = 28;
inline void ContractFormation::clear_contracttype() {
  contracttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::_internal_contracttype() const {
  return contracttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractFormation::contracttype() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.ContractType)
  return _internal_contracttype();
}
inline void ContractFormation::_internal_set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contracttype_ = value;
}
inline void ContractFormation::set_contracttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contracttype(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.ContractType)
}

// repeated .actions.ServiceField Services = 29;
inline int ContractFormation::_internal_services_size() const {
  return services_.size();
}
inline int ContractFormation::services_size() const {
  return _internal_services_size();
}
inline void ContractFormation::clear_services() {
  services_.Clear();
}
inline ::actions::ServiceField* ContractFormation::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.Services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >*
ContractFormation::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractFormation.Services)
  return &services_;
}
inline const ::actions::ServiceField& ContractFormation::_internal_services(int index) const {
  return services_.Get(index);
}
inline const ::actions::ServiceField& ContractFormation::services(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.Services)
  return _internal_services(index);
}
inline ::actions::ServiceField* ContractFormation::_internal_add_services() {
  return services_.Add();
}
inline ::actions::ServiceField* ContractFormation::add_services() {
  // @@protoc_insertion_point(field_add:actions.ContractFormation.Services)
  return _internal_add_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ServiceField >&
ContractFormation::services() const {
  // @@protoc_insertion_point(field_list:actions.ContractFormation.Services)
  return services_;
}

// repeated .actions.AdminIdentityCertificateField AdminIdentityCertificates = 30;
inline int ContractFormation::_internal_adminidentitycertificates_size() const {
  return adminidentitycertificates_.size();
}
inline int ContractFormation::adminidentitycertificates_size() const {
  return _internal_adminidentitycertificates_size();
}
inline void ContractFormation::clear_adminidentitycertificates() {
  adminidentitycertificates_.Clear();
}
inline ::actions::AdminIdentityCertificateField* ContractFormation::mutable_adminidentitycertificates(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.AdminIdentityCertificates)
  return adminidentitycertificates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >*
ContractFormation::mutable_adminidentitycertificates() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractFormation.AdminIdentityCertificates)
  return &adminidentitycertificates_;
}
inline const ::actions::AdminIdentityCertificateField& ContractFormation::_internal_adminidentitycertificates(int index) const {
  return adminidentitycertificates_.Get(index);
}
inline const ::actions::AdminIdentityCertificateField& ContractFormation::adminidentitycertificates(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.AdminIdentityCertificates)
  return _internal_adminidentitycertificates(index);
}
inline ::actions::AdminIdentityCertificateField* ContractFormation::_internal_add_adminidentitycertificates() {
  return adminidentitycertificates_.Add();
}
inline ::actions::AdminIdentityCertificateField* ContractFormation::add_adminidentitycertificates() {
  // @@protoc_insertion_point(field_add:actions.ContractFormation.AdminIdentityCertificates)
  return _internal_add_adminidentitycertificates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdminIdentityCertificateField >&
ContractFormation::adminidentitycertificates() const {
  // @@protoc_insertion_point(field_list:actions.ContractFormation.AdminIdentityCertificates)
  return adminidentitycertificates_;
}

// bytes AdminAddress = 31;
inline void ContractFormation::clear_adminaddress() {
  adminaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::adminaddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.AdminAddress)
  return _internal_adminaddress();
}
inline void ContractFormation::set_adminaddress(const std::string& value) {
  _internal_set_adminaddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.AdminAddress)
}
inline std::string* ContractFormation::mutable_adminaddress() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.AdminAddress)
  return _internal_mutable_adminaddress();
}
inline const std::string& ContractFormation::_internal_adminaddress() const {
  return adminaddress_.Get();
}
inline void ContractFormation::_internal_set_adminaddress(const std::string& value) {
  
  adminaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_adminaddress(std::string&& value) {
  
  adminaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.AdminAddress)
}
inline void ContractFormation::set_adminaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  adminaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.AdminAddress)
}
inline void ContractFormation::set_adminaddress(const void* value,
    size_t size) {
  
  adminaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.AdminAddress)
}
inline std::string* ContractFormation::_internal_mutable_adminaddress() {
  
  return adminaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_adminaddress() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.AdminAddress)
  return adminaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_adminaddress(std::string* adminaddress) {
  if (adminaddress != nullptr) {
    
  } else {
    
  }
  adminaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adminaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.AdminAddress)
}
inline std::string* ContractFormation::unsafe_arena_release_adminaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.AdminAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return adminaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_adminaddress(
    std::string* adminaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (adminaddress != nullptr) {
    
  } else {
    
  }
  adminaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      adminaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.AdminAddress)
}

// bytes OperatorAddress = 32;
inline void ContractFormation::clear_operatoraddress() {
  operatoraddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::operatoraddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.OperatorAddress)
  return _internal_operatoraddress();
}
inline void ContractFormation::set_operatoraddress(const std::string& value) {
  _internal_set_operatoraddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.OperatorAddress)
}
inline std::string* ContractFormation::mutable_operatoraddress() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.OperatorAddress)
  return _internal_mutable_operatoraddress();
}
inline const std::string& ContractFormation::_internal_operatoraddress() const {
  return operatoraddress_.Get();
}
inline void ContractFormation::_internal_set_operatoraddress(const std::string& value) {
  
  operatoraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_operatoraddress(std::string&& value) {
  
  operatoraddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.OperatorAddress)
}
inline void ContractFormation::set_operatoraddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operatoraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.OperatorAddress)
}
inline void ContractFormation::set_operatoraddress(const void* value,
    size_t size) {
  
  operatoraddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.OperatorAddress)
}
inline std::string* ContractFormation::_internal_mutable_operatoraddress() {
  
  return operatoraddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_operatoraddress() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.OperatorAddress)
  return operatoraddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_operatoraddress(std::string* operatoraddress) {
  if (operatoraddress != nullptr) {
    
  } else {
    
  }
  operatoraddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operatoraddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.OperatorAddress)
}
inline std::string* ContractFormation::unsafe_arena_release_operatoraddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.OperatorAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operatoraddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_operatoraddress(
    std::string* operatoraddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operatoraddress != nullptr) {
    
  } else {
    
  }
  operatoraddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operatoraddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.OperatorAddress)
}

// string GoverningLaw = 33;
inline void ContractFormation::clear_governinglaw() {
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::governinglaw() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.GoverningLaw)
  return _internal_governinglaw();
}
inline void ContractFormation::set_governinglaw(const std::string& value) {
  _internal_set_governinglaw(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.GoverningLaw)
}
inline std::string* ContractFormation::mutable_governinglaw() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.GoverningLaw)
  return _internal_mutable_governinglaw();
}
inline const std::string& ContractFormation::_internal_governinglaw() const {
  return governinglaw_.Get();
}
inline void ContractFormation::_internal_set_governinglaw(const std::string& value) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_governinglaw(std::string&& value) {
  
  governinglaw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.GoverningLaw)
}
inline void ContractFormation::set_governinglaw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.GoverningLaw)
}
inline void ContractFormation::set_governinglaw(const char* value,
    size_t size) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.GoverningLaw)
}
inline std::string* ContractFormation::_internal_mutable_governinglaw() {
  
  return governinglaw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_governinglaw() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.GoverningLaw)
  return governinglaw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_governinglaw(std::string* governinglaw) {
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), governinglaw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.GoverningLaw)
}
inline std::string* ContractFormation::unsafe_arena_release_governinglaw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.GoverningLaw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return governinglaw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_governinglaw(
    std::string* governinglaw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      governinglaw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.GoverningLaw)
}

// string Jurisdiction = 34;
inline void ContractFormation::clear_jurisdiction() {
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::jurisdiction() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.Jurisdiction)
  return _internal_jurisdiction();
}
inline void ContractFormation::set_jurisdiction(const std::string& value) {
  _internal_set_jurisdiction(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.Jurisdiction)
}
inline std::string* ContractFormation::mutable_jurisdiction() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.Jurisdiction)
  return _internal_mutable_jurisdiction();
}
inline const std::string& ContractFormation::_internal_jurisdiction() const {
  return jurisdiction_.Get();
}
inline void ContractFormation::_internal_set_jurisdiction(const std::string& value) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_jurisdiction(std::string&& value) {
  
  jurisdiction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.Jurisdiction)
}
inline void ContractFormation::set_jurisdiction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.Jurisdiction)
}
inline void ContractFormation::set_jurisdiction(const char* value,
    size_t size) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.Jurisdiction)
}
inline std::string* ContractFormation::_internal_mutable_jurisdiction() {
  
  return jurisdiction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_jurisdiction() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.Jurisdiction)
  return jurisdiction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_jurisdiction(std::string* jurisdiction) {
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jurisdiction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.Jurisdiction)
}
inline std::string* ContractFormation::unsafe_arena_release_jurisdiction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.Jurisdiction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jurisdiction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_jurisdiction(
    std::string* jurisdiction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jurisdiction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.Jurisdiction)
}

// string RequestPeerChannel = 35;
inline void ContractFormation::clear_requestpeerchannel() {
  requestpeerchannel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractFormation::requestpeerchannel() const {
  // @@protoc_insertion_point(field_get:actions.ContractFormation.RequestPeerChannel)
  return _internal_requestpeerchannel();
}
inline void ContractFormation::set_requestpeerchannel(const std::string& value) {
  _internal_set_requestpeerchannel(value);
  // @@protoc_insertion_point(field_set:actions.ContractFormation.RequestPeerChannel)
}
inline std::string* ContractFormation::mutable_requestpeerchannel() {
  // @@protoc_insertion_point(field_mutable:actions.ContractFormation.RequestPeerChannel)
  return _internal_mutable_requestpeerchannel();
}
inline const std::string& ContractFormation::_internal_requestpeerchannel() const {
  return requestpeerchannel_.Get();
}
inline void ContractFormation::_internal_set_requestpeerchannel(const std::string& value) {
  
  requestpeerchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractFormation::set_requestpeerchannel(std::string&& value) {
  
  requestpeerchannel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractFormation.RequestPeerChannel)
}
inline void ContractFormation::set_requestpeerchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  requestpeerchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractFormation.RequestPeerChannel)
}
inline void ContractFormation::set_requestpeerchannel(const char* value,
    size_t size) {
  
  requestpeerchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractFormation.RequestPeerChannel)
}
inline std::string* ContractFormation::_internal_mutable_requestpeerchannel() {
  
  return requestpeerchannel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractFormation::release_requestpeerchannel() {
  // @@protoc_insertion_point(field_release:actions.ContractFormation.RequestPeerChannel)
  return requestpeerchannel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractFormation::set_allocated_requestpeerchannel(std::string* requestpeerchannel) {
  if (requestpeerchannel != nullptr) {
    
  } else {
    
  }
  requestpeerchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestpeerchannel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractFormation.RequestPeerChannel)
}
inline std::string* ContractFormation::unsafe_arena_release_requestpeerchannel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractFormation.RequestPeerChannel)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return requestpeerchannel_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractFormation::unsafe_arena_set_allocated_requestpeerchannel(
    std::string* requestpeerchannel) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (requestpeerchannel != nullptr) {
    
  } else {
    
  }
  requestpeerchannel_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      requestpeerchannel, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractFormation.RequestPeerChannel)
}

// -------------------------------------------------------------------

// ContractAmendment

// bool ChangeAdministrationAddress = 1;
inline void ContractAmendment::clear_changeadministrationaddress() {
  changeadministrationaddress_ = false;
}
inline bool ContractAmendment::_internal_changeadministrationaddress() const {
  return changeadministrationaddress_;
}
inline bool ContractAmendment::changeadministrationaddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractAmendment.ChangeAdministrationAddress)
  return _internal_changeadministrationaddress();
}
inline void ContractAmendment::_internal_set_changeadministrationaddress(bool value) {
  
  changeadministrationaddress_ = value;
}
inline void ContractAmendment::set_changeadministrationaddress(bool value) {
  _internal_set_changeadministrationaddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractAmendment.ChangeAdministrationAddress)
}

// bool ChangeOperatorAddress = 2;
inline void ContractAmendment::clear_changeoperatoraddress() {
  changeoperatoraddress_ = false;
}
inline bool ContractAmendment::_internal_changeoperatoraddress() const {
  return changeoperatoraddress_;
}
inline bool ContractAmendment::changeoperatoraddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractAmendment.ChangeOperatorAddress)
  return _internal_changeoperatoraddress();
}
inline void ContractAmendment::_internal_set_changeoperatoraddress(bool value) {
  
  changeoperatoraddress_ = value;
}
inline void ContractAmendment::set_changeoperatoraddress(bool value) {
  _internal_set_changeoperatoraddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractAmendment.ChangeOperatorAddress)
}

// uint32 ContractRevision = 3;
inline void ContractAmendment::clear_contractrevision() {
  contractrevision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractAmendment::_internal_contractrevision() const {
  return contractrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractAmendment::contractrevision() const {
  // @@protoc_insertion_point(field_get:actions.ContractAmendment.ContractRevision)
  return _internal_contractrevision();
}
inline void ContractAmendment::_internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractrevision_ = value;
}
inline void ContractAmendment::set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractrevision(value);
  // @@protoc_insertion_point(field_set:actions.ContractAmendment.ContractRevision)
}

// repeated .actions.AmendmentField Amendments = 4;
inline int ContractAmendment::_internal_amendments_size() const {
  return amendments_.size();
}
inline int ContractAmendment::amendments_size() const {
  return _internal_amendments_size();
}
inline void ContractAmendment::clear_amendments() {
  amendments_.Clear();
}
inline ::actions::AmendmentField* ContractAmendment::mutable_amendments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ContractAmendment.Amendments)
  return amendments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
ContractAmendment::mutable_amendments() {
  // @@protoc_insertion_point(field_mutable_list:actions.ContractAmendment.Amendments)
  return &amendments_;
}
inline const ::actions::AmendmentField& ContractAmendment::_internal_amendments(int index) const {
  return amendments_.Get(index);
}
inline const ::actions::AmendmentField& ContractAmendment::amendments(int index) const {
  // @@protoc_insertion_point(field_get:actions.ContractAmendment.Amendments)
  return _internal_amendments(index);
}
inline ::actions::AmendmentField* ContractAmendment::_internal_add_amendments() {
  return amendments_.Add();
}
inline ::actions::AmendmentField* ContractAmendment::add_amendments() {
  // @@protoc_insertion_point(field_add:actions.ContractAmendment.Amendments)
  return _internal_add_amendments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
ContractAmendment::amendments() const {
  // @@protoc_insertion_point(field_list:actions.ContractAmendment.Amendments)
  return amendments_;
}

// bytes RefTxID = 5;
inline void ContractAmendment::clear_reftxid() {
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractAmendment::reftxid() const {
  // @@protoc_insertion_point(field_get:actions.ContractAmendment.RefTxID)
  return _internal_reftxid();
}
inline void ContractAmendment::set_reftxid(const std::string& value) {
  _internal_set_reftxid(value);
  // @@protoc_insertion_point(field_set:actions.ContractAmendment.RefTxID)
}
inline std::string* ContractAmendment::mutable_reftxid() {
  // @@protoc_insertion_point(field_mutable:actions.ContractAmendment.RefTxID)
  return _internal_mutable_reftxid();
}
inline const std::string& ContractAmendment::_internal_reftxid() const {
  return reftxid_.Get();
}
inline void ContractAmendment::_internal_set_reftxid(const std::string& value) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractAmendment::set_reftxid(std::string&& value) {
  
  reftxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractAmendment.RefTxID)
}
inline void ContractAmendment::set_reftxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractAmendment.RefTxID)
}
inline void ContractAmendment::set_reftxid(const void* value,
    size_t size) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractAmendment.RefTxID)
}
inline std::string* ContractAmendment::_internal_mutable_reftxid() {
  
  return reftxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractAmendment::release_reftxid() {
  // @@protoc_insertion_point(field_release:actions.ContractAmendment.RefTxID)
  return reftxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractAmendment::set_allocated_reftxid(std::string* reftxid) {
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reftxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractAmendment.RefTxID)
}
inline std::string* ContractAmendment::unsafe_arena_release_reftxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractAmendment.RefTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reftxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractAmendment::unsafe_arena_set_allocated_reftxid(
    std::string* reftxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reftxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractAmendment.RefTxID)
}

// -------------------------------------------------------------------

// StaticContractFormation

// string ContractName = 1;
inline void StaticContractFormation::clear_contractname() {
  contractname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::contractname() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractName)
  return _internal_contractname();
}
inline void StaticContractFormation::set_contractname(const std::string& value) {
  _internal_set_contractname(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractName)
}
inline std::string* StaticContractFormation::mutable_contractname() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.ContractName)
  return _internal_mutable_contractname();
}
inline const std::string& StaticContractFormation::_internal_contractname() const {
  return contractname_.Get();
}
inline void StaticContractFormation::_internal_set_contractname(const std::string& value) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_contractname(std::string&& value) {
  
  contractname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.ContractName)
}
inline void StaticContractFormation::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.ContractName)
}
inline void StaticContractFormation::set_contractname(const char* value,
    size_t size) {
  
  contractname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.ContractName)
}
inline std::string* StaticContractFormation::_internal_mutable_contractname() {
  
  return contractname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_contractname() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.ContractName)
  return contractname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_contractname(std::string* contractname) {
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.ContractName)
}
inline std::string* StaticContractFormation::unsafe_arena_release_contractname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.ContractName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_contractname(
    std::string* contractname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.ContractName)
}

// bytes ContractCode = 2;
inline void StaticContractFormation::clear_contractcode() {
  contractcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::contractcode() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractCode)
  return _internal_contractcode();
}
inline void StaticContractFormation::set_contractcode(const std::string& value) {
  _internal_set_contractcode(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractCode)
}
inline std::string* StaticContractFormation::mutable_contractcode() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.ContractCode)
  return _internal_mutable_contractcode();
}
inline const std::string& StaticContractFormation::_internal_contractcode() const {
  return contractcode_.Get();
}
inline void StaticContractFormation::_internal_set_contractcode(const std::string& value) {
  
  contractcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_contractcode(std::string&& value) {
  
  contractcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.ContractCode)
}
inline void StaticContractFormation::set_contractcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.ContractCode)
}
inline void StaticContractFormation::set_contractcode(const void* value,
    size_t size) {
  
  contractcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.ContractCode)
}
inline std::string* StaticContractFormation::_internal_mutable_contractcode() {
  
  return contractcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_contractcode() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.ContractCode)
  return contractcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_contractcode(std::string* contractcode) {
  if (contractcode != nullptr) {
    
  } else {
    
  }
  contractcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.ContractCode)
}
inline std::string* StaticContractFormation::unsafe_arena_release_contractcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.ContractCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contractcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_contractcode(
    std::string* contractcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contractcode != nullptr) {
    
  } else {
    
  }
  contractcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contractcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.ContractCode)
}

// uint32 BodyOfAgreementType = 3;
inline void StaticContractFormation::clear_bodyofagreementtype() {
  bodyofagreementtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::_internal_bodyofagreementtype() const {
  return bodyofagreementtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::bodyofagreementtype() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.BodyOfAgreementType)
  return _internal_bodyofagreementtype();
}
inline void StaticContractFormation::_internal_set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bodyofagreementtype_ = value;
}
inline void StaticContractFormation::set_bodyofagreementtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodyofagreementtype(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.BodyOfAgreementType)
}

// bytes BodyOfAgreement = 4;
inline void StaticContractFormation::clear_bodyofagreement() {
  bodyofagreement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::bodyofagreement() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.BodyOfAgreement)
  return _internal_bodyofagreement();
}
inline void StaticContractFormation::set_bodyofagreement(const std::string& value) {
  _internal_set_bodyofagreement(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.BodyOfAgreement)
}
inline std::string* StaticContractFormation::mutable_bodyofagreement() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.BodyOfAgreement)
  return _internal_mutable_bodyofagreement();
}
inline const std::string& StaticContractFormation::_internal_bodyofagreement() const {
  return bodyofagreement_.Get();
}
inline void StaticContractFormation::_internal_set_bodyofagreement(const std::string& value) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_bodyofagreement(std::string&& value) {
  
  bodyofagreement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.BodyOfAgreement)
}
inline void StaticContractFormation::set_bodyofagreement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.BodyOfAgreement)
}
inline void StaticContractFormation::set_bodyofagreement(const void* value,
    size_t size) {
  
  bodyofagreement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.BodyOfAgreement)
}
inline std::string* StaticContractFormation::_internal_mutable_bodyofagreement() {
  
  return bodyofagreement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_bodyofagreement() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.BodyOfAgreement)
  return bodyofagreement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_bodyofagreement(std::string* bodyofagreement) {
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bodyofagreement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.BodyOfAgreement)
}
inline std::string* StaticContractFormation::unsafe_arena_release_bodyofagreement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.BodyOfAgreement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bodyofagreement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_bodyofagreement(
    std::string* bodyofagreement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bodyofagreement != nullptr) {
    
  } else {
    
  }
  bodyofagreement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bodyofagreement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.BodyOfAgreement)
}

// string ContractType = 5;
inline void StaticContractFormation::clear_contracttype() {
  contracttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::contracttype() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractType)
  return _internal_contracttype();
}
inline void StaticContractFormation::set_contracttype(const std::string& value) {
  _internal_set_contracttype(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractType)
}
inline std::string* StaticContractFormation::mutable_contracttype() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.ContractType)
  return _internal_mutable_contracttype();
}
inline const std::string& StaticContractFormation::_internal_contracttype() const {
  return contracttype_.Get();
}
inline void StaticContractFormation::_internal_set_contracttype(const std::string& value) {
  
  contracttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_contracttype(std::string&& value) {
  
  contracttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.ContractType)
}
inline void StaticContractFormation::set_contracttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contracttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.ContractType)
}
inline void StaticContractFormation::set_contracttype(const char* value,
    size_t size) {
  
  contracttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.ContractType)
}
inline std::string* StaticContractFormation::_internal_mutable_contracttype() {
  
  return contracttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_contracttype() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.ContractType)
  return contracttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_contracttype(std::string* contracttype) {
  if (contracttype != nullptr) {
    
  } else {
    
  }
  contracttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contracttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.ContractType)
}
inline std::string* StaticContractFormation::unsafe_arena_release_contracttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.ContractType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contracttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_contracttype(
    std::string* contracttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contracttype != nullptr) {
    
  } else {
    
  }
  contracttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contracttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.ContractType)
}

// repeated .actions.DocumentField SupportingDocs = 6;
inline int StaticContractFormation::_internal_supportingdocs_size() const {
  return supportingdocs_.size();
}
inline int StaticContractFormation::supportingdocs_size() const {
  return _internal_supportingdocs_size();
}
inline void StaticContractFormation::clear_supportingdocs() {
  supportingdocs_.Clear();
}
inline ::actions::DocumentField* StaticContractFormation::mutable_supportingdocs(int index) {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.SupportingDocs)
  return supportingdocs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >*
StaticContractFormation::mutable_supportingdocs() {
  // @@protoc_insertion_point(field_mutable_list:actions.StaticContractFormation.SupportingDocs)
  return &supportingdocs_;
}
inline const ::actions::DocumentField& StaticContractFormation::_internal_supportingdocs(int index) const {
  return supportingdocs_.Get(index);
}
inline const ::actions::DocumentField& StaticContractFormation::supportingdocs(int index) const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.SupportingDocs)
  return _internal_supportingdocs(index);
}
inline ::actions::DocumentField* StaticContractFormation::_internal_add_supportingdocs() {
  return supportingdocs_.Add();
}
inline ::actions::DocumentField* StaticContractFormation::add_supportingdocs() {
  // @@protoc_insertion_point(field_add:actions.StaticContractFormation.SupportingDocs)
  return _internal_add_supportingdocs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DocumentField >&
StaticContractFormation::supportingdocs() const {
  // @@protoc_insertion_point(field_list:actions.StaticContractFormation.SupportingDocs)
  return supportingdocs_;
}

// uint32 ContractRevision = 7;
inline void StaticContractFormation::clear_contractrevision() {
  contractrevision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::_internal_contractrevision() const {
  return contractrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::contractrevision() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractRevision)
  return _internal_contractrevision();
}
inline void StaticContractFormation::_internal_set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractrevision_ = value;
}
inline void StaticContractFormation::set_contractrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractrevision(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractRevision)
}

// uint64 EffectiveDate = 10;
inline void StaticContractFormation::clear_effectivedate() {
  effectivedate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StaticContractFormation::_internal_effectivedate() const {
  return effectivedate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StaticContractFormation::effectivedate() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.EffectiveDate)
  return _internal_effectivedate();
}
inline void StaticContractFormation::_internal_set_effectivedate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  effectivedate_ = value;
}
inline void StaticContractFormation::set_effectivedate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_effectivedate(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.EffectiveDate)
}

// uint64 ContractExpiration = 11;
inline void StaticContractFormation::clear_contractexpiration() {
  contractexpiration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StaticContractFormation::_internal_contractexpiration() const {
  return contractexpiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StaticContractFormation::contractexpiration() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractExpiration)
  return _internal_contractexpiration();
}
inline void StaticContractFormation::_internal_set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  contractexpiration_ = value;
}
inline void StaticContractFormation::set_contractexpiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_contractexpiration(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractExpiration)
}

// string ContractURI = 12;
inline void StaticContractFormation::clear_contracturi() {
  contracturi_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::contracturi() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.ContractURI)
  return _internal_contracturi();
}
inline void StaticContractFormation::set_contracturi(const std::string& value) {
  _internal_set_contracturi(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.ContractURI)
}
inline std::string* StaticContractFormation::mutable_contracturi() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.ContractURI)
  return _internal_mutable_contracturi();
}
inline const std::string& StaticContractFormation::_internal_contracturi() const {
  return contracturi_.Get();
}
inline void StaticContractFormation::_internal_set_contracturi(const std::string& value) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_contracturi(std::string&& value) {
  
  contracturi_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.ContractURI)
}
inline void StaticContractFormation::set_contracturi(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.ContractURI)
}
inline void StaticContractFormation::set_contracturi(const char* value,
    size_t size) {
  
  contracturi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.ContractURI)
}
inline std::string* StaticContractFormation::_internal_mutable_contracturi() {
  
  return contracturi_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_contracturi() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.ContractURI)
  return contracturi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_contracturi(std::string* contracturi) {
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contracturi,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.ContractURI)
}
inline std::string* StaticContractFormation::unsafe_arena_release_contracturi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.ContractURI)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contracturi_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_contracturi(
    std::string* contracturi) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contracturi != nullptr) {
    
  } else {
    
  }
  contracturi_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contracturi, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.ContractURI)
}

// bytes PrevRevTxID = 13;
inline void StaticContractFormation::clear_prevrevtxid() {
  prevrevtxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::prevrevtxid() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.PrevRevTxID)
  return _internal_prevrevtxid();
}
inline void StaticContractFormation::set_prevrevtxid(const std::string& value) {
  _internal_set_prevrevtxid(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.PrevRevTxID)
}
inline std::string* StaticContractFormation::mutable_prevrevtxid() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.PrevRevTxID)
  return _internal_mutable_prevrevtxid();
}
inline const std::string& StaticContractFormation::_internal_prevrevtxid() const {
  return prevrevtxid_.Get();
}
inline void StaticContractFormation::_internal_set_prevrevtxid(const std::string& value) {
  
  prevrevtxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_prevrevtxid(std::string&& value) {
  
  prevrevtxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.PrevRevTxID)
}
inline void StaticContractFormation::set_prevrevtxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prevrevtxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.PrevRevTxID)
}
inline void StaticContractFormation::set_prevrevtxid(const void* value,
    size_t size) {
  
  prevrevtxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.PrevRevTxID)
}
inline std::string* StaticContractFormation::_internal_mutable_prevrevtxid() {
  
  return prevrevtxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_prevrevtxid() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.PrevRevTxID)
  return prevrevtxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_prevrevtxid(std::string* prevrevtxid) {
  if (prevrevtxid != nullptr) {
    
  } else {
    
  }
  prevrevtxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prevrevtxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.PrevRevTxID)
}
inline std::string* StaticContractFormation::unsafe_arena_release_prevrevtxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.PrevRevTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prevrevtxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_prevrevtxid(
    std::string* prevrevtxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prevrevtxid != nullptr) {
    
  } else {
    
  }
  prevrevtxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prevrevtxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.PrevRevTxID)
}

// repeated .actions.EntityField Entities = 14;
inline int StaticContractFormation::_internal_entities_size() const {
  return entities_.size();
}
inline int StaticContractFormation::entities_size() const {
  return _internal_entities_size();
}
inline void StaticContractFormation::clear_entities() {
  entities_.Clear();
}
inline ::actions::EntityField* StaticContractFormation::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.Entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::EntityField >*
StaticContractFormation::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:actions.StaticContractFormation.Entities)
  return &entities_;
}
inline const ::actions::EntityField& StaticContractFormation::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::actions::EntityField& StaticContractFormation::entities(int index) const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.Entities)
  return _internal_entities(index);
}
inline ::actions::EntityField* StaticContractFormation::_internal_add_entities() {
  return entities_.Add();
}
inline ::actions::EntityField* StaticContractFormation::add_entities() {
  // @@protoc_insertion_point(field_add:actions.StaticContractFormation.Entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::EntityField >&
StaticContractFormation::entities() const {
  // @@protoc_insertion_point(field_list:actions.StaticContractFormation.Entities)
  return entities_;
}

// .actions.OracleField EntityOracle = 15;
inline bool StaticContractFormation::_internal_has_entityoracle() const {
  return this != internal_default_instance() && entityoracle_ != nullptr;
}
inline bool StaticContractFormation::has_entityoracle() const {
  return _internal_has_entityoracle();
}
inline void StaticContractFormation::clear_entityoracle() {
  if (GetArena() == nullptr && entityoracle_ != nullptr) {
    delete entityoracle_;
  }
  entityoracle_ = nullptr;
}
inline const ::actions::OracleField& StaticContractFormation::_internal_entityoracle() const {
  const ::actions::OracleField* p = entityoracle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::OracleField*>(
      &::actions::_OracleField_default_instance_);
}
inline const ::actions::OracleField& StaticContractFormation::entityoracle() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.EntityOracle)
  return _internal_entityoracle();
}
inline void StaticContractFormation::unsafe_arena_set_allocated_entityoracle(
    ::actions::OracleField* entityoracle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entityoracle_);
  }
  entityoracle_ = entityoracle;
  if (entityoracle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.EntityOracle)
}
inline ::actions::OracleField* StaticContractFormation::release_entityoracle() {
  auto temp = unsafe_arena_release_entityoracle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::OracleField* StaticContractFormation::unsafe_arena_release_entityoracle() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.EntityOracle)
  
  ::actions::OracleField* temp = entityoracle_;
  entityoracle_ = nullptr;
  return temp;
}
inline ::actions::OracleField* StaticContractFormation::_internal_mutable_entityoracle() {
  
  if (entityoracle_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::OracleField>(GetArena());
    entityoracle_ = p;
  }
  return entityoracle_;
}
inline ::actions::OracleField* StaticContractFormation::mutable_entityoracle() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.EntityOracle)
  return _internal_mutable_entityoracle();
}
inline void StaticContractFormation::set_allocated_entityoracle(::actions::OracleField* entityoracle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entityoracle_;
  }
  if (entityoracle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entityoracle);
    if (message_arena != submessage_arena) {
      entityoracle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entityoracle, submessage_arena);
    }
    
  } else {
    
  }
  entityoracle_ = entityoracle;
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.EntityOracle)
}

// bytes EntityOracleSignature = 16;
inline void StaticContractFormation::clear_entityoraclesignature() {
  entityoraclesignature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::entityoraclesignature() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.EntityOracleSignature)
  return _internal_entityoraclesignature();
}
inline void StaticContractFormation::set_entityoraclesignature(const std::string& value) {
  _internal_set_entityoraclesignature(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.EntityOracleSignature)
}
inline std::string* StaticContractFormation::mutable_entityoraclesignature() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.EntityOracleSignature)
  return _internal_mutable_entityoraclesignature();
}
inline const std::string& StaticContractFormation::_internal_entityoraclesignature() const {
  return entityoraclesignature_.Get();
}
inline void StaticContractFormation::_internal_set_entityoraclesignature(const std::string& value) {
  
  entityoraclesignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_entityoraclesignature(std::string&& value) {
  
  entityoraclesignature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.EntityOracleSignature)
}
inline void StaticContractFormation::set_entityoraclesignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entityoraclesignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.EntityOracleSignature)
}
inline void StaticContractFormation::set_entityoraclesignature(const void* value,
    size_t size) {
  
  entityoraclesignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.EntityOracleSignature)
}
inline std::string* StaticContractFormation::_internal_mutable_entityoraclesignature() {
  
  return entityoraclesignature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_entityoraclesignature() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.EntityOracleSignature)
  return entityoraclesignature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_entityoraclesignature(std::string* entityoraclesignature) {
  if (entityoraclesignature != nullptr) {
    
  } else {
    
  }
  entityoraclesignature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entityoraclesignature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.EntityOracleSignature)
}
inline std::string* StaticContractFormation::unsafe_arena_release_entityoraclesignature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.EntityOracleSignature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entityoraclesignature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_entityoraclesignature(
    std::string* entityoraclesignature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entityoraclesignature != nullptr) {
    
  } else {
    
  }
  entityoraclesignature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entityoraclesignature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.EntityOracleSignature)
}

// uint32 EntityOracleSigBlockHeight = 17;
inline void StaticContractFormation::clear_entityoraclesigblockheight() {
  entityoraclesigblockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::_internal_entityoraclesigblockheight() const {
  return entityoraclesigblockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StaticContractFormation::entityoraclesigblockheight() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.EntityOracleSigBlockHeight)
  return _internal_entityoraclesigblockheight();
}
inline void StaticContractFormation::_internal_set_entityoraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entityoraclesigblockheight_ = value;
}
inline void StaticContractFormation::set_entityoraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entityoraclesigblockheight(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.EntityOracleSigBlockHeight)
}

// string GoverningLaw = 18;
inline void StaticContractFormation::clear_governinglaw() {
  governinglaw_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::governinglaw() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.GoverningLaw)
  return _internal_governinglaw();
}
inline void StaticContractFormation::set_governinglaw(const std::string& value) {
  _internal_set_governinglaw(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.GoverningLaw)
}
inline std::string* StaticContractFormation::mutable_governinglaw() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.GoverningLaw)
  return _internal_mutable_governinglaw();
}
inline const std::string& StaticContractFormation::_internal_governinglaw() const {
  return governinglaw_.Get();
}
inline void StaticContractFormation::_internal_set_governinglaw(const std::string& value) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_governinglaw(std::string&& value) {
  
  governinglaw_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.GoverningLaw)
}
inline void StaticContractFormation::set_governinglaw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.GoverningLaw)
}
inline void StaticContractFormation::set_governinglaw(const char* value,
    size_t size) {
  
  governinglaw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.GoverningLaw)
}
inline std::string* StaticContractFormation::_internal_mutable_governinglaw() {
  
  return governinglaw_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_governinglaw() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.GoverningLaw)
  return governinglaw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_governinglaw(std::string* governinglaw) {
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), governinglaw,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.GoverningLaw)
}
inline std::string* StaticContractFormation::unsafe_arena_release_governinglaw() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.GoverningLaw)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return governinglaw_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_governinglaw(
    std::string* governinglaw) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (governinglaw != nullptr) {
    
  } else {
    
  }
  governinglaw_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      governinglaw, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.GoverningLaw)
}

// string Jurisdiction = 19;
inline void StaticContractFormation::clear_jurisdiction() {
  jurisdiction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StaticContractFormation::jurisdiction() const {
  // @@protoc_insertion_point(field_get:actions.StaticContractFormation.Jurisdiction)
  return _internal_jurisdiction();
}
inline void StaticContractFormation::set_jurisdiction(const std::string& value) {
  _internal_set_jurisdiction(value);
  // @@protoc_insertion_point(field_set:actions.StaticContractFormation.Jurisdiction)
}
inline std::string* StaticContractFormation::mutable_jurisdiction() {
  // @@protoc_insertion_point(field_mutable:actions.StaticContractFormation.Jurisdiction)
  return _internal_mutable_jurisdiction();
}
inline const std::string& StaticContractFormation::_internal_jurisdiction() const {
  return jurisdiction_.Get();
}
inline void StaticContractFormation::_internal_set_jurisdiction(const std::string& value) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StaticContractFormation::set_jurisdiction(std::string&& value) {
  
  jurisdiction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.StaticContractFormation.Jurisdiction)
}
inline void StaticContractFormation::set_jurisdiction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.StaticContractFormation.Jurisdiction)
}
inline void StaticContractFormation::set_jurisdiction(const char* value,
    size_t size) {
  
  jurisdiction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.StaticContractFormation.Jurisdiction)
}
inline std::string* StaticContractFormation::_internal_mutable_jurisdiction() {
  
  return jurisdiction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StaticContractFormation::release_jurisdiction() {
  // @@protoc_insertion_point(field_release:actions.StaticContractFormation.Jurisdiction)
  return jurisdiction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StaticContractFormation::set_allocated_jurisdiction(std::string* jurisdiction) {
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jurisdiction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.StaticContractFormation.Jurisdiction)
}
inline std::string* StaticContractFormation::unsafe_arena_release_jurisdiction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.StaticContractFormation.Jurisdiction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jurisdiction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StaticContractFormation::unsafe_arena_set_allocated_jurisdiction(
    std::string* jurisdiction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jurisdiction != nullptr) {
    
  } else {
    
  }
  jurisdiction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jurisdiction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.StaticContractFormation.Jurisdiction)
}

// -------------------------------------------------------------------

// ContractAddressChange

// bytes NewContractAddress = 1;
inline void ContractAddressChange::clear_newcontractaddress() {
  newcontractaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ContractAddressChange::newcontractaddress() const {
  // @@protoc_insertion_point(field_get:actions.ContractAddressChange.NewContractAddress)
  return _internal_newcontractaddress();
}
inline void ContractAddressChange::set_newcontractaddress(const std::string& value) {
  _internal_set_newcontractaddress(value);
  // @@protoc_insertion_point(field_set:actions.ContractAddressChange.NewContractAddress)
}
inline std::string* ContractAddressChange::mutable_newcontractaddress() {
  // @@protoc_insertion_point(field_mutable:actions.ContractAddressChange.NewContractAddress)
  return _internal_mutable_newcontractaddress();
}
inline const std::string& ContractAddressChange::_internal_newcontractaddress() const {
  return newcontractaddress_.Get();
}
inline void ContractAddressChange::_internal_set_newcontractaddress(const std::string& value) {
  
  newcontractaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ContractAddressChange::set_newcontractaddress(std::string&& value) {
  
  newcontractaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ContractAddressChange.NewContractAddress)
}
inline void ContractAddressChange::set_newcontractaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newcontractaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ContractAddressChange.NewContractAddress)
}
inline void ContractAddressChange::set_newcontractaddress(const void* value,
    size_t size) {
  
  newcontractaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ContractAddressChange.NewContractAddress)
}
inline std::string* ContractAddressChange::_internal_mutable_newcontractaddress() {
  
  return newcontractaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ContractAddressChange::release_newcontractaddress() {
  // @@protoc_insertion_point(field_release:actions.ContractAddressChange.NewContractAddress)
  return newcontractaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ContractAddressChange::set_allocated_newcontractaddress(std::string* newcontractaddress) {
  if (newcontractaddress != nullptr) {
    
  } else {
    
  }
  newcontractaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newcontractaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ContractAddressChange.NewContractAddress)
}
inline std::string* ContractAddressChange::unsafe_arena_release_newcontractaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ContractAddressChange.NewContractAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return newcontractaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ContractAddressChange::unsafe_arena_set_allocated_newcontractaddress(
    std::string* newcontractaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (newcontractaddress != nullptr) {
    
  } else {
    
  }
  newcontractaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      newcontractaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ContractAddressChange.NewContractAddress)
}

// uint64 Timestamp = 2;
inline void ContractAddressChange::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractAddressChange::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ContractAddressChange::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.ContractAddressChange.Timestamp)
  return _internal_timestamp();
}
inline void ContractAddressChange::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ContractAddressChange::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.ContractAddressChange.Timestamp)
}

// -------------------------------------------------------------------

// BodyOfAgreementOffer

// repeated .actions.ChapterField Chapters = 1;
inline int BodyOfAgreementOffer::_internal_chapters_size() const {
  return chapters_.size();
}
inline int BodyOfAgreementOffer::chapters_size() const {
  return _internal_chapters_size();
}
inline void BodyOfAgreementOffer::clear_chapters() {
  chapters_.Clear();
}
inline ::actions::ChapterField* BodyOfAgreementOffer::mutable_chapters(int index) {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementOffer.Chapters)
  return chapters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >*
BodyOfAgreementOffer::mutable_chapters() {
  // @@protoc_insertion_point(field_mutable_list:actions.BodyOfAgreementOffer.Chapters)
  return &chapters_;
}
inline const ::actions::ChapterField& BodyOfAgreementOffer::_internal_chapters(int index) const {
  return chapters_.Get(index);
}
inline const ::actions::ChapterField& BodyOfAgreementOffer::chapters(int index) const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementOffer.Chapters)
  return _internal_chapters(index);
}
inline ::actions::ChapterField* BodyOfAgreementOffer::_internal_add_chapters() {
  return chapters_.Add();
}
inline ::actions::ChapterField* BodyOfAgreementOffer::add_chapters() {
  // @@protoc_insertion_point(field_add:actions.BodyOfAgreementOffer.Chapters)
  return _internal_add_chapters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >&
BodyOfAgreementOffer::chapters() const {
  // @@protoc_insertion_point(field_list:actions.BodyOfAgreementOffer.Chapters)
  return chapters_;
}

// repeated .actions.DefinedTermField Definitions = 2;
inline int BodyOfAgreementOffer::_internal_definitions_size() const {
  return definitions_.size();
}
inline int BodyOfAgreementOffer::definitions_size() const {
  return _internal_definitions_size();
}
inline void BodyOfAgreementOffer::clear_definitions() {
  definitions_.Clear();
}
inline ::actions::DefinedTermField* BodyOfAgreementOffer::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementOffer.Definitions)
  return definitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >*
BodyOfAgreementOffer::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:actions.BodyOfAgreementOffer.Definitions)
  return &definitions_;
}
inline const ::actions::DefinedTermField& BodyOfAgreementOffer::_internal_definitions(int index) const {
  return definitions_.Get(index);
}
inline const ::actions::DefinedTermField& BodyOfAgreementOffer::definitions(int index) const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementOffer.Definitions)
  return _internal_definitions(index);
}
inline ::actions::DefinedTermField* BodyOfAgreementOffer::_internal_add_definitions() {
  return definitions_.Add();
}
inline ::actions::DefinedTermField* BodyOfAgreementOffer::add_definitions() {
  // @@protoc_insertion_point(field_add:actions.BodyOfAgreementOffer.Definitions)
  return _internal_add_definitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >&
BodyOfAgreementOffer::definitions() const {
  // @@protoc_insertion_point(field_list:actions.BodyOfAgreementOffer.Definitions)
  return definitions_;
}

// -------------------------------------------------------------------

// BodyOfAgreementFormation

// repeated .actions.ChapterField Chapters = 1;
inline int BodyOfAgreementFormation::_internal_chapters_size() const {
  return chapters_.size();
}
inline int BodyOfAgreementFormation::chapters_size() const {
  return _internal_chapters_size();
}
inline void BodyOfAgreementFormation::clear_chapters() {
  chapters_.Clear();
}
inline ::actions::ChapterField* BodyOfAgreementFormation::mutable_chapters(int index) {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementFormation.Chapters)
  return chapters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >*
BodyOfAgreementFormation::mutable_chapters() {
  // @@protoc_insertion_point(field_mutable_list:actions.BodyOfAgreementFormation.Chapters)
  return &chapters_;
}
inline const ::actions::ChapterField& BodyOfAgreementFormation::_internal_chapters(int index) const {
  return chapters_.Get(index);
}
inline const ::actions::ChapterField& BodyOfAgreementFormation::chapters(int index) const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementFormation.Chapters)
  return _internal_chapters(index);
}
inline ::actions::ChapterField* BodyOfAgreementFormation::_internal_add_chapters() {
  return chapters_.Add();
}
inline ::actions::ChapterField* BodyOfAgreementFormation::add_chapters() {
  // @@protoc_insertion_point(field_add:actions.BodyOfAgreementFormation.Chapters)
  return _internal_add_chapters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ChapterField >&
BodyOfAgreementFormation::chapters() const {
  // @@protoc_insertion_point(field_list:actions.BodyOfAgreementFormation.Chapters)
  return chapters_;
}

// repeated .actions.DefinedTermField Definitions = 2;
inline int BodyOfAgreementFormation::_internal_definitions_size() const {
  return definitions_.size();
}
inline int BodyOfAgreementFormation::definitions_size() const {
  return _internal_definitions_size();
}
inline void BodyOfAgreementFormation::clear_definitions() {
  definitions_.Clear();
}
inline ::actions::DefinedTermField* BodyOfAgreementFormation::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementFormation.Definitions)
  return definitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >*
BodyOfAgreementFormation::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:actions.BodyOfAgreementFormation.Definitions)
  return &definitions_;
}
inline const ::actions::DefinedTermField& BodyOfAgreementFormation::_internal_definitions(int index) const {
  return definitions_.Get(index);
}
inline const ::actions::DefinedTermField& BodyOfAgreementFormation::definitions(int index) const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementFormation.Definitions)
  return _internal_definitions(index);
}
inline ::actions::DefinedTermField* BodyOfAgreementFormation::_internal_add_definitions() {
  return definitions_.Add();
}
inline ::actions::DefinedTermField* BodyOfAgreementFormation::add_definitions() {
  // @@protoc_insertion_point(field_add:actions.BodyOfAgreementFormation.Definitions)
  return _internal_add_definitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::DefinedTermField >&
BodyOfAgreementFormation::definitions() const {
  // @@protoc_insertion_point(field_list:actions.BodyOfAgreementFormation.Definitions)
  return definitions_;
}

// uint32 Revision = 3;
inline void BodyOfAgreementFormation::clear_revision() {
  revision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BodyOfAgreementFormation::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BodyOfAgreementFormation::revision() const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementFormation.Revision)
  return _internal_revision();
}
inline void BodyOfAgreementFormation::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  revision_ = value;
}
inline void BodyOfAgreementFormation::set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:actions.BodyOfAgreementFormation.Revision)
}

// uint64 Timestamp = 4;
inline void BodyOfAgreementFormation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BodyOfAgreementFormation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BodyOfAgreementFormation::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementFormation.Timestamp)
  return _internal_timestamp();
}
inline void BodyOfAgreementFormation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void BodyOfAgreementFormation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.BodyOfAgreementFormation.Timestamp)
}

// -------------------------------------------------------------------

// BodyOfAgreementAmendment

// uint32 Revision = 1;
inline void BodyOfAgreementAmendment::clear_revision() {
  revision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BodyOfAgreementAmendment::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BodyOfAgreementAmendment::revision() const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementAmendment.Revision)
  return _internal_revision();
}
inline void BodyOfAgreementAmendment::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  revision_ = value;
}
inline void BodyOfAgreementAmendment::set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:actions.BodyOfAgreementAmendment.Revision)
}

// repeated .actions.AmendmentField Amendments = 2;
inline int BodyOfAgreementAmendment::_internal_amendments_size() const {
  return amendments_.size();
}
inline int BodyOfAgreementAmendment::amendments_size() const {
  return _internal_amendments_size();
}
inline void BodyOfAgreementAmendment::clear_amendments() {
  amendments_.Clear();
}
inline ::actions::AmendmentField* BodyOfAgreementAmendment::mutable_amendments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementAmendment.Amendments)
  return amendments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
BodyOfAgreementAmendment::mutable_amendments() {
  // @@protoc_insertion_point(field_mutable_list:actions.BodyOfAgreementAmendment.Amendments)
  return &amendments_;
}
inline const ::actions::AmendmentField& BodyOfAgreementAmendment::_internal_amendments(int index) const {
  return amendments_.Get(index);
}
inline const ::actions::AmendmentField& BodyOfAgreementAmendment::amendments(int index) const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementAmendment.Amendments)
  return _internal_amendments(index);
}
inline ::actions::AmendmentField* BodyOfAgreementAmendment::_internal_add_amendments() {
  return amendments_.Add();
}
inline ::actions::AmendmentField* BodyOfAgreementAmendment::add_amendments() {
  // @@protoc_insertion_point(field_add:actions.BodyOfAgreementAmendment.Amendments)
  return _internal_add_amendments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
BodyOfAgreementAmendment::amendments() const {
  // @@protoc_insertion_point(field_list:actions.BodyOfAgreementAmendment.Amendments)
  return amendments_;
}

// bytes RefTxID = 3;
inline void BodyOfAgreementAmendment::clear_reftxid() {
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BodyOfAgreementAmendment::reftxid() const {
  // @@protoc_insertion_point(field_get:actions.BodyOfAgreementAmendment.RefTxID)
  return _internal_reftxid();
}
inline void BodyOfAgreementAmendment::set_reftxid(const std::string& value) {
  _internal_set_reftxid(value);
  // @@protoc_insertion_point(field_set:actions.BodyOfAgreementAmendment.RefTxID)
}
inline std::string* BodyOfAgreementAmendment::mutable_reftxid() {
  // @@protoc_insertion_point(field_mutable:actions.BodyOfAgreementAmendment.RefTxID)
  return _internal_mutable_reftxid();
}
inline const std::string& BodyOfAgreementAmendment::_internal_reftxid() const {
  return reftxid_.Get();
}
inline void BodyOfAgreementAmendment::_internal_set_reftxid(const std::string& value) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BodyOfAgreementAmendment::set_reftxid(std::string&& value) {
  
  reftxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.BodyOfAgreementAmendment.RefTxID)
}
inline void BodyOfAgreementAmendment::set_reftxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.BodyOfAgreementAmendment.RefTxID)
}
inline void BodyOfAgreementAmendment::set_reftxid(const void* value,
    size_t size) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.BodyOfAgreementAmendment.RefTxID)
}
inline std::string* BodyOfAgreementAmendment::_internal_mutable_reftxid() {
  
  return reftxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BodyOfAgreementAmendment::release_reftxid() {
  // @@protoc_insertion_point(field_release:actions.BodyOfAgreementAmendment.RefTxID)
  return reftxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BodyOfAgreementAmendment::set_allocated_reftxid(std::string* reftxid) {
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reftxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.BodyOfAgreementAmendment.RefTxID)
}
inline std::string* BodyOfAgreementAmendment::unsafe_arena_release_reftxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.BodyOfAgreementAmendment.RefTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reftxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BodyOfAgreementAmendment::unsafe_arena_set_allocated_reftxid(
    std::string* reftxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reftxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.BodyOfAgreementAmendment.RefTxID)
}

// -------------------------------------------------------------------

// InstrumentDefinition

// bytes InstrumentPermissions = 1;
inline void InstrumentDefinition::clear_instrumentpermissions() {
  instrumentpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentDefinition::instrumentpermissions() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.InstrumentPermissions)
  return _internal_instrumentpermissions();
}
inline void InstrumentDefinition::set_instrumentpermissions(const std::string& value) {
  _internal_set_instrumentpermissions(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.InstrumentPermissions)
}
inline std::string* InstrumentDefinition::mutable_instrumentpermissions() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentDefinition.InstrumentPermissions)
  return _internal_mutable_instrumentpermissions();
}
inline const std::string& InstrumentDefinition::_internal_instrumentpermissions() const {
  return instrumentpermissions_.Get();
}
inline void InstrumentDefinition::_internal_set_instrumentpermissions(const std::string& value) {
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentDefinition::set_instrumentpermissions(std::string&& value) {
  
  instrumentpermissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentDefinition.InstrumentPermissions)
}
inline void InstrumentDefinition::set_instrumentpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentDefinition.InstrumentPermissions)
}
inline void InstrumentDefinition::set_instrumentpermissions(const void* value,
    size_t size) {
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentDefinition.InstrumentPermissions)
}
inline std::string* InstrumentDefinition::_internal_mutable_instrumentpermissions() {
  
  return instrumentpermissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentDefinition::release_instrumentpermissions() {
  // @@protoc_insertion_point(field_release:actions.InstrumentDefinition.InstrumentPermissions)
  return instrumentpermissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentDefinition::set_allocated_instrumentpermissions(std::string* instrumentpermissions) {
  if (instrumentpermissions != nullptr) {
    
  } else {
    
  }
  instrumentpermissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentpermissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentDefinition.InstrumentPermissions)
}
inline std::string* InstrumentDefinition::unsafe_arena_release_instrumentpermissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentDefinition.InstrumentPermissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentpermissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentDefinition::unsafe_arena_set_allocated_instrumentpermissions(
    std::string* instrumentpermissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentpermissions != nullptr) {
    
  } else {
    
  }
  instrumentpermissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentpermissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentDefinition.InstrumentPermissions)
}

// bool EnforcementOrdersPermitted = 4;
inline void InstrumentDefinition::clear_enforcementorderspermitted() {
  enforcementorderspermitted_ = false;
}
inline bool InstrumentDefinition::_internal_enforcementorderspermitted() const {
  return enforcementorderspermitted_;
}
inline bool InstrumentDefinition::enforcementorderspermitted() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.EnforcementOrdersPermitted)
  return _internal_enforcementorderspermitted();
}
inline void InstrumentDefinition::_internal_set_enforcementorderspermitted(bool value) {
  
  enforcementorderspermitted_ = value;
}
inline void InstrumentDefinition::set_enforcementorderspermitted(bool value) {
  _internal_set_enforcementorderspermitted(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.EnforcementOrdersPermitted)
}

// bool VotingRights = 5;
inline void InstrumentDefinition::clear_votingrights() {
  votingrights_ = false;
}
inline bool InstrumentDefinition::_internal_votingrights() const {
  return votingrights_;
}
inline bool InstrumentDefinition::votingrights() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.VotingRights)
  return _internal_votingrights();
}
inline void InstrumentDefinition::_internal_set_votingrights(bool value) {
  
  votingrights_ = value;
}
inline void InstrumentDefinition::set_votingrights(bool value) {
  _internal_set_votingrights(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.VotingRights)
}

// uint32 VoteMultiplier = 6;
inline void InstrumentDefinition::clear_votemultiplier() {
  votemultiplier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentDefinition::_internal_votemultiplier() const {
  return votemultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentDefinition::votemultiplier() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.VoteMultiplier)
  return _internal_votemultiplier();
}
inline void InstrumentDefinition::_internal_set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  votemultiplier_ = value;
}
inline void InstrumentDefinition::set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votemultiplier(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.VoteMultiplier)
}

// bool AdministrationProposal = 7;
inline void InstrumentDefinition::clear_administrationproposal() {
  administrationproposal_ = false;
}
inline bool InstrumentDefinition::_internal_administrationproposal() const {
  return administrationproposal_;
}
inline bool InstrumentDefinition::administrationproposal() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.AdministrationProposal)
  return _internal_administrationproposal();
}
inline void InstrumentDefinition::_internal_set_administrationproposal(bool value) {
  
  administrationproposal_ = value;
}
inline void InstrumentDefinition::set_administrationproposal(bool value) {
  _internal_set_administrationproposal(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.AdministrationProposal)
}

// bool HolderProposal = 8;
inline void InstrumentDefinition::clear_holderproposal() {
  holderproposal_ = false;
}
inline bool InstrumentDefinition::_internal_holderproposal() const {
  return holderproposal_;
}
inline bool InstrumentDefinition::holderproposal() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.HolderProposal)
  return _internal_holderproposal();
}
inline void InstrumentDefinition::_internal_set_holderproposal(bool value) {
  
  holderproposal_ = value;
}
inline void InstrumentDefinition::set_holderproposal(bool value) {
  _internal_set_holderproposal(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.HolderProposal)
}

// uint32 InstrumentModificationGovernance = 9;
inline void InstrumentDefinition::clear_instrumentmodificationgovernance() {
  instrumentmodificationgovernance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentDefinition::_internal_instrumentmodificationgovernance() const {
  return instrumentmodificationgovernance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentDefinition::instrumentmodificationgovernance() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.InstrumentModificationGovernance)
  return _internal_instrumentmodificationgovernance();
}
inline void InstrumentDefinition::_internal_set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instrumentmodificationgovernance_ = value;
}
inline void InstrumentDefinition::set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instrumentmodificationgovernance(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.InstrumentModificationGovernance)
}

// uint64 AuthorizedTokenQty = 10;
inline void InstrumentDefinition::clear_authorizedtokenqty() {
  authorizedtokenqty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentDefinition::_internal_authorizedtokenqty() const {
  return authorizedtokenqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentDefinition::authorizedtokenqty() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.AuthorizedTokenQty)
  return _internal_authorizedtokenqty();
}
inline void InstrumentDefinition::_internal_set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  authorizedtokenqty_ = value;
}
inline void InstrumentDefinition::set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authorizedtokenqty(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.AuthorizedTokenQty)
}

// string InstrumentType = 11;
inline void InstrumentDefinition::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentDefinition::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.InstrumentType)
  return _internal_instrumenttype();
}
inline void InstrumentDefinition::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.InstrumentType)
}
inline std::string* InstrumentDefinition::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentDefinition.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& InstrumentDefinition::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void InstrumentDefinition::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentDefinition::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentDefinition.InstrumentType)
}
inline void InstrumentDefinition::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentDefinition.InstrumentType)
}
inline void InstrumentDefinition::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentDefinition.InstrumentType)
}
inline std::string* InstrumentDefinition::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentDefinition::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.InstrumentDefinition.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentDefinition::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentDefinition.InstrumentType)
}
inline std::string* InstrumentDefinition::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentDefinition.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentDefinition::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentDefinition.InstrumentType)
}

// bytes InstrumentPayload = 12;
inline void InstrumentDefinition::clear_instrumentpayload() {
  instrumentpayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentDefinition::instrumentpayload() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.InstrumentPayload)
  return _internal_instrumentpayload();
}
inline void InstrumentDefinition::set_instrumentpayload(const std::string& value) {
  _internal_set_instrumentpayload(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.InstrumentPayload)
}
inline std::string* InstrumentDefinition::mutable_instrumentpayload() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentDefinition.InstrumentPayload)
  return _internal_mutable_instrumentpayload();
}
inline const std::string& InstrumentDefinition::_internal_instrumentpayload() const {
  return instrumentpayload_.Get();
}
inline void InstrumentDefinition::_internal_set_instrumentpayload(const std::string& value) {
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentDefinition::set_instrumentpayload(std::string&& value) {
  
  instrumentpayload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentDefinition.InstrumentPayload)
}
inline void InstrumentDefinition::set_instrumentpayload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentDefinition.InstrumentPayload)
}
inline void InstrumentDefinition::set_instrumentpayload(const void* value,
    size_t size) {
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentDefinition.InstrumentPayload)
}
inline std::string* InstrumentDefinition::_internal_mutable_instrumentpayload() {
  
  return instrumentpayload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentDefinition::release_instrumentpayload() {
  // @@protoc_insertion_point(field_release:actions.InstrumentDefinition.InstrumentPayload)
  return instrumentpayload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentDefinition::set_allocated_instrumentpayload(std::string* instrumentpayload) {
  if (instrumentpayload != nullptr) {
    
  } else {
    
  }
  instrumentpayload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentpayload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentDefinition.InstrumentPayload)
}
inline std::string* InstrumentDefinition::unsafe_arena_release_instrumentpayload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentDefinition.InstrumentPayload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentpayload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentDefinition::unsafe_arena_set_allocated_instrumentpayload(
    std::string* instrumentpayload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentpayload != nullptr) {
    
  } else {
    
  }
  instrumentpayload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentpayload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentDefinition.InstrumentPayload)
}

// repeated string TradeRestrictions = 13;
inline int InstrumentDefinition::_internal_traderestrictions_size() const {
  return traderestrictions_.size();
}
inline int InstrumentDefinition::traderestrictions_size() const {
  return _internal_traderestrictions_size();
}
inline void InstrumentDefinition::clear_traderestrictions() {
  traderestrictions_.Clear();
}
inline std::string* InstrumentDefinition::add_traderestrictions() {
  // @@protoc_insertion_point(field_add_mutable:actions.InstrumentDefinition.TradeRestrictions)
  return _internal_add_traderestrictions();
}
inline const std::string& InstrumentDefinition::_internal_traderestrictions(int index) const {
  return traderestrictions_.Get(index);
}
inline const std::string& InstrumentDefinition::traderestrictions(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.TradeRestrictions)
  return _internal_traderestrictions(index);
}
inline std::string* InstrumentDefinition::mutable_traderestrictions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentDefinition.TradeRestrictions)
  return traderestrictions_.Mutable(index);
}
inline void InstrumentDefinition::set_traderestrictions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.TradeRestrictions)
  traderestrictions_.Mutable(index)->assign(value);
}
inline void InstrumentDefinition::set_traderestrictions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:actions.InstrumentDefinition.TradeRestrictions)
  traderestrictions_.Mutable(index)->assign(std::move(value));
}
inline void InstrumentDefinition::set_traderestrictions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  traderestrictions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:actions.InstrumentDefinition.TradeRestrictions)
}
inline void InstrumentDefinition::set_traderestrictions(int index, const char* value, size_t size) {
  traderestrictions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentDefinition.TradeRestrictions)
}
inline std::string* InstrumentDefinition::_internal_add_traderestrictions() {
  return traderestrictions_.Add();
}
inline void InstrumentDefinition::add_traderestrictions(const std::string& value) {
  traderestrictions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:actions.InstrumentDefinition.TradeRestrictions)
}
inline void InstrumentDefinition::add_traderestrictions(std::string&& value) {
  traderestrictions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:actions.InstrumentDefinition.TradeRestrictions)
}
inline void InstrumentDefinition::add_traderestrictions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  traderestrictions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:actions.InstrumentDefinition.TradeRestrictions)
}
inline void InstrumentDefinition::add_traderestrictions(const char* value, size_t size) {
  traderestrictions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:actions.InstrumentDefinition.TradeRestrictions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InstrumentDefinition::traderestrictions() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentDefinition.TradeRestrictions)
  return traderestrictions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InstrumentDefinition::mutable_traderestrictions() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentDefinition.TradeRestrictions)
  return &traderestrictions_;
}

// .actions.FeeField TransferFee = 14;
inline bool InstrumentDefinition::_internal_has_transferfee() const {
  return this != internal_default_instance() && transferfee_ != nullptr;
}
inline bool InstrumentDefinition::has_transferfee() const {
  return _internal_has_transferfee();
}
inline void InstrumentDefinition::clear_transferfee() {
  if (GetArena() == nullptr && transferfee_ != nullptr) {
    delete transferfee_;
  }
  transferfee_ = nullptr;
}
inline const ::actions::FeeField& InstrumentDefinition::_internal_transferfee() const {
  const ::actions::FeeField* p = transferfee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::FeeField*>(
      &::actions::_FeeField_default_instance_);
}
inline const ::actions::FeeField& InstrumentDefinition::transferfee() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentDefinition.TransferFee)
  return _internal_transferfee();
}
inline void InstrumentDefinition::unsafe_arena_set_allocated_transferfee(
    ::actions::FeeField* transferfee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transferfee_);
  }
  transferfee_ = transferfee;
  if (transferfee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentDefinition.TransferFee)
}
inline ::actions::FeeField* InstrumentDefinition::release_transferfee() {
  auto temp = unsafe_arena_release_transferfee();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::FeeField* InstrumentDefinition::unsafe_arena_release_transferfee() {
  // @@protoc_insertion_point(field_release:actions.InstrumentDefinition.TransferFee)
  
  ::actions::FeeField* temp = transferfee_;
  transferfee_ = nullptr;
  return temp;
}
inline ::actions::FeeField* InstrumentDefinition::_internal_mutable_transferfee() {
  
  if (transferfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::FeeField>(GetArena());
    transferfee_ = p;
  }
  return transferfee_;
}
inline ::actions::FeeField* InstrumentDefinition::mutable_transferfee() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentDefinition.TransferFee)
  return _internal_mutable_transferfee();
}
inline void InstrumentDefinition::set_allocated_transferfee(::actions::FeeField* transferfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transferfee_;
  }
  if (transferfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transferfee);
    if (message_arena != submessage_arena) {
      transferfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transferfee, submessage_arena);
    }
    
  } else {
    
  }
  transferfee_ = transferfee;
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentDefinition.TransferFee)
}

// -------------------------------------------------------------------

// InstrumentCreation

// bytes InstrumentCode = 1;
inline void InstrumentCreation::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentCreation::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentCode)
  return _internal_instrumentcode();
}
inline void InstrumentCreation::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentCode)
}
inline std::string* InstrumentCreation::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& InstrumentCreation::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void InstrumentCreation::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentCreation::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentCreation.InstrumentCode)
}
inline void InstrumentCreation::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentCreation.InstrumentCode)
}
inline void InstrumentCreation::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentCreation.InstrumentCode)
}
inline std::string* InstrumentCreation::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentCreation::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.InstrumentCreation.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentCreation::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentCreation.InstrumentCode)
}
inline std::string* InstrumentCreation::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentCreation.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentCreation::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentCreation.InstrumentCode)
}

// uint64 InstrumentIndex = 2;
inline void InstrumentCreation::clear_instrumentindex() {
  instrumentindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::_internal_instrumentindex() const {
  return instrumentindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::instrumentindex() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentIndex)
  return _internal_instrumentindex();
}
inline void InstrumentCreation::_internal_set_instrumentindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instrumentindex_ = value;
}
inline void InstrumentCreation::set_instrumentindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instrumentindex(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentIndex)
}

// bytes InstrumentPermissions = 3;
inline void InstrumentCreation::clear_instrumentpermissions() {
  instrumentpermissions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentCreation::instrumentpermissions() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentPermissions)
  return _internal_instrumentpermissions();
}
inline void InstrumentCreation::set_instrumentpermissions(const std::string& value) {
  _internal_set_instrumentpermissions(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentPermissions)
}
inline std::string* InstrumentCreation::mutable_instrumentpermissions() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.InstrumentPermissions)
  return _internal_mutable_instrumentpermissions();
}
inline const std::string& InstrumentCreation::_internal_instrumentpermissions() const {
  return instrumentpermissions_.Get();
}
inline void InstrumentCreation::_internal_set_instrumentpermissions(const std::string& value) {
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentCreation::set_instrumentpermissions(std::string&& value) {
  
  instrumentpermissions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentCreation.InstrumentPermissions)
}
inline void InstrumentCreation::set_instrumentpermissions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentCreation.InstrumentPermissions)
}
inline void InstrumentCreation::set_instrumentpermissions(const void* value,
    size_t size) {
  
  instrumentpermissions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentCreation.InstrumentPermissions)
}
inline std::string* InstrumentCreation::_internal_mutable_instrumentpermissions() {
  
  return instrumentpermissions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentCreation::release_instrumentpermissions() {
  // @@protoc_insertion_point(field_release:actions.InstrumentCreation.InstrumentPermissions)
  return instrumentpermissions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentCreation::set_allocated_instrumentpermissions(std::string* instrumentpermissions) {
  if (instrumentpermissions != nullptr) {
    
  } else {
    
  }
  instrumentpermissions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentpermissions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentCreation.InstrumentPermissions)
}
inline std::string* InstrumentCreation::unsafe_arena_release_instrumentpermissions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentCreation.InstrumentPermissions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentpermissions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentCreation::unsafe_arena_set_allocated_instrumentpermissions(
    std::string* instrumentpermissions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentpermissions != nullptr) {
    
  } else {
    
  }
  instrumentpermissions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentpermissions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentCreation.InstrumentPermissions)
}

// bool EnforcementOrdersPermitted = 6;
inline void InstrumentCreation::clear_enforcementorderspermitted() {
  enforcementorderspermitted_ = false;
}
inline bool InstrumentCreation::_internal_enforcementorderspermitted() const {
  return enforcementorderspermitted_;
}
inline bool InstrumentCreation::enforcementorderspermitted() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.EnforcementOrdersPermitted)
  return _internal_enforcementorderspermitted();
}
inline void InstrumentCreation::_internal_set_enforcementorderspermitted(bool value) {
  
  enforcementorderspermitted_ = value;
}
inline void InstrumentCreation::set_enforcementorderspermitted(bool value) {
  _internal_set_enforcementorderspermitted(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.EnforcementOrdersPermitted)
}

// bool VotingRights = 7;
inline void InstrumentCreation::clear_votingrights() {
  votingrights_ = false;
}
inline bool InstrumentCreation::_internal_votingrights() const {
  return votingrights_;
}
inline bool InstrumentCreation::votingrights() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.VotingRights)
  return _internal_votingrights();
}
inline void InstrumentCreation::_internal_set_votingrights(bool value) {
  
  votingrights_ = value;
}
inline void InstrumentCreation::set_votingrights(bool value) {
  _internal_set_votingrights(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.VotingRights)
}

// uint32 VoteMultiplier = 8;
inline void InstrumentCreation::clear_votemultiplier() {
  votemultiplier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::_internal_votemultiplier() const {
  return votemultiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::votemultiplier() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.VoteMultiplier)
  return _internal_votemultiplier();
}
inline void InstrumentCreation::_internal_set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  votemultiplier_ = value;
}
inline void InstrumentCreation::set_votemultiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votemultiplier(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.VoteMultiplier)
}

// bool AdministrationProposal = 9;
inline void InstrumentCreation::clear_administrationproposal() {
  administrationproposal_ = false;
}
inline bool InstrumentCreation::_internal_administrationproposal() const {
  return administrationproposal_;
}
inline bool InstrumentCreation::administrationproposal() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.AdministrationProposal)
  return _internal_administrationproposal();
}
inline void InstrumentCreation::_internal_set_administrationproposal(bool value) {
  
  administrationproposal_ = value;
}
inline void InstrumentCreation::set_administrationproposal(bool value) {
  _internal_set_administrationproposal(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.AdministrationProposal)
}

// bool HolderProposal = 10;
inline void InstrumentCreation::clear_holderproposal() {
  holderproposal_ = false;
}
inline bool InstrumentCreation::_internal_holderproposal() const {
  return holderproposal_;
}
inline bool InstrumentCreation::holderproposal() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.HolderProposal)
  return _internal_holderproposal();
}
inline void InstrumentCreation::_internal_set_holderproposal(bool value) {
  
  holderproposal_ = value;
}
inline void InstrumentCreation::set_holderproposal(bool value) {
  _internal_set_holderproposal(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.HolderProposal)
}

// uint32 InstrumentModificationGovernance = 11;
inline void InstrumentCreation::clear_instrumentmodificationgovernance() {
  instrumentmodificationgovernance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::_internal_instrumentmodificationgovernance() const {
  return instrumentmodificationgovernance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::instrumentmodificationgovernance() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentModificationGovernance)
  return _internal_instrumentmodificationgovernance();
}
inline void InstrumentCreation::_internal_set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instrumentmodificationgovernance_ = value;
}
inline void InstrumentCreation::set_instrumentmodificationgovernance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instrumentmodificationgovernance(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentModificationGovernance)
}

// uint64 AuthorizedTokenQty = 12;
inline void InstrumentCreation::clear_authorizedtokenqty() {
  authorizedtokenqty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::_internal_authorizedtokenqty() const {
  return authorizedtokenqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::authorizedtokenqty() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.AuthorizedTokenQty)
  return _internal_authorizedtokenqty();
}
inline void InstrumentCreation::_internal_set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  authorizedtokenqty_ = value;
}
inline void InstrumentCreation::set_authorizedtokenqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_authorizedtokenqty(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.AuthorizedTokenQty)
}

// string InstrumentType = 13;
inline void InstrumentCreation::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentCreation::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentType)
  return _internal_instrumenttype();
}
inline void InstrumentCreation::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentType)
}
inline std::string* InstrumentCreation::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& InstrumentCreation::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void InstrumentCreation::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentCreation::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentCreation.InstrumentType)
}
inline void InstrumentCreation::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentCreation.InstrumentType)
}
inline void InstrumentCreation::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentCreation.InstrumentType)
}
inline std::string* InstrumentCreation::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentCreation::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.InstrumentCreation.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentCreation::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentCreation.InstrumentType)
}
inline std::string* InstrumentCreation::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentCreation.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentCreation::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentCreation.InstrumentType)
}

// bytes InstrumentPayload = 14;
inline void InstrumentCreation::clear_instrumentpayload() {
  instrumentpayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentCreation::instrumentpayload() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentPayload)
  return _internal_instrumentpayload();
}
inline void InstrumentCreation::set_instrumentpayload(const std::string& value) {
  _internal_set_instrumentpayload(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentPayload)
}
inline std::string* InstrumentCreation::mutable_instrumentpayload() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.InstrumentPayload)
  return _internal_mutable_instrumentpayload();
}
inline const std::string& InstrumentCreation::_internal_instrumentpayload() const {
  return instrumentpayload_.Get();
}
inline void InstrumentCreation::_internal_set_instrumentpayload(const std::string& value) {
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentCreation::set_instrumentpayload(std::string&& value) {
  
  instrumentpayload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentCreation.InstrumentPayload)
}
inline void InstrumentCreation::set_instrumentpayload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentCreation.InstrumentPayload)
}
inline void InstrumentCreation::set_instrumentpayload(const void* value,
    size_t size) {
  
  instrumentpayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentCreation.InstrumentPayload)
}
inline std::string* InstrumentCreation::_internal_mutable_instrumentpayload() {
  
  return instrumentpayload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentCreation::release_instrumentpayload() {
  // @@protoc_insertion_point(field_release:actions.InstrumentCreation.InstrumentPayload)
  return instrumentpayload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentCreation::set_allocated_instrumentpayload(std::string* instrumentpayload) {
  if (instrumentpayload != nullptr) {
    
  } else {
    
  }
  instrumentpayload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentpayload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentCreation.InstrumentPayload)
}
inline std::string* InstrumentCreation::unsafe_arena_release_instrumentpayload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentCreation.InstrumentPayload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentpayload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentCreation::unsafe_arena_set_allocated_instrumentpayload(
    std::string* instrumentpayload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentpayload != nullptr) {
    
  } else {
    
  }
  instrumentpayload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentpayload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentCreation.InstrumentPayload)
}

// uint32 InstrumentRevision = 15;
inline void InstrumentCreation::clear_instrumentrevision() {
  instrumentrevision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::_internal_instrumentrevision() const {
  return instrumentrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentCreation::instrumentrevision() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.InstrumentRevision)
  return _internal_instrumentrevision();
}
inline void InstrumentCreation::_internal_set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instrumentrevision_ = value;
}
inline void InstrumentCreation::set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instrumentrevision(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.InstrumentRevision)
}

// uint64 Timestamp = 16;
inline void InstrumentCreation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentCreation::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.Timestamp)
  return _internal_timestamp();
}
inline void InstrumentCreation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void InstrumentCreation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.Timestamp)
}

// repeated string TradeRestrictions = 17;
inline int InstrumentCreation::_internal_traderestrictions_size() const {
  return traderestrictions_.size();
}
inline int InstrumentCreation::traderestrictions_size() const {
  return _internal_traderestrictions_size();
}
inline void InstrumentCreation::clear_traderestrictions() {
  traderestrictions_.Clear();
}
inline std::string* InstrumentCreation::add_traderestrictions() {
  // @@protoc_insertion_point(field_add_mutable:actions.InstrumentCreation.TradeRestrictions)
  return _internal_add_traderestrictions();
}
inline const std::string& InstrumentCreation::_internal_traderestrictions(int index) const {
  return traderestrictions_.Get(index);
}
inline const std::string& InstrumentCreation::traderestrictions(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.TradeRestrictions)
  return _internal_traderestrictions(index);
}
inline std::string* InstrumentCreation::mutable_traderestrictions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.TradeRestrictions)
  return traderestrictions_.Mutable(index);
}
inline void InstrumentCreation::set_traderestrictions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.TradeRestrictions)
  traderestrictions_.Mutable(index)->assign(value);
}
inline void InstrumentCreation::set_traderestrictions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:actions.InstrumentCreation.TradeRestrictions)
  traderestrictions_.Mutable(index)->assign(std::move(value));
}
inline void InstrumentCreation::set_traderestrictions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  traderestrictions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:actions.InstrumentCreation.TradeRestrictions)
}
inline void InstrumentCreation::set_traderestrictions(int index, const char* value, size_t size) {
  traderestrictions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentCreation.TradeRestrictions)
}
inline std::string* InstrumentCreation::_internal_add_traderestrictions() {
  return traderestrictions_.Add();
}
inline void InstrumentCreation::add_traderestrictions(const std::string& value) {
  traderestrictions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:actions.InstrumentCreation.TradeRestrictions)
}
inline void InstrumentCreation::add_traderestrictions(std::string&& value) {
  traderestrictions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:actions.InstrumentCreation.TradeRestrictions)
}
inline void InstrumentCreation::add_traderestrictions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  traderestrictions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:actions.InstrumentCreation.TradeRestrictions)
}
inline void InstrumentCreation::add_traderestrictions(const char* value, size_t size) {
  traderestrictions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:actions.InstrumentCreation.TradeRestrictions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InstrumentCreation::traderestrictions() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentCreation.TradeRestrictions)
  return traderestrictions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InstrumentCreation::mutable_traderestrictions() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentCreation.TradeRestrictions)
  return &traderestrictions_;
}

// .actions.FeeField TransferFee = 18;
inline bool InstrumentCreation::_internal_has_transferfee() const {
  return this != internal_default_instance() && transferfee_ != nullptr;
}
inline bool InstrumentCreation::has_transferfee() const {
  return _internal_has_transferfee();
}
inline void InstrumentCreation::clear_transferfee() {
  if (GetArena() == nullptr && transferfee_ != nullptr) {
    delete transferfee_;
  }
  transferfee_ = nullptr;
}
inline const ::actions::FeeField& InstrumentCreation::_internal_transferfee() const {
  const ::actions::FeeField* p = transferfee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::FeeField*>(
      &::actions::_FeeField_default_instance_);
}
inline const ::actions::FeeField& InstrumentCreation::transferfee() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentCreation.TransferFee)
  return _internal_transferfee();
}
inline void InstrumentCreation::unsafe_arena_set_allocated_transferfee(
    ::actions::FeeField* transferfee) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transferfee_);
  }
  transferfee_ = transferfee;
  if (transferfee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentCreation.TransferFee)
}
inline ::actions::FeeField* InstrumentCreation::release_transferfee() {
  auto temp = unsafe_arena_release_transferfee();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::FeeField* InstrumentCreation::unsafe_arena_release_transferfee() {
  // @@protoc_insertion_point(field_release:actions.InstrumentCreation.TransferFee)
  
  ::actions::FeeField* temp = transferfee_;
  transferfee_ = nullptr;
  return temp;
}
inline ::actions::FeeField* InstrumentCreation::_internal_mutable_transferfee() {
  
  if (transferfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::FeeField>(GetArena());
    transferfee_ = p;
  }
  return transferfee_;
}
inline ::actions::FeeField* InstrumentCreation::mutable_transferfee() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentCreation.TransferFee)
  return _internal_mutable_transferfee();
}
inline void InstrumentCreation::set_allocated_transferfee(::actions::FeeField* transferfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transferfee_;
  }
  if (transferfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transferfee);
    if (message_arena != submessage_arena) {
      transferfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transferfee, submessage_arena);
    }
    
  } else {
    
  }
  transferfee_ = transferfee;
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentCreation.TransferFee)
}

// -------------------------------------------------------------------

// InstrumentModification

// string InstrumentType = 1;
inline void InstrumentModification::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentModification::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentModification.InstrumentType)
  return _internal_instrumenttype();
}
inline void InstrumentModification::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentModification.InstrumentType)
}
inline std::string* InstrumentModification::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentModification.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& InstrumentModification::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void InstrumentModification::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentModification::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentModification.InstrumentType)
}
inline void InstrumentModification::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentModification.InstrumentType)
}
inline void InstrumentModification::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentModification.InstrumentType)
}
inline std::string* InstrumentModification::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentModification::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.InstrumentModification.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentModification::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentModification.InstrumentType)
}
inline std::string* InstrumentModification::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentModification.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentModification::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentModification.InstrumentType)
}

// bytes InstrumentCode = 2;
inline void InstrumentModification::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentModification::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentModification.InstrumentCode)
  return _internal_instrumentcode();
}
inline void InstrumentModification::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentModification.InstrumentCode)
}
inline std::string* InstrumentModification::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentModification.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& InstrumentModification::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void InstrumentModification::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentModification::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentModification.InstrumentCode)
}
inline void InstrumentModification::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentModification.InstrumentCode)
}
inline void InstrumentModification::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentModification.InstrumentCode)
}
inline std::string* InstrumentModification::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentModification::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.InstrumentModification.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentModification::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentModification.InstrumentCode)
}
inline std::string* InstrumentModification::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentModification.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentModification::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentModification.InstrumentCode)
}

// uint32 InstrumentRevision = 3;
inline void InstrumentModification::clear_instrumentrevision() {
  instrumentrevision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentModification::_internal_instrumentrevision() const {
  return instrumentrevision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentModification::instrumentrevision() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentModification.InstrumentRevision)
  return _internal_instrumentrevision();
}
inline void InstrumentModification::_internal_set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instrumentrevision_ = value;
}
inline void InstrumentModification::set_instrumentrevision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instrumentrevision(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentModification.InstrumentRevision)
}

// repeated .actions.AmendmentField Amendments = 4;
inline int InstrumentModification::_internal_amendments_size() const {
  return amendments_.size();
}
inline int InstrumentModification::amendments_size() const {
  return _internal_amendments_size();
}
inline void InstrumentModification::clear_amendments() {
  amendments_.Clear();
}
inline ::actions::AmendmentField* InstrumentModification::mutable_amendments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentModification.Amendments)
  return amendments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
InstrumentModification::mutable_amendments() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentModification.Amendments)
  return &amendments_;
}
inline const ::actions::AmendmentField& InstrumentModification::_internal_amendments(int index) const {
  return amendments_.Get(index);
}
inline const ::actions::AmendmentField& InstrumentModification::amendments(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentModification.Amendments)
  return _internal_amendments(index);
}
inline ::actions::AmendmentField* InstrumentModification::_internal_add_amendments() {
  return amendments_.Add();
}
inline ::actions::AmendmentField* InstrumentModification::add_amendments() {
  // @@protoc_insertion_point(field_add:actions.InstrumentModification.Amendments)
  return _internal_add_amendments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
InstrumentModification::amendments() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentModification.Amendments)
  return amendments_;
}

// bytes RefTxID = 5;
inline void InstrumentModification::clear_reftxid() {
  reftxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentModification::reftxid() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentModification.RefTxID)
  return _internal_reftxid();
}
inline void InstrumentModification::set_reftxid(const std::string& value) {
  _internal_set_reftxid(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentModification.RefTxID)
}
inline std::string* InstrumentModification::mutable_reftxid() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentModification.RefTxID)
  return _internal_mutable_reftxid();
}
inline const std::string& InstrumentModification::_internal_reftxid() const {
  return reftxid_.Get();
}
inline void InstrumentModification::_internal_set_reftxid(const std::string& value) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentModification::set_reftxid(std::string&& value) {
  
  reftxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentModification.RefTxID)
}
inline void InstrumentModification::set_reftxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentModification.RefTxID)
}
inline void InstrumentModification::set_reftxid(const void* value,
    size_t size) {
  
  reftxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentModification.RefTxID)
}
inline std::string* InstrumentModification::_internal_mutable_reftxid() {
  
  return reftxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentModification::release_reftxid() {
  // @@protoc_insertion_point(field_release:actions.InstrumentModification.RefTxID)
  return reftxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentModification::set_allocated_reftxid(std::string* reftxid) {
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reftxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentModification.RefTxID)
}
inline std::string* InstrumentModification::unsafe_arena_release_reftxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentModification.RefTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reftxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentModification::unsafe_arena_set_allocated_reftxid(
    std::string* reftxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reftxid != nullptr) {
    
  } else {
    
  }
  reftxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reftxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentModification.RefTxID)
}

// -------------------------------------------------------------------

// Transfer

// repeated .actions.InstrumentTransferField Instruments = 1;
inline int Transfer::_internal_instruments_size() const {
  return instruments_.size();
}
inline int Transfer::instruments_size() const {
  return _internal_instruments_size();
}
inline void Transfer::clear_instruments() {
  instruments_.Clear();
}
inline ::actions::InstrumentTransferField* Transfer::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Transfer.Instruments)
  return instruments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentTransferField >*
Transfer::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:actions.Transfer.Instruments)
  return &instruments_;
}
inline const ::actions::InstrumentTransferField& Transfer::_internal_instruments(int index) const {
  return instruments_.Get(index);
}
inline const ::actions::InstrumentTransferField& Transfer::instruments(int index) const {
  // @@protoc_insertion_point(field_get:actions.Transfer.Instruments)
  return _internal_instruments(index);
}
inline ::actions::InstrumentTransferField* Transfer::_internal_add_instruments() {
  return instruments_.Add();
}
inline ::actions::InstrumentTransferField* Transfer::add_instruments() {
  // @@protoc_insertion_point(field_add:actions.Transfer.Instruments)
  return _internal_add_instruments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentTransferField >&
Transfer::instruments() const {
  // @@protoc_insertion_point(field_list:actions.Transfer.Instruments)
  return instruments_;
}

// uint64 OfferExpiry = 2;
inline void Transfer::clear_offerexpiry() {
  offerexpiry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::_internal_offerexpiry() const {
  return offerexpiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::offerexpiry() const {
  // @@protoc_insertion_point(field_get:actions.Transfer.OfferExpiry)
  return _internal_offerexpiry();
}
inline void Transfer::_internal_set_offerexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offerexpiry_ = value;
}
inline void Transfer::set_offerexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offerexpiry(value);
  // @@protoc_insertion_point(field_set:actions.Transfer.OfferExpiry)
}

// uint64 ExchangeFee = 3;
inline void Transfer::clear_exchangefee() {
  exchangefee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::_internal_exchangefee() const {
  return exchangefee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Transfer::exchangefee() const {
  // @@protoc_insertion_point(field_get:actions.Transfer.ExchangeFee)
  return _internal_exchangefee();
}
inline void Transfer::_internal_set_exchangefee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  exchangefee_ = value;
}
inline void Transfer::set_exchangefee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_exchangefee(value);
  // @@protoc_insertion_point(field_set:actions.Transfer.ExchangeFee)
}

// bytes ExchangeFeeAddress = 4;
inline void Transfer::clear_exchangefeeaddress() {
  exchangefeeaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transfer::exchangefeeaddress() const {
  // @@protoc_insertion_point(field_get:actions.Transfer.ExchangeFeeAddress)
  return _internal_exchangefeeaddress();
}
inline void Transfer::set_exchangefeeaddress(const std::string& value) {
  _internal_set_exchangefeeaddress(value);
  // @@protoc_insertion_point(field_set:actions.Transfer.ExchangeFeeAddress)
}
inline std::string* Transfer::mutable_exchangefeeaddress() {
  // @@protoc_insertion_point(field_mutable:actions.Transfer.ExchangeFeeAddress)
  return _internal_mutable_exchangefeeaddress();
}
inline const std::string& Transfer::_internal_exchangefeeaddress() const {
  return exchangefeeaddress_.Get();
}
inline void Transfer::_internal_set_exchangefeeaddress(const std::string& value) {
  
  exchangefeeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transfer::set_exchangefeeaddress(std::string&& value) {
  
  exchangefeeaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Transfer.ExchangeFeeAddress)
}
inline void Transfer::set_exchangefeeaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchangefeeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Transfer.ExchangeFeeAddress)
}
inline void Transfer::set_exchangefeeaddress(const void* value,
    size_t size) {
  
  exchangefeeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Transfer.ExchangeFeeAddress)
}
inline std::string* Transfer::_internal_mutable_exchangefeeaddress() {
  
  return exchangefeeaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transfer::release_exchangefeeaddress() {
  // @@protoc_insertion_point(field_release:actions.Transfer.ExchangeFeeAddress)
  return exchangefeeaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transfer::set_allocated_exchangefeeaddress(std::string* exchangefeeaddress) {
  if (exchangefeeaddress != nullptr) {
    
  } else {
    
  }
  exchangefeeaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchangefeeaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Transfer.ExchangeFeeAddress)
}
inline std::string* Transfer::unsafe_arena_release_exchangefeeaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Transfer.ExchangeFeeAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchangefeeaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transfer::unsafe_arena_set_allocated_exchangefeeaddress(
    std::string* exchangefeeaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchangefeeaddress != nullptr) {
    
  } else {
    
  }
  exchangefeeaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchangefeeaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Transfer.ExchangeFeeAddress)
}

// -------------------------------------------------------------------

// Settlement

// repeated .actions.InstrumentSettlementField Instruments = 1;
inline int Settlement::_internal_instruments_size() const {
  return instruments_.size();
}
inline int Settlement::instruments_size() const {
  return _internal_instruments_size();
}
inline void Settlement::clear_instruments() {
  instruments_.Clear();
}
inline ::actions::InstrumentSettlementField* Settlement::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Settlement.Instruments)
  return instruments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >*
Settlement::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:actions.Settlement.Instruments)
  return &instruments_;
}
inline const ::actions::InstrumentSettlementField& Settlement::_internal_instruments(int index) const {
  return instruments_.Get(index);
}
inline const ::actions::InstrumentSettlementField& Settlement::instruments(int index) const {
  // @@protoc_insertion_point(field_get:actions.Settlement.Instruments)
  return _internal_instruments(index);
}
inline ::actions::InstrumentSettlementField* Settlement::_internal_add_instruments() {
  return instruments_.Add();
}
inline ::actions::InstrumentSettlementField* Settlement::add_instruments() {
  // @@protoc_insertion_point(field_add:actions.Settlement.Instruments)
  return _internal_add_instruments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >&
Settlement::instruments() const {
  // @@protoc_insertion_point(field_list:actions.Settlement.Instruments)
  return instruments_;
}

// uint64 Timestamp = 2;
inline void Settlement::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Settlement::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Settlement::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Settlement.Timestamp)
  return _internal_timestamp();
}
inline void Settlement::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Settlement::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Settlement.Timestamp)
}

// -------------------------------------------------------------------

// RectificationSettlement

// .actions.ReferenceTransactionField Transfer = 1;
inline bool RectificationSettlement::_internal_has_transfer() const {
  return this != internal_default_instance() && transfer_ != nullptr;
}
inline bool RectificationSettlement::has_transfer() const {
  return _internal_has_transfer();
}
inline void RectificationSettlement::clear_transfer() {
  if (GetArena() == nullptr && transfer_ != nullptr) {
    delete transfer_;
  }
  transfer_ = nullptr;
}
inline const ::actions::ReferenceTransactionField& RectificationSettlement::_internal_transfer() const {
  const ::actions::ReferenceTransactionField* p = transfer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::actions::ReferenceTransactionField*>(
      &::actions::_ReferenceTransactionField_default_instance_);
}
inline const ::actions::ReferenceTransactionField& RectificationSettlement::transfer() const {
  // @@protoc_insertion_point(field_get:actions.RectificationSettlement.Transfer)
  return _internal_transfer();
}
inline void RectificationSettlement::unsafe_arena_set_allocated_transfer(
    ::actions::ReferenceTransactionField* transfer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transfer_);
  }
  transfer_ = transfer;
  if (transfer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.RectificationSettlement.Transfer)
}
inline ::actions::ReferenceTransactionField* RectificationSettlement::release_transfer() {
  auto temp = unsafe_arena_release_transfer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::actions::ReferenceTransactionField* RectificationSettlement::unsafe_arena_release_transfer() {
  // @@protoc_insertion_point(field_release:actions.RectificationSettlement.Transfer)
  
  ::actions::ReferenceTransactionField* temp = transfer_;
  transfer_ = nullptr;
  return temp;
}
inline ::actions::ReferenceTransactionField* RectificationSettlement::_internal_mutable_transfer() {
  
  if (transfer_ == nullptr) {
    auto* p = CreateMaybeMessage<::actions::ReferenceTransactionField>(GetArena());
    transfer_ = p;
  }
  return transfer_;
}
inline ::actions::ReferenceTransactionField* RectificationSettlement::mutable_transfer() {
  // @@protoc_insertion_point(field_mutable:actions.RectificationSettlement.Transfer)
  return _internal_mutable_transfer();
}
inline void RectificationSettlement::set_allocated_transfer(::actions::ReferenceTransactionField* transfer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transfer_;
  }
  if (transfer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transfer);
    if (message_arena != submessage_arena) {
      transfer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transfer, submessage_arena);
    }
    
  } else {
    
  }
  transfer_ = transfer;
  // @@protoc_insertion_point(field_set_allocated:actions.RectificationSettlement.Transfer)
}

// repeated .actions.InstrumentSettlementField Instruments = 2;
inline int RectificationSettlement::_internal_instruments_size() const {
  return instruments_.size();
}
inline int RectificationSettlement::instruments_size() const {
  return _internal_instruments_size();
}
inline void RectificationSettlement::clear_instruments() {
  instruments_.Clear();
}
inline ::actions::InstrumentSettlementField* RectificationSettlement::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.RectificationSettlement.Instruments)
  return instruments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >*
RectificationSettlement::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:actions.RectificationSettlement.Instruments)
  return &instruments_;
}
inline const ::actions::InstrumentSettlementField& RectificationSettlement::_internal_instruments(int index) const {
  return instruments_.Get(index);
}
inline const ::actions::InstrumentSettlementField& RectificationSettlement::instruments(int index) const {
  // @@protoc_insertion_point(field_get:actions.RectificationSettlement.Instruments)
  return _internal_instruments(index);
}
inline ::actions::InstrumentSettlementField* RectificationSettlement::_internal_add_instruments() {
  return instruments_.Add();
}
inline ::actions::InstrumentSettlementField* RectificationSettlement::add_instruments() {
  // @@protoc_insertion_point(field_add:actions.RectificationSettlement.Instruments)
  return _internal_add_instruments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentSettlementField >&
RectificationSettlement::instruments() const {
  // @@protoc_insertion_point(field_list:actions.RectificationSettlement.Instruments)
  return instruments_;
}

// uint64 Timestamp = 3;
inline void RectificationSettlement::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RectificationSettlement::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RectificationSettlement::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.RectificationSettlement.Timestamp)
  return _internal_timestamp();
}
inline void RectificationSettlement::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void RectificationSettlement::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.RectificationSettlement.Timestamp)
}

// -------------------------------------------------------------------

// Proposal

// uint32 Type = 1;
inline void Proposal::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::type() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.Type)
  return _internal_type();
}
inline void Proposal::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void Proposal::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.Type)
}

// string InstrumentType = 2;
inline void Proposal::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proposal::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.InstrumentType)
  return _internal_instrumenttype();
}
inline void Proposal::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.InstrumentType)
}
inline std::string* Proposal::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& Proposal::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void Proposal::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proposal::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Proposal.InstrumentType)
}
inline void Proposal::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Proposal.InstrumentType)
}
inline void Proposal::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Proposal.InstrumentType)
}
inline std::string* Proposal::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proposal::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.Proposal.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Proposal.InstrumentType)
}
inline std::string* Proposal::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Proposal.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Proposal::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Proposal.InstrumentType)
}

// bytes InstrumentCode = 3;
inline void Proposal::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proposal::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Proposal::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.InstrumentCode)
}
inline std::string* Proposal::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Proposal::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Proposal::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proposal::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Proposal.InstrumentCode)
}
inline void Proposal::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Proposal.InstrumentCode)
}
inline void Proposal::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Proposal.InstrumentCode)
}
inline std::string* Proposal::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proposal::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.Proposal.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Proposal.InstrumentCode)
}
inline std::string* Proposal::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Proposal.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Proposal::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Proposal.InstrumentCode)
}

// uint32 VoteSystem = 4;
inline void Proposal::clear_votesystem() {
  votesystem_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::_internal_votesystem() const {
  return votesystem_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::votesystem() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.VoteSystem)
  return _internal_votesystem();
}
inline void Proposal::_internal_set_votesystem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  votesystem_ = value;
}
inline void Proposal::set_votesystem(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votesystem(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.VoteSystem)
}

// repeated .actions.AmendmentField ProposedAmendments = 5;
inline int Proposal::_internal_proposedamendments_size() const {
  return proposedamendments_.size();
}
inline int Proposal::proposedamendments_size() const {
  return _internal_proposedamendments_size();
}
inline void Proposal::clear_proposedamendments() {
  proposedamendments_.Clear();
}
inline ::actions::AmendmentField* Proposal::mutable_proposedamendments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.ProposedAmendments)
  return proposedamendments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
Proposal::mutable_proposedamendments() {
  // @@protoc_insertion_point(field_mutable_list:actions.Proposal.ProposedAmendments)
  return &proposedamendments_;
}
inline const ::actions::AmendmentField& Proposal::_internal_proposedamendments(int index) const {
  return proposedamendments_.Get(index);
}
inline const ::actions::AmendmentField& Proposal::proposedamendments(int index) const {
  // @@protoc_insertion_point(field_get:actions.Proposal.ProposedAmendments)
  return _internal_proposedamendments(index);
}
inline ::actions::AmendmentField* Proposal::_internal_add_proposedamendments() {
  return proposedamendments_.Add();
}
inline ::actions::AmendmentField* Proposal::add_proposedamendments() {
  // @@protoc_insertion_point(field_add:actions.Proposal.ProposedAmendments)
  return _internal_add_proposedamendments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
Proposal::proposedamendments() const {
  // @@protoc_insertion_point(field_list:actions.Proposal.ProposedAmendments)
  return proposedamendments_;
}

// string VoteOptions = 6;
inline void Proposal::clear_voteoptions() {
  voteoptions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proposal::voteoptions() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.VoteOptions)
  return _internal_voteoptions();
}
inline void Proposal::set_voteoptions(const std::string& value) {
  _internal_set_voteoptions(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.VoteOptions)
}
inline std::string* Proposal::mutable_voteoptions() {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.VoteOptions)
  return _internal_mutable_voteoptions();
}
inline const std::string& Proposal::_internal_voteoptions() const {
  return voteoptions_.Get();
}
inline void Proposal::_internal_set_voteoptions(const std::string& value) {
  
  voteoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proposal::set_voteoptions(std::string&& value) {
  
  voteoptions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Proposal.VoteOptions)
}
inline void Proposal::set_voteoptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voteoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Proposal.VoteOptions)
}
inline void Proposal::set_voteoptions(const char* value,
    size_t size) {
  
  voteoptions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Proposal.VoteOptions)
}
inline std::string* Proposal::_internal_mutable_voteoptions() {
  
  return voteoptions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proposal::release_voteoptions() {
  // @@protoc_insertion_point(field_release:actions.Proposal.VoteOptions)
  return voteoptions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_voteoptions(std::string* voteoptions) {
  if (voteoptions != nullptr) {
    
  } else {
    
  }
  voteoptions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voteoptions,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Proposal.VoteOptions)
}
inline std::string* Proposal::unsafe_arena_release_voteoptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Proposal.VoteOptions)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return voteoptions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Proposal::unsafe_arena_set_allocated_voteoptions(
    std::string* voteoptions) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (voteoptions != nullptr) {
    
  } else {
    
  }
  voteoptions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      voteoptions, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Proposal.VoteOptions)
}

// uint32 VoteMax = 7;
inline void Proposal::clear_votemax() {
  votemax_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::_internal_votemax() const {
  return votemax_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Proposal::votemax() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.VoteMax)
  return _internal_votemax();
}
inline void Proposal::_internal_set_votemax(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  votemax_ = value;
}
inline void Proposal::set_votemax(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_votemax(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.VoteMax)
}

// string ProposalDescription = 8;
inline void Proposal::clear_proposaldescription() {
  proposaldescription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proposal::proposaldescription() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.ProposalDescription)
  return _internal_proposaldescription();
}
inline void Proposal::set_proposaldescription(const std::string& value) {
  _internal_set_proposaldescription(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.ProposalDescription)
}
inline std::string* Proposal::mutable_proposaldescription() {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.ProposalDescription)
  return _internal_mutable_proposaldescription();
}
inline const std::string& Proposal::_internal_proposaldescription() const {
  return proposaldescription_.Get();
}
inline void Proposal::_internal_set_proposaldescription(const std::string& value) {
  
  proposaldescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proposal::set_proposaldescription(std::string&& value) {
  
  proposaldescription_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Proposal.ProposalDescription)
}
inline void Proposal::set_proposaldescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposaldescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Proposal.ProposalDescription)
}
inline void Proposal::set_proposaldescription(const char* value,
    size_t size) {
  
  proposaldescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Proposal.ProposalDescription)
}
inline std::string* Proposal::_internal_mutable_proposaldescription() {
  
  return proposaldescription_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proposal::release_proposaldescription() {
  // @@protoc_insertion_point(field_release:actions.Proposal.ProposalDescription)
  return proposaldescription_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_proposaldescription(std::string* proposaldescription) {
  if (proposaldescription != nullptr) {
    
  } else {
    
  }
  proposaldescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposaldescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Proposal.ProposalDescription)
}
inline std::string* Proposal::unsafe_arena_release_proposaldescription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Proposal.ProposalDescription)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposaldescription_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Proposal::unsafe_arena_set_allocated_proposaldescription(
    std::string* proposaldescription) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposaldescription != nullptr) {
    
  } else {
    
  }
  proposaldescription_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposaldescription, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Proposal.ProposalDescription)
}

// bytes ProposalDocumentHash = 9;
inline void Proposal::clear_proposaldocumenthash() {
  proposaldocumenthash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proposal::proposaldocumenthash() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.ProposalDocumentHash)
  return _internal_proposaldocumenthash();
}
inline void Proposal::set_proposaldocumenthash(const std::string& value) {
  _internal_set_proposaldocumenthash(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.ProposalDocumentHash)
}
inline std::string* Proposal::mutable_proposaldocumenthash() {
  // @@protoc_insertion_point(field_mutable:actions.Proposal.ProposalDocumentHash)
  return _internal_mutable_proposaldocumenthash();
}
inline const std::string& Proposal::_internal_proposaldocumenthash() const {
  return proposaldocumenthash_.Get();
}
inline void Proposal::_internal_set_proposaldocumenthash(const std::string& value) {
  
  proposaldocumenthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proposal::set_proposaldocumenthash(std::string&& value) {
  
  proposaldocumenthash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Proposal.ProposalDocumentHash)
}
inline void Proposal::set_proposaldocumenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposaldocumenthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Proposal.ProposalDocumentHash)
}
inline void Proposal::set_proposaldocumenthash(const void* value,
    size_t size) {
  
  proposaldocumenthash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Proposal.ProposalDocumentHash)
}
inline std::string* Proposal::_internal_mutable_proposaldocumenthash() {
  
  return proposaldocumenthash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proposal::release_proposaldocumenthash() {
  // @@protoc_insertion_point(field_release:actions.Proposal.ProposalDocumentHash)
  return proposaldocumenthash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proposal::set_allocated_proposaldocumenthash(std::string* proposaldocumenthash) {
  if (proposaldocumenthash != nullptr) {
    
  } else {
    
  }
  proposaldocumenthash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposaldocumenthash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Proposal.ProposalDocumentHash)
}
inline std::string* Proposal::unsafe_arena_release_proposaldocumenthash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Proposal.ProposalDocumentHash)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proposaldocumenthash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Proposal::unsafe_arena_set_allocated_proposaldocumenthash(
    std::string* proposaldocumenthash) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proposaldocumenthash != nullptr) {
    
  } else {
    
  }
  proposaldocumenthash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proposaldocumenthash, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Proposal.ProposalDocumentHash)
}

// uint64 VoteCutOffTimestamp = 10;
inline void Proposal::clear_votecutofftimestamp() {
  votecutofftimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Proposal::_internal_votecutofftimestamp() const {
  return votecutofftimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Proposal::votecutofftimestamp() const {
  // @@protoc_insertion_point(field_get:actions.Proposal.VoteCutOffTimestamp)
  return _internal_votecutofftimestamp();
}
inline void Proposal::_internal_set_votecutofftimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  votecutofftimestamp_ = value;
}
inline void Proposal::set_votecutofftimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_votecutofftimestamp(value);
  // @@protoc_insertion_point(field_set:actions.Proposal.VoteCutOffTimestamp)
}

// -------------------------------------------------------------------

// Vote

// uint64 Timestamp = 1;
inline void Vote::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Vote.Timestamp)
  return _internal_timestamp();
}
inline void Vote::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Vote::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Vote.Timestamp)
}

// -------------------------------------------------------------------

// BallotCast

// bytes VoteTxId = 1;
inline void BallotCast::clear_votetxid() {
  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BallotCast::votetxid() const {
  // @@protoc_insertion_point(field_get:actions.BallotCast.VoteTxId)
  return _internal_votetxid();
}
inline void BallotCast::set_votetxid(const std::string& value) {
  _internal_set_votetxid(value);
  // @@protoc_insertion_point(field_set:actions.BallotCast.VoteTxId)
}
inline std::string* BallotCast::mutable_votetxid() {
  // @@protoc_insertion_point(field_mutable:actions.BallotCast.VoteTxId)
  return _internal_mutable_votetxid();
}
inline const std::string& BallotCast::_internal_votetxid() const {
  return votetxid_.Get();
}
inline void BallotCast::_internal_set_votetxid(const std::string& value) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BallotCast::set_votetxid(std::string&& value) {
  
  votetxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.BallotCast.VoteTxId)
}
inline void BallotCast::set_votetxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.BallotCast.VoteTxId)
}
inline void BallotCast::set_votetxid(const void* value,
    size_t size) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.BallotCast.VoteTxId)
}
inline std::string* BallotCast::_internal_mutable_votetxid() {
  
  return votetxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BallotCast::release_votetxid() {
  // @@protoc_insertion_point(field_release:actions.BallotCast.VoteTxId)
  return votetxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BallotCast::set_allocated_votetxid(std::string* votetxid) {
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), votetxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.BallotCast.VoteTxId)
}
inline std::string* BallotCast::unsafe_arena_release_votetxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.BallotCast.VoteTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return votetxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BallotCast::unsafe_arena_set_allocated_votetxid(
    std::string* votetxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      votetxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.BallotCast.VoteTxId)
}

// string Vote = 2;
inline void BallotCast::clear_vote() {
  vote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BallotCast::vote() const {
  // @@protoc_insertion_point(field_get:actions.BallotCast.Vote)
  return _internal_vote();
}
inline void BallotCast::set_vote(const std::string& value) {
  _internal_set_vote(value);
  // @@protoc_insertion_point(field_set:actions.BallotCast.Vote)
}
inline std::string* BallotCast::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:actions.BallotCast.Vote)
  return _internal_mutable_vote();
}
inline const std::string& BallotCast::_internal_vote() const {
  return vote_.Get();
}
inline void BallotCast::_internal_set_vote(const std::string& value) {
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BallotCast::set_vote(std::string&& value) {
  
  vote_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.BallotCast.Vote)
}
inline void BallotCast::set_vote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.BallotCast.Vote)
}
inline void BallotCast::set_vote(const char* value,
    size_t size) {
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.BallotCast.Vote)
}
inline std::string* BallotCast::_internal_mutable_vote() {
  
  return vote_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BallotCast::release_vote() {
  // @@protoc_insertion_point(field_release:actions.BallotCast.Vote)
  return vote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BallotCast::set_allocated_vote(std::string* vote) {
  if (vote != nullptr) {
    
  } else {
    
  }
  vote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.BallotCast.Vote)
}
inline std::string* BallotCast::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.BallotCast.Vote)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vote_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BallotCast::unsafe_arena_set_allocated_vote(
    std::string* vote) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vote != nullptr) {
    
  } else {
    
  }
  vote_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vote, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.BallotCast.Vote)
}

// -------------------------------------------------------------------

// BallotCounted

// bytes VoteTxId = 1;
inline void BallotCounted::clear_votetxid() {
  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BallotCounted::votetxid() const {
  // @@protoc_insertion_point(field_get:actions.BallotCounted.VoteTxId)
  return _internal_votetxid();
}
inline void BallotCounted::set_votetxid(const std::string& value) {
  _internal_set_votetxid(value);
  // @@protoc_insertion_point(field_set:actions.BallotCounted.VoteTxId)
}
inline std::string* BallotCounted::mutable_votetxid() {
  // @@protoc_insertion_point(field_mutable:actions.BallotCounted.VoteTxId)
  return _internal_mutable_votetxid();
}
inline const std::string& BallotCounted::_internal_votetxid() const {
  return votetxid_.Get();
}
inline void BallotCounted::_internal_set_votetxid(const std::string& value) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BallotCounted::set_votetxid(std::string&& value) {
  
  votetxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.BallotCounted.VoteTxId)
}
inline void BallotCounted::set_votetxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.BallotCounted.VoteTxId)
}
inline void BallotCounted::set_votetxid(const void* value,
    size_t size) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.BallotCounted.VoteTxId)
}
inline std::string* BallotCounted::_internal_mutable_votetxid() {
  
  return votetxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BallotCounted::release_votetxid() {
  // @@protoc_insertion_point(field_release:actions.BallotCounted.VoteTxId)
  return votetxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BallotCounted::set_allocated_votetxid(std::string* votetxid) {
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), votetxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.BallotCounted.VoteTxId)
}
inline std::string* BallotCounted::unsafe_arena_release_votetxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.BallotCounted.VoteTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return votetxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BallotCounted::unsafe_arena_set_allocated_votetxid(
    std::string* votetxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      votetxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.BallotCounted.VoteTxId)
}

// string Vote = 2;
inline void BallotCounted::clear_vote() {
  vote_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BallotCounted::vote() const {
  // @@protoc_insertion_point(field_get:actions.BallotCounted.Vote)
  return _internal_vote();
}
inline void BallotCounted::set_vote(const std::string& value) {
  _internal_set_vote(value);
  // @@protoc_insertion_point(field_set:actions.BallotCounted.Vote)
}
inline std::string* BallotCounted::mutable_vote() {
  // @@protoc_insertion_point(field_mutable:actions.BallotCounted.Vote)
  return _internal_mutable_vote();
}
inline const std::string& BallotCounted::_internal_vote() const {
  return vote_.Get();
}
inline void BallotCounted::_internal_set_vote(const std::string& value) {
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BallotCounted::set_vote(std::string&& value) {
  
  vote_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.BallotCounted.Vote)
}
inline void BallotCounted::set_vote(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.BallotCounted.Vote)
}
inline void BallotCounted::set_vote(const char* value,
    size_t size) {
  
  vote_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.BallotCounted.Vote)
}
inline std::string* BallotCounted::_internal_mutable_vote() {
  
  return vote_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BallotCounted::release_vote() {
  // @@protoc_insertion_point(field_release:actions.BallotCounted.Vote)
  return vote_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BallotCounted::set_allocated_vote(std::string* vote) {
  if (vote != nullptr) {
    
  } else {
    
  }
  vote_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.BallotCounted.Vote)
}
inline std::string* BallotCounted::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.BallotCounted.Vote)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return vote_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BallotCounted::unsafe_arena_set_allocated_vote(
    std::string* vote) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vote != nullptr) {
    
  } else {
    
  }
  vote_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vote, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.BallotCounted.Vote)
}

// uint64 Quantity = 3;
inline void BallotCounted::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallotCounted::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallotCounted::quantity() const {
  // @@protoc_insertion_point(field_get:actions.BallotCounted.Quantity)
  return _internal_quantity();
}
inline void BallotCounted::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void BallotCounted::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:actions.BallotCounted.Quantity)
}

// uint64 Timestamp = 4;
inline void BallotCounted::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallotCounted::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BallotCounted::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.BallotCounted.Timestamp)
  return _internal_timestamp();
}
inline void BallotCounted::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void BallotCounted::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.BallotCounted.Timestamp)
}

// -------------------------------------------------------------------

// Result

// string InstrumentType = 1;
inline void Result::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Result::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.Result.InstrumentType)
  return _internal_instrumenttype();
}
inline void Result::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.Result.InstrumentType)
}
inline std::string* Result::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.Result.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& Result::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void Result::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Result.InstrumentType)
}
inline void Result::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Result.InstrumentType)
}
inline void Result::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Result.InstrumentType)
}
inline std::string* Result::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.Result.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Result.InstrumentType)
}
inline std::string* Result::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Result.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Result::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Result.InstrumentType)
}

// bytes InstrumentCode = 2;
inline void Result::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Result::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.Result.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Result::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.Result.InstrumentCode)
}
inline std::string* Result::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.Result.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Result::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Result::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Result.InstrumentCode)
}
inline void Result::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Result.InstrumentCode)
}
inline void Result::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Result.InstrumentCode)
}
inline std::string* Result::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.Result.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Result.InstrumentCode)
}
inline std::string* Result::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Result.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Result::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Result.InstrumentCode)
}

// repeated .actions.AmendmentField ProposedAmendments = 3;
inline int Result::_internal_proposedamendments_size() const {
  return proposedamendments_.size();
}
inline int Result::proposedamendments_size() const {
  return _internal_proposedamendments_size();
}
inline void Result::clear_proposedamendments() {
  proposedamendments_.Clear();
}
inline ::actions::AmendmentField* Result::mutable_proposedamendments(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Result.ProposedAmendments)
  return proposedamendments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >*
Result::mutable_proposedamendments() {
  // @@protoc_insertion_point(field_mutable_list:actions.Result.ProposedAmendments)
  return &proposedamendments_;
}
inline const ::actions::AmendmentField& Result::_internal_proposedamendments(int index) const {
  return proposedamendments_.Get(index);
}
inline const ::actions::AmendmentField& Result::proposedamendments(int index) const {
  // @@protoc_insertion_point(field_get:actions.Result.ProposedAmendments)
  return _internal_proposedamendments(index);
}
inline ::actions::AmendmentField* Result::_internal_add_proposedamendments() {
  return proposedamendments_.Add();
}
inline ::actions::AmendmentField* Result::add_proposedamendments() {
  // @@protoc_insertion_point(field_add:actions.Result.ProposedAmendments)
  return _internal_add_proposedamendments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AmendmentField >&
Result::proposedamendments() const {
  // @@protoc_insertion_point(field_list:actions.Result.ProposedAmendments)
  return proposedamendments_;
}

// bytes VoteTxId = 4;
inline void Result::clear_votetxid() {
  votetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Result::votetxid() const {
  // @@protoc_insertion_point(field_get:actions.Result.VoteTxId)
  return _internal_votetxid();
}
inline void Result::set_votetxid(const std::string& value) {
  _internal_set_votetxid(value);
  // @@protoc_insertion_point(field_set:actions.Result.VoteTxId)
}
inline std::string* Result::mutable_votetxid() {
  // @@protoc_insertion_point(field_mutable:actions.Result.VoteTxId)
  return _internal_mutable_votetxid();
}
inline const std::string& Result::_internal_votetxid() const {
  return votetxid_.Get();
}
inline void Result::_internal_set_votetxid(const std::string& value) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_votetxid(std::string&& value) {
  
  votetxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Result.VoteTxId)
}
inline void Result::set_votetxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Result.VoteTxId)
}
inline void Result::set_votetxid(const void* value,
    size_t size) {
  
  votetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Result.VoteTxId)
}
inline std::string* Result::_internal_mutable_votetxid() {
  
  return votetxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_votetxid() {
  // @@protoc_insertion_point(field_release:actions.Result.VoteTxId)
  return votetxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_votetxid(std::string* votetxid) {
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), votetxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Result.VoteTxId)
}
inline std::string* Result::unsafe_arena_release_votetxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Result.VoteTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return votetxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Result::unsafe_arena_set_allocated_votetxid(
    std::string* votetxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (votetxid != nullptr) {
    
  } else {
    
  }
  votetxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      votetxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Result.VoteTxId)
}

// repeated uint64 OptionTally = 5;
inline int Result::_internal_optiontally_size() const {
  return optiontally_.size();
}
inline int Result::optiontally_size() const {
  return _internal_optiontally_size();
}
inline void Result::clear_optiontally() {
  optiontally_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Result::_internal_optiontally(int index) const {
  return optiontally_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Result::optiontally(int index) const {
  // @@protoc_insertion_point(field_get:actions.Result.OptionTally)
  return _internal_optiontally(index);
}
inline void Result::set_optiontally(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  optiontally_.Set(index, value);
  // @@protoc_insertion_point(field_set:actions.Result.OptionTally)
}
inline void Result::_internal_add_optiontally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  optiontally_.Add(value);
}
inline void Result::add_optiontally(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_optiontally(value);
  // @@protoc_insertion_point(field_add:actions.Result.OptionTally)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Result::_internal_optiontally() const {
  return optiontally_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Result::optiontally() const {
  // @@protoc_insertion_point(field_list:actions.Result.OptionTally)
  return _internal_optiontally();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Result::_internal_mutable_optiontally() {
  return &optiontally_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Result::mutable_optiontally() {
  // @@protoc_insertion_point(field_mutable_list:actions.Result.OptionTally)
  return _internal_mutable_optiontally();
}

// string Result = 6;
inline void Result::clear_result() {
  result_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Result::result() const {
  // @@protoc_insertion_point(field_get:actions.Result.Result)
  return _internal_result();
}
inline void Result::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:actions.Result.Result)
}
inline std::string* Result::mutable_result() {
  // @@protoc_insertion_point(field_mutable:actions.Result.Result)
  return _internal_mutable_result();
}
inline const std::string& Result::_internal_result() const {
  return result_.Get();
}
inline void Result::_internal_set_result(const std::string& value) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_result(std::string&& value) {
  
  result_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Result.Result)
}
inline void Result::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Result.Result)
}
inline void Result::set_result(const char* value,
    size_t size) {
  
  result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Result.Result)
}
inline std::string* Result::_internal_mutable_result() {
  
  return result_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_result() {
  // @@protoc_insertion_point(field_release:actions.Result.Result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Result.Result)
}
inline std::string* Result::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Result.Result)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return result_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Result::unsafe_arena_set_allocated_result(
    std::string* result) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (result != nullptr) {
    
  } else {
    
  }
  result_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      result, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Result.Result)
}

// uint64 Timestamp = 7;
inline void Result::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Result::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Result::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Result.Timestamp)
  return _internal_timestamp();
}
inline void Result::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Result::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Result.Timestamp)
}

// -------------------------------------------------------------------

// Order

// string ComplianceAction = 1;
inline void Order::clear_complianceaction() {
  complianceaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::complianceaction() const {
  // @@protoc_insertion_point(field_get:actions.Order.ComplianceAction)
  return _internal_complianceaction();
}
inline void Order::set_complianceaction(const std::string& value) {
  _internal_set_complianceaction(value);
  // @@protoc_insertion_point(field_set:actions.Order.ComplianceAction)
}
inline std::string* Order::mutable_complianceaction() {
  // @@protoc_insertion_point(field_mutable:actions.Order.ComplianceAction)
  return _internal_mutable_complianceaction();
}
inline const std::string& Order::_internal_complianceaction() const {
  return complianceaction_.Get();
}
inline void Order::_internal_set_complianceaction(const std::string& value) {
  
  complianceaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_complianceaction(std::string&& value) {
  
  complianceaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.ComplianceAction)
}
inline void Order::set_complianceaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  complianceaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.ComplianceAction)
}
inline void Order::set_complianceaction(const char* value,
    size_t size) {
  
  complianceaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.ComplianceAction)
}
inline std::string* Order::_internal_mutable_complianceaction() {
  
  return complianceaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_complianceaction() {
  // @@protoc_insertion_point(field_release:actions.Order.ComplianceAction)
  return complianceaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_complianceaction(std::string* complianceaction) {
  if (complianceaction != nullptr) {
    
  } else {
    
  }
  complianceaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), complianceaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.ComplianceAction)
}
inline std::string* Order::unsafe_arena_release_complianceaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.ComplianceAction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return complianceaction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_complianceaction(
    std::string* complianceaction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (complianceaction != nullptr) {
    
  } else {
    
  }
  complianceaction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      complianceaction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.ComplianceAction)
}

// string InstrumentType = 2;
inline void Order::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.Order.InstrumentType)
  return _internal_instrumenttype();
}
inline void Order::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.Order.InstrumentType)
}
inline std::string* Order::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.Order.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& Order::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void Order::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.InstrumentType)
}
inline void Order::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.InstrumentType)
}
inline void Order::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.InstrumentType)
}
inline std::string* Order::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.Order.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.InstrumentType)
}
inline std::string* Order::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.InstrumentType)
}

// bytes InstrumentCode = 3;
inline void Order::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.Order.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Order::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.Order.InstrumentCode)
}
inline std::string* Order::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.Order.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Order::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Order::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.InstrumentCode)
}
inline void Order::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.InstrumentCode)
}
inline void Order::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.InstrumentCode)
}
inline std::string* Order::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.Order.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.InstrumentCode)
}
inline std::string* Order::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.InstrumentCode)
}

// repeated .actions.TargetAddressField TargetAddresses = 4;
inline int Order::_internal_targetaddresses_size() const {
  return targetaddresses_.size();
}
inline int Order::targetaddresses_size() const {
  return _internal_targetaddresses_size();
}
inline void Order::clear_targetaddresses() {
  targetaddresses_.Clear();
}
inline ::actions::TargetAddressField* Order::mutable_targetaddresses(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Order.TargetAddresses)
  return targetaddresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::TargetAddressField >*
Order::mutable_targetaddresses() {
  // @@protoc_insertion_point(field_mutable_list:actions.Order.TargetAddresses)
  return &targetaddresses_;
}
inline const ::actions::TargetAddressField& Order::_internal_targetaddresses(int index) const {
  return targetaddresses_.Get(index);
}
inline const ::actions::TargetAddressField& Order::targetaddresses(int index) const {
  // @@protoc_insertion_point(field_get:actions.Order.TargetAddresses)
  return _internal_targetaddresses(index);
}
inline ::actions::TargetAddressField* Order::_internal_add_targetaddresses() {
  return targetaddresses_.Add();
}
inline ::actions::TargetAddressField* Order::add_targetaddresses() {
  // @@protoc_insertion_point(field_add:actions.Order.TargetAddresses)
  return _internal_add_targetaddresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::TargetAddressField >&
Order::targetaddresses() const {
  // @@protoc_insertion_point(field_list:actions.Order.TargetAddresses)
  return targetaddresses_;
}

// bytes FreezeTxId = 5;
inline void Order::clear_freezetxid() {
  freezetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::freezetxid() const {
  // @@protoc_insertion_point(field_get:actions.Order.FreezeTxId)
  return _internal_freezetxid();
}
inline void Order::set_freezetxid(const std::string& value) {
  _internal_set_freezetxid(value);
  // @@protoc_insertion_point(field_set:actions.Order.FreezeTxId)
}
inline std::string* Order::mutable_freezetxid() {
  // @@protoc_insertion_point(field_mutable:actions.Order.FreezeTxId)
  return _internal_mutable_freezetxid();
}
inline const std::string& Order::_internal_freezetxid() const {
  return freezetxid_.Get();
}
inline void Order::_internal_set_freezetxid(const std::string& value) {
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_freezetxid(std::string&& value) {
  
  freezetxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.FreezeTxId)
}
inline void Order::set_freezetxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.FreezeTxId)
}
inline void Order::set_freezetxid(const void* value,
    size_t size) {
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.FreezeTxId)
}
inline std::string* Order::_internal_mutable_freezetxid() {
  
  return freezetxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_freezetxid() {
  // @@protoc_insertion_point(field_release:actions.Order.FreezeTxId)
  return freezetxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_freezetxid(std::string* freezetxid) {
  if (freezetxid != nullptr) {
    
  } else {
    
  }
  freezetxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), freezetxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.FreezeTxId)
}
inline std::string* Order::unsafe_arena_release_freezetxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.FreezeTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return freezetxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_freezetxid(
    std::string* freezetxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (freezetxid != nullptr) {
    
  } else {
    
  }
  freezetxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      freezetxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.FreezeTxId)
}

// uint64 FreezePeriod = 6;
inline void Order::clear_freezeperiod() {
  freezeperiod_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_freezeperiod() const {
  return freezeperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::freezeperiod() const {
  // @@protoc_insertion_point(field_get:actions.Order.FreezePeriod)
  return _internal_freezeperiod();
}
inline void Order::_internal_set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  freezeperiod_ = value;
}
inline void Order::set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_freezeperiod(value);
  // @@protoc_insertion_point(field_set:actions.Order.FreezePeriod)
}

// bytes DepositAddress = 7;
inline void Order::clear_depositaddress() {
  depositaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::depositaddress() const {
  // @@protoc_insertion_point(field_get:actions.Order.DepositAddress)
  return _internal_depositaddress();
}
inline void Order::set_depositaddress(const std::string& value) {
  _internal_set_depositaddress(value);
  // @@protoc_insertion_point(field_set:actions.Order.DepositAddress)
}
inline std::string* Order::mutable_depositaddress() {
  // @@protoc_insertion_point(field_mutable:actions.Order.DepositAddress)
  return _internal_mutable_depositaddress();
}
inline const std::string& Order::_internal_depositaddress() const {
  return depositaddress_.Get();
}
inline void Order::_internal_set_depositaddress(const std::string& value) {
  
  depositaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_depositaddress(std::string&& value) {
  
  depositaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.DepositAddress)
}
inline void Order::set_depositaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  depositaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.DepositAddress)
}
inline void Order::set_depositaddress(const void* value,
    size_t size) {
  
  depositaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.DepositAddress)
}
inline std::string* Order::_internal_mutable_depositaddress() {
  
  return depositaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_depositaddress() {
  // @@protoc_insertion_point(field_release:actions.Order.DepositAddress)
  return depositaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_depositaddress(std::string* depositaddress) {
  if (depositaddress != nullptr) {
    
  } else {
    
  }
  depositaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), depositaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.DepositAddress)
}
inline std::string* Order::unsafe_arena_release_depositaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.DepositAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return depositaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_depositaddress(
    std::string* depositaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (depositaddress != nullptr) {
    
  } else {
    
  }
  depositaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      depositaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.DepositAddress)
}

// string AuthorityName = 8;
inline void Order::clear_authorityname() {
  authorityname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::authorityname() const {
  // @@protoc_insertion_point(field_get:actions.Order.AuthorityName)
  return _internal_authorityname();
}
inline void Order::set_authorityname(const std::string& value) {
  _internal_set_authorityname(value);
  // @@protoc_insertion_point(field_set:actions.Order.AuthorityName)
}
inline std::string* Order::mutable_authorityname() {
  // @@protoc_insertion_point(field_mutable:actions.Order.AuthorityName)
  return _internal_mutable_authorityname();
}
inline const std::string& Order::_internal_authorityname() const {
  return authorityname_.Get();
}
inline void Order::_internal_set_authorityname(const std::string& value) {
  
  authorityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_authorityname(std::string&& value) {
  
  authorityname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.AuthorityName)
}
inline void Order::set_authorityname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authorityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.AuthorityName)
}
inline void Order::set_authorityname(const char* value,
    size_t size) {
  
  authorityname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.AuthorityName)
}
inline std::string* Order::_internal_mutable_authorityname() {
  
  return authorityname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_authorityname() {
  // @@protoc_insertion_point(field_release:actions.Order.AuthorityName)
  return authorityname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_authorityname(std::string* authorityname) {
  if (authorityname != nullptr) {
    
  } else {
    
  }
  authorityname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorityname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.AuthorityName)
}
inline std::string* Order::unsafe_arena_release_authorityname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.AuthorityName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return authorityname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_authorityname(
    std::string* authorityname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authorityname != nullptr) {
    
  } else {
    
  }
  authorityname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authorityname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.AuthorityName)
}

// bytes AuthorityPublicKey = 9;
inline void Order::clear_authoritypublickey() {
  authoritypublickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::authoritypublickey() const {
  // @@protoc_insertion_point(field_get:actions.Order.AuthorityPublicKey)
  return _internal_authoritypublickey();
}
inline void Order::set_authoritypublickey(const std::string& value) {
  _internal_set_authoritypublickey(value);
  // @@protoc_insertion_point(field_set:actions.Order.AuthorityPublicKey)
}
inline std::string* Order::mutable_authoritypublickey() {
  // @@protoc_insertion_point(field_mutable:actions.Order.AuthorityPublicKey)
  return _internal_mutable_authoritypublickey();
}
inline const std::string& Order::_internal_authoritypublickey() const {
  return authoritypublickey_.Get();
}
inline void Order::_internal_set_authoritypublickey(const std::string& value) {
  
  authoritypublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_authoritypublickey(std::string&& value) {
  
  authoritypublickey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.AuthorityPublicKey)
}
inline void Order::set_authoritypublickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authoritypublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.AuthorityPublicKey)
}
inline void Order::set_authoritypublickey(const void* value,
    size_t size) {
  
  authoritypublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.AuthorityPublicKey)
}
inline std::string* Order::_internal_mutable_authoritypublickey() {
  
  return authoritypublickey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_authoritypublickey() {
  // @@protoc_insertion_point(field_release:actions.Order.AuthorityPublicKey)
  return authoritypublickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_authoritypublickey(std::string* authoritypublickey) {
  if (authoritypublickey != nullptr) {
    
  } else {
    
  }
  authoritypublickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authoritypublickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.AuthorityPublicKey)
}
inline std::string* Order::unsafe_arena_release_authoritypublickey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.AuthorityPublicKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return authoritypublickey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_authoritypublickey(
    std::string* authoritypublickey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (authoritypublickey != nullptr) {
    
  } else {
    
  }
  authoritypublickey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      authoritypublickey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.AuthorityPublicKey)
}

// uint32 SignatureAlgorithm = 10;
inline void Order::clear_signaturealgorithm() {
  signaturealgorithm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_signaturealgorithm() const {
  return signaturealgorithm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::signaturealgorithm() const {
  // @@protoc_insertion_point(field_get:actions.Order.SignatureAlgorithm)
  return _internal_signaturealgorithm();
}
inline void Order::_internal_set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signaturealgorithm_ = value;
}
inline void Order::set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signaturealgorithm(value);
  // @@protoc_insertion_point(field_set:actions.Order.SignatureAlgorithm)
}

// bytes OrderSignature = 11;
inline void Order::clear_ordersignature() {
  ordersignature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::ordersignature() const {
  // @@protoc_insertion_point(field_get:actions.Order.OrderSignature)
  return _internal_ordersignature();
}
inline void Order::set_ordersignature(const std::string& value) {
  _internal_set_ordersignature(value);
  // @@protoc_insertion_point(field_set:actions.Order.OrderSignature)
}
inline std::string* Order::mutable_ordersignature() {
  // @@protoc_insertion_point(field_mutable:actions.Order.OrderSignature)
  return _internal_mutable_ordersignature();
}
inline const std::string& Order::_internal_ordersignature() const {
  return ordersignature_.Get();
}
inline void Order::_internal_set_ordersignature(const std::string& value) {
  
  ordersignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_ordersignature(std::string&& value) {
  
  ordersignature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.OrderSignature)
}
inline void Order::set_ordersignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordersignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.OrderSignature)
}
inline void Order::set_ordersignature(const void* value,
    size_t size) {
  
  ordersignature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.OrderSignature)
}
inline std::string* Order::_internal_mutable_ordersignature() {
  
  return ordersignature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_ordersignature() {
  // @@protoc_insertion_point(field_release:actions.Order.OrderSignature)
  return ordersignature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_ordersignature(std::string* ordersignature) {
  if (ordersignature != nullptr) {
    
  } else {
    
  }
  ordersignature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordersignature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.OrderSignature)
}
inline std::string* Order::unsafe_arena_release_ordersignature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.OrderSignature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ordersignature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_ordersignature(
    std::string* ordersignature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ordersignature != nullptr) {
    
  } else {
    
  }
  ordersignature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ordersignature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.OrderSignature)
}

// repeated .actions.QuantityIndexField BitcoinDispersions = 14;
inline int Order::_internal_bitcoindispersions_size() const {
  return bitcoindispersions_.size();
}
inline int Order::bitcoindispersions_size() const {
  return _internal_bitcoindispersions_size();
}
inline void Order::clear_bitcoindispersions() {
  bitcoindispersions_.Clear();
}
inline ::actions::QuantityIndexField* Order::mutable_bitcoindispersions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Order.BitcoinDispersions)
  return bitcoindispersions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
Order::mutable_bitcoindispersions() {
  // @@protoc_insertion_point(field_mutable_list:actions.Order.BitcoinDispersions)
  return &bitcoindispersions_;
}
inline const ::actions::QuantityIndexField& Order::_internal_bitcoindispersions(int index) const {
  return bitcoindispersions_.Get(index);
}
inline const ::actions::QuantityIndexField& Order::bitcoindispersions(int index) const {
  // @@protoc_insertion_point(field_get:actions.Order.BitcoinDispersions)
  return _internal_bitcoindispersions(index);
}
inline ::actions::QuantityIndexField* Order::_internal_add_bitcoindispersions() {
  return bitcoindispersions_.Add();
}
inline ::actions::QuantityIndexField* Order::add_bitcoindispersions() {
  // @@protoc_insertion_point(field_add:actions.Order.BitcoinDispersions)
  return _internal_add_bitcoindispersions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
Order::bitcoindispersions() const {
  // @@protoc_insertion_point(field_list:actions.Order.BitcoinDispersions)
  return bitcoindispersions_;
}

// string Message = 15;
inline void Order::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::message() const {
  // @@protoc_insertion_point(field_get:actions.Order.Message)
  return _internal_message();
}
inline void Order::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Order.Message)
}
inline std::string* Order::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Order.Message)
  return _internal_mutable_message();
}
inline const std::string& Order::_internal_message() const {
  return message_.Get();
}
inline void Order::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.Message)
}
inline void Order::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.Message)
}
inline void Order::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.Message)
}
inline std::string* Order::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_message() {
  // @@protoc_insertion_point(field_release:actions.Order.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.Message)
}
inline std::string* Order::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.Message)
}

// uint32 SupportingEvidenceFormat = 16;
inline void Order::clear_supportingevidenceformat() {
  supportingevidenceformat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_supportingevidenceformat() const {
  return supportingevidenceformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::supportingevidenceformat() const {
  // @@protoc_insertion_point(field_get:actions.Order.SupportingEvidenceFormat)
  return _internal_supportingevidenceformat();
}
inline void Order::_internal_set_supportingevidenceformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  supportingevidenceformat_ = value;
}
inline void Order::set_supportingevidenceformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_supportingevidenceformat(value);
  // @@protoc_insertion_point(field_set:actions.Order.SupportingEvidenceFormat)
}

// bytes SupportingEvidence = 17;
inline void Order::clear_supportingevidence() {
  supportingevidence_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Order::supportingevidence() const {
  // @@protoc_insertion_point(field_get:actions.Order.SupportingEvidence)
  return _internal_supportingevidence();
}
inline void Order::set_supportingevidence(const std::string& value) {
  _internal_set_supportingevidence(value);
  // @@protoc_insertion_point(field_set:actions.Order.SupportingEvidence)
}
inline std::string* Order::mutable_supportingevidence() {
  // @@protoc_insertion_point(field_mutable:actions.Order.SupportingEvidence)
  return _internal_mutable_supportingevidence();
}
inline const std::string& Order::_internal_supportingevidence() const {
  return supportingevidence_.Get();
}
inline void Order::_internal_set_supportingevidence(const std::string& value) {
  
  supportingevidence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Order::set_supportingevidence(std::string&& value) {
  
  supportingevidence_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Order.SupportingEvidence)
}
inline void Order::set_supportingevidence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supportingevidence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Order.SupportingEvidence)
}
inline void Order::set_supportingevidence(const void* value,
    size_t size) {
  
  supportingevidence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Order.SupportingEvidence)
}
inline std::string* Order::_internal_mutable_supportingevidence() {
  
  return supportingevidence_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Order::release_supportingevidence() {
  // @@protoc_insertion_point(field_release:actions.Order.SupportingEvidence)
  return supportingevidence_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_supportingevidence(std::string* supportingevidence) {
  if (supportingevidence != nullptr) {
    
  } else {
    
  }
  supportingevidence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supportingevidence,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Order.SupportingEvidence)
}
inline std::string* Order::unsafe_arena_release_supportingevidence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Order.SupportingEvidence)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return supportingevidence_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Order::unsafe_arena_set_allocated_supportingevidence(
    std::string* supportingevidence) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (supportingevidence != nullptr) {
    
  } else {
    
  }
  supportingevidence_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      supportingevidence, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Order.SupportingEvidence)
}

// repeated .actions.ReferenceTransactionField ReferenceTransactions = 18;
inline int Order::_internal_referencetransactions_size() const {
  return referencetransactions_.size();
}
inline int Order::referencetransactions_size() const {
  return _internal_referencetransactions_size();
}
inline void Order::clear_referencetransactions() {
  referencetransactions_.Clear();
}
inline ::actions::ReferenceTransactionField* Order::mutable_referencetransactions(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Order.ReferenceTransactions)
  return referencetransactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ReferenceTransactionField >*
Order::mutable_referencetransactions() {
  // @@protoc_insertion_point(field_mutable_list:actions.Order.ReferenceTransactions)
  return &referencetransactions_;
}
inline const ::actions::ReferenceTransactionField& Order::_internal_referencetransactions(int index) const {
  return referencetransactions_.Get(index);
}
inline const ::actions::ReferenceTransactionField& Order::referencetransactions(int index) const {
  // @@protoc_insertion_point(field_get:actions.Order.ReferenceTransactions)
  return _internal_referencetransactions(index);
}
inline ::actions::ReferenceTransactionField* Order::_internal_add_referencetransactions() {
  return referencetransactions_.Add();
}
inline ::actions::ReferenceTransactionField* Order::add_referencetransactions() {
  // @@protoc_insertion_point(field_add:actions.Order.ReferenceTransactions)
  return _internal_add_referencetransactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ReferenceTransactionField >&
Order::referencetransactions() const {
  // @@protoc_insertion_point(field_list:actions.Order.ReferenceTransactions)
  return referencetransactions_;
}

// -------------------------------------------------------------------

// Freeze

// string InstrumentType = 1;
inline void Freeze::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Freeze::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.Freeze.InstrumentType)
  return _internal_instrumenttype();
}
inline void Freeze::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.Freeze.InstrumentType)
}
inline std::string* Freeze::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.Freeze.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& Freeze::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void Freeze::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Freeze::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Freeze.InstrumentType)
}
inline void Freeze::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Freeze.InstrumentType)
}
inline void Freeze::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Freeze.InstrumentType)
}
inline std::string* Freeze::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Freeze::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.Freeze.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Freeze::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Freeze.InstrumentType)
}
inline std::string* Freeze::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Freeze.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Freeze::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Freeze.InstrumentType)
}

// bytes InstrumentCode = 2;
inline void Freeze::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Freeze::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.Freeze.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Freeze::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.Freeze.InstrumentCode)
}
inline std::string* Freeze::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.Freeze.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Freeze::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Freeze::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Freeze::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Freeze.InstrumentCode)
}
inline void Freeze::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Freeze.InstrumentCode)
}
inline void Freeze::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Freeze.InstrumentCode)
}
inline std::string* Freeze::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Freeze::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.Freeze.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Freeze::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Freeze.InstrumentCode)
}
inline std::string* Freeze::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Freeze.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Freeze::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Freeze.InstrumentCode)
}

// repeated .actions.QuantityIndexField Quantities = 3;
inline int Freeze::_internal_quantities_size() const {
  return quantities_.size();
}
inline int Freeze::quantities_size() const {
  return _internal_quantities_size();
}
inline void Freeze::clear_quantities() {
  quantities_.Clear();
}
inline ::actions::QuantityIndexField* Freeze::mutable_quantities(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Freeze.Quantities)
  return quantities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
Freeze::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:actions.Freeze.Quantities)
  return &quantities_;
}
inline const ::actions::QuantityIndexField& Freeze::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline const ::actions::QuantityIndexField& Freeze::quantities(int index) const {
  // @@protoc_insertion_point(field_get:actions.Freeze.Quantities)
  return _internal_quantities(index);
}
inline ::actions::QuantityIndexField* Freeze::_internal_add_quantities() {
  return quantities_.Add();
}
inline ::actions::QuantityIndexField* Freeze::add_quantities() {
  // @@protoc_insertion_point(field_add:actions.Freeze.Quantities)
  return _internal_add_quantities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
Freeze::quantities() const {
  // @@protoc_insertion_point(field_list:actions.Freeze.Quantities)
  return quantities_;
}

// uint64 FreezePeriod = 4;
inline void Freeze::clear_freezeperiod() {
  freezeperiod_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Freeze::_internal_freezeperiod() const {
  return freezeperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Freeze::freezeperiod() const {
  // @@protoc_insertion_point(field_get:actions.Freeze.FreezePeriod)
  return _internal_freezeperiod();
}
inline void Freeze::_internal_set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  freezeperiod_ = value;
}
inline void Freeze::set_freezeperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_freezeperiod(value);
  // @@protoc_insertion_point(field_set:actions.Freeze.FreezePeriod)
}

// uint64 Timestamp = 5;
inline void Freeze::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Freeze::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Freeze::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Freeze.Timestamp)
  return _internal_timestamp();
}
inline void Freeze::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Freeze::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Freeze.Timestamp)
}

// -------------------------------------------------------------------

// Thaw

// bytes FreezeTxId = 1;
inline void Thaw::clear_freezetxid() {
  freezetxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Thaw::freezetxid() const {
  // @@protoc_insertion_point(field_get:actions.Thaw.FreezeTxId)
  return _internal_freezetxid();
}
inline void Thaw::set_freezetxid(const std::string& value) {
  _internal_set_freezetxid(value);
  // @@protoc_insertion_point(field_set:actions.Thaw.FreezeTxId)
}
inline std::string* Thaw::mutable_freezetxid() {
  // @@protoc_insertion_point(field_mutable:actions.Thaw.FreezeTxId)
  return _internal_mutable_freezetxid();
}
inline const std::string& Thaw::_internal_freezetxid() const {
  return freezetxid_.Get();
}
inline void Thaw::_internal_set_freezetxid(const std::string& value) {
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Thaw::set_freezetxid(std::string&& value) {
  
  freezetxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Thaw.FreezeTxId)
}
inline void Thaw::set_freezetxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Thaw.FreezeTxId)
}
inline void Thaw::set_freezetxid(const void* value,
    size_t size) {
  
  freezetxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Thaw.FreezeTxId)
}
inline std::string* Thaw::_internal_mutable_freezetxid() {
  
  return freezetxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Thaw::release_freezetxid() {
  // @@protoc_insertion_point(field_release:actions.Thaw.FreezeTxId)
  return freezetxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Thaw::set_allocated_freezetxid(std::string* freezetxid) {
  if (freezetxid != nullptr) {
    
  } else {
    
  }
  freezetxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), freezetxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Thaw.FreezeTxId)
}
inline std::string* Thaw::unsafe_arena_release_freezetxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Thaw.FreezeTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return freezetxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Thaw::unsafe_arena_set_allocated_freezetxid(
    std::string* freezetxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (freezetxid != nullptr) {
    
  } else {
    
  }
  freezetxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      freezetxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Thaw.FreezeTxId)
}

// uint64 Timestamp = 2;
inline void Thaw::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Thaw::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Thaw::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Thaw.Timestamp)
  return _internal_timestamp();
}
inline void Thaw::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Thaw::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Thaw.Timestamp)
}

// -------------------------------------------------------------------

// Confiscation

// string InstrumentType = 1;
inline void Confiscation::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Confiscation::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.Confiscation.InstrumentType)
  return _internal_instrumenttype();
}
inline void Confiscation::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.Confiscation.InstrumentType)
}
inline std::string* Confiscation::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.Confiscation.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& Confiscation::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void Confiscation::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Confiscation::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Confiscation.InstrumentType)
}
inline void Confiscation::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Confiscation.InstrumentType)
}
inline void Confiscation::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Confiscation.InstrumentType)
}
inline std::string* Confiscation::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Confiscation::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.Confiscation.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Confiscation::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Confiscation.InstrumentType)
}
inline std::string* Confiscation::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Confiscation.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Confiscation::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Confiscation.InstrumentType)
}

// bytes InstrumentCode = 2;
inline void Confiscation::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Confiscation::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.Confiscation.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Confiscation::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.Confiscation.InstrumentCode)
}
inline std::string* Confiscation::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.Confiscation.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Confiscation::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Confiscation::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Confiscation::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Confiscation.InstrumentCode)
}
inline void Confiscation::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Confiscation.InstrumentCode)
}
inline void Confiscation::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Confiscation.InstrumentCode)
}
inline std::string* Confiscation::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Confiscation::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.Confiscation.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Confiscation::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Confiscation.InstrumentCode)
}
inline std::string* Confiscation::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Confiscation.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Confiscation::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Confiscation.InstrumentCode)
}

// repeated .actions.QuantityIndexField Quantities = 3;
inline int Confiscation::_internal_quantities_size() const {
  return quantities_.size();
}
inline int Confiscation::quantities_size() const {
  return _internal_quantities_size();
}
inline void Confiscation::clear_quantities() {
  quantities_.Clear();
}
inline ::actions::QuantityIndexField* Confiscation::mutable_quantities(int index) {
  // @@protoc_insertion_point(field_mutable:actions.Confiscation.Quantities)
  return quantities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
Confiscation::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:actions.Confiscation.Quantities)
  return &quantities_;
}
inline const ::actions::QuantityIndexField& Confiscation::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline const ::actions::QuantityIndexField& Confiscation::quantities(int index) const {
  // @@protoc_insertion_point(field_get:actions.Confiscation.Quantities)
  return _internal_quantities(index);
}
inline ::actions::QuantityIndexField* Confiscation::_internal_add_quantities() {
  return quantities_.Add();
}
inline ::actions::QuantityIndexField* Confiscation::add_quantities() {
  // @@protoc_insertion_point(field_add:actions.Confiscation.Quantities)
  return _internal_add_quantities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
Confiscation::quantities() const {
  // @@protoc_insertion_point(field_list:actions.Confiscation.Quantities)
  return quantities_;
}

// uint64 DepositQty = 4;
inline void Confiscation::clear_depositqty() {
  depositqty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Confiscation::_internal_depositqty() const {
  return depositqty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Confiscation::depositqty() const {
  // @@protoc_insertion_point(field_get:actions.Confiscation.DepositQty)
  return _internal_depositqty();
}
inline void Confiscation::_internal_set_depositqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  depositqty_ = value;
}
inline void Confiscation::set_depositqty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_depositqty(value);
  // @@protoc_insertion_point(field_set:actions.Confiscation.DepositQty)
}

// uint64 Timestamp = 5;
inline void Confiscation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Confiscation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Confiscation::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Confiscation.Timestamp)
  return _internal_timestamp();
}
inline void Confiscation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Confiscation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Confiscation.Timestamp)
}

// -------------------------------------------------------------------

// DeprecatedReconciliation

// string InstrumentType = 1;
inline void DeprecatedReconciliation::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeprecatedReconciliation::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.DeprecatedReconciliation.InstrumentType)
  return _internal_instrumenttype();
}
inline void DeprecatedReconciliation::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.DeprecatedReconciliation.InstrumentType)
}
inline std::string* DeprecatedReconciliation::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.DeprecatedReconciliation.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& DeprecatedReconciliation::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void DeprecatedReconciliation::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeprecatedReconciliation::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DeprecatedReconciliation.InstrumentType)
}
inline void DeprecatedReconciliation::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DeprecatedReconciliation.InstrumentType)
}
inline void DeprecatedReconciliation::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DeprecatedReconciliation.InstrumentType)
}
inline std::string* DeprecatedReconciliation::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeprecatedReconciliation::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.DeprecatedReconciliation.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeprecatedReconciliation::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DeprecatedReconciliation.InstrumentType)
}
inline std::string* DeprecatedReconciliation::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DeprecatedReconciliation.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeprecatedReconciliation::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DeprecatedReconciliation.InstrumentType)
}

// bytes InstrumentCode = 2;
inline void DeprecatedReconciliation::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeprecatedReconciliation::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.DeprecatedReconciliation.InstrumentCode)
  return _internal_instrumentcode();
}
inline void DeprecatedReconciliation::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.DeprecatedReconciliation.InstrumentCode)
}
inline std::string* DeprecatedReconciliation::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.DeprecatedReconciliation.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& DeprecatedReconciliation::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void DeprecatedReconciliation::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeprecatedReconciliation::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DeprecatedReconciliation.InstrumentCode)
}
inline void DeprecatedReconciliation::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DeprecatedReconciliation.InstrumentCode)
}
inline void DeprecatedReconciliation::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DeprecatedReconciliation.InstrumentCode)
}
inline std::string* DeprecatedReconciliation::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeprecatedReconciliation::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.DeprecatedReconciliation.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeprecatedReconciliation::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DeprecatedReconciliation.InstrumentCode)
}
inline std::string* DeprecatedReconciliation::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DeprecatedReconciliation.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeprecatedReconciliation::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DeprecatedReconciliation.InstrumentCode)
}

// repeated .actions.QuantityIndexField Quantities = 3;
inline int DeprecatedReconciliation::_internal_quantities_size() const {
  return quantities_.size();
}
inline int DeprecatedReconciliation::quantities_size() const {
  return _internal_quantities_size();
}
inline void DeprecatedReconciliation::clear_quantities() {
  quantities_.Clear();
}
inline ::actions::QuantityIndexField* DeprecatedReconciliation::mutable_quantities(int index) {
  // @@protoc_insertion_point(field_mutable:actions.DeprecatedReconciliation.Quantities)
  return quantities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
DeprecatedReconciliation::mutable_quantities() {
  // @@protoc_insertion_point(field_mutable_list:actions.DeprecatedReconciliation.Quantities)
  return &quantities_;
}
inline const ::actions::QuantityIndexField& DeprecatedReconciliation::_internal_quantities(int index) const {
  return quantities_.Get(index);
}
inline const ::actions::QuantityIndexField& DeprecatedReconciliation::quantities(int index) const {
  // @@protoc_insertion_point(field_get:actions.DeprecatedReconciliation.Quantities)
  return _internal_quantities(index);
}
inline ::actions::QuantityIndexField* DeprecatedReconciliation::_internal_add_quantities() {
  return quantities_.Add();
}
inline ::actions::QuantityIndexField* DeprecatedReconciliation::add_quantities() {
  // @@protoc_insertion_point(field_add:actions.DeprecatedReconciliation.Quantities)
  return _internal_add_quantities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
DeprecatedReconciliation::quantities() const {
  // @@protoc_insertion_point(field_list:actions.DeprecatedReconciliation.Quantities)
  return quantities_;
}

// uint64 Timestamp = 4;
inline void DeprecatedReconciliation::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeprecatedReconciliation::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeprecatedReconciliation::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.DeprecatedReconciliation.Timestamp)
  return _internal_timestamp();
}
inline void DeprecatedReconciliation::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void DeprecatedReconciliation::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.DeprecatedReconciliation.Timestamp)
}

// -------------------------------------------------------------------

// Establishment

// string Message = 1;
inline void Establishment::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Establishment::message() const {
  // @@protoc_insertion_point(field_get:actions.Establishment.Message)
  return _internal_message();
}
inline void Establishment::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Establishment.Message)
}
inline std::string* Establishment::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Establishment.Message)
  return _internal_mutable_message();
}
inline const std::string& Establishment::_internal_message() const {
  return message_.Get();
}
inline void Establishment::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Establishment::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Establishment.Message)
}
inline void Establishment::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Establishment.Message)
}
inline void Establishment::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Establishment.Message)
}
inline std::string* Establishment::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Establishment::release_message() {
  // @@protoc_insertion_point(field_release:actions.Establishment.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Establishment::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Establishment.Message)
}
inline std::string* Establishment::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Establishment.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Establishment::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Establishment.Message)
}

// -------------------------------------------------------------------

// Addition

// string Message = 1;
inline void Addition::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Addition::message() const {
  // @@protoc_insertion_point(field_get:actions.Addition.Message)
  return _internal_message();
}
inline void Addition::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Addition.Message)
}
inline std::string* Addition::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Addition.Message)
  return _internal_mutable_message();
}
inline const std::string& Addition::_internal_message() const {
  return message_.Get();
}
inline void Addition::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Addition::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Addition.Message)
}
inline void Addition::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Addition.Message)
}
inline void Addition::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Addition.Message)
}
inline std::string* Addition::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Addition::release_message() {
  // @@protoc_insertion_point(field_release:actions.Addition.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Addition::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Addition.Message)
}
inline std::string* Addition::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Addition.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Addition::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Addition.Message)
}

// -------------------------------------------------------------------

// Alteration

// bytes EntryTxID = 1;
inline void Alteration::clear_entrytxid() {
  entrytxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alteration::entrytxid() const {
  // @@protoc_insertion_point(field_get:actions.Alteration.EntryTxID)
  return _internal_entrytxid();
}
inline void Alteration::set_entrytxid(const std::string& value) {
  _internal_set_entrytxid(value);
  // @@protoc_insertion_point(field_set:actions.Alteration.EntryTxID)
}
inline std::string* Alteration::mutable_entrytxid() {
  // @@protoc_insertion_point(field_mutable:actions.Alteration.EntryTxID)
  return _internal_mutable_entrytxid();
}
inline const std::string& Alteration::_internal_entrytxid() const {
  return entrytxid_.Get();
}
inline void Alteration::_internal_set_entrytxid(const std::string& value) {
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alteration::set_entrytxid(std::string&& value) {
  
  entrytxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Alteration.EntryTxID)
}
inline void Alteration::set_entrytxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Alteration.EntryTxID)
}
inline void Alteration::set_entrytxid(const void* value,
    size_t size) {
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Alteration.EntryTxID)
}
inline std::string* Alteration::_internal_mutable_entrytxid() {
  
  return entrytxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alteration::release_entrytxid() {
  // @@protoc_insertion_point(field_release:actions.Alteration.EntryTxID)
  return entrytxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alteration::set_allocated_entrytxid(std::string* entrytxid) {
  if (entrytxid != nullptr) {
    
  } else {
    
  }
  entrytxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entrytxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Alteration.EntryTxID)
}
inline std::string* Alteration::unsafe_arena_release_entrytxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Alteration.EntryTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entrytxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alteration::unsafe_arena_set_allocated_entrytxid(
    std::string* entrytxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entrytxid != nullptr) {
    
  } else {
    
  }
  entrytxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entrytxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Alteration.EntryTxID)
}

// string Message = 2;
inline void Alteration::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alteration::message() const {
  // @@protoc_insertion_point(field_get:actions.Alteration.Message)
  return _internal_message();
}
inline void Alteration::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Alteration.Message)
}
inline std::string* Alteration::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Alteration.Message)
  return _internal_mutable_message();
}
inline const std::string& Alteration::_internal_message() const {
  return message_.Get();
}
inline void Alteration::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alteration::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Alteration.Message)
}
inline void Alteration::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Alteration.Message)
}
inline void Alteration::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Alteration.Message)
}
inline std::string* Alteration::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alteration::release_message() {
  // @@protoc_insertion_point(field_release:actions.Alteration.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alteration::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Alteration.Message)
}
inline std::string* Alteration::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Alteration.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alteration::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Alteration.Message)
}

// -------------------------------------------------------------------

// Removal

// bytes EntryTxID = 1;
inline void Removal::clear_entrytxid() {
  entrytxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Removal::entrytxid() const {
  // @@protoc_insertion_point(field_get:actions.Removal.EntryTxID)
  return _internal_entrytxid();
}
inline void Removal::set_entrytxid(const std::string& value) {
  _internal_set_entrytxid(value);
  // @@protoc_insertion_point(field_set:actions.Removal.EntryTxID)
}
inline std::string* Removal::mutable_entrytxid() {
  // @@protoc_insertion_point(field_mutable:actions.Removal.EntryTxID)
  return _internal_mutable_entrytxid();
}
inline const std::string& Removal::_internal_entrytxid() const {
  return entrytxid_.Get();
}
inline void Removal::_internal_set_entrytxid(const std::string& value) {
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Removal::set_entrytxid(std::string&& value) {
  
  entrytxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Removal.EntryTxID)
}
inline void Removal::set_entrytxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Removal.EntryTxID)
}
inline void Removal::set_entrytxid(const void* value,
    size_t size) {
  
  entrytxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Removal.EntryTxID)
}
inline std::string* Removal::_internal_mutable_entrytxid() {
  
  return entrytxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Removal::release_entrytxid() {
  // @@protoc_insertion_point(field_release:actions.Removal.EntryTxID)
  return entrytxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Removal::set_allocated_entrytxid(std::string* entrytxid) {
  if (entrytxid != nullptr) {
    
  } else {
    
  }
  entrytxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entrytxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Removal.EntryTxID)
}
inline std::string* Removal::unsafe_arena_release_entrytxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Removal.EntryTxID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entrytxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Removal::unsafe_arena_set_allocated_entrytxid(
    std::string* entrytxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entrytxid != nullptr) {
    
  } else {
    
  }
  entrytxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entrytxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Removal.EntryTxID)
}

// string Message = 2;
inline void Removal::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Removal::message() const {
  // @@protoc_insertion_point(field_get:actions.Removal.Message)
  return _internal_message();
}
inline void Removal::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Removal.Message)
}
inline std::string* Removal::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Removal.Message)
  return _internal_mutable_message();
}
inline const std::string& Removal::_internal_message() const {
  return message_.Get();
}
inline void Removal::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Removal::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Removal.Message)
}
inline void Removal::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Removal.Message)
}
inline void Removal::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Removal.Message)
}
inline std::string* Removal::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Removal::release_message() {
  // @@protoc_insertion_point(field_release:actions.Removal.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Removal::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Removal.Message)
}
inline std::string* Removal::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Removal.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Removal::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Removal.Message)
}

// -------------------------------------------------------------------

// Message

// repeated uint32 SenderIndexes = 1;
inline int Message::_internal_senderindexes_size() const {
  return senderindexes_.size();
}
inline int Message::senderindexes_size() const {
  return _internal_senderindexes_size();
}
inline void Message::clear_senderindexes() {
  senderindexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_senderindexes(int index) const {
  return senderindexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::senderindexes(int index) const {
  // @@protoc_insertion_point(field_get:actions.Message.SenderIndexes)
  return _internal_senderindexes(index);
}
inline void Message::set_senderindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  senderindexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:actions.Message.SenderIndexes)
}
inline void Message::_internal_add_senderindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  senderindexes_.Add(value);
}
inline void Message::add_senderindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_senderindexes(value);
  // @@protoc_insertion_point(field_add:actions.Message.SenderIndexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Message::_internal_senderindexes() const {
  return senderindexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Message::senderindexes() const {
  // @@protoc_insertion_point(field_list:actions.Message.SenderIndexes)
  return _internal_senderindexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Message::_internal_mutable_senderindexes() {
  return &senderindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Message::mutable_senderindexes() {
  // @@protoc_insertion_point(field_mutable_list:actions.Message.SenderIndexes)
  return _internal_mutable_senderindexes();
}

// repeated uint32 ReceiverIndexes = 2;
inline int Message::_internal_receiverindexes_size() const {
  return receiverindexes_.size();
}
inline int Message::receiverindexes_size() const {
  return _internal_receiverindexes_size();
}
inline void Message::clear_receiverindexes() {
  receiverindexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_receiverindexes(int index) const {
  return receiverindexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::receiverindexes(int index) const {
  // @@protoc_insertion_point(field_get:actions.Message.ReceiverIndexes)
  return _internal_receiverindexes(index);
}
inline void Message::set_receiverindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  receiverindexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:actions.Message.ReceiverIndexes)
}
inline void Message::_internal_add_receiverindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  receiverindexes_.Add(value);
}
inline void Message::add_receiverindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_receiverindexes(value);
  // @@protoc_insertion_point(field_add:actions.Message.ReceiverIndexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Message::_internal_receiverindexes() const {
  return receiverindexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Message::receiverindexes() const {
  // @@protoc_insertion_point(field_list:actions.Message.ReceiverIndexes)
  return _internal_receiverindexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Message::_internal_mutable_receiverindexes() {
  return &receiverindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Message::mutable_receiverindexes() {
  // @@protoc_insertion_point(field_mutable_list:actions.Message.ReceiverIndexes)
  return _internal_mutable_receiverindexes();
}

// uint32 MessageCode = 3;
inline void Message::clear_messagecode() {
  messagecode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_messagecode() const {
  return messagecode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::messagecode() const {
  // @@protoc_insertion_point(field_get:actions.Message.MessageCode)
  return _internal_messagecode();
}
inline void Message::_internal_set_messagecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  messagecode_ = value;
}
inline void Message::set_messagecode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_messagecode(value);
  // @@protoc_insertion_point(field_set:actions.Message.MessageCode)
}

// bytes MessagePayload = 4;
inline void Message::clear_messagepayload() {
  messagepayload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message::messagepayload() const {
  // @@protoc_insertion_point(field_get:actions.Message.MessagePayload)
  return _internal_messagepayload();
}
inline void Message::set_messagepayload(const std::string& value) {
  _internal_set_messagepayload(value);
  // @@protoc_insertion_point(field_set:actions.Message.MessagePayload)
}
inline std::string* Message::mutable_messagepayload() {
  // @@protoc_insertion_point(field_mutable:actions.Message.MessagePayload)
  return _internal_mutable_messagepayload();
}
inline const std::string& Message::_internal_messagepayload() const {
  return messagepayload_.Get();
}
inline void Message::_internal_set_messagepayload(const std::string& value) {
  
  messagepayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message::set_messagepayload(std::string&& value) {
  
  messagepayload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Message.MessagePayload)
}
inline void Message::set_messagepayload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messagepayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Message.MessagePayload)
}
inline void Message::set_messagepayload(const void* value,
    size_t size) {
  
  messagepayload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Message.MessagePayload)
}
inline std::string* Message::_internal_mutable_messagepayload() {
  
  return messagepayload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message::release_messagepayload() {
  // @@protoc_insertion_point(field_release:actions.Message.MessagePayload)
  return messagepayload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_messagepayload(std::string* messagepayload) {
  if (messagepayload != nullptr) {
    
  } else {
    
  }
  messagepayload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagepayload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Message.MessagePayload)
}
inline std::string* Message::unsafe_arena_release_messagepayload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Message.MessagePayload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return messagepayload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message::unsafe_arena_set_allocated_messagepayload(
    std::string* messagepayload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (messagepayload != nullptr) {
    
  } else {
    
  }
  messagepayload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      messagepayload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Message.MessagePayload)
}

// -------------------------------------------------------------------

// Rejection

// repeated uint32 AddressIndexes = 1;
inline int Rejection::_internal_addressindexes_size() const {
  return addressindexes_.size();
}
inline int Rejection::addressindexes_size() const {
  return _internal_addressindexes_size();
}
inline void Rejection::clear_addressindexes() {
  addressindexes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::_internal_addressindexes(int index) const {
  return addressindexes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::addressindexes(int index) const {
  // @@protoc_insertion_point(field_get:actions.Rejection.AddressIndexes)
  return _internal_addressindexes(index);
}
inline void Rejection::set_addressindexes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  addressindexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:actions.Rejection.AddressIndexes)
}
inline void Rejection::_internal_add_addressindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  addressindexes_.Add(value);
}
inline void Rejection::add_addressindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_addressindexes(value);
  // @@protoc_insertion_point(field_add:actions.Rejection.AddressIndexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rejection::_internal_addressindexes() const {
  return addressindexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Rejection::addressindexes() const {
  // @@protoc_insertion_point(field_list:actions.Rejection.AddressIndexes)
  return _internal_addressindexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rejection::_internal_mutable_addressindexes() {
  return &addressindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Rejection::mutable_addressindexes() {
  // @@protoc_insertion_point(field_mutable_list:actions.Rejection.AddressIndexes)
  return _internal_mutable_addressindexes();
}

// uint32 RejectAddressIndex = 2;
inline void Rejection::clear_rejectaddressindex() {
  rejectaddressindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::_internal_rejectaddressindex() const {
  return rejectaddressindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::rejectaddressindex() const {
  // @@protoc_insertion_point(field_get:actions.Rejection.RejectAddressIndex)
  return _internal_rejectaddressindex();
}
inline void Rejection::_internal_set_rejectaddressindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rejectaddressindex_ = value;
}
inline void Rejection::set_rejectaddressindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rejectaddressindex(value);
  // @@protoc_insertion_point(field_set:actions.Rejection.RejectAddressIndex)
}

// uint32 RejectionCode = 3;
inline void Rejection::clear_rejectioncode() {
  rejectioncode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::_internal_rejectioncode() const {
  return rejectioncode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rejection::rejectioncode() const {
  // @@protoc_insertion_point(field_get:actions.Rejection.RejectionCode)
  return _internal_rejectioncode();
}
inline void Rejection::_internal_set_rejectioncode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rejectioncode_ = value;
}
inline void Rejection::set_rejectioncode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rejectioncode(value);
  // @@protoc_insertion_point(field_set:actions.Rejection.RejectionCode)
}

// string Message = 4;
inline void Rejection::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Rejection::message() const {
  // @@protoc_insertion_point(field_get:actions.Rejection.Message)
  return _internal_message();
}
inline void Rejection::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:actions.Rejection.Message)
}
inline std::string* Rejection::mutable_message() {
  // @@protoc_insertion_point(field_mutable:actions.Rejection.Message)
  return _internal_mutable_message();
}
inline const std::string& Rejection::_internal_message() const {
  return message_.Get();
}
inline void Rejection::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rejection::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.Rejection.Message)
}
inline void Rejection::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.Rejection.Message)
}
inline void Rejection::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.Rejection.Message)
}
inline std::string* Rejection::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rejection::release_message() {
  // @@protoc_insertion_point(field_release:actions.Rejection.Message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rejection::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.Rejection.Message)
}
inline std::string* Rejection::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.Rejection.Message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rejection::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.Rejection.Message)
}

// uint64 Timestamp = 5;
inline void Rejection::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Rejection::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Rejection::timestamp() const {
  // @@protoc_insertion_point(field_get:actions.Rejection.Timestamp)
  return _internal_timestamp();
}
inline void Rejection::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Rejection::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:actions.Rejection.Timestamp)
}

// -------------------------------------------------------------------

// AdministratorField

// uint32 Type = 1;
inline void AdministratorField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdministratorField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdministratorField::type() const {
  // @@protoc_insertion_point(field_get:actions.AdministratorField.Type)
  return _internal_type();
}
inline void AdministratorField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AdministratorField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.AdministratorField.Type)
}

// string Name = 2;
inline void AdministratorField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdministratorField::name() const {
  // @@protoc_insertion_point(field_get:actions.AdministratorField.Name)
  return _internal_name();
}
inline void AdministratorField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:actions.AdministratorField.Name)
}
inline std::string* AdministratorField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:actions.AdministratorField.Name)
  return _internal_mutable_name();
}
inline const std::string& AdministratorField::_internal_name() const {
  return name_.Get();
}
inline void AdministratorField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdministratorField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.AdministratorField.Name)
}
inline void AdministratorField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.AdministratorField.Name)
}
inline void AdministratorField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.AdministratorField.Name)
}
inline std::string* AdministratorField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdministratorField::release_name() {
  // @@protoc_insertion_point(field_release:actions.AdministratorField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdministratorField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.AdministratorField.Name)
}
inline std::string* AdministratorField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.AdministratorField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AdministratorField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.AdministratorField.Name)
}

// -------------------------------------------------------------------

// AdminIdentityCertificateField

// bytes EntityContract = 1;
inline void AdminIdentityCertificateField::clear_entitycontract() {
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdminIdentityCertificateField::entitycontract() const {
  // @@protoc_insertion_point(field_get:actions.AdminIdentityCertificateField.EntityContract)
  return _internal_entitycontract();
}
inline void AdminIdentityCertificateField::set_entitycontract(const std::string& value) {
  _internal_set_entitycontract(value);
  // @@protoc_insertion_point(field_set:actions.AdminIdentityCertificateField.EntityContract)
}
inline std::string* AdminIdentityCertificateField::mutable_entitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.AdminIdentityCertificateField.EntityContract)
  return _internal_mutable_entitycontract();
}
inline const std::string& AdminIdentityCertificateField::_internal_entitycontract() const {
  return entitycontract_.Get();
}
inline void AdminIdentityCertificateField::_internal_set_entitycontract(const std::string& value) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdminIdentityCertificateField::set_entitycontract(std::string&& value) {
  
  entitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.AdminIdentityCertificateField.EntityContract)
}
inline void AdminIdentityCertificateField::set_entitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.AdminIdentityCertificateField.EntityContract)
}
inline void AdminIdentityCertificateField::set_entitycontract(const void* value,
    size_t size) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.AdminIdentityCertificateField.EntityContract)
}
inline std::string* AdminIdentityCertificateField::_internal_mutable_entitycontract() {
  
  return entitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdminIdentityCertificateField::release_entitycontract() {
  // @@protoc_insertion_point(field_release:actions.AdminIdentityCertificateField.EntityContract)
  return entitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdminIdentityCertificateField::set_allocated_entitycontract(std::string* entitycontract) {
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.AdminIdentityCertificateField.EntityContract)
}
inline std::string* AdminIdentityCertificateField::unsafe_arena_release_entitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.AdminIdentityCertificateField.EntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AdminIdentityCertificateField::unsafe_arena_set_allocated_entitycontract(
    std::string* entitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.AdminIdentityCertificateField.EntityContract)
}

// bytes Signature = 2;
inline void AdminIdentityCertificateField::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdminIdentityCertificateField::signature() const {
  // @@protoc_insertion_point(field_get:actions.AdminIdentityCertificateField.Signature)
  return _internal_signature();
}
inline void AdminIdentityCertificateField::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:actions.AdminIdentityCertificateField.Signature)
}
inline std::string* AdminIdentityCertificateField::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:actions.AdminIdentityCertificateField.Signature)
  return _internal_mutable_signature();
}
inline const std::string& AdminIdentityCertificateField::_internal_signature() const {
  return signature_.Get();
}
inline void AdminIdentityCertificateField::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdminIdentityCertificateField::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.AdminIdentityCertificateField.Signature)
}
inline void AdminIdentityCertificateField::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.AdminIdentityCertificateField.Signature)
}
inline void AdminIdentityCertificateField::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.AdminIdentityCertificateField.Signature)
}
inline std::string* AdminIdentityCertificateField::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdminIdentityCertificateField::release_signature() {
  // @@protoc_insertion_point(field_release:actions.AdminIdentityCertificateField.Signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdminIdentityCertificateField::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.AdminIdentityCertificateField.Signature)
}
inline std::string* AdminIdentityCertificateField::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.AdminIdentityCertificateField.Signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AdminIdentityCertificateField::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.AdminIdentityCertificateField.Signature)
}

// uint32 BlockHeight = 3;
inline void AdminIdentityCertificateField::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminIdentityCertificateField::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdminIdentityCertificateField::blockheight() const {
  // @@protoc_insertion_point(field_get:actions.AdminIdentityCertificateField.BlockHeight)
  return _internal_blockheight();
}
inline void AdminIdentityCertificateField::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void AdminIdentityCertificateField::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:actions.AdminIdentityCertificateField.BlockHeight)
}

// uint64 Expiration = 4;
inline void AdminIdentityCertificateField::clear_expiration() {
  expiration_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdminIdentityCertificateField::_internal_expiration() const {
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AdminIdentityCertificateField::expiration() const {
  // @@protoc_insertion_point(field_get:actions.AdminIdentityCertificateField.Expiration)
  return _internal_expiration();
}
inline void AdminIdentityCertificateField::_internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expiration_ = value;
}
inline void AdminIdentityCertificateField::set_expiration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:actions.AdminIdentityCertificateField.Expiration)
}

// -------------------------------------------------------------------

// AmendmentField

// bytes FieldIndexPath = 1;
inline void AmendmentField::clear_fieldindexpath() {
  fieldindexpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AmendmentField::fieldindexpath() const {
  // @@protoc_insertion_point(field_get:actions.AmendmentField.FieldIndexPath)
  return _internal_fieldindexpath();
}
inline void AmendmentField::set_fieldindexpath(const std::string& value) {
  _internal_set_fieldindexpath(value);
  // @@protoc_insertion_point(field_set:actions.AmendmentField.FieldIndexPath)
}
inline std::string* AmendmentField::mutable_fieldindexpath() {
  // @@protoc_insertion_point(field_mutable:actions.AmendmentField.FieldIndexPath)
  return _internal_mutable_fieldindexpath();
}
inline const std::string& AmendmentField::_internal_fieldindexpath() const {
  return fieldindexpath_.Get();
}
inline void AmendmentField::_internal_set_fieldindexpath(const std::string& value) {
  
  fieldindexpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AmendmentField::set_fieldindexpath(std::string&& value) {
  
  fieldindexpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.AmendmentField.FieldIndexPath)
}
inline void AmendmentField::set_fieldindexpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldindexpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.AmendmentField.FieldIndexPath)
}
inline void AmendmentField::set_fieldindexpath(const void* value,
    size_t size) {
  
  fieldindexpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.AmendmentField.FieldIndexPath)
}
inline std::string* AmendmentField::_internal_mutable_fieldindexpath() {
  
  return fieldindexpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AmendmentField::release_fieldindexpath() {
  // @@protoc_insertion_point(field_release:actions.AmendmentField.FieldIndexPath)
  return fieldindexpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AmendmentField::set_allocated_fieldindexpath(std::string* fieldindexpath) {
  if (fieldindexpath != nullptr) {
    
  } else {
    
  }
  fieldindexpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldindexpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.AmendmentField.FieldIndexPath)
}
inline std::string* AmendmentField::unsafe_arena_release_fieldindexpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.AmendmentField.FieldIndexPath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fieldindexpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AmendmentField::unsafe_arena_set_allocated_fieldindexpath(
    std::string* fieldindexpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fieldindexpath != nullptr) {
    
  } else {
    
  }
  fieldindexpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fieldindexpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.AmendmentField.FieldIndexPath)
}

// uint32 Operation = 2;
inline void AmendmentField::clear_operation() {
  operation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AmendmentField::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AmendmentField::operation() const {
  // @@protoc_insertion_point(field_get:actions.AmendmentField.Operation)
  return _internal_operation();
}
inline void AmendmentField::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  operation_ = value;
}
inline void AmendmentField::set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:actions.AmendmentField.Operation)
}

// bytes Data = 3;
inline void AmendmentField::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AmendmentField::data() const {
  // @@protoc_insertion_point(field_get:actions.AmendmentField.Data)
  return _internal_data();
}
inline void AmendmentField::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:actions.AmendmentField.Data)
}
inline std::string* AmendmentField::mutable_data() {
  // @@protoc_insertion_point(field_mutable:actions.AmendmentField.Data)
  return _internal_mutable_data();
}
inline const std::string& AmendmentField::_internal_data() const {
  return data_.Get();
}
inline void AmendmentField::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AmendmentField::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.AmendmentField.Data)
}
inline void AmendmentField::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.AmendmentField.Data)
}
inline void AmendmentField::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.AmendmentField.Data)
}
inline std::string* AmendmentField::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AmendmentField::release_data() {
  // @@protoc_insertion_point(field_release:actions.AmendmentField.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AmendmentField::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.AmendmentField.Data)
}
inline std::string* AmendmentField::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.AmendmentField.Data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AmendmentField::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.AmendmentField.Data)
}

// -------------------------------------------------------------------

// InstrumentReceiverField

// bytes Address = 1;
inline void InstrumentReceiverField::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentReceiverField::address() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.Address)
  return _internal_address();
}
inline void InstrumentReceiverField::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.Address)
}
inline std::string* InstrumentReceiverField::mutable_address() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentReceiverField.Address)
  return _internal_mutable_address();
}
inline const std::string& InstrumentReceiverField::_internal_address() const {
  return address_.Get();
}
inline void InstrumentReceiverField::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentReceiverField::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentReceiverField.Address)
}
inline void InstrumentReceiverField::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentReceiverField.Address)
}
inline void InstrumentReceiverField::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentReceiverField.Address)
}
inline std::string* InstrumentReceiverField::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentReceiverField::release_address() {
  // @@protoc_insertion_point(field_release:actions.InstrumentReceiverField.Address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentReceiverField::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentReceiverField.Address)
}
inline std::string* InstrumentReceiverField::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentReceiverField.Address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentReceiverField::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentReceiverField.Address)
}

// uint64 Quantity = 2;
inline void InstrumentReceiverField::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentReceiverField::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentReceiverField::quantity() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.Quantity)
  return _internal_quantity();
}
inline void InstrumentReceiverField::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void InstrumentReceiverField::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.Quantity)
}

// uint32 OracleSigAlgorithm = 3;
inline void InstrumentReceiverField::clear_oraclesigalgorithm() {
  oraclesigalgorithm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::_internal_oraclesigalgorithm() const {
  return oraclesigalgorithm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::oraclesigalgorithm() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.OracleSigAlgorithm)
  return _internal_oraclesigalgorithm();
}
inline void InstrumentReceiverField::_internal_set_oraclesigalgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oraclesigalgorithm_ = value;
}
inline void InstrumentReceiverField::set_oraclesigalgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oraclesigalgorithm(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.OracleSigAlgorithm)
}

// uint32 OracleIndex = 4;
inline void InstrumentReceiverField::clear_oracleindex() {
  oracleindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::_internal_oracleindex() const {
  return oracleindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::oracleindex() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.OracleIndex)
  return _internal_oracleindex();
}
inline void InstrumentReceiverField::_internal_set_oracleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oracleindex_ = value;
}
inline void InstrumentReceiverField::set_oracleindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oracleindex(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.OracleIndex)
}

// bytes OracleConfirmationSig = 5;
inline void InstrumentReceiverField::clear_oracleconfirmationsig() {
  oracleconfirmationsig_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentReceiverField::oracleconfirmationsig() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.OracleConfirmationSig)
  return _internal_oracleconfirmationsig();
}
inline void InstrumentReceiverField::set_oracleconfirmationsig(const std::string& value) {
  _internal_set_oracleconfirmationsig(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.OracleConfirmationSig)
}
inline std::string* InstrumentReceiverField::mutable_oracleconfirmationsig() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentReceiverField.OracleConfirmationSig)
  return _internal_mutable_oracleconfirmationsig();
}
inline const std::string& InstrumentReceiverField::_internal_oracleconfirmationsig() const {
  return oracleconfirmationsig_.Get();
}
inline void InstrumentReceiverField::_internal_set_oracleconfirmationsig(const std::string& value) {
  
  oracleconfirmationsig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentReceiverField::set_oracleconfirmationsig(std::string&& value) {
  
  oracleconfirmationsig_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentReceiverField.OracleConfirmationSig)
}
inline void InstrumentReceiverField::set_oracleconfirmationsig(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oracleconfirmationsig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentReceiverField.OracleConfirmationSig)
}
inline void InstrumentReceiverField::set_oracleconfirmationsig(const void* value,
    size_t size) {
  
  oracleconfirmationsig_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentReceiverField.OracleConfirmationSig)
}
inline std::string* InstrumentReceiverField::_internal_mutable_oracleconfirmationsig() {
  
  return oracleconfirmationsig_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentReceiverField::release_oracleconfirmationsig() {
  // @@protoc_insertion_point(field_release:actions.InstrumentReceiverField.OracleConfirmationSig)
  return oracleconfirmationsig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentReceiverField::set_allocated_oracleconfirmationsig(std::string* oracleconfirmationsig) {
  if (oracleconfirmationsig != nullptr) {
    
  } else {
    
  }
  oracleconfirmationsig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oracleconfirmationsig,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentReceiverField.OracleConfirmationSig)
}
inline std::string* InstrumentReceiverField::unsafe_arena_release_oracleconfirmationsig() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentReceiverField.OracleConfirmationSig)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return oracleconfirmationsig_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentReceiverField::unsafe_arena_set_allocated_oracleconfirmationsig(
    std::string* oracleconfirmationsig) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oracleconfirmationsig != nullptr) {
    
  } else {
    
  }
  oracleconfirmationsig_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oracleconfirmationsig, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentReceiverField.OracleConfirmationSig)
}

// uint32 OracleSigBlockHeight = 6;
inline void InstrumentReceiverField::clear_oraclesigblockheight() {
  oraclesigblockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::_internal_oraclesigblockheight() const {
  return oraclesigblockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentReceiverField::oraclesigblockheight() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.OracleSigBlockHeight)
  return _internal_oraclesigblockheight();
}
inline void InstrumentReceiverField::_internal_set_oraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  oraclesigblockheight_ = value;
}
inline void InstrumentReceiverField::set_oraclesigblockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oraclesigblockheight(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.OracleSigBlockHeight)
}

// uint64 OracleSigExpiry = 7;
inline void InstrumentReceiverField::clear_oraclesigexpiry() {
  oraclesigexpiry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentReceiverField::_internal_oraclesigexpiry() const {
  return oraclesigexpiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InstrumentReceiverField::oraclesigexpiry() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentReceiverField.OracleSigExpiry)
  return _internal_oraclesigexpiry();
}
inline void InstrumentReceiverField::_internal_set_oraclesigexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  oraclesigexpiry_ = value;
}
inline void InstrumentReceiverField::set_oraclesigexpiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_oraclesigexpiry(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentReceiverField.OracleSigExpiry)
}

// -------------------------------------------------------------------

// InstrumentSettlementField

// uint32 ContractIndex = 1;
inline void InstrumentSettlementField::clear_contractindex() {
  contractindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentSettlementField::_internal_contractindex() const {
  return contractindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentSettlementField::contractindex() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentSettlementField.ContractIndex)
  return _internal_contractindex();
}
inline void InstrumentSettlementField::_internal_set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractindex_ = value;
}
inline void InstrumentSettlementField::set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractindex(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentSettlementField.ContractIndex)
}

// string InstrumentType = 2;
inline void InstrumentSettlementField::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentSettlementField::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentSettlementField.InstrumentType)
  return _internal_instrumenttype();
}
inline void InstrumentSettlementField::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentSettlementField.InstrumentType)
}
inline std::string* InstrumentSettlementField::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentSettlementField.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& InstrumentSettlementField::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void InstrumentSettlementField::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentSettlementField::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentSettlementField.InstrumentType)
}
inline void InstrumentSettlementField::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentSettlementField.InstrumentType)
}
inline void InstrumentSettlementField::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentSettlementField.InstrumentType)
}
inline std::string* InstrumentSettlementField::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentSettlementField::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.InstrumentSettlementField.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentSettlementField::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentSettlementField.InstrumentType)
}
inline std::string* InstrumentSettlementField::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentSettlementField.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentSettlementField::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentSettlementField.InstrumentType)
}

// bytes InstrumentCode = 3;
inline void InstrumentSettlementField::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentSettlementField::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentSettlementField.InstrumentCode)
  return _internal_instrumentcode();
}
inline void InstrumentSettlementField::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentSettlementField.InstrumentCode)
}
inline std::string* InstrumentSettlementField::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentSettlementField.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& InstrumentSettlementField::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void InstrumentSettlementField::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentSettlementField::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentSettlementField.InstrumentCode)
}
inline void InstrumentSettlementField::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentSettlementField.InstrumentCode)
}
inline void InstrumentSettlementField::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentSettlementField.InstrumentCode)
}
inline std::string* InstrumentSettlementField::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentSettlementField::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.InstrumentSettlementField.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentSettlementField::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentSettlementField.InstrumentCode)
}
inline std::string* InstrumentSettlementField::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentSettlementField.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentSettlementField::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentSettlementField.InstrumentCode)
}

// repeated .actions.QuantityIndexField Settlements = 4;
inline int InstrumentSettlementField::_internal_settlements_size() const {
  return settlements_.size();
}
inline int InstrumentSettlementField::settlements_size() const {
  return _internal_settlements_size();
}
inline void InstrumentSettlementField::clear_settlements() {
  settlements_.Clear();
}
inline ::actions::QuantityIndexField* InstrumentSettlementField::mutable_settlements(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentSettlementField.Settlements)
  return settlements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
InstrumentSettlementField::mutable_settlements() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentSettlementField.Settlements)
  return &settlements_;
}
inline const ::actions::QuantityIndexField& InstrumentSettlementField::_internal_settlements(int index) const {
  return settlements_.Get(index);
}
inline const ::actions::QuantityIndexField& InstrumentSettlementField::settlements(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentSettlementField.Settlements)
  return _internal_settlements(index);
}
inline ::actions::QuantityIndexField* InstrumentSettlementField::_internal_add_settlements() {
  return settlements_.Add();
}
inline ::actions::QuantityIndexField* InstrumentSettlementField::add_settlements() {
  // @@protoc_insertion_point(field_add:actions.InstrumentSettlementField.Settlements)
  return _internal_add_settlements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
InstrumentSettlementField::settlements() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentSettlementField.Settlements)
  return settlements_;
}

// -------------------------------------------------------------------

// InstrumentTransferField

// uint32 ContractIndex = 1;
inline void InstrumentTransferField::clear_contractindex() {
  contractindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentTransferField::_internal_contractindex() const {
  return contractindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InstrumentTransferField::contractindex() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentTransferField.ContractIndex)
  return _internal_contractindex();
}
inline void InstrumentTransferField::_internal_set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contractindex_ = value;
}
inline void InstrumentTransferField::set_contractindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contractindex(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentTransferField.ContractIndex)
}

// string InstrumentType = 2;
inline void InstrumentTransferField::clear_instrumenttype() {
  instrumenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentTransferField::instrumenttype() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentTransferField.InstrumentType)
  return _internal_instrumenttype();
}
inline void InstrumentTransferField::set_instrumenttype(const std::string& value) {
  _internal_set_instrumenttype(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentTransferField.InstrumentType)
}
inline std::string* InstrumentTransferField::mutable_instrumenttype() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentTransferField.InstrumentType)
  return _internal_mutable_instrumenttype();
}
inline const std::string& InstrumentTransferField::_internal_instrumenttype() const {
  return instrumenttype_.Get();
}
inline void InstrumentTransferField::_internal_set_instrumenttype(const std::string& value) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentTransferField::set_instrumenttype(std::string&& value) {
  
  instrumenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentTransferField.InstrumentType)
}
inline void InstrumentTransferField::set_instrumenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentTransferField.InstrumentType)
}
inline void InstrumentTransferField::set_instrumenttype(const char* value,
    size_t size) {
  
  instrumenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentTransferField.InstrumentType)
}
inline std::string* InstrumentTransferField::_internal_mutable_instrumenttype() {
  
  return instrumenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentTransferField::release_instrumenttype() {
  // @@protoc_insertion_point(field_release:actions.InstrumentTransferField.InstrumentType)
  return instrumenttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentTransferField::set_allocated_instrumenttype(std::string* instrumenttype) {
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentTransferField.InstrumentType)
}
inline std::string* InstrumentTransferField::unsafe_arena_release_instrumenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentTransferField.InstrumentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentTransferField::unsafe_arena_set_allocated_instrumenttype(
    std::string* instrumenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumenttype != nullptr) {
    
  } else {
    
  }
  instrumenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentTransferField.InstrumentType)
}

// bytes InstrumentCode = 3;
inline void InstrumentTransferField::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentTransferField::instrumentcode() const {
  // @@protoc_insertion_point(field_get:actions.InstrumentTransferField.InstrumentCode)
  return _internal_instrumentcode();
}
inline void InstrumentTransferField::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:actions.InstrumentTransferField.InstrumentCode)
}
inline std::string* InstrumentTransferField::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentTransferField.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& InstrumentTransferField::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void InstrumentTransferField::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentTransferField::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.InstrumentTransferField.InstrumentCode)
}
inline void InstrumentTransferField::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.InstrumentTransferField.InstrumentCode)
}
inline void InstrumentTransferField::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.InstrumentTransferField.InstrumentCode)
}
inline std::string* InstrumentTransferField::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentTransferField::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:actions.InstrumentTransferField.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentTransferField::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.InstrumentTransferField.InstrumentCode)
}
inline std::string* InstrumentTransferField::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.InstrumentTransferField.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentTransferField::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.InstrumentTransferField.InstrumentCode)
}

// repeated .actions.QuantityIndexField InstrumentSenders = 4;
inline int InstrumentTransferField::_internal_instrumentsenders_size() const {
  return instrumentsenders_.size();
}
inline int InstrumentTransferField::instrumentsenders_size() const {
  return _internal_instrumentsenders_size();
}
inline void InstrumentTransferField::clear_instrumentsenders() {
  instrumentsenders_.Clear();
}
inline ::actions::QuantityIndexField* InstrumentTransferField::mutable_instrumentsenders(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentTransferField.InstrumentSenders)
  return instrumentsenders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >*
InstrumentTransferField::mutable_instrumentsenders() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentTransferField.InstrumentSenders)
  return &instrumentsenders_;
}
inline const ::actions::QuantityIndexField& InstrumentTransferField::_internal_instrumentsenders(int index) const {
  return instrumentsenders_.Get(index);
}
inline const ::actions::QuantityIndexField& InstrumentTransferField::instrumentsenders(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentTransferField.InstrumentSenders)
  return _internal_instrumentsenders(index);
}
inline ::actions::QuantityIndexField* InstrumentTransferField::_internal_add_instrumentsenders() {
  return instrumentsenders_.Add();
}
inline ::actions::QuantityIndexField* InstrumentTransferField::add_instrumentsenders() {
  // @@protoc_insertion_point(field_add:actions.InstrumentTransferField.InstrumentSenders)
  return _internal_add_instrumentsenders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::QuantityIndexField >&
InstrumentTransferField::instrumentsenders() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentTransferField.InstrumentSenders)
  return instrumentsenders_;
}

// repeated .actions.InstrumentReceiverField InstrumentReceivers = 5;
inline int InstrumentTransferField::_internal_instrumentreceivers_size() const {
  return instrumentreceivers_.size();
}
inline int InstrumentTransferField::instrumentreceivers_size() const {
  return _internal_instrumentreceivers_size();
}
inline void InstrumentTransferField::clear_instrumentreceivers() {
  instrumentreceivers_.Clear();
}
inline ::actions::InstrumentReceiverField* InstrumentTransferField::mutable_instrumentreceivers(int index) {
  // @@protoc_insertion_point(field_mutable:actions.InstrumentTransferField.InstrumentReceivers)
  return instrumentreceivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentReceiverField >*
InstrumentTransferField::mutable_instrumentreceivers() {
  // @@protoc_insertion_point(field_mutable_list:actions.InstrumentTransferField.InstrumentReceivers)
  return &instrumentreceivers_;
}
inline const ::actions::InstrumentReceiverField& InstrumentTransferField::_internal_instrumentreceivers(int index) const {
  return instrumentreceivers_.Get(index);
}
inline const ::actions::InstrumentReceiverField& InstrumentTransferField::instrumentreceivers(int index) const {
  // @@protoc_insertion_point(field_get:actions.InstrumentTransferField.InstrumentReceivers)
  return _internal_instrumentreceivers(index);
}
inline ::actions::InstrumentReceiverField* InstrumentTransferField::_internal_add_instrumentreceivers() {
  return instrumentreceivers_.Add();
}
inline ::actions::InstrumentReceiverField* InstrumentTransferField::add_instrumentreceivers() {
  // @@protoc_insertion_point(field_add:actions.InstrumentTransferField.InstrumentReceivers)
  return _internal_add_instrumentreceivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::InstrumentReceiverField >&
InstrumentTransferField::instrumentreceivers() const {
  // @@protoc_insertion_point(field_list:actions.InstrumentTransferField.InstrumentReceivers)
  return instrumentreceivers_;
}

// -------------------------------------------------------------------

// ChapterField

// string Title = 1;
inline void ChapterField::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChapterField::title() const {
  // @@protoc_insertion_point(field_get:actions.ChapterField.Title)
  return _internal_title();
}
inline void ChapterField::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:actions.ChapterField.Title)
}
inline std::string* ChapterField::mutable_title() {
  // @@protoc_insertion_point(field_mutable:actions.ChapterField.Title)
  return _internal_mutable_title();
}
inline const std::string& ChapterField::_internal_title() const {
  return title_.Get();
}
inline void ChapterField::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChapterField::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ChapterField.Title)
}
inline void ChapterField::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ChapterField.Title)
}
inline void ChapterField::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ChapterField.Title)
}
inline std::string* ChapterField::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChapterField::release_title() {
  // @@protoc_insertion_point(field_release:actions.ChapterField.Title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChapterField::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ChapterField.Title)
}
inline std::string* ChapterField::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ChapterField.Title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChapterField::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ChapterField.Title)
}

// string Preamble = 2;
inline void ChapterField::clear_preamble() {
  preamble_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChapterField::preamble() const {
  // @@protoc_insertion_point(field_get:actions.ChapterField.Preamble)
  return _internal_preamble();
}
inline void ChapterField::set_preamble(const std::string& value) {
  _internal_set_preamble(value);
  // @@protoc_insertion_point(field_set:actions.ChapterField.Preamble)
}
inline std::string* ChapterField::mutable_preamble() {
  // @@protoc_insertion_point(field_mutable:actions.ChapterField.Preamble)
  return _internal_mutable_preamble();
}
inline const std::string& ChapterField::_internal_preamble() const {
  return preamble_.Get();
}
inline void ChapterField::_internal_set_preamble(const std::string& value) {
  
  preamble_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChapterField::set_preamble(std::string&& value) {
  
  preamble_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ChapterField.Preamble)
}
inline void ChapterField::set_preamble(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preamble_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ChapterField.Preamble)
}
inline void ChapterField::set_preamble(const char* value,
    size_t size) {
  
  preamble_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ChapterField.Preamble)
}
inline std::string* ChapterField::_internal_mutable_preamble() {
  
  return preamble_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChapterField::release_preamble() {
  // @@protoc_insertion_point(field_release:actions.ChapterField.Preamble)
  return preamble_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChapterField::set_allocated_preamble(std::string* preamble) {
  if (preamble != nullptr) {
    
  } else {
    
  }
  preamble_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preamble,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ChapterField.Preamble)
}
inline std::string* ChapterField::unsafe_arena_release_preamble() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ChapterField.Preamble)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return preamble_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChapterField::unsafe_arena_set_allocated_preamble(
    std::string* preamble) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preamble != nullptr) {
    
  } else {
    
  }
  preamble_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preamble, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ChapterField.Preamble)
}

// repeated .actions.ClauseField Articles = 3;
inline int ChapterField::_internal_articles_size() const {
  return articles_.size();
}
inline int ChapterField::articles_size() const {
  return _internal_articles_size();
}
inline void ChapterField::clear_articles() {
  articles_.Clear();
}
inline ::actions::ClauseField* ChapterField::mutable_articles(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ChapterField.Articles)
  return articles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >*
ChapterField::mutable_articles() {
  // @@protoc_insertion_point(field_mutable_list:actions.ChapterField.Articles)
  return &articles_;
}
inline const ::actions::ClauseField& ChapterField::_internal_articles(int index) const {
  return articles_.Get(index);
}
inline const ::actions::ClauseField& ChapterField::articles(int index) const {
  // @@protoc_insertion_point(field_get:actions.ChapterField.Articles)
  return _internal_articles(index);
}
inline ::actions::ClauseField* ChapterField::_internal_add_articles() {
  return articles_.Add();
}
inline ::actions::ClauseField* ChapterField::add_articles() {
  // @@protoc_insertion_point(field_add:actions.ChapterField.Articles)
  return _internal_add_articles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >&
ChapterField::articles() const {
  // @@protoc_insertion_point(field_list:actions.ChapterField.Articles)
  return articles_;
}

// -------------------------------------------------------------------

// ClauseField

// string Title = 1;
inline void ClauseField::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClauseField::title() const {
  // @@protoc_insertion_point(field_get:actions.ClauseField.Title)
  return _internal_title();
}
inline void ClauseField::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:actions.ClauseField.Title)
}
inline std::string* ClauseField::mutable_title() {
  // @@protoc_insertion_point(field_mutable:actions.ClauseField.Title)
  return _internal_mutable_title();
}
inline const std::string& ClauseField::_internal_title() const {
  return title_.Get();
}
inline void ClauseField::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClauseField::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ClauseField.Title)
}
inline void ClauseField::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ClauseField.Title)
}
inline void ClauseField::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ClauseField.Title)
}
inline std::string* ClauseField::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClauseField::release_title() {
  // @@protoc_insertion_point(field_release:actions.ClauseField.Title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClauseField::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ClauseField.Title)
}
inline std::string* ClauseField::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ClauseField.Title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClauseField::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ClauseField.Title)
}

// string Body = 2;
inline void ClauseField::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClauseField::body() const {
  // @@protoc_insertion_point(field_get:actions.ClauseField.Body)
  return _internal_body();
}
inline void ClauseField::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:actions.ClauseField.Body)
}
inline std::string* ClauseField::mutable_body() {
  // @@protoc_insertion_point(field_mutable:actions.ClauseField.Body)
  return _internal_mutable_body();
}
inline const std::string& ClauseField::_internal_body() const {
  return body_.Get();
}
inline void ClauseField::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClauseField::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ClauseField.Body)
}
inline void ClauseField::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ClauseField.Body)
}
inline void ClauseField::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ClauseField.Body)
}
inline std::string* ClauseField::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClauseField::release_body() {
  // @@protoc_insertion_point(field_release:actions.ClauseField.Body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClauseField::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ClauseField.Body)
}
inline std::string* ClauseField::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ClauseField.Body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClauseField::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ClauseField.Body)
}

// repeated .actions.ClauseField Children = 3;
inline int ClauseField::_internal_children_size() const {
  return children_.size();
}
inline int ClauseField::children_size() const {
  return _internal_children_size();
}
inline void ClauseField::clear_children() {
  children_.Clear();
}
inline ::actions::ClauseField* ClauseField::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ClauseField.Children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >*
ClauseField::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:actions.ClauseField.Children)
  return &children_;
}
inline const ::actions::ClauseField& ClauseField::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::actions::ClauseField& ClauseField::children(int index) const {
  // @@protoc_insertion_point(field_get:actions.ClauseField.Children)
  return _internal_children(index);
}
inline ::actions::ClauseField* ClauseField::_internal_add_children() {
  return children_.Add();
}
inline ::actions::ClauseField* ClauseField::add_children() {
  // @@protoc_insertion_point(field_add:actions.ClauseField.Children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ClauseField >&
ClauseField::children() const {
  // @@protoc_insertion_point(field_list:actions.ClauseField.Children)
  return children_;
}

// -------------------------------------------------------------------

// DefinedTermField

// string Term = 1;
inline void DefinedTermField::clear_term() {
  term_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DefinedTermField::term() const {
  // @@protoc_insertion_point(field_get:actions.DefinedTermField.Term)
  return _internal_term();
}
inline void DefinedTermField::set_term(const std::string& value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:actions.DefinedTermField.Term)
}
inline std::string* DefinedTermField::mutable_term() {
  // @@protoc_insertion_point(field_mutable:actions.DefinedTermField.Term)
  return _internal_mutable_term();
}
inline const std::string& DefinedTermField::_internal_term() const {
  return term_.Get();
}
inline void DefinedTermField::_internal_set_term(const std::string& value) {
  
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DefinedTermField::set_term(std::string&& value) {
  
  term_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DefinedTermField.Term)
}
inline void DefinedTermField::set_term(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DefinedTermField.Term)
}
inline void DefinedTermField::set_term(const char* value,
    size_t size) {
  
  term_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DefinedTermField.Term)
}
inline std::string* DefinedTermField::_internal_mutable_term() {
  
  return term_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DefinedTermField::release_term() {
  // @@protoc_insertion_point(field_release:actions.DefinedTermField.Term)
  return term_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DefinedTermField::set_allocated_term(std::string* term) {
  if (term != nullptr) {
    
  } else {
    
  }
  term_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), term,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DefinedTermField.Term)
}
inline std::string* DefinedTermField::unsafe_arena_release_term() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DefinedTermField.Term)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return term_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DefinedTermField::unsafe_arena_set_allocated_term(
    std::string* term) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (term != nullptr) {
    
  } else {
    
  }
  term_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      term, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DefinedTermField.Term)
}

// string Definition = 2;
inline void DefinedTermField::clear_definition() {
  definition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DefinedTermField::definition() const {
  // @@protoc_insertion_point(field_get:actions.DefinedTermField.Definition)
  return _internal_definition();
}
inline void DefinedTermField::set_definition(const std::string& value) {
  _internal_set_definition(value);
  // @@protoc_insertion_point(field_set:actions.DefinedTermField.Definition)
}
inline std::string* DefinedTermField::mutable_definition() {
  // @@protoc_insertion_point(field_mutable:actions.DefinedTermField.Definition)
  return _internal_mutable_definition();
}
inline const std::string& DefinedTermField::_internal_definition() const {
  return definition_.Get();
}
inline void DefinedTermField::_internal_set_definition(const std::string& value) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DefinedTermField::set_definition(std::string&& value) {
  
  definition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DefinedTermField.Definition)
}
inline void DefinedTermField::set_definition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DefinedTermField.Definition)
}
inline void DefinedTermField::set_definition(const char* value,
    size_t size) {
  
  definition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DefinedTermField.Definition)
}
inline std::string* DefinedTermField::_internal_mutable_definition() {
  
  return definition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DefinedTermField::release_definition() {
  // @@protoc_insertion_point(field_release:actions.DefinedTermField.Definition)
  return definition_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DefinedTermField::set_allocated_definition(std::string* definition) {
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), definition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DefinedTermField.Definition)
}
inline std::string* DefinedTermField::unsafe_arena_release_definition() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DefinedTermField.Definition)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return definition_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DefinedTermField::unsafe_arena_set_allocated_definition(
    std::string* definition) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (definition != nullptr) {
    
  } else {
    
  }
  definition_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      definition, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DefinedTermField.Definition)
}

// -------------------------------------------------------------------

// DocumentField

// string Name = 1;
inline void DocumentField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::name() const {
  // @@protoc_insertion_point(field_get:actions.DocumentField.Name)
  return _internal_name();
}
inline void DocumentField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:actions.DocumentField.Name)
}
inline std::string* DocumentField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:actions.DocumentField.Name)
  return _internal_mutable_name();
}
inline const std::string& DocumentField::_internal_name() const {
  return name_.Get();
}
inline void DocumentField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DocumentField.Name)
}
inline void DocumentField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DocumentField.Name)
}
inline void DocumentField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DocumentField.Name)
}
inline std::string* DocumentField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_name() {
  // @@protoc_insertion_point(field_release:actions.DocumentField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DocumentField.Name)
}
inline std::string* DocumentField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DocumentField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DocumentField.Name)
}

// string Type = 2;
inline void DocumentField::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::type() const {
  // @@protoc_insertion_point(field_get:actions.DocumentField.Type)
  return _internal_type();
}
inline void DocumentField::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.DocumentField.Type)
}
inline std::string* DocumentField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:actions.DocumentField.Type)
  return _internal_mutable_type();
}
inline const std::string& DocumentField::_internal_type() const {
  return type_.Get();
}
inline void DocumentField::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DocumentField.Type)
}
inline void DocumentField::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DocumentField.Type)
}
inline void DocumentField::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DocumentField.Type)
}
inline std::string* DocumentField::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_type() {
  // @@protoc_insertion_point(field_release:actions.DocumentField.Type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DocumentField.Type)
}
inline std::string* DocumentField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DocumentField.Type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DocumentField.Type)
}

// bytes Contents = 3;
inline void DocumentField::clear_contents() {
  contents_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::contents() const {
  // @@protoc_insertion_point(field_get:actions.DocumentField.Contents)
  return _internal_contents();
}
inline void DocumentField::set_contents(const std::string& value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:actions.DocumentField.Contents)
}
inline std::string* DocumentField::mutable_contents() {
  // @@protoc_insertion_point(field_mutable:actions.DocumentField.Contents)
  return _internal_mutable_contents();
}
inline const std::string& DocumentField::_internal_contents() const {
  return contents_.Get();
}
inline void DocumentField::_internal_set_contents(const std::string& value) {
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_contents(std::string&& value) {
  
  contents_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.DocumentField.Contents)
}
inline void DocumentField::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.DocumentField.Contents)
}
inline void DocumentField::set_contents(const void* value,
    size_t size) {
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.DocumentField.Contents)
}
inline std::string* DocumentField::_internal_mutable_contents() {
  
  return contents_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_contents() {
  // @@protoc_insertion_point(field_release:actions.DocumentField.Contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.DocumentField.Contents)
}
inline std::string* DocumentField::unsafe_arena_release_contents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.DocumentField.Contents)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contents_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_contents(
    std::string* contents) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contents, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.DocumentField.Contents)
}

// -------------------------------------------------------------------

// EntityField

// string Name = 1;
inline void EntityField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::name() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.Name)
  return _internal_name();
}
inline void EntityField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.Name)
}
inline std::string* EntityField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.Name)
  return _internal_mutable_name();
}
inline const std::string& EntityField::_internal_name() const {
  return name_.Get();
}
inline void EntityField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.Name)
}
inline void EntityField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.Name)
}
inline void EntityField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.Name)
}
inline std::string* EntityField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_name() {
  // @@protoc_insertion_point(field_release:actions.EntityField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.Name)
}
inline std::string* EntityField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.Name)
}

// string Type = 2;
inline void EntityField::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::type() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.Type)
  return _internal_type();
}
inline void EntityField::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.Type)
}
inline std::string* EntityField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.Type)
  return _internal_mutable_type();
}
inline const std::string& EntityField::_internal_type() const {
  return type_.Get();
}
inline void EntityField::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.Type)
}
inline void EntityField::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.Type)
}
inline void EntityField::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.Type)
}
inline std::string* EntityField::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_type() {
  // @@protoc_insertion_point(field_release:actions.EntityField.Type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.Type)
}
inline std::string* EntityField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.Type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.Type)
}

// string LEI = 3;
inline void EntityField::clear_lei() {
  lei_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::lei() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.LEI)
  return _internal_lei();
}
inline void EntityField::set_lei(const std::string& value) {
  _internal_set_lei(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.LEI)
}
inline std::string* EntityField::mutable_lei() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.LEI)
  return _internal_mutable_lei();
}
inline const std::string& EntityField::_internal_lei() const {
  return lei_.Get();
}
inline void EntityField::_internal_set_lei(const std::string& value) {
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_lei(std::string&& value) {
  
  lei_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.LEI)
}
inline void EntityField::set_lei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.LEI)
}
inline void EntityField::set_lei(const char* value,
    size_t size) {
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.LEI)
}
inline std::string* EntityField::_internal_mutable_lei() {
  
  return lei_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_lei() {
  // @@protoc_insertion_point(field_release:actions.EntityField.LEI)
  return lei_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_lei(std::string* lei) {
  if (lei != nullptr) {
    
  } else {
    
  }
  lei_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lei,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.LEI)
}
inline std::string* EntityField::unsafe_arena_release_lei() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.LEI)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lei_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_lei(
    std::string* lei) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lei != nullptr) {
    
  } else {
    
  }
  lei_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lei, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.LEI)
}

// string UnitNumber = 4;
inline void EntityField::clear_unitnumber() {
  unitnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::unitnumber() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.UnitNumber)
  return _internal_unitnumber();
}
inline void EntityField::set_unitnumber(const std::string& value) {
  _internal_set_unitnumber(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.UnitNumber)
}
inline std::string* EntityField::mutable_unitnumber() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.UnitNumber)
  return _internal_mutable_unitnumber();
}
inline const std::string& EntityField::_internal_unitnumber() const {
  return unitnumber_.Get();
}
inline void EntityField::_internal_set_unitnumber(const std::string& value) {
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_unitnumber(std::string&& value) {
  
  unitnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.UnitNumber)
}
inline void EntityField::set_unitnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.UnitNumber)
}
inline void EntityField::set_unitnumber(const char* value,
    size_t size) {
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.UnitNumber)
}
inline std::string* EntityField::_internal_mutable_unitnumber() {
  
  return unitnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_unitnumber() {
  // @@protoc_insertion_point(field_release:actions.EntityField.UnitNumber)
  return unitnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_unitnumber(std::string* unitnumber) {
  if (unitnumber != nullptr) {
    
  } else {
    
  }
  unitnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unitnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.UnitNumber)
}
inline std::string* EntityField::unsafe_arena_release_unitnumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.UnitNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return unitnumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_unitnumber(
    std::string* unitnumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unitnumber != nullptr) {
    
  } else {
    
  }
  unitnumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unitnumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.UnitNumber)
}

// string BuildingNumber = 5;
inline void EntityField::clear_buildingnumber() {
  buildingnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::buildingnumber() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.BuildingNumber)
  return _internal_buildingnumber();
}
inline void EntityField::set_buildingnumber(const std::string& value) {
  _internal_set_buildingnumber(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.BuildingNumber)
}
inline std::string* EntityField::mutable_buildingnumber() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.BuildingNumber)
  return _internal_mutable_buildingnumber();
}
inline const std::string& EntityField::_internal_buildingnumber() const {
  return buildingnumber_.Get();
}
inline void EntityField::_internal_set_buildingnumber(const std::string& value) {
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_buildingnumber(std::string&& value) {
  
  buildingnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.BuildingNumber)
}
inline void EntityField::set_buildingnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.BuildingNumber)
}
inline void EntityField::set_buildingnumber(const char* value,
    size_t size) {
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.BuildingNumber)
}
inline std::string* EntityField::_internal_mutable_buildingnumber() {
  
  return buildingnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_buildingnumber() {
  // @@protoc_insertion_point(field_release:actions.EntityField.BuildingNumber)
  return buildingnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_buildingnumber(std::string* buildingnumber) {
  if (buildingnumber != nullptr) {
    
  } else {
    
  }
  buildingnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buildingnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.BuildingNumber)
}
inline std::string* EntityField::unsafe_arena_release_buildingnumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.BuildingNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return buildingnumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_buildingnumber(
    std::string* buildingnumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buildingnumber != nullptr) {
    
  } else {
    
  }
  buildingnumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buildingnumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.BuildingNumber)
}

// string Street = 6;
inline void EntityField::clear_street() {
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::street() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.Street)
  return _internal_street();
}
inline void EntityField::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.Street)
}
inline std::string* EntityField::mutable_street() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.Street)
  return _internal_mutable_street();
}
inline const std::string& EntityField::_internal_street() const {
  return street_.Get();
}
inline void EntityField::_internal_set_street(const std::string& value) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_street(std::string&& value) {
  
  street_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.Street)
}
inline void EntityField::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.Street)
}
inline void EntityField::set_street(const char* value,
    size_t size) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.Street)
}
inline std::string* EntityField::_internal_mutable_street() {
  
  return street_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_street() {
  // @@protoc_insertion_point(field_release:actions.EntityField.Street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.Street)
}
inline std::string* EntityField::unsafe_arena_release_street() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.Street)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return street_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_street(
    std::string* street) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (street != nullptr) {
    
  } else {
    
  }
  street_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      street, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.Street)
}

// string SuburbCity = 7;
inline void EntityField::clear_suburbcity() {
  suburbcity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::suburbcity() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.SuburbCity)
  return _internal_suburbcity();
}
inline void EntityField::set_suburbcity(const std::string& value) {
  _internal_set_suburbcity(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.SuburbCity)
}
inline std::string* EntityField::mutable_suburbcity() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.SuburbCity)
  return _internal_mutable_suburbcity();
}
inline const std::string& EntityField::_internal_suburbcity() const {
  return suburbcity_.Get();
}
inline void EntityField::_internal_set_suburbcity(const std::string& value) {
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_suburbcity(std::string&& value) {
  
  suburbcity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.SuburbCity)
}
inline void EntityField::set_suburbcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.SuburbCity)
}
inline void EntityField::set_suburbcity(const char* value,
    size_t size) {
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.SuburbCity)
}
inline std::string* EntityField::_internal_mutable_suburbcity() {
  
  return suburbcity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_suburbcity() {
  // @@protoc_insertion_point(field_release:actions.EntityField.SuburbCity)
  return suburbcity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_suburbcity(std::string* suburbcity) {
  if (suburbcity != nullptr) {
    
  } else {
    
  }
  suburbcity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suburbcity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.SuburbCity)
}
inline std::string* EntityField::unsafe_arena_release_suburbcity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.SuburbCity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suburbcity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_suburbcity(
    std::string* suburbcity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suburbcity != nullptr) {
    
  } else {
    
  }
  suburbcity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suburbcity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.SuburbCity)
}

// string TerritoryStateProvinceCode = 8;
inline void EntityField::clear_territorystateprovincecode() {
  territorystateprovincecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::territorystateprovincecode() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.TerritoryStateProvinceCode)
  return _internal_territorystateprovincecode();
}
inline void EntityField::set_territorystateprovincecode(const std::string& value) {
  _internal_set_territorystateprovincecode(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::mutable_territorystateprovincecode() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.TerritoryStateProvinceCode)
  return _internal_mutable_territorystateprovincecode();
}
inline const std::string& EntityField::_internal_territorystateprovincecode() const {
  return territorystateprovincecode_.Get();
}
inline void EntityField::_internal_set_territorystateprovincecode(const std::string& value) {
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_territorystateprovincecode(std::string&& value) {
  
  territorystateprovincecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.TerritoryStateProvinceCode)
}
inline void EntityField::set_territorystateprovincecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.TerritoryStateProvinceCode)
}
inline void EntityField::set_territorystateprovincecode(const char* value,
    size_t size) {
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::_internal_mutable_territorystateprovincecode() {
  
  return territorystateprovincecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_territorystateprovincecode() {
  // @@protoc_insertion_point(field_release:actions.EntityField.TerritoryStateProvinceCode)
  return territorystateprovincecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_territorystateprovincecode(std::string* territorystateprovincecode) {
  if (territorystateprovincecode != nullptr) {
    
  } else {
    
  }
  territorystateprovincecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), territorystateprovincecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::unsafe_arena_release_territorystateprovincecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.TerritoryStateProvinceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return territorystateprovincecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_territorystateprovincecode(
    std::string* territorystateprovincecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (territorystateprovincecode != nullptr) {
    
  } else {
    
  }
  territorystateprovincecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      territorystateprovincecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.TerritoryStateProvinceCode)
}

// string CountryCode = 9;
inline void EntityField::clear_countrycode() {
  countrycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::countrycode() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.CountryCode)
  return _internal_countrycode();
}
inline void EntityField::set_countrycode(const std::string& value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.CountryCode)
}
inline std::string* EntityField::mutable_countrycode() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.CountryCode)
  return _internal_mutable_countrycode();
}
inline const std::string& EntityField::_internal_countrycode() const {
  return countrycode_.Get();
}
inline void EntityField::_internal_set_countrycode(const std::string& value) {
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_countrycode(std::string&& value) {
  
  countrycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.CountryCode)
}
inline void EntityField::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.CountryCode)
}
inline void EntityField::set_countrycode(const char* value,
    size_t size) {
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.CountryCode)
}
inline std::string* EntityField::_internal_mutable_countrycode() {
  
  return countrycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_countrycode() {
  // @@protoc_insertion_point(field_release:actions.EntityField.CountryCode)
  return countrycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.CountryCode)
}
inline std::string* EntityField::unsafe_arena_release_countrycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.CountryCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return countrycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_countrycode(
    std::string* countrycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      countrycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.CountryCode)
}

// string PostalZIPCode = 10;
inline void EntityField::clear_postalzipcode() {
  postalzipcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::postalzipcode() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.PostalZIPCode)
  return _internal_postalzipcode();
}
inline void EntityField::set_postalzipcode(const std::string& value) {
  _internal_set_postalzipcode(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.PostalZIPCode)
}
inline std::string* EntityField::mutable_postalzipcode() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.PostalZIPCode)
  return _internal_mutable_postalzipcode();
}
inline const std::string& EntityField::_internal_postalzipcode() const {
  return postalzipcode_.Get();
}
inline void EntityField::_internal_set_postalzipcode(const std::string& value) {
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_postalzipcode(std::string&& value) {
  
  postalzipcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.PostalZIPCode)
}
inline void EntityField::set_postalzipcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.PostalZIPCode)
}
inline void EntityField::set_postalzipcode(const char* value,
    size_t size) {
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.PostalZIPCode)
}
inline std::string* EntityField::_internal_mutable_postalzipcode() {
  
  return postalzipcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_postalzipcode() {
  // @@protoc_insertion_point(field_release:actions.EntityField.PostalZIPCode)
  return postalzipcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_postalzipcode(std::string* postalzipcode) {
  if (postalzipcode != nullptr) {
    
  } else {
    
  }
  postalzipcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postalzipcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.PostalZIPCode)
}
inline std::string* EntityField::unsafe_arena_release_postalzipcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.PostalZIPCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return postalzipcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_postalzipcode(
    std::string* postalzipcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (postalzipcode != nullptr) {
    
  } else {
    
  }
  postalzipcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      postalzipcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.PostalZIPCode)
}

// string EmailAddress = 11;
inline void EntityField::clear_emailaddress() {
  emailaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::emailaddress() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.EmailAddress)
  return _internal_emailaddress();
}
inline void EntityField::set_emailaddress(const std::string& value) {
  _internal_set_emailaddress(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.EmailAddress)
}
inline std::string* EntityField::mutable_emailaddress() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.EmailAddress)
  return _internal_mutable_emailaddress();
}
inline const std::string& EntityField::_internal_emailaddress() const {
  return emailaddress_.Get();
}
inline void EntityField::_internal_set_emailaddress(const std::string& value) {
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_emailaddress(std::string&& value) {
  
  emailaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.EmailAddress)
}
inline void EntityField::set_emailaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.EmailAddress)
}
inline void EntityField::set_emailaddress(const char* value,
    size_t size) {
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.EmailAddress)
}
inline std::string* EntityField::_internal_mutable_emailaddress() {
  
  return emailaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_emailaddress() {
  // @@protoc_insertion_point(field_release:actions.EntityField.EmailAddress)
  return emailaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_emailaddress(std::string* emailaddress) {
  if (emailaddress != nullptr) {
    
  } else {
    
  }
  emailaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emailaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.EmailAddress)
}
inline std::string* EntityField::unsafe_arena_release_emailaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.EmailAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return emailaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_emailaddress(
    std::string* emailaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (emailaddress != nullptr) {
    
  } else {
    
  }
  emailaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      emailaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.EmailAddress)
}

// string PhoneNumber = 12;
inline void EntityField::clear_phonenumber() {
  phonenumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::phonenumber() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.PhoneNumber)
  return _internal_phonenumber();
}
inline void EntityField::set_phonenumber(const std::string& value) {
  _internal_set_phonenumber(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.PhoneNumber)
}
inline std::string* EntityField::mutable_phonenumber() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.PhoneNumber)
  return _internal_mutable_phonenumber();
}
inline const std::string& EntityField::_internal_phonenumber() const {
  return phonenumber_.Get();
}
inline void EntityField::_internal_set_phonenumber(const std::string& value) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_phonenumber(std::string&& value) {
  
  phonenumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.PhoneNumber)
}
inline void EntityField::set_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.PhoneNumber)
}
inline void EntityField::set_phonenumber(const char* value,
    size_t size) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.PhoneNumber)
}
inline std::string* EntityField::_internal_mutable_phonenumber() {
  
  return phonenumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_phonenumber() {
  // @@protoc_insertion_point(field_release:actions.EntityField.PhoneNumber)
  return phonenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_phonenumber(std::string* phonenumber) {
  if (phonenumber != nullptr) {
    
  } else {
    
  }
  phonenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phonenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.PhoneNumber)
}
inline std::string* EntityField::unsafe_arena_release_phonenumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.PhoneNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phonenumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_phonenumber(
    std::string* phonenumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phonenumber != nullptr) {
    
  } else {
    
  }
  phonenumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phonenumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.PhoneNumber)
}

// repeated .actions.AdministratorField Administration = 13;
inline int EntityField::_internal_administration_size() const {
  return administration_.size();
}
inline int EntityField::administration_size() const {
  return _internal_administration_size();
}
inline void EntityField::clear_administration() {
  administration_.Clear();
}
inline ::actions::AdministratorField* EntityField::mutable_administration(int index) {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.Administration)
  return administration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdministratorField >*
EntityField::mutable_administration() {
  // @@protoc_insertion_point(field_mutable_list:actions.EntityField.Administration)
  return &administration_;
}
inline const ::actions::AdministratorField& EntityField::_internal_administration(int index) const {
  return administration_.Get(index);
}
inline const ::actions::AdministratorField& EntityField::administration(int index) const {
  // @@protoc_insertion_point(field_get:actions.EntityField.Administration)
  return _internal_administration(index);
}
inline ::actions::AdministratorField* EntityField::_internal_add_administration() {
  return administration_.Add();
}
inline ::actions::AdministratorField* EntityField::add_administration() {
  // @@protoc_insertion_point(field_add:actions.EntityField.Administration)
  return _internal_add_administration();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::AdministratorField >&
EntityField::administration() const {
  // @@protoc_insertion_point(field_list:actions.EntityField.Administration)
  return administration_;
}

// repeated .actions.ManagerField Management = 14;
inline int EntityField::_internal_management_size() const {
  return management_.size();
}
inline int EntityField::management_size() const {
  return _internal_management_size();
}
inline void EntityField::clear_management() {
  management_.Clear();
}
inline ::actions::ManagerField* EntityField::mutable_management(int index) {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.Management)
  return management_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ManagerField >*
EntityField::mutable_management() {
  // @@protoc_insertion_point(field_mutable_list:actions.EntityField.Management)
  return &management_;
}
inline const ::actions::ManagerField& EntityField::_internal_management(int index) const {
  return management_.Get(index);
}
inline const ::actions::ManagerField& EntityField::management(int index) const {
  // @@protoc_insertion_point(field_get:actions.EntityField.Management)
  return _internal_management(index);
}
inline ::actions::ManagerField* EntityField::_internal_add_management() {
  return management_.Add();
}
inline ::actions::ManagerField* EntityField::add_management() {
  // @@protoc_insertion_point(field_add:actions.EntityField.Management)
  return _internal_add_management();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::actions::ManagerField >&
EntityField::management() const {
  // @@protoc_insertion_point(field_list:actions.EntityField.Management)
  return management_;
}

// string DomainName = 15;
inline void EntityField::clear_domainname() {
  domainname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::domainname() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.DomainName)
  return _internal_domainname();
}
inline void EntityField::set_domainname(const std::string& value) {
  _internal_set_domainname(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.DomainName)
}
inline std::string* EntityField::mutable_domainname() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.DomainName)
  return _internal_mutable_domainname();
}
inline const std::string& EntityField::_internal_domainname() const {
  return domainname_.Get();
}
inline void EntityField::_internal_set_domainname(const std::string& value) {
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_domainname(std::string&& value) {
  
  domainname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.DomainName)
}
inline void EntityField::set_domainname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.DomainName)
}
inline void EntityField::set_domainname(const char* value,
    size_t size) {
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.DomainName)
}
inline std::string* EntityField::_internal_mutable_domainname() {
  
  return domainname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_domainname() {
  // @@protoc_insertion_point(field_release:actions.EntityField.DomainName)
  return domainname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_domainname(std::string* domainname) {
  if (domainname != nullptr) {
    
  } else {
    
  }
  domainname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domainname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.DomainName)
}
inline std::string* EntityField::unsafe_arena_release_domainname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.DomainName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domainname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_domainname(
    std::string* domainname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domainname != nullptr) {
    
  } else {
    
  }
  domainname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domainname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.DomainName)
}

// string PaymailHandle = 17;
inline void EntityField::clear_paymailhandle() {
  paymailhandle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::paymailhandle() const {
  // @@protoc_insertion_point(field_get:actions.EntityField.PaymailHandle)
  return _internal_paymailhandle();
}
inline void EntityField::set_paymailhandle(const std::string& value) {
  _internal_set_paymailhandle(value);
  // @@protoc_insertion_point(field_set:actions.EntityField.PaymailHandle)
}
inline std::string* EntityField::mutable_paymailhandle() {
  // @@protoc_insertion_point(field_mutable:actions.EntityField.PaymailHandle)
  return _internal_mutable_paymailhandle();
}
inline const std::string& EntityField::_internal_paymailhandle() const {
  return paymailhandle_.Get();
}
inline void EntityField::_internal_set_paymailhandle(const std::string& value) {
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_paymailhandle(std::string&& value) {
  
  paymailhandle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.EntityField.PaymailHandle)
}
inline void EntityField::set_paymailhandle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.EntityField.PaymailHandle)
}
inline void EntityField::set_paymailhandle(const char* value,
    size_t size) {
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.EntityField.PaymailHandle)
}
inline std::string* EntityField::_internal_mutable_paymailhandle() {
  
  return paymailhandle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_paymailhandle() {
  // @@protoc_insertion_point(field_release:actions.EntityField.PaymailHandle)
  return paymailhandle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_paymailhandle(std::string* paymailhandle) {
  if (paymailhandle != nullptr) {
    
  } else {
    
  }
  paymailhandle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymailhandle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.EntityField.PaymailHandle)
}
inline std::string* EntityField::unsafe_arena_release_paymailhandle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.EntityField.PaymailHandle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return paymailhandle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_paymailhandle(
    std::string* paymailhandle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paymailhandle != nullptr) {
    
  } else {
    
  }
  paymailhandle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paymailhandle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.EntityField.PaymailHandle)
}

// -------------------------------------------------------------------

// FeeField

// uint64 Quantity = 1;
inline void FeeField::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeField::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeField::quantity() const {
  // @@protoc_insertion_point(field_get:actions.FeeField.Quantity)
  return _internal_quantity();
}
inline void FeeField::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void FeeField::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:actions.FeeField.Quantity)
}

// -------------------------------------------------------------------

// ManagerField

// uint32 Type = 1;
inline void ManagerField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ManagerField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ManagerField::type() const {
  // @@protoc_insertion_point(field_get:actions.ManagerField.Type)
  return _internal_type();
}
inline void ManagerField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void ManagerField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.ManagerField.Type)
}

// string Name = 2;
inline void ManagerField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ManagerField::name() const {
  // @@protoc_insertion_point(field_get:actions.ManagerField.Name)
  return _internal_name();
}
inline void ManagerField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:actions.ManagerField.Name)
}
inline std::string* ManagerField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:actions.ManagerField.Name)
  return _internal_mutable_name();
}
inline const std::string& ManagerField::_internal_name() const {
  return name_.Get();
}
inline void ManagerField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ManagerField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ManagerField.Name)
}
inline void ManagerField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ManagerField.Name)
}
inline void ManagerField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ManagerField.Name)
}
inline std::string* ManagerField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ManagerField::release_name() {
  // @@protoc_insertion_point(field_release:actions.ManagerField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ManagerField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ManagerField.Name)
}
inline std::string* ManagerField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ManagerField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ManagerField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ManagerField.Name)
}

// -------------------------------------------------------------------

// OracleField

// repeated uint32 OracleTypes = 4;
inline int OracleField::_internal_oracletypes_size() const {
  return oracletypes_.size();
}
inline int OracleField::oracletypes_size() const {
  return _internal_oracletypes_size();
}
inline void OracleField::clear_oracletypes() {
  oracletypes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleField::_internal_oracletypes(int index) const {
  return oracletypes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleField::oracletypes(int index) const {
  // @@protoc_insertion_point(field_get:actions.OracleField.OracleTypes)
  return _internal_oracletypes(index);
}
inline void OracleField::set_oracletypes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  oracletypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:actions.OracleField.OracleTypes)
}
inline void OracleField::_internal_add_oracletypes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  oracletypes_.Add(value);
}
inline void OracleField::add_oracletypes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_oracletypes(value);
  // @@protoc_insertion_point(field_add:actions.OracleField.OracleTypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OracleField::_internal_oracletypes() const {
  return oracletypes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OracleField::oracletypes() const {
  // @@protoc_insertion_point(field_list:actions.OracleField.OracleTypes)
  return _internal_oracletypes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OracleField::_internal_mutable_oracletypes() {
  return &oracletypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OracleField::mutable_oracletypes() {
  // @@protoc_insertion_point(field_mutable_list:actions.OracleField.OracleTypes)
  return _internal_mutable_oracletypes();
}

// bytes EntityContract = 5;
inline void OracleField::clear_entitycontract() {
  entitycontract_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OracleField::entitycontract() const {
  // @@protoc_insertion_point(field_get:actions.OracleField.EntityContract)
  return _internal_entitycontract();
}
inline void OracleField::set_entitycontract(const std::string& value) {
  _internal_set_entitycontract(value);
  // @@protoc_insertion_point(field_set:actions.OracleField.EntityContract)
}
inline std::string* OracleField::mutable_entitycontract() {
  // @@protoc_insertion_point(field_mutable:actions.OracleField.EntityContract)
  return _internal_mutable_entitycontract();
}
inline const std::string& OracleField::_internal_entitycontract() const {
  return entitycontract_.Get();
}
inline void OracleField::_internal_set_entitycontract(const std::string& value) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OracleField::set_entitycontract(std::string&& value) {
  
  entitycontract_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.OracleField.EntityContract)
}
inline void OracleField::set_entitycontract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.OracleField.EntityContract)
}
inline void OracleField::set_entitycontract(const void* value,
    size_t size) {
  
  entitycontract_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.OracleField.EntityContract)
}
inline std::string* OracleField::_internal_mutable_entitycontract() {
  
  return entitycontract_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OracleField::release_entitycontract() {
  // @@protoc_insertion_point(field_release:actions.OracleField.EntityContract)
  return entitycontract_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleField::set_allocated_entitycontract(std::string* entitycontract) {
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitycontract,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.OracleField.EntityContract)
}
inline std::string* OracleField::unsafe_arena_release_entitycontract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.OracleField.EntityContract)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return entitycontract_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OracleField::unsafe_arena_set_allocated_entitycontract(
    std::string* entitycontract) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (entitycontract != nullptr) {
    
  } else {
    
  }
  entitycontract_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      entitycontract, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.OracleField.EntityContract)
}

// -------------------------------------------------------------------

// QuantityIndexField

// uint32 Index = 1;
inline void QuantityIndexField::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuantityIndexField::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QuantityIndexField::index() const {
  // @@protoc_insertion_point(field_get:actions.QuantityIndexField.Index)
  return _internal_index();
}
inline void QuantityIndexField::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void QuantityIndexField::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:actions.QuantityIndexField.Index)
}

// uint64 Quantity = 2;
inline void QuantityIndexField::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QuantityIndexField::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QuantityIndexField::quantity() const {
  // @@protoc_insertion_point(field_get:actions.QuantityIndexField.Quantity)
  return _internal_quantity();
}
inline void QuantityIndexField::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void QuantityIndexField::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:actions.QuantityIndexField.Quantity)
}

// -------------------------------------------------------------------

// ReferenceTransactionField

// bytes Transaction = 1;
inline void ReferenceTransactionField::clear_transaction() {
  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ReferenceTransactionField::transaction() const {
  // @@protoc_insertion_point(field_get:actions.ReferenceTransactionField.Transaction)
  return _internal_transaction();
}
inline void ReferenceTransactionField::set_transaction(const std::string& value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:actions.ReferenceTransactionField.Transaction)
}
inline std::string* ReferenceTransactionField::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:actions.ReferenceTransactionField.Transaction)
  return _internal_mutable_transaction();
}
inline const std::string& ReferenceTransactionField::_internal_transaction() const {
  return transaction_.Get();
}
inline void ReferenceTransactionField::_internal_set_transaction(const std::string& value) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ReferenceTransactionField::set_transaction(std::string&& value) {
  
  transaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ReferenceTransactionField.Transaction)
}
inline void ReferenceTransactionField::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ReferenceTransactionField.Transaction)
}
inline void ReferenceTransactionField::set_transaction(const void* value,
    size_t size) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ReferenceTransactionField.Transaction)
}
inline std::string* ReferenceTransactionField::_internal_mutable_transaction() {
  
  return transaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ReferenceTransactionField::release_transaction() {
  // @@protoc_insertion_point(field_release:actions.ReferenceTransactionField.Transaction)
  return transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReferenceTransactionField::set_allocated_transaction(std::string* transaction) {
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ReferenceTransactionField.Transaction)
}
inline std::string* ReferenceTransactionField::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ReferenceTransactionField.Transaction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transaction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReferenceTransactionField::unsafe_arena_set_allocated_transaction(
    std::string* transaction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transaction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ReferenceTransactionField.Transaction)
}

// repeated bytes Outputs = 2;
inline int ReferenceTransactionField::_internal_outputs_size() const {
  return outputs_.size();
}
inline int ReferenceTransactionField::outputs_size() const {
  return _internal_outputs_size();
}
inline void ReferenceTransactionField::clear_outputs() {
  outputs_.Clear();
}
inline std::string* ReferenceTransactionField::add_outputs() {
  // @@protoc_insertion_point(field_add_mutable:actions.ReferenceTransactionField.Outputs)
  return _internal_add_outputs();
}
inline const std::string& ReferenceTransactionField::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const std::string& ReferenceTransactionField::outputs(int index) const {
  // @@protoc_insertion_point(field_get:actions.ReferenceTransactionField.Outputs)
  return _internal_outputs(index);
}
inline std::string* ReferenceTransactionField::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:actions.ReferenceTransactionField.Outputs)
  return outputs_.Mutable(index);
}
inline void ReferenceTransactionField::set_outputs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:actions.ReferenceTransactionField.Outputs)
  outputs_.Mutable(index)->assign(value);
}
inline void ReferenceTransactionField::set_outputs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:actions.ReferenceTransactionField.Outputs)
  outputs_.Mutable(index)->assign(std::move(value));
}
inline void ReferenceTransactionField::set_outputs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:actions.ReferenceTransactionField.Outputs)
}
inline void ReferenceTransactionField::set_outputs(int index, const void* value, size_t size) {
  outputs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:actions.ReferenceTransactionField.Outputs)
}
inline std::string* ReferenceTransactionField::_internal_add_outputs() {
  return outputs_.Add();
}
inline void ReferenceTransactionField::add_outputs(const std::string& value) {
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:actions.ReferenceTransactionField.Outputs)
}
inline void ReferenceTransactionField::add_outputs(std::string&& value) {
  outputs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:actions.ReferenceTransactionField.Outputs)
}
inline void ReferenceTransactionField::add_outputs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:actions.ReferenceTransactionField.Outputs)
}
inline void ReferenceTransactionField::add_outputs(const void* value, size_t size) {
  outputs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:actions.ReferenceTransactionField.Outputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReferenceTransactionField::outputs() const {
  // @@protoc_insertion_point(field_list:actions.ReferenceTransactionField.Outputs)
  return outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReferenceTransactionField::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:actions.ReferenceTransactionField.Outputs)
  return &outputs_;
}

// -------------------------------------------------------------------

// ServiceField

// uint32 Type = 1;
inline void ServiceField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ServiceField::type() const {
  // @@protoc_insertion_point(field_get:actions.ServiceField.Type)
  return _internal_type();
}
inline void ServiceField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void ServiceField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:actions.ServiceField.Type)
}

// string URL = 2;
inline void ServiceField::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceField::url() const {
  // @@protoc_insertion_point(field_get:actions.ServiceField.URL)
  return _internal_url();
}
inline void ServiceField::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:actions.ServiceField.URL)
}
inline std::string* ServiceField::mutable_url() {
  // @@protoc_insertion_point(field_mutable:actions.ServiceField.URL)
  return _internal_mutable_url();
}
inline const std::string& ServiceField::_internal_url() const {
  return url_.Get();
}
inline void ServiceField::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceField::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ServiceField.URL)
}
inline void ServiceField::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ServiceField.URL)
}
inline void ServiceField::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ServiceField.URL)
}
inline std::string* ServiceField::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceField::release_url() {
  // @@protoc_insertion_point(field_release:actions.ServiceField.URL)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceField::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ServiceField.URL)
}
inline std::string* ServiceField::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ServiceField.URL)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceField::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ServiceField.URL)
}

// bytes PublicKey = 3;
inline void ServiceField::clear_publickey() {
  publickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceField::publickey() const {
  // @@protoc_insertion_point(field_get:actions.ServiceField.PublicKey)
  return _internal_publickey();
}
inline void ServiceField::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:actions.ServiceField.PublicKey)
}
inline std::string* ServiceField::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:actions.ServiceField.PublicKey)
  return _internal_mutable_publickey();
}
inline const std::string& ServiceField::_internal_publickey() const {
  return publickey_.Get();
}
inline void ServiceField::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceField::set_publickey(std::string&& value) {
  
  publickey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.ServiceField.PublicKey)
}
inline void ServiceField::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.ServiceField.PublicKey)
}
inline void ServiceField::set_publickey(const void* value,
    size_t size) {
  
  publickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.ServiceField.PublicKey)
}
inline std::string* ServiceField::_internal_mutable_publickey() {
  
  return publickey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceField::release_publickey() {
  // @@protoc_insertion_point(field_release:actions.ServiceField.PublicKey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceField::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.ServiceField.PublicKey)
}
inline std::string* ServiceField::unsafe_arena_release_publickey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.ServiceField.PublicKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return publickey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceField::unsafe_arena_set_allocated_publickey(
    std::string* publickey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      publickey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.ServiceField.PublicKey)
}

// -------------------------------------------------------------------

// TargetAddressField

// bytes Address = 1;
inline void TargetAddressField::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TargetAddressField::address() const {
  // @@protoc_insertion_point(field_get:actions.TargetAddressField.Address)
  return _internal_address();
}
inline void TargetAddressField::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:actions.TargetAddressField.Address)
}
inline std::string* TargetAddressField::mutable_address() {
  // @@protoc_insertion_point(field_mutable:actions.TargetAddressField.Address)
  return _internal_mutable_address();
}
inline const std::string& TargetAddressField::_internal_address() const {
  return address_.Get();
}
inline void TargetAddressField::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TargetAddressField::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.TargetAddressField.Address)
}
inline void TargetAddressField::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.TargetAddressField.Address)
}
inline void TargetAddressField::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.TargetAddressField.Address)
}
inline std::string* TargetAddressField::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TargetAddressField::release_address() {
  // @@protoc_insertion_point(field_release:actions.TargetAddressField.Address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TargetAddressField::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.TargetAddressField.Address)
}
inline std::string* TargetAddressField::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.TargetAddressField.Address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TargetAddressField::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.TargetAddressField.Address)
}

// uint64 Quantity = 2;
inline void TargetAddressField::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TargetAddressField::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TargetAddressField::quantity() const {
  // @@protoc_insertion_point(field_get:actions.TargetAddressField.Quantity)
  return _internal_quantity();
}
inline void TargetAddressField::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void TargetAddressField::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:actions.TargetAddressField.Quantity)
}

// -------------------------------------------------------------------

// VotingSystemField

// string Name = 1;
inline void VotingSystemField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VotingSystemField::name() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.Name)
  return _internal_name();
}
inline void VotingSystemField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.Name)
}
inline std::string* VotingSystemField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:actions.VotingSystemField.Name)
  return _internal_mutable_name();
}
inline const std::string& VotingSystemField::_internal_name() const {
  return name_.Get();
}
inline void VotingSystemField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VotingSystemField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.VotingSystemField.Name)
}
inline void VotingSystemField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.VotingSystemField.Name)
}
inline void VotingSystemField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.VotingSystemField.Name)
}
inline std::string* VotingSystemField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VotingSystemField::release_name() {
  // @@protoc_insertion_point(field_release:actions.VotingSystemField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VotingSystemField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.VotingSystemField.Name)
}
inline std::string* VotingSystemField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.VotingSystemField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VotingSystemField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.VotingSystemField.Name)
}

// string VoteType = 2;
inline void VotingSystemField::clear_votetype() {
  votetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VotingSystemField::votetype() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.VoteType)
  return _internal_votetype();
}
inline void VotingSystemField::set_votetype(const std::string& value) {
  _internal_set_votetype(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.VoteType)
}
inline std::string* VotingSystemField::mutable_votetype() {
  // @@protoc_insertion_point(field_mutable:actions.VotingSystemField.VoteType)
  return _internal_mutable_votetype();
}
inline const std::string& VotingSystemField::_internal_votetype() const {
  return votetype_.Get();
}
inline void VotingSystemField::_internal_set_votetype(const std::string& value) {
  
  votetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VotingSystemField::set_votetype(std::string&& value) {
  
  votetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:actions.VotingSystemField.VoteType)
}
inline void VotingSystemField::set_votetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  votetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:actions.VotingSystemField.VoteType)
}
inline void VotingSystemField::set_votetype(const char* value,
    size_t size) {
  
  votetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:actions.VotingSystemField.VoteType)
}
inline std::string* VotingSystemField::_internal_mutable_votetype() {
  
  return votetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VotingSystemField::release_votetype() {
  // @@protoc_insertion_point(field_release:actions.VotingSystemField.VoteType)
  return votetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VotingSystemField::set_allocated_votetype(std::string* votetype) {
  if (votetype != nullptr) {
    
  } else {
    
  }
  votetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), votetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:actions.VotingSystemField.VoteType)
}
inline std::string* VotingSystemField::unsafe_arena_release_votetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:actions.VotingSystemField.VoteType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return votetype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VotingSystemField::unsafe_arena_set_allocated_votetype(
    std::string* votetype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (votetype != nullptr) {
    
  } else {
    
  }
  votetype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      votetype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:actions.VotingSystemField.VoteType)
}

// uint32 TallyLogic = 3;
inline void VotingSystemField::clear_tallylogic() {
  tallylogic_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VotingSystemField::_internal_tallylogic() const {
  return tallylogic_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VotingSystemField::tallylogic() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.TallyLogic)
  return _internal_tallylogic();
}
inline void VotingSystemField::_internal_set_tallylogic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tallylogic_ = value;
}
inline void VotingSystemField::set_tallylogic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tallylogic(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.TallyLogic)
}

// uint32 ThresholdPercentage = 4;
inline void VotingSystemField::clear_thresholdpercentage() {
  thresholdpercentage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VotingSystemField::_internal_thresholdpercentage() const {
  return thresholdpercentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VotingSystemField::thresholdpercentage() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.ThresholdPercentage)
  return _internal_thresholdpercentage();
}
inline void VotingSystemField::_internal_set_thresholdpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thresholdpercentage_ = value;
}
inline void VotingSystemField::set_thresholdpercentage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thresholdpercentage(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.ThresholdPercentage)
}

// bool VoteMultiplierPermitted = 5;
inline void VotingSystemField::clear_votemultiplierpermitted() {
  votemultiplierpermitted_ = false;
}
inline bool VotingSystemField::_internal_votemultiplierpermitted() const {
  return votemultiplierpermitted_;
}
inline bool VotingSystemField::votemultiplierpermitted() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.VoteMultiplierPermitted)
  return _internal_votemultiplierpermitted();
}
inline void VotingSystemField::_internal_set_votemultiplierpermitted(bool value) {
  
  votemultiplierpermitted_ = value;
}
inline void VotingSystemField::set_votemultiplierpermitted(bool value) {
  _internal_set_votemultiplierpermitted(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.VoteMultiplierPermitted)
}

// uint64 HolderProposalFee = 6;
inline void VotingSystemField::clear_holderproposalfee() {
  holderproposalfee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VotingSystemField::_internal_holderproposalfee() const {
  return holderproposalfee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VotingSystemField::holderproposalfee() const {
  // @@protoc_insertion_point(field_get:actions.VotingSystemField.HolderProposalFee)
  return _internal_holderproposalfee();
}
inline void VotingSystemField::_internal_set_holderproposalfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  holderproposalfee_ = value;
}
inline void VotingSystemField::set_holderproposalfee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_holderproposalfee(value);
  // @@protoc_insertion_point(field_set:actions.VotingSystemField.HolderProposalFee)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace actions

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_actions_2eproto
