// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace messages {
class AcceptRelationship;
class AcceptRelationshipDefaultTypeInternal;
extern AcceptRelationshipDefaultTypeInternal _AcceptRelationship_default_instance_;
class AdministratorField;
class AdministratorFieldDefaultTypeInternal;
extern AdministratorFieldDefaultTypeInternal _AdministratorField_default_instance_;
class ChannelPartyField;
class ChannelPartyFieldDefaultTypeInternal;
extern ChannelPartyFieldDefaultTypeInternal _ChannelPartyField_default_instance_;
class Distribution;
class DistributionDefaultTypeInternal;
extern DistributionDefaultTypeInternal _Distribution_default_instance_;
class DocumentField;
class DocumentFieldDefaultTypeInternal;
extern DocumentFieldDefaultTypeInternal _DocumentField_default_instance_;
class EntityField;
class EntityFieldDefaultTypeInternal;
extern EntityFieldDefaultTypeInternal _EntityField_default_instance_;
class IdentityOracleProofField;
class IdentityOracleProofFieldDefaultTypeInternal;
extern IdentityOracleProofFieldDefaultTypeInternal _IdentityOracleProofField_default_instance_;
class InitiateRelationship;
class InitiateRelationshipDefaultTypeInternal;
extern InitiateRelationshipDefaultTypeInternal _InitiateRelationship_default_instance_;
class InitiateThread;
class InitiateThreadDefaultTypeInternal;
extern InitiateThreadDefaultTypeInternal _InitiateThread_default_instance_;
class ManagerField;
class ManagerFieldDefaultTypeInternal;
extern ManagerFieldDefaultTypeInternal _ManagerField_default_instance_;
class Offer;
class OfferDefaultTypeInternal;
extern OfferDefaultTypeInternal _Offer_default_instance_;
class OracleSignatureField;
class OracleSignatureFieldDefaultTypeInternal;
extern OracleSignatureFieldDefaultTypeInternal _OracleSignatureField_default_instance_;
class OutpointField;
class OutpointFieldDefaultTypeInternal;
extern OutpointFieldDefaultTypeInternal _OutpointField_default_instance_;
class OutputMetadata;
class OutputMetadataDefaultTypeInternal;
extern OutputMetadataDefaultTypeInternal _OutputMetadata_default_instance_;
class OutputTagField;
class OutputTagFieldDefaultTypeInternal;
extern OutputTagFieldDefaultTypeInternal _OutputTagField_default_instance_;
class PaymailProofField;
class PaymailProofFieldDefaultTypeInternal;
extern PaymailProofFieldDefaultTypeInternal _PaymailProofField_default_instance_;
class PendingAcceptRelationship;
class PendingAcceptRelationshipDefaultTypeInternal;
extern PendingAcceptRelationshipDefaultTypeInternal _PendingAcceptRelationship_default_instance_;
class PeriodField;
class PeriodFieldDefaultTypeInternal;
extern PeriodFieldDefaultTypeInternal _PeriodField_default_instance_;
class PrivateMessage;
class PrivateMessageDefaultTypeInternal;
extern PrivateMessageDefaultTypeInternal _PrivateMessage_default_instance_;
class PublicMessage;
class PublicMessageDefaultTypeInternal;
extern PublicMessageDefaultTypeInternal _PublicMessage_default_instance_;
class RelationshipAmendment;
class RelationshipAmendmentDefaultTypeInternal;
extern RelationshipAmendmentDefaultTypeInternal _RelationshipAmendment_default_instance_;
class RevertedTx;
class RevertedTxDefaultTypeInternal;
extern RevertedTxDefaultTypeInternal _RevertedTx_default_instance_;
class SettlementRequest;
class SettlementRequestDefaultTypeInternal;
extern SettlementRequestDefaultTypeInternal _SettlementRequest_default_instance_;
class SignatureRequest;
class SignatureRequestDefaultTypeInternal;
extern SignatureRequestDefaultTypeInternal _SignatureRequest_default_instance_;
class TargetAddressField;
class TargetAddressFieldDefaultTypeInternal;
extern TargetAddressFieldDefaultTypeInternal _TargetAddressField_default_instance_;
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::AcceptRelationship* Arena::CreateMaybeMessage<::messages::AcceptRelationship>(Arena*);
template<> ::messages::AdministratorField* Arena::CreateMaybeMessage<::messages::AdministratorField>(Arena*);
template<> ::messages::ChannelPartyField* Arena::CreateMaybeMessage<::messages::ChannelPartyField>(Arena*);
template<> ::messages::Distribution* Arena::CreateMaybeMessage<::messages::Distribution>(Arena*);
template<> ::messages::DocumentField* Arena::CreateMaybeMessage<::messages::DocumentField>(Arena*);
template<> ::messages::EntityField* Arena::CreateMaybeMessage<::messages::EntityField>(Arena*);
template<> ::messages::IdentityOracleProofField* Arena::CreateMaybeMessage<::messages::IdentityOracleProofField>(Arena*);
template<> ::messages::InitiateRelationship* Arena::CreateMaybeMessage<::messages::InitiateRelationship>(Arena*);
template<> ::messages::InitiateThread* Arena::CreateMaybeMessage<::messages::InitiateThread>(Arena*);
template<> ::messages::ManagerField* Arena::CreateMaybeMessage<::messages::ManagerField>(Arena*);
template<> ::messages::Offer* Arena::CreateMaybeMessage<::messages::Offer>(Arena*);
template<> ::messages::OracleSignatureField* Arena::CreateMaybeMessage<::messages::OracleSignatureField>(Arena*);
template<> ::messages::OutpointField* Arena::CreateMaybeMessage<::messages::OutpointField>(Arena*);
template<> ::messages::OutputMetadata* Arena::CreateMaybeMessage<::messages::OutputMetadata>(Arena*);
template<> ::messages::OutputTagField* Arena::CreateMaybeMessage<::messages::OutputTagField>(Arena*);
template<> ::messages::PaymailProofField* Arena::CreateMaybeMessage<::messages::PaymailProofField>(Arena*);
template<> ::messages::PendingAcceptRelationship* Arena::CreateMaybeMessage<::messages::PendingAcceptRelationship>(Arena*);
template<> ::messages::PeriodField* Arena::CreateMaybeMessage<::messages::PeriodField>(Arena*);
template<> ::messages::PrivateMessage* Arena::CreateMaybeMessage<::messages::PrivateMessage>(Arena*);
template<> ::messages::PublicMessage* Arena::CreateMaybeMessage<::messages::PublicMessage>(Arena*);
template<> ::messages::RelationshipAmendment* Arena::CreateMaybeMessage<::messages::RelationshipAmendment>(Arena*);
template<> ::messages::RevertedTx* Arena::CreateMaybeMessage<::messages::RevertedTx>(Arena*);
template<> ::messages::SettlementRequest* Arena::CreateMaybeMessage<::messages::SettlementRequest>(Arena*);
template<> ::messages::SignatureRequest* Arena::CreateMaybeMessage<::messages::SignatureRequest>(Arena*);
template<> ::messages::TargetAddressField* Arena::CreateMaybeMessage<::messages::TargetAddressField>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {

// ===================================================================

class PublicMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.PublicMessage) */ {
 public:
  inline PublicMessage() : PublicMessage(nullptr) {};
  virtual ~PublicMessage();

  PublicMessage(const PublicMessage& from);
  PublicMessage(PublicMessage&& from) noexcept
    : PublicMessage() {
    *this = ::std::move(from);
  }

  inline PublicMessage& operator=(const PublicMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicMessage& operator=(PublicMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicMessage* internal_default_instance() {
    return reinterpret_cast<const PublicMessage*>(
               &_PublicMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublicMessage& a, PublicMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicMessage* New() const final {
    return CreateMaybeMessage<PublicMessage>(nullptr);
  }

  PublicMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicMessage& from);
  void MergeFrom(const PublicMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PublicMessage";
  }
  protected:
  explicit PublicMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 5,
    kSubjectFieldNumber = 2,
    kRegardingFieldNumber = 3,
    kPublicMessageFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // repeated .messages.DocumentField Attachments = 5;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::messages::DocumentField* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >*
      mutable_attachments();
  private:
  const ::messages::DocumentField& _internal_attachments(int index) const;
  ::messages::DocumentField* _internal_add_attachments();
  public:
  const ::messages::DocumentField& attachments(int index) const;
  ::messages::DocumentField* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >&
      attachments() const;

  // string Subject = 2;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subject();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subject(
      std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .messages.OutpointField Regarding = 3;
  bool has_regarding() const;
  private:
  bool _internal_has_regarding() const;
  public:
  void clear_regarding();
  const ::messages::OutpointField& regarding() const;
  ::messages::OutpointField* release_regarding();
  ::messages::OutpointField* mutable_regarding();
  void set_allocated_regarding(::messages::OutpointField* regarding);
  private:
  const ::messages::OutpointField& _internal_regarding() const;
  ::messages::OutpointField* _internal_mutable_regarding();
  public:
  void unsafe_arena_set_allocated_regarding(
      ::messages::OutpointField* regarding);
  ::messages::OutpointField* unsafe_arena_release_regarding();

  // .messages.DocumentField PublicMessage = 4;
  bool has_publicmessage() const;
  private:
  bool _internal_has_publicmessage() const;
  public:
  void clear_publicmessage();
  const ::messages::DocumentField& publicmessage() const;
  ::messages::DocumentField* release_publicmessage();
  ::messages::DocumentField* mutable_publicmessage();
  void set_allocated_publicmessage(::messages::DocumentField* publicmessage);
  private:
  const ::messages::DocumentField& _internal_publicmessage() const;
  ::messages::DocumentField* _internal_mutable_publicmessage();
  public:
  void unsafe_arena_set_allocated_publicmessage(
      ::messages::DocumentField* publicmessage);
  ::messages::DocumentField* unsafe_arena_release_publicmessage();

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.PublicMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField > attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::messages::OutpointField* regarding_;
  ::messages::DocumentField* publicmessage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PrivateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.PrivateMessage) */ {
 public:
  inline PrivateMessage() : PrivateMessage(nullptr) {};
  virtual ~PrivateMessage();

  PrivateMessage(const PrivateMessage& from);
  PrivateMessage(PrivateMessage&& from) noexcept
    : PrivateMessage() {
    *this = ::std::move(from);
  }

  inline PrivateMessage& operator=(const PrivateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMessage& operator=(PrivateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrivateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateMessage* internal_default_instance() {
    return reinterpret_cast<const PrivateMessage*>(
               &_PrivateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivateMessage& a, PrivateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrivateMessage* New() const final {
    return CreateMaybeMessage<PrivateMessage>(nullptr);
  }

  PrivateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrivateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrivateMessage& from);
  void MergeFrom(const PrivateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PrivateMessage";
  }
  protected:
  explicit PrivateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachmentsFieldNumber = 5,
    kSubjectFieldNumber = 2,
    kRegardingFieldNumber = 3,
    kPrivateMessageFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // repeated .messages.DocumentField Attachments = 5;
  int attachments_size() const;
  private:
  int _internal_attachments_size() const;
  public:
  void clear_attachments();
  ::messages::DocumentField* mutable_attachments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >*
      mutable_attachments();
  private:
  const ::messages::DocumentField& _internal_attachments(int index) const;
  ::messages::DocumentField* _internal_add_attachments();
  public:
  const ::messages::DocumentField& attachments(int index) const;
  ::messages::DocumentField* add_attachments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >&
      attachments() const;

  // string Subject = 2;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subject();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subject(
      std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // .messages.OutpointField Regarding = 3;
  bool has_regarding() const;
  private:
  bool _internal_has_regarding() const;
  public:
  void clear_regarding();
  const ::messages::OutpointField& regarding() const;
  ::messages::OutpointField* release_regarding();
  ::messages::OutpointField* mutable_regarding();
  void set_allocated_regarding(::messages::OutpointField* regarding);
  private:
  const ::messages::OutpointField& _internal_regarding() const;
  ::messages::OutpointField* _internal_mutable_regarding();
  public:
  void unsafe_arena_set_allocated_regarding(
      ::messages::OutpointField* regarding);
  ::messages::OutpointField* unsafe_arena_release_regarding();

  // .messages.DocumentField PrivateMessage = 4;
  bool has_privatemessage() const;
  private:
  bool _internal_has_privatemessage() const;
  public:
  void clear_privatemessage();
  const ::messages::DocumentField& privatemessage() const;
  ::messages::DocumentField* release_privatemessage();
  ::messages::DocumentField* mutable_privatemessage();
  void set_allocated_privatemessage(::messages::DocumentField* privatemessage);
  private:
  const ::messages::DocumentField& _internal_privatemessage() const;
  ::messages::DocumentField* _internal_mutable_privatemessage();
  public:
  void unsafe_arena_set_allocated_privatemessage(
      ::messages::DocumentField* privatemessage);
  ::messages::DocumentField* unsafe_arena_release_privatemessage();

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.PrivateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField > attachments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::messages::OutpointField* regarding_;
  ::messages::DocumentField* privatemessage_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RevertedTx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.RevertedTx) */ {
 public:
  inline RevertedTx() : RevertedTx(nullptr) {};
  virtual ~RevertedTx();

  RevertedTx(const RevertedTx& from);
  RevertedTx(RevertedTx&& from) noexcept
    : RevertedTx() {
    *this = ::std::move(from);
  }

  inline RevertedTx& operator=(const RevertedTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevertedTx& operator=(RevertedTx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RevertedTx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevertedTx* internal_default_instance() {
    return reinterpret_cast<const RevertedTx*>(
               &_RevertedTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RevertedTx& a, RevertedTx& b) {
    a.Swap(&b);
  }
  inline void Swap(RevertedTx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevertedTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RevertedTx* New() const final {
    return CreateMaybeMessage<RevertedTx>(nullptr);
  }

  RevertedTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RevertedTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RevertedTx& from);
  void MergeFrom(const RevertedTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevertedTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.RevertedTx";
  }
  protected:
  explicit RevertedTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // bytes Transaction = 2;
  void clear_transaction();
  const std::string& transaction() const;
  void set_transaction(const std::string& value);
  void set_transaction(std::string&& value);
  void set_transaction(const char* value);
  void set_transaction(const void* value, size_t size);
  std::string* mutable_transaction();
  std::string* release_transaction();
  void set_allocated_transaction(std::string* transaction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transaction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transaction(
      std::string* transaction);
  private:
  const std::string& _internal_transaction() const;
  void _internal_set_transaction(const std::string& value);
  std::string* _internal_mutable_transaction();
  public:

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.RevertedTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Offer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Offer) */ {
 public:
  inline Offer() : Offer(nullptr) {};
  virtual ~Offer();

  Offer(const Offer& from);
  Offer(Offer&& from) noexcept
    : Offer() {
    *this = ::std::move(from);
  }

  inline Offer& operator=(const Offer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offer& operator=(Offer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Offer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Offer* internal_default_instance() {
    return reinterpret_cast<const Offer*>(
               &_Offer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Offer& a, Offer& b) {
    a.Swap(&b);
  }
  inline void Swap(Offer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Offer* New() const final {
    return CreateMaybeMessage<Offer>(nullptr);
  }

  Offer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Offer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Offer& from);
  void MergeFrom(const Offer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Offer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Offer";
  }
  protected:
  explicit Offer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // bytes Payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.Offer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SignatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.SignatureRequest) */ {
 public:
  inline SignatureRequest() : SignatureRequest(nullptr) {};
  virtual ~SignatureRequest();

  SignatureRequest(const SignatureRequest& from);
  SignatureRequest(SignatureRequest&& from) noexcept
    : SignatureRequest() {
    *this = ::std::move(from);
  }

  inline SignatureRequest& operator=(const SignatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureRequest& operator=(SignatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignatureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignatureRequest* internal_default_instance() {
    return reinterpret_cast<const SignatureRequest*>(
               &_SignatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SignatureRequest& a, SignatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignatureRequest* New() const final {
    return CreateMaybeMessage<SignatureRequest>(nullptr);
  }

  SignatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignatureRequest& from);
  void MergeFrom(const SignatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.SignatureRequest";
  }
  protected:
  explicit SignatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // bytes Payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.SignatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SettlementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.SettlementRequest) */ {
 public:
  inline SettlementRequest() : SettlementRequest(nullptr) {};
  virtual ~SettlementRequest();

  SettlementRequest(const SettlementRequest& from);
  SettlementRequest(SettlementRequest&& from) noexcept
    : SettlementRequest() {
    *this = ::std::move(from);
  }

  inline SettlementRequest& operator=(const SettlementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettlementRequest& operator=(SettlementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettlementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettlementRequest* internal_default_instance() {
    return reinterpret_cast<const SettlementRequest*>(
               &_SettlementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SettlementRequest& a, SettlementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SettlementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SettlementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettlementRequest* New() const final {
    return CreateMaybeMessage<SettlementRequest>(nullptr);
  }

  SettlementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettlementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettlementRequest& from);
  void MergeFrom(const SettlementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettlementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.SettlementRequest";
  }
  protected:
  explicit SettlementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFeesFieldNumber = 3,
    kTransferFeesFieldNumber = 5,
    kTransferTxIdFieldNumber = 2,
    kSettlementFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // repeated .messages.TargetAddressField ContractFees = 3;
  int contractfees_size() const;
  private:
  int _internal_contractfees_size() const;
  public:
  void clear_contractfees();
  ::messages::TargetAddressField* mutable_contractfees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >*
      mutable_contractfees();
  private:
  const ::messages::TargetAddressField& _internal_contractfees(int index) const;
  ::messages::TargetAddressField* _internal_add_contractfees();
  public:
  const ::messages::TargetAddressField& contractfees(int index) const;
  ::messages::TargetAddressField* add_contractfees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >&
      contractfees() const;

  // repeated .messages.TargetAddressField TransferFees = 5;
  int transferfees_size() const;
  private:
  int _internal_transferfees_size() const;
  public:
  void clear_transferfees();
  ::messages::TargetAddressField* mutable_transferfees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >*
      mutable_transferfees();
  private:
  const ::messages::TargetAddressField& _internal_transferfees(int index) const;
  ::messages::TargetAddressField* _internal_add_transferfees();
  public:
  const ::messages::TargetAddressField& transferfees(int index) const;
  ::messages::TargetAddressField* add_transferfees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >&
      transferfees() const;

  // bytes TransferTxId = 2;
  void clear_transfertxid();
  const std::string& transfertxid() const;
  void set_transfertxid(const std::string& value);
  void set_transfertxid(std::string&& value);
  void set_transfertxid(const char* value);
  void set_transfertxid(const void* value, size_t size);
  std::string* mutable_transfertxid();
  std::string* release_transfertxid();
  void set_allocated_transfertxid(std::string* transfertxid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transfertxid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transfertxid(
      std::string* transfertxid);
  private:
  const std::string& _internal_transfertxid() const;
  void _internal_set_transfertxid(const std::string& value);
  std::string* _internal_mutable_transfertxid();
  public:

  // bytes Settlement = 4;
  void clear_settlement();
  const std::string& settlement() const;
  void set_settlement(const std::string& value);
  void set_settlement(std::string&& value);
  void set_settlement(const char* value);
  void set_settlement(const void* value, size_t size);
  std::string* mutable_settlement();
  std::string* release_settlement();
  void set_allocated_settlement(std::string* settlement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_settlement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_settlement(
      std::string* settlement);
  private:
  const std::string& _internal_settlement() const;
  void _internal_set_settlement(const std::string& value);
  std::string* _internal_mutable_settlement();
  public:

  // uint64 Timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.SettlementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField > contractfees_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField > transferfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transfertxid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlement_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OutputMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.OutputMetadata) */ {
 public:
  inline OutputMetadata() : OutputMetadata(nullptr) {};
  virtual ~OutputMetadata();

  OutputMetadata(const OutputMetadata& from);
  OutputMetadata(OutputMetadata&& from) noexcept
    : OutputMetadata() {
    *this = ::std::move(from);
  }

  inline OutputMetadata& operator=(const OutputMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputMetadata& operator=(OutputMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputMetadata* internal_default_instance() {
    return reinterpret_cast<const OutputMetadata*>(
               &_OutputMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OutputMetadata& a, OutputMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputMetadata* New() const final {
    return CreateMaybeMessage<OutputMetadata>(nullptr);
  }

  OutputMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputMetadata& from);
  void MergeFrom(const OutputMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.OutputMetadata";
  }
  protected:
  explicit OutputMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kCustomTagsFieldNumber = 3,
    kOutputDescriptionFieldNumber = 1,
  };
  // repeated uint32 Tags = 2;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tags() const;
  void _internal_add_tags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tags();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tags(int index) const;
  void set_tags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tags();

  // repeated .messages.OutputTagField CustomTags = 3;
  int customtags_size() const;
  private:
  int _internal_customtags_size() const;
  public:
  void clear_customtags();
  ::messages::OutputTagField* mutable_customtags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::OutputTagField >*
      mutable_customtags();
  private:
  const ::messages::OutputTagField& _internal_customtags(int index) const;
  ::messages::OutputTagField* _internal_add_customtags();
  public:
  const ::messages::OutputTagField& customtags(int index) const;
  ::messages::OutputTagField* add_customtags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::OutputTagField >&
      customtags() const;

  // string OutputDescription = 1;
  void clear_outputdescription();
  const std::string& outputdescription() const;
  void set_outputdescription(const std::string& value);
  void set_outputdescription(std::string&& value);
  void set_outputdescription(const char* value);
  void set_outputdescription(const char* value, size_t size);
  std::string* mutable_outputdescription();
  std::string* release_outputdescription();
  void set_allocated_outputdescription(std::string* outputdescription);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_outputdescription();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_outputdescription(
      std::string* outputdescription);
  private:
  const std::string& _internal_outputdescription() const;
  void _internal_set_outputdescription(const std::string& value);
  std::string* _internal_mutable_outputdescription();
  public:

  // @@protoc_insertion_point(class_scope:messages.OutputMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tags_;
  mutable std::atomic<int> _tags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::OutputTagField > customtags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputdescription_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Distribution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.Distribution) */ {
 public:
  inline Distribution() : Distribution(nullptr) {};
  virtual ~Distribution();

  Distribution(const Distribution& from);
  Distribution(Distribution&& from) noexcept
    : Distribution() {
    *this = ::std::move(from);
  }

  inline Distribution& operator=(const Distribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distribution& operator=(Distribution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distribution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distribution* internal_default_instance() {
    return reinterpret_cast<const Distribution*>(
               &_Distribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Distribution& a, Distribution& b) {
    a.Swap(&b);
  }
  inline void Swap(Distribution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distribution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distribution* New() const final {
    return CreateMaybeMessage<Distribution>(nullptr);
  }

  Distribution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distribution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distribution& from);
  void MergeFrom(const Distribution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distribution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.Distribution";
  }
  protected:
  explicit Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentCodeFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes InstrumentCode = 1;
  void clear_instrumentcode();
  const std::string& instrumentcode() const;
  void set_instrumentcode(const std::string& value);
  void set_instrumentcode(std::string&& value);
  void set_instrumentcode(const char* value);
  void set_instrumentcode(const void* value, size_t size);
  std::string* mutable_instrumentcode();
  std::string* release_instrumentcode();
  void set_allocated_instrumentcode(std::string* instrumentcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrumentcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrumentcode(
      std::string* instrumentcode);
  private:
  const std::string& _internal_instrumentcode() const;
  void _internal_set_instrumentcode(const std::string& value);
  std::string* _internal_mutable_instrumentcode();
  public:

  // uint64 Timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.Distribution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentcode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class InitiateRelationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.InitiateRelationship) */ {
 public:
  inline InitiateRelationship() : InitiateRelationship(nullptr) {};
  virtual ~InitiateRelationship();

  InitiateRelationship(const InitiateRelationship& from);
  InitiateRelationship(InitiateRelationship&& from) noexcept
    : InitiateRelationship() {
    *this = ::std::move(from);
  }

  inline InitiateRelationship& operator=(const InitiateRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateRelationship& operator=(InitiateRelationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitiateRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitiateRelationship* internal_default_instance() {
    return reinterpret_cast<const InitiateRelationship*>(
               &_InitiateRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InitiateRelationship& a, InitiateRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateRelationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiateRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitiateRelationship* New() const final {
    return CreateMaybeMessage<InitiateRelationship>(nullptr);
  }

  InitiateRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitiateRelationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitiateRelationship& from);
  void MergeFrom(const InitiateRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateRelationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.InitiateRelationship";
  }
  protected:
  explicit InitiateRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelPartiesFieldNumber = 7,
    kSeedFieldNumber = 2,
    kFlagFieldNumber = 3,
    kProofOfIdentityFieldNumber = 6,
    kTypeFieldNumber = 1,
    kEncryptionTypeFieldNumber = 4,
    kProofOfIdentityTypeFieldNumber = 5,
  };
  // repeated .messages.ChannelPartyField ChannelParties = 7;
  int channelparties_size() const;
  private:
  int _internal_channelparties_size() const;
  public:
  void clear_channelparties();
  ::messages::ChannelPartyField* mutable_channelparties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ChannelPartyField >*
      mutable_channelparties();
  private:
  const ::messages::ChannelPartyField& _internal_channelparties(int index) const;
  ::messages::ChannelPartyField* _internal_add_channelparties();
  public:
  const ::messages::ChannelPartyField& channelparties(int index) const;
  ::messages::ChannelPartyField* add_channelparties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ChannelPartyField >&
      channelparties() const;

  // bytes Seed = 2;
  void clear_seed();
  const std::string& seed() const;
  void set_seed(const std::string& value);
  void set_seed(std::string&& value);
  void set_seed(const char* value);
  void set_seed(const void* value, size_t size);
  std::string* mutable_seed();
  std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seed(
      std::string* seed);
  private:
  const std::string& _internal_seed() const;
  void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // bytes Flag = 3;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const void* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flag(
      std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // bytes ProofOfIdentity = 6;
  void clear_proofofidentity();
  const std::string& proofofidentity() const;
  void set_proofofidentity(const std::string& value);
  void set_proofofidentity(std::string&& value);
  void set_proofofidentity(const char* value);
  void set_proofofidentity(const void* value, size_t size);
  std::string* mutable_proofofidentity();
  std::string* release_proofofidentity();
  void set_allocated_proofofidentity(std::string* proofofidentity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proofofidentity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proofofidentity(
      std::string* proofofidentity);
  private:
  const std::string& _internal_proofofidentity() const;
  void _internal_set_proofofidentity(const std::string& value);
  std::string* _internal_mutable_proofofidentity();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 EncryptionType = 4;
  void clear_encryptiontype();
  ::PROTOBUF_NAMESPACE_ID::uint32 encryptiontype() const;
  void set_encryptiontype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encryptiontype() const;
  void _internal_set_encryptiontype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ProofOfIdentityType = 5;
  void clear_proofofidentitytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype() const;
  void set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proofofidentitytype() const;
  void _internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.InitiateRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ChannelPartyField > channelparties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proofofidentity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 encryptiontype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PendingAcceptRelationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.PendingAcceptRelationship) */ {
 public:
  inline PendingAcceptRelationship() : PendingAcceptRelationship(nullptr) {};
  virtual ~PendingAcceptRelationship();

  PendingAcceptRelationship(const PendingAcceptRelationship& from);
  PendingAcceptRelationship(PendingAcceptRelationship&& from) noexcept
    : PendingAcceptRelationship() {
    *this = ::std::move(from);
  }

  inline PendingAcceptRelationship& operator=(const PendingAcceptRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingAcceptRelationship& operator=(PendingAcceptRelationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingAcceptRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingAcceptRelationship* internal_default_instance() {
    return reinterpret_cast<const PendingAcceptRelationship*>(
               &_PendingAcceptRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PendingAcceptRelationship& a, PendingAcceptRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingAcceptRelationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PendingAcceptRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingAcceptRelationship* New() const final {
    return CreateMaybeMessage<PendingAcceptRelationship>(nullptr);
  }

  PendingAcceptRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingAcceptRelationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingAcceptRelationship& from);
  void MergeFrom(const PendingAcceptRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingAcceptRelationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PendingAcceptRelationship";
  }
  protected:
  explicit PendingAcceptRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofOfIdentityFieldNumber = 2,
    kProofOfIdentityTypeFieldNumber = 1,
  };
  // bytes ProofOfIdentity = 2;
  void clear_proofofidentity();
  const std::string& proofofidentity() const;
  void set_proofofidentity(const std::string& value);
  void set_proofofidentity(std::string&& value);
  void set_proofofidentity(const char* value);
  void set_proofofidentity(const void* value, size_t size);
  std::string* mutable_proofofidentity();
  std::string* release_proofofidentity();
  void set_allocated_proofofidentity(std::string* proofofidentity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proofofidentity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proofofidentity(
      std::string* proofofidentity);
  private:
  const std::string& _internal_proofofidentity() const;
  void _internal_set_proofofidentity(const std::string& value);
  std::string* _internal_mutable_proofofidentity();
  public:

  // uint32 ProofOfIdentityType = 1;
  void clear_proofofidentitytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype() const;
  void set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proofofidentitytype() const;
  void _internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.PendingAcceptRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proofofidentity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AcceptRelationship PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.AcceptRelationship) */ {
 public:
  inline AcceptRelationship() : AcceptRelationship(nullptr) {};
  virtual ~AcceptRelationship();

  AcceptRelationship(const AcceptRelationship& from);
  AcceptRelationship(AcceptRelationship&& from) noexcept
    : AcceptRelationship() {
    *this = ::std::move(from);
  }

  inline AcceptRelationship& operator=(const AcceptRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptRelationship& operator=(AcceptRelationship&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptRelationship* internal_default_instance() {
    return reinterpret_cast<const AcceptRelationship*>(
               &_AcceptRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AcceptRelationship& a, AcceptRelationship& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptRelationship* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptRelationship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptRelationship* New() const final {
    return CreateMaybeMessage<AcceptRelationship>(nullptr);
  }

  AcceptRelationship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptRelationship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptRelationship& from);
  void MergeFrom(const AcceptRelationship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptRelationship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.AcceptRelationship";
  }
  protected:
  explicit AcceptRelationship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofOfIdentityFieldNumber = 2,
    kProofOfIdentityTypeFieldNumber = 1,
  };
  // bytes ProofOfIdentity = 2;
  void clear_proofofidentity();
  const std::string& proofofidentity() const;
  void set_proofofidentity(const std::string& value);
  void set_proofofidentity(std::string&& value);
  void set_proofofidentity(const char* value);
  void set_proofofidentity(const void* value, size_t size);
  std::string* mutable_proofofidentity();
  std::string* release_proofofidentity();
  void set_allocated_proofofidentity(std::string* proofofidentity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_proofofidentity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_proofofidentity(
      std::string* proofofidentity);
  private:
  const std::string& _internal_proofofidentity() const;
  void _internal_set_proofofidentity(const std::string& value);
  std::string* _internal_mutable_proofofidentity();
  public:

  // uint32 ProofOfIdentityType = 1;
  void clear_proofofidentitytype();
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype() const;
  void set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_proofofidentitytype() const;
  void _internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.AcceptRelationship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proofofidentity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 proofofidentitytype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class RelationshipAmendment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.RelationshipAmendment) */ {
 public:
  inline RelationshipAmendment() : RelationshipAmendment(nullptr) {};
  virtual ~RelationshipAmendment();

  RelationshipAmendment(const RelationshipAmendment& from);
  RelationshipAmendment(RelationshipAmendment&& from) noexcept
    : RelationshipAmendment() {
    *this = ::std::move(from);
  }

  inline RelationshipAmendment& operator=(const RelationshipAmendment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelationshipAmendment& operator=(RelationshipAmendment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RelationshipAmendment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelationshipAmendment* internal_default_instance() {
    return reinterpret_cast<const RelationshipAmendment*>(
               &_RelationshipAmendment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RelationshipAmendment& a, RelationshipAmendment& b) {
    a.Swap(&b);
  }
  inline void Swap(RelationshipAmendment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelationshipAmendment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RelationshipAmendment* New() const final {
    return CreateMaybeMessage<RelationshipAmendment>(nullptr);
  }

  RelationshipAmendment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RelationshipAmendment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RelationshipAmendment& from);
  void MergeFrom(const RelationshipAmendment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelationshipAmendment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.RelationshipAmendment";
  }
  protected:
  explicit RelationshipAmendment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
    kBaseEncryptionSecretFieldNumber = 2,
    kAddMemberIndexesFieldNumber = 3,
    kDropMemberIndexesFieldNumber = 4,
  };
  // bytes Seed = 1;
  void clear_seed();
  const std::string& seed() const;
  void set_seed(const std::string& value);
  void set_seed(std::string&& value);
  void set_seed(const char* value);
  void set_seed(const void* value, size_t size);
  std::string* mutable_seed();
  std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seed(
      std::string* seed);
  private:
  const std::string& _internal_seed() const;
  void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // bytes BaseEncryptionSecret = 2;
  void clear_baseencryptionsecret();
  const std::string& baseencryptionsecret() const;
  void set_baseencryptionsecret(const std::string& value);
  void set_baseencryptionsecret(std::string&& value);
  void set_baseencryptionsecret(const char* value);
  void set_baseencryptionsecret(const void* value, size_t size);
  std::string* mutable_baseencryptionsecret();
  std::string* release_baseencryptionsecret();
  void set_allocated_baseencryptionsecret(std::string* baseencryptionsecret);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_baseencryptionsecret();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_baseencryptionsecret(
      std::string* baseencryptionsecret);
  private:
  const std::string& _internal_baseencryptionsecret() const;
  void _internal_set_baseencryptionsecret(const std::string& value);
  std::string* _internal_mutable_baseencryptionsecret();
  public:

  // uint32 AddMemberIndexes = 3;
  void clear_addmemberindexes();
  ::PROTOBUF_NAMESPACE_ID::uint32 addmemberindexes() const;
  void set_addmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_addmemberindexes() const;
  void _internal_set_addmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 DropMemberIndexes = 4;
  void clear_dropmemberindexes();
  ::PROTOBUF_NAMESPACE_ID::uint32 dropmemberindexes() const;
  void set_dropmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dropmemberindexes() const;
  void _internal_set_dropmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.RelationshipAmendment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr baseencryptionsecret_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addmemberindexes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dropmemberindexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class InitiateThread PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.InitiateThread) */ {
 public:
  inline InitiateThread() : InitiateThread(nullptr) {};
  virtual ~InitiateThread();

  InitiateThread(const InitiateThread& from);
  InitiateThread(InitiateThread&& from) noexcept
    : InitiateThread() {
    *this = ::std::move(from);
  }

  inline InitiateThread& operator=(const InitiateThread& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateThread& operator=(InitiateThread&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitiateThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitiateThread* internal_default_instance() {
    return reinterpret_cast<const InitiateThread*>(
               &_InitiateThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InitiateThread& a, InitiateThread& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateThread* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiateThread* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitiateThread* New() const final {
    return CreateMaybeMessage<InitiateThread>(nullptr);
  }

  InitiateThread* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitiateThread>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitiateThread& from);
  void MergeFrom(const InitiateThread& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateThread* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.InitiateThread";
  }
  protected:
  explicit InitiateThread(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kSeedFieldNumber = 2,
  };
  // bytes Flag = 1;
  void clear_flag();
  const std::string& flag() const;
  void set_flag(const std::string& value);
  void set_flag(std::string&& value);
  void set_flag(const char* value);
  void set_flag(const void* value, size_t size);
  std::string* mutable_flag();
  std::string* release_flag();
  void set_allocated_flag(std::string* flag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_flag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_flag(
      std::string* flag);
  private:
  const std::string& _internal_flag() const;
  void _internal_set_flag(const std::string& value);
  std::string* _internal_mutable_flag();
  public:

  // bytes Seed = 2;
  void clear_seed();
  const std::string& seed() const;
  void set_seed(const std::string& value);
  void set_seed(std::string&& value);
  void set_seed(const char* value);
  void set_seed(const void* value, size_t size);
  std::string* mutable_seed();
  std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seed(
      std::string* seed);
  private:
  const std::string& _internal_seed() const;
  void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // @@protoc_insertion_point(class_scope:messages.InitiateThread)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class AdministratorField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.AdministratorField) */ {
 public:
  inline AdministratorField() : AdministratorField(nullptr) {};
  virtual ~AdministratorField();

  AdministratorField(const AdministratorField& from);
  AdministratorField(AdministratorField&& from) noexcept
    : AdministratorField() {
    *this = ::std::move(from);
  }

  inline AdministratorField& operator=(const AdministratorField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdministratorField& operator=(AdministratorField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdministratorField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdministratorField* internal_default_instance() {
    return reinterpret_cast<const AdministratorField*>(
               &_AdministratorField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AdministratorField& a, AdministratorField& b) {
    a.Swap(&b);
  }
  inline void Swap(AdministratorField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdministratorField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdministratorField* New() const final {
    return CreateMaybeMessage<AdministratorField>(nullptr);
  }

  AdministratorField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdministratorField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdministratorField& from);
  void MergeFrom(const AdministratorField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdministratorField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.AdministratorField";
  }
  protected:
  explicit AdministratorField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.AdministratorField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ChannelPartyField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ChannelPartyField) */ {
 public:
  inline ChannelPartyField() : ChannelPartyField(nullptr) {};
  virtual ~ChannelPartyField();

  ChannelPartyField(const ChannelPartyField& from);
  ChannelPartyField(ChannelPartyField&& from) noexcept
    : ChannelPartyField() {
    *this = ::std::move(from);
  }

  inline ChannelPartyField& operator=(const ChannelPartyField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelPartyField& operator=(ChannelPartyField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelPartyField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelPartyField* internal_default_instance() {
    return reinterpret_cast<const ChannelPartyField*>(
               &_ChannelPartyField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChannelPartyField& a, ChannelPartyField& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelPartyField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelPartyField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelPartyField* New() const final {
    return CreateMaybeMessage<ChannelPartyField>(nullptr);
  }

  ChannelPartyField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelPartyField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelPartyField& from);
  void MergeFrom(const ChannelPartyField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelPartyField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ChannelPartyField";
  }
  protected:
  explicit ChannelPartyField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdministrativeAddressFieldNumber = 1,
    kOutputIndexFieldNumber = 2,
  };
  // bytes AdministrativeAddress = 1;
  void clear_administrativeaddress();
  const std::string& administrativeaddress() const;
  void set_administrativeaddress(const std::string& value);
  void set_administrativeaddress(std::string&& value);
  void set_administrativeaddress(const char* value);
  void set_administrativeaddress(const void* value, size_t size);
  std::string* mutable_administrativeaddress();
  std::string* release_administrativeaddress();
  void set_allocated_administrativeaddress(std::string* administrativeaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_administrativeaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_administrativeaddress(
      std::string* administrativeaddress);
  private:
  const std::string& _internal_administrativeaddress() const;
  void _internal_set_administrativeaddress(const std::string& value);
  std::string* _internal_mutable_administrativeaddress();
  public:

  // uint32 OutputIndex = 2;
  void clear_outputindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 outputindex() const;
  void set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outputindex() const;
  void _internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ChannelPartyField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr administrativeaddress_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class DocumentField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.DocumentField) */ {
 public:
  inline DocumentField() : DocumentField(nullptr) {};
  virtual ~DocumentField();

  DocumentField(const DocumentField& from);
  DocumentField(DocumentField&& from) noexcept
    : DocumentField() {
    *this = ::std::move(from);
  }

  inline DocumentField& operator=(const DocumentField& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentField& operator=(DocumentField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentField* internal_default_instance() {
    return reinterpret_cast<const DocumentField*>(
               &_DocumentField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DocumentField& a, DocumentField& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DocumentField* New() const final {
    return CreateMaybeMessage<DocumentField>(nullptr);
  }

  DocumentField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentField& from);
  void MergeFrom(const DocumentField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.DocumentField";
  }
  protected:
  explicit DocumentField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kContentsFieldNumber = 3,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes Contents = 3;
  void clear_contents();
  const std::string& contents() const;
  void set_contents(const std::string& value);
  void set_contents(std::string&& value);
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  std::string* mutable_contents();
  std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contents();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contents(
      std::string* contents);
  private:
  const std::string& _internal_contents() const;
  void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // @@protoc_insertion_point(class_scope:messages.DocumentField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EntityField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.EntityField) */ {
 public:
  inline EntityField() : EntityField(nullptr) {};
  virtual ~EntityField();

  EntityField(const EntityField& from);
  EntityField(EntityField&& from) noexcept
    : EntityField() {
    *this = ::std::move(from);
  }

  inline EntityField& operator=(const EntityField& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityField& operator=(EntityField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityField* internal_default_instance() {
    return reinterpret_cast<const EntityField*>(
               &_EntityField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EntityField& a, EntityField& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityField* New() const final {
    return CreateMaybeMessage<EntityField>(nullptr);
  }

  EntityField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityField& from);
  void MergeFrom(const EntityField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.EntityField";
  }
  protected:
  explicit EntityField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdministrationFieldNumber = 13,
    kManagementFieldNumber = 14,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLEIFieldNumber = 3,
    kUnitNumberFieldNumber = 4,
    kBuildingNumberFieldNumber = 5,
    kStreetFieldNumber = 6,
    kSuburbCityFieldNumber = 7,
    kTerritoryStateProvinceCodeFieldNumber = 8,
    kCountryCodeFieldNumber = 9,
    kPostalZIPCodeFieldNumber = 10,
    kEmailAddressFieldNumber = 11,
    kPhoneNumberFieldNumber = 12,
    kDomainNameFieldNumber = 15,
    kPaymailHandleFieldNumber = 17,
  };
  // repeated .messages.AdministratorField Administration = 13;
  int administration_size() const;
  private:
  int _internal_administration_size() const;
  public:
  void clear_administration();
  ::messages::AdministratorField* mutable_administration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::AdministratorField >*
      mutable_administration();
  private:
  const ::messages::AdministratorField& _internal_administration(int index) const;
  ::messages::AdministratorField* _internal_add_administration();
  public:
  const ::messages::AdministratorField& administration(int index) const;
  ::messages::AdministratorField* add_administration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::AdministratorField >&
      administration() const;

  // repeated .messages.ManagerField Management = 14;
  int management_size() const;
  private:
  int _internal_management_size() const;
  public:
  void clear_management();
  ::messages::ManagerField* mutable_management(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ManagerField >*
      mutable_management();
  private:
  const ::messages::ManagerField& _internal_management(int index) const;
  ::messages::ManagerField* _internal_add_management();
  public:
  const ::messages::ManagerField& management(int index) const;
  ::messages::ManagerField* add_management();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ManagerField >&
      management() const;

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string LEI = 3;
  void clear_lei();
  const std::string& lei() const;
  void set_lei(const std::string& value);
  void set_lei(std::string&& value);
  void set_lei(const char* value);
  void set_lei(const char* value, size_t size);
  std::string* mutable_lei();
  std::string* release_lei();
  void set_allocated_lei(std::string* lei);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lei();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lei(
      std::string* lei);
  private:
  const std::string& _internal_lei() const;
  void _internal_set_lei(const std::string& value);
  std::string* _internal_mutable_lei();
  public:

  // string UnitNumber = 4;
  void clear_unitnumber();
  const std::string& unitnumber() const;
  void set_unitnumber(const std::string& value);
  void set_unitnumber(std::string&& value);
  void set_unitnumber(const char* value);
  void set_unitnumber(const char* value, size_t size);
  std::string* mutable_unitnumber();
  std::string* release_unitnumber();
  void set_allocated_unitnumber(std::string* unitnumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_unitnumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_unitnumber(
      std::string* unitnumber);
  private:
  const std::string& _internal_unitnumber() const;
  void _internal_set_unitnumber(const std::string& value);
  std::string* _internal_mutable_unitnumber();
  public:

  // string BuildingNumber = 5;
  void clear_buildingnumber();
  const std::string& buildingnumber() const;
  void set_buildingnumber(const std::string& value);
  void set_buildingnumber(std::string&& value);
  void set_buildingnumber(const char* value);
  void set_buildingnumber(const char* value, size_t size);
  std::string* mutable_buildingnumber();
  std::string* release_buildingnumber();
  void set_allocated_buildingnumber(std::string* buildingnumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buildingnumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buildingnumber(
      std::string* buildingnumber);
  private:
  const std::string& _internal_buildingnumber() const;
  void _internal_set_buildingnumber(const std::string& value);
  std::string* _internal_mutable_buildingnumber();
  public:

  // string Street = 6;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_street();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_street(
      std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string SuburbCity = 7;
  void clear_suburbcity();
  const std::string& suburbcity() const;
  void set_suburbcity(const std::string& value);
  void set_suburbcity(std::string&& value);
  void set_suburbcity(const char* value);
  void set_suburbcity(const char* value, size_t size);
  std::string* mutable_suburbcity();
  std::string* release_suburbcity();
  void set_allocated_suburbcity(std::string* suburbcity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suburbcity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suburbcity(
      std::string* suburbcity);
  private:
  const std::string& _internal_suburbcity() const;
  void _internal_set_suburbcity(const std::string& value);
  std::string* _internal_mutable_suburbcity();
  public:

  // string TerritoryStateProvinceCode = 8;
  void clear_territorystateprovincecode();
  const std::string& territorystateprovincecode() const;
  void set_territorystateprovincecode(const std::string& value);
  void set_territorystateprovincecode(std::string&& value);
  void set_territorystateprovincecode(const char* value);
  void set_territorystateprovincecode(const char* value, size_t size);
  std::string* mutable_territorystateprovincecode();
  std::string* release_territorystateprovincecode();
  void set_allocated_territorystateprovincecode(std::string* territorystateprovincecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_territorystateprovincecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_territorystateprovincecode(
      std::string* territorystateprovincecode);
  private:
  const std::string& _internal_territorystateprovincecode() const;
  void _internal_set_territorystateprovincecode(const std::string& value);
  std::string* _internal_mutable_territorystateprovincecode();
  public:

  // string CountryCode = 9;
  void clear_countrycode();
  const std::string& countrycode() const;
  void set_countrycode(const std::string& value);
  void set_countrycode(std::string&& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  std::string* mutable_countrycode();
  std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_countrycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_countrycode(
      std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // string PostalZIPCode = 10;
  void clear_postalzipcode();
  const std::string& postalzipcode() const;
  void set_postalzipcode(const std::string& value);
  void set_postalzipcode(std::string&& value);
  void set_postalzipcode(const char* value);
  void set_postalzipcode(const char* value, size_t size);
  std::string* mutable_postalzipcode();
  std::string* release_postalzipcode();
  void set_allocated_postalzipcode(std::string* postalzipcode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_postalzipcode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_postalzipcode(
      std::string* postalzipcode);
  private:
  const std::string& _internal_postalzipcode() const;
  void _internal_set_postalzipcode(const std::string& value);
  std::string* _internal_mutable_postalzipcode();
  public:

  // string EmailAddress = 11;
  void clear_emailaddress();
  const std::string& emailaddress() const;
  void set_emailaddress(const std::string& value);
  void set_emailaddress(std::string&& value);
  void set_emailaddress(const char* value);
  void set_emailaddress(const char* value, size_t size);
  std::string* mutable_emailaddress();
  std::string* release_emailaddress();
  void set_allocated_emailaddress(std::string* emailaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_emailaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_emailaddress(
      std::string* emailaddress);
  private:
  const std::string& _internal_emailaddress() const;
  void _internal_set_emailaddress(const std::string& value);
  std::string* _internal_mutable_emailaddress();
  public:

  // string PhoneNumber = 12;
  void clear_phonenumber();
  const std::string& phonenumber() const;
  void set_phonenumber(const std::string& value);
  void set_phonenumber(std::string&& value);
  void set_phonenumber(const char* value);
  void set_phonenumber(const char* value, size_t size);
  std::string* mutable_phonenumber();
  std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* phonenumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phonenumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phonenumber(
      std::string* phonenumber);
  private:
  const std::string& _internal_phonenumber() const;
  void _internal_set_phonenumber(const std::string& value);
  std::string* _internal_mutable_phonenumber();
  public:

  // string DomainName = 15;
  void clear_domainname();
  const std::string& domainname() const;
  void set_domainname(const std::string& value);
  void set_domainname(std::string&& value);
  void set_domainname(const char* value);
  void set_domainname(const char* value, size_t size);
  std::string* mutable_domainname();
  std::string* release_domainname();
  void set_allocated_domainname(std::string* domainname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domainname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domainname(
      std::string* domainname);
  private:
  const std::string& _internal_domainname() const;
  void _internal_set_domainname(const std::string& value);
  std::string* _internal_mutable_domainname();
  public:

  // string PaymailHandle = 17;
  void clear_paymailhandle();
  const std::string& paymailhandle() const;
  void set_paymailhandle(const std::string& value);
  void set_paymailhandle(std::string&& value);
  void set_paymailhandle(const char* value);
  void set_paymailhandle(const char* value, size_t size);
  std::string* mutable_paymailhandle();
  std::string* release_paymailhandle();
  void set_allocated_paymailhandle(std::string* paymailhandle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paymailhandle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paymailhandle(
      std::string* paymailhandle);
  private:
  const std::string& _internal_paymailhandle() const;
  void _internal_set_paymailhandle(const std::string& value);
  std::string* _internal_mutable_paymailhandle();
  public:

  // @@protoc_insertion_point(class_scope:messages.EntityField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::AdministratorField > administration_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ManagerField > management_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lei_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unitnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildingnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suburbcity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr territorystateprovincecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postalzipcode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr emailaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domainname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymailhandle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class IdentityOracleProofField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.IdentityOracleProofField) */ {
 public:
  inline IdentityOracleProofField() : IdentityOracleProofField(nullptr) {};
  virtual ~IdentityOracleProofField();

  IdentityOracleProofField(const IdentityOracleProofField& from);
  IdentityOracleProofField(IdentityOracleProofField&& from) noexcept
    : IdentityOracleProofField() {
    *this = ::std::move(from);
  }

  inline IdentityOracleProofField& operator=(const IdentityOracleProofField& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentityOracleProofField& operator=(IdentityOracleProofField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentityOracleProofField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentityOracleProofField* internal_default_instance() {
    return reinterpret_cast<const IdentityOracleProofField*>(
               &_IdentityOracleProofField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IdentityOracleProofField& a, IdentityOracleProofField& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentityOracleProofField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentityOracleProofField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentityOracleProofField* New() const final {
    return CreateMaybeMessage<IdentityOracleProofField>(nullptr);
  }

  IdentityOracleProofField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentityOracleProofField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentityOracleProofField& from);
  void MergeFrom(const IdentityOracleProofField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentityOracleProofField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.IdentityOracleProofField";
  }
  protected:
  explicit IdentityOracleProofField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kEntityFieldNumber = 2,
    kOracleSignatureFieldNumber = 3,
  };
  // bytes UserID = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .messages.EntityField Entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::messages::EntityField& entity() const;
  ::messages::EntityField* release_entity();
  ::messages::EntityField* mutable_entity();
  void set_allocated_entity(::messages::EntityField* entity);
  private:
  const ::messages::EntityField& _internal_entity() const;
  ::messages::EntityField* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::messages::EntityField* entity);
  ::messages::EntityField* unsafe_arena_release_entity();

  // .messages.OracleSignatureField OracleSignature = 3;
  bool has_oraclesignature() const;
  private:
  bool _internal_has_oraclesignature() const;
  public:
  void clear_oraclesignature();
  const ::messages::OracleSignatureField& oraclesignature() const;
  ::messages::OracleSignatureField* release_oraclesignature();
  ::messages::OracleSignatureField* mutable_oraclesignature();
  void set_allocated_oraclesignature(::messages::OracleSignatureField* oraclesignature);
  private:
  const ::messages::OracleSignatureField& _internal_oraclesignature() const;
  ::messages::OracleSignatureField* _internal_mutable_oraclesignature();
  public:
  void unsafe_arena_set_allocated_oraclesignature(
      ::messages::OracleSignatureField* oraclesignature);
  ::messages::OracleSignatureField* unsafe_arena_release_oraclesignature();

  // @@protoc_insertion_point(class_scope:messages.IdentityOracleProofField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::messages::EntityField* entity_;
  ::messages::OracleSignatureField* oraclesignature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ManagerField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.ManagerField) */ {
 public:
  inline ManagerField() : ManagerField(nullptr) {};
  virtual ~ManagerField();

  ManagerField(const ManagerField& from);
  ManagerField(ManagerField&& from) noexcept
    : ManagerField() {
    *this = ::std::move(from);
  }

  inline ManagerField& operator=(const ManagerField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagerField& operator=(ManagerField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManagerField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagerField* internal_default_instance() {
    return reinterpret_cast<const ManagerField*>(
               &_ManagerField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ManagerField& a, ManagerField& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagerField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManagerField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagerField* New() const final {
    return CreateMaybeMessage<ManagerField>(nullptr);
  }

  ManagerField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagerField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManagerField& from);
  void MergeFrom(const ManagerField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManagerField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.ManagerField";
  }
  protected:
  explicit ManagerField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 Type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.ManagerField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OracleSignatureField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.OracleSignatureField) */ {
 public:
  inline OracleSignatureField() : OracleSignatureField(nullptr) {};
  virtual ~OracleSignatureField();

  OracleSignatureField(const OracleSignatureField& from);
  OracleSignatureField(OracleSignatureField&& from) noexcept
    : OracleSignatureField() {
    *this = ::std::move(from);
  }

  inline OracleSignatureField& operator=(const OracleSignatureField& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleSignatureField& operator=(OracleSignatureField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OracleSignatureField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OracleSignatureField* internal_default_instance() {
    return reinterpret_cast<const OracleSignatureField*>(
               &_OracleSignatureField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(OracleSignatureField& a, OracleSignatureField& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleSignatureField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleSignatureField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OracleSignatureField* New() const final {
    return CreateMaybeMessage<OracleSignatureField>(nullptr);
  }

  OracleSignatureField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OracleSignatureField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OracleSignatureField& from);
  void MergeFrom(const OracleSignatureField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleSignatureField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.OracleSignatureField";
  }
  protected:
  explicit OracleSignatureField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOracleURLFieldNumber = 1,
    kSignatureFieldNumber = 5,
    kValidityPeriodFieldNumber = 3,
    kBlockHeightFieldNumber = 2,
    kSignatureAlgorithmFieldNumber = 4,
  };
  // string OracleURL = 1;
  void clear_oracleurl();
  const std::string& oracleurl() const;
  void set_oracleurl(const std::string& value);
  void set_oracleurl(std::string&& value);
  void set_oracleurl(const char* value);
  void set_oracleurl(const char* value, size_t size);
  std::string* mutable_oracleurl();
  std::string* release_oracleurl();
  void set_allocated_oracleurl(std::string* oracleurl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_oracleurl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_oracleurl(
      std::string* oracleurl);
  private:
  const std::string& _internal_oracleurl() const;
  void _internal_set_oracleurl(const std::string& value);
  std::string* _internal_mutable_oracleurl();
  public:

  // bytes Signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // .messages.PeriodField ValidityPeriod = 3;
  bool has_validityperiod() const;
  private:
  bool _internal_has_validityperiod() const;
  public:
  void clear_validityperiod();
  const ::messages::PeriodField& validityperiod() const;
  ::messages::PeriodField* release_validityperiod();
  ::messages::PeriodField* mutable_validityperiod();
  void set_allocated_validityperiod(::messages::PeriodField* validityperiod);
  private:
  const ::messages::PeriodField& _internal_validityperiod() const;
  ::messages::PeriodField* _internal_mutable_validityperiod();
  public:
  void unsafe_arena_set_allocated_validityperiod(
      ::messages::PeriodField* validityperiod);
  ::messages::PeriodField* unsafe_arena_release_validityperiod();

  // uint32 BlockHeight = 2;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 SignatureAlgorithm = 4;
  void clear_signaturealgorithm();
  ::PROTOBUF_NAMESPACE_ID::uint32 signaturealgorithm() const;
  void set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_signaturealgorithm() const;
  void _internal_set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.OracleSignatureField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracleurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::messages::PeriodField* validityperiod_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 signaturealgorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OutpointField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.OutpointField) */ {
 public:
  inline OutpointField() : OutpointField(nullptr) {};
  virtual ~OutpointField();

  OutpointField(const OutpointField& from);
  OutpointField(OutpointField&& from) noexcept
    : OutpointField() {
    *this = ::std::move(from);
  }

  inline OutpointField& operator=(const OutpointField& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutpointField& operator=(OutpointField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutpointField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutpointField* internal_default_instance() {
    return reinterpret_cast<const OutpointField*>(
               &_OutpointField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(OutpointField& a, OutpointField& b) {
    a.Swap(&b);
  }
  inline void Swap(OutpointField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutpointField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutpointField* New() const final {
    return CreateMaybeMessage<OutpointField>(nullptr);
  }

  OutpointField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutpointField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutpointField& from);
  void MergeFrom(const OutpointField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutpointField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.OutpointField";
  }
  protected:
  explicit OutpointField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIdFieldNumber = 1,
    kOutputIndexFieldNumber = 2,
  };
  // bytes TxId = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_txid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_txid(
      std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // uint32 OutputIndex = 2;
  void clear_outputindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 outputindex() const;
  void set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outputindex() const;
  void _internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.OutpointField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outputindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class OutputTagField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.OutputTagField) */ {
 public:
  inline OutputTagField() : OutputTagField(nullptr) {};
  virtual ~OutputTagField();

  OutputTagField(const OutputTagField& from);
  OutputTagField(OutputTagField&& from) noexcept
    : OutputTagField() {
    *this = ::std::move(from);
  }

  inline OutputTagField& operator=(const OutputTagField& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputTagField& operator=(OutputTagField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputTagField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputTagField* internal_default_instance() {
    return reinterpret_cast<const OutputTagField*>(
               &_OutputTagField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OutputTagField& a, OutputTagField& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputTagField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputTagField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputTagField* New() const final {
    return CreateMaybeMessage<OutputTagField>(nullptr);
  }

  OutputTagField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputTagField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputTagField& from);
  void MergeFrom(const OutputTagField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputTagField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.OutputTagField";
  }
  protected:
  explicit OutputTagField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
  };
  // string Tag = 1;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tag(
      std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // @@protoc_insertion_point(class_scope:messages.OutputTagField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PaymailProofField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.PaymailProofField) */ {
 public:
  inline PaymailProofField() : PaymailProofField(nullptr) {};
  virtual ~PaymailProofField();

  PaymailProofField(const PaymailProofField& from);
  PaymailProofField(PaymailProofField&& from) noexcept
    : PaymailProofField() {
    *this = ::std::move(from);
  }

  inline PaymailProofField& operator=(const PaymailProofField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymailProofField& operator=(PaymailProofField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymailProofField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymailProofField* internal_default_instance() {
    return reinterpret_cast<const PaymailProofField*>(
               &_PaymailProofField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PaymailProofField& a, PaymailProofField& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymailProofField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymailProofField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymailProofField* New() const final {
    return CreateMaybeMessage<PaymailProofField>(nullptr);
  }

  PaymailProofField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymailProofField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymailProofField& from);
  void MergeFrom(const PaymailProofField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymailProofField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PaymailProofField";
  }
  protected:
  explicit PaymailProofField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIDFieldNumber = 1,
    kHandleFieldNumber = 2,
    kOracleSignatureFieldNumber = 3,
  };
  // bytes UserID = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const void* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string Handle = 2;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_handle();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_handle(
      std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // .messages.OracleSignatureField OracleSignature = 3;
  bool has_oraclesignature() const;
  private:
  bool _internal_has_oraclesignature() const;
  public:
  void clear_oraclesignature();
  const ::messages::OracleSignatureField& oraclesignature() const;
  ::messages::OracleSignatureField* release_oraclesignature();
  ::messages::OracleSignatureField* mutable_oraclesignature();
  void set_allocated_oraclesignature(::messages::OracleSignatureField* oraclesignature);
  private:
  const ::messages::OracleSignatureField& _internal_oraclesignature() const;
  ::messages::OracleSignatureField* _internal_mutable_oraclesignature();
  public:
  void unsafe_arena_set_allocated_oraclesignature(
      ::messages::OracleSignatureField* oraclesignature);
  ::messages::OracleSignatureField* unsafe_arena_release_oraclesignature();

  // @@protoc_insertion_point(class_scope:messages.PaymailProofField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::messages::OracleSignatureField* oraclesignature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PeriodField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.PeriodField) */ {
 public:
  inline PeriodField() : PeriodField(nullptr) {};
  virtual ~PeriodField();

  PeriodField(const PeriodField& from);
  PeriodField(PeriodField&& from) noexcept
    : PeriodField() {
    *this = ::std::move(from);
  }

  inline PeriodField& operator=(const PeriodField& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodField& operator=(PeriodField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeriodField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeriodField* internal_default_instance() {
    return reinterpret_cast<const PeriodField*>(
               &_PeriodField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PeriodField& a, PeriodField& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeriodField* New() const final {
    return CreateMaybeMessage<PeriodField>(nullptr);
  }

  PeriodField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeriodField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeriodField& from);
  void MergeFrom(const PeriodField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeriodField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.PeriodField";
  }
  protected:
  explicit PeriodField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // uint64 Begin = 1;
  void clear_begin();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin() const;
  void set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin() const;
  void _internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 End = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.PeriodField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class TargetAddressField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.TargetAddressField) */ {
 public:
  inline TargetAddressField() : TargetAddressField(nullptr) {};
  virtual ~TargetAddressField();

  TargetAddressField(const TargetAddressField& from);
  TargetAddressField(TargetAddressField&& from) noexcept
    : TargetAddressField() {
    *this = ::std::move(from);
  }

  inline TargetAddressField& operator=(const TargetAddressField& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetAddressField& operator=(TargetAddressField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetAddressField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TargetAddressField* internal_default_instance() {
    return reinterpret_cast<const TargetAddressField*>(
               &_TargetAddressField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TargetAddressField& a, TargetAddressField& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetAddressField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetAddressField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetAddressField* New() const final {
    return CreateMaybeMessage<TargetAddressField>(nullptr);
  }

  TargetAddressField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetAddressField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetAddressField& from);
  void MergeFrom(const TargetAddressField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetAddressField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.TargetAddressField";
  }
  protected:
  explicit TargetAddressField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // bytes Address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 Quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:messages.TargetAddressField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublicMessage

// uint64 Timestamp = 1;
inline void PublicMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PublicMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.PublicMessage.Timestamp)
  return _internal_timestamp();
}
inline void PublicMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void PublicMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.PublicMessage.Timestamp)
}

// string Subject = 2;
inline void PublicMessage::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PublicMessage::subject() const {
  // @@protoc_insertion_point(field_get:messages.PublicMessage.Subject)
  return _internal_subject();
}
inline void PublicMessage::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:messages.PublicMessage.Subject)
}
inline std::string* PublicMessage::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:messages.PublicMessage.Subject)
  return _internal_mutable_subject();
}
inline const std::string& PublicMessage::_internal_subject() const {
  return subject_.Get();
}
inline void PublicMessage::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PublicMessage::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.PublicMessage.Subject)
}
inline void PublicMessage::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.PublicMessage.Subject)
}
inline void PublicMessage::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.PublicMessage.Subject)
}
inline std::string* PublicMessage::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PublicMessage::release_subject() {
  // @@protoc_insertion_point(field_release:messages.PublicMessage.Subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PublicMessage::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.PublicMessage.Subject)
}
inline std::string* PublicMessage::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.PublicMessage.Subject)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subject_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PublicMessage::unsafe_arena_set_allocated_subject(
    std::string* subject) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subject, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PublicMessage.Subject)
}

// .messages.OutpointField Regarding = 3;
inline bool PublicMessage::_internal_has_regarding() const {
  return this != internal_default_instance() && regarding_ != nullptr;
}
inline bool PublicMessage::has_regarding() const {
  return _internal_has_regarding();
}
inline void PublicMessage::clear_regarding() {
  if (GetArena() == nullptr && regarding_ != nullptr) {
    delete regarding_;
  }
  regarding_ = nullptr;
}
inline const ::messages::OutpointField& PublicMessage::_internal_regarding() const {
  const ::messages::OutpointField* p = regarding_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::OutpointField*>(
      &::messages::_OutpointField_default_instance_);
}
inline const ::messages::OutpointField& PublicMessage::regarding() const {
  // @@protoc_insertion_point(field_get:messages.PublicMessage.Regarding)
  return _internal_regarding();
}
inline void PublicMessage::unsafe_arena_set_allocated_regarding(
    ::messages::OutpointField* regarding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regarding_);
  }
  regarding_ = regarding;
  if (regarding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PublicMessage.Regarding)
}
inline ::messages::OutpointField* PublicMessage::release_regarding() {
  auto temp = unsafe_arena_release_regarding();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::OutpointField* PublicMessage::unsafe_arena_release_regarding() {
  // @@protoc_insertion_point(field_release:messages.PublicMessage.Regarding)
  
  ::messages::OutpointField* temp = regarding_;
  regarding_ = nullptr;
  return temp;
}
inline ::messages::OutpointField* PublicMessage::_internal_mutable_regarding() {
  
  if (regarding_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::OutpointField>(GetArena());
    regarding_ = p;
  }
  return regarding_;
}
inline ::messages::OutpointField* PublicMessage::mutable_regarding() {
  // @@protoc_insertion_point(field_mutable:messages.PublicMessage.Regarding)
  return _internal_mutable_regarding();
}
inline void PublicMessage::set_allocated_regarding(::messages::OutpointField* regarding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regarding_;
  }
  if (regarding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regarding);
    if (message_arena != submessage_arena) {
      regarding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regarding, submessage_arena);
    }
    
  } else {
    
  }
  regarding_ = regarding;
  // @@protoc_insertion_point(field_set_allocated:messages.PublicMessage.Regarding)
}

// .messages.DocumentField PublicMessage = 4;
inline bool PublicMessage::_internal_has_publicmessage() const {
  return this != internal_default_instance() && publicmessage_ != nullptr;
}
inline bool PublicMessage::has_publicmessage() const {
  return _internal_has_publicmessage();
}
inline void PublicMessage::clear_publicmessage() {
  if (GetArena() == nullptr && publicmessage_ != nullptr) {
    delete publicmessage_;
  }
  publicmessage_ = nullptr;
}
inline const ::messages::DocumentField& PublicMessage::_internal_publicmessage() const {
  const ::messages::DocumentField* p = publicmessage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::DocumentField*>(
      &::messages::_DocumentField_default_instance_);
}
inline const ::messages::DocumentField& PublicMessage::publicmessage() const {
  // @@protoc_insertion_point(field_get:messages.PublicMessage.PublicMessage)
  return _internal_publicmessage();
}
inline void PublicMessage::unsafe_arena_set_allocated_publicmessage(
    ::messages::DocumentField* publicmessage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publicmessage_);
  }
  publicmessage_ = publicmessage;
  if (publicmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PublicMessage.PublicMessage)
}
inline ::messages::DocumentField* PublicMessage::release_publicmessage() {
  auto temp = unsafe_arena_release_publicmessage();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::DocumentField* PublicMessage::unsafe_arena_release_publicmessage() {
  // @@protoc_insertion_point(field_release:messages.PublicMessage.PublicMessage)
  
  ::messages::DocumentField* temp = publicmessage_;
  publicmessage_ = nullptr;
  return temp;
}
inline ::messages::DocumentField* PublicMessage::_internal_mutable_publicmessage() {
  
  if (publicmessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::DocumentField>(GetArena());
    publicmessage_ = p;
  }
  return publicmessage_;
}
inline ::messages::DocumentField* PublicMessage::mutable_publicmessage() {
  // @@protoc_insertion_point(field_mutable:messages.PublicMessage.PublicMessage)
  return _internal_mutable_publicmessage();
}
inline void PublicMessage::set_allocated_publicmessage(::messages::DocumentField* publicmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete publicmessage_;
  }
  if (publicmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(publicmessage);
    if (message_arena != submessage_arena) {
      publicmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publicmessage, submessage_arena);
    }
    
  } else {
    
  }
  publicmessage_ = publicmessage;
  // @@protoc_insertion_point(field_set_allocated:messages.PublicMessage.PublicMessage)
}

// repeated .messages.DocumentField Attachments = 5;
inline int PublicMessage::_internal_attachments_size() const {
  return attachments_.size();
}
inline int PublicMessage::attachments_size() const {
  return _internal_attachments_size();
}
inline void PublicMessage::clear_attachments() {
  attachments_.Clear();
}
inline ::messages::DocumentField* PublicMessage::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:messages.PublicMessage.Attachments)
  return attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >*
PublicMessage::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:messages.PublicMessage.Attachments)
  return &attachments_;
}
inline const ::messages::DocumentField& PublicMessage::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const ::messages::DocumentField& PublicMessage::attachments(int index) const {
  // @@protoc_insertion_point(field_get:messages.PublicMessage.Attachments)
  return _internal_attachments(index);
}
inline ::messages::DocumentField* PublicMessage::_internal_add_attachments() {
  return attachments_.Add();
}
inline ::messages::DocumentField* PublicMessage::add_attachments() {
  // @@protoc_insertion_point(field_add:messages.PublicMessage.Attachments)
  return _internal_add_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >&
PublicMessage::attachments() const {
  // @@protoc_insertion_point(field_list:messages.PublicMessage.Attachments)
  return attachments_;
}

// -------------------------------------------------------------------

// PrivateMessage

// uint64 Timestamp = 1;
inline void PrivateMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrivateMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrivateMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.PrivateMessage.Timestamp)
  return _internal_timestamp();
}
inline void PrivateMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void PrivateMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.PrivateMessage.Timestamp)
}

// string Subject = 2;
inline void PrivateMessage::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrivateMessage::subject() const {
  // @@protoc_insertion_point(field_get:messages.PrivateMessage.Subject)
  return _internal_subject();
}
inline void PrivateMessage::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:messages.PrivateMessage.Subject)
}
inline std::string* PrivateMessage::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:messages.PrivateMessage.Subject)
  return _internal_mutable_subject();
}
inline const std::string& PrivateMessage::_internal_subject() const {
  return subject_.Get();
}
inline void PrivateMessage::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrivateMessage::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.PrivateMessage.Subject)
}
inline void PrivateMessage::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.PrivateMessage.Subject)
}
inline void PrivateMessage::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.PrivateMessage.Subject)
}
inline std::string* PrivateMessage::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrivateMessage::release_subject() {
  // @@protoc_insertion_point(field_release:messages.PrivateMessage.Subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrivateMessage::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.PrivateMessage.Subject)
}
inline std::string* PrivateMessage::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.PrivateMessage.Subject)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subject_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrivateMessage::unsafe_arena_set_allocated_subject(
    std::string* subject) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subject, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PrivateMessage.Subject)
}

// .messages.OutpointField Regarding = 3;
inline bool PrivateMessage::_internal_has_regarding() const {
  return this != internal_default_instance() && regarding_ != nullptr;
}
inline bool PrivateMessage::has_regarding() const {
  return _internal_has_regarding();
}
inline void PrivateMessage::clear_regarding() {
  if (GetArena() == nullptr && regarding_ != nullptr) {
    delete regarding_;
  }
  regarding_ = nullptr;
}
inline const ::messages::OutpointField& PrivateMessage::_internal_regarding() const {
  const ::messages::OutpointField* p = regarding_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::OutpointField*>(
      &::messages::_OutpointField_default_instance_);
}
inline const ::messages::OutpointField& PrivateMessage::regarding() const {
  // @@protoc_insertion_point(field_get:messages.PrivateMessage.Regarding)
  return _internal_regarding();
}
inline void PrivateMessage::unsafe_arena_set_allocated_regarding(
    ::messages::OutpointField* regarding) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(regarding_);
  }
  regarding_ = regarding;
  if (regarding) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PrivateMessage.Regarding)
}
inline ::messages::OutpointField* PrivateMessage::release_regarding() {
  auto temp = unsafe_arena_release_regarding();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::OutpointField* PrivateMessage::unsafe_arena_release_regarding() {
  // @@protoc_insertion_point(field_release:messages.PrivateMessage.Regarding)
  
  ::messages::OutpointField* temp = regarding_;
  regarding_ = nullptr;
  return temp;
}
inline ::messages::OutpointField* PrivateMessage::_internal_mutable_regarding() {
  
  if (regarding_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::OutpointField>(GetArena());
    regarding_ = p;
  }
  return regarding_;
}
inline ::messages::OutpointField* PrivateMessage::mutable_regarding() {
  // @@protoc_insertion_point(field_mutable:messages.PrivateMessage.Regarding)
  return _internal_mutable_regarding();
}
inline void PrivateMessage::set_allocated_regarding(::messages::OutpointField* regarding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete regarding_;
  }
  if (regarding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(regarding);
    if (message_arena != submessage_arena) {
      regarding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regarding, submessage_arena);
    }
    
  } else {
    
  }
  regarding_ = regarding;
  // @@protoc_insertion_point(field_set_allocated:messages.PrivateMessage.Regarding)
}

// .messages.DocumentField PrivateMessage = 4;
inline bool PrivateMessage::_internal_has_privatemessage() const {
  return this != internal_default_instance() && privatemessage_ != nullptr;
}
inline bool PrivateMessage::has_privatemessage() const {
  return _internal_has_privatemessage();
}
inline void PrivateMessage::clear_privatemessage() {
  if (GetArena() == nullptr && privatemessage_ != nullptr) {
    delete privatemessage_;
  }
  privatemessage_ = nullptr;
}
inline const ::messages::DocumentField& PrivateMessage::_internal_privatemessage() const {
  const ::messages::DocumentField* p = privatemessage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::DocumentField*>(
      &::messages::_DocumentField_default_instance_);
}
inline const ::messages::DocumentField& PrivateMessage::privatemessage() const {
  // @@protoc_insertion_point(field_get:messages.PrivateMessage.PrivateMessage)
  return _internal_privatemessage();
}
inline void PrivateMessage::unsafe_arena_set_allocated_privatemessage(
    ::messages::DocumentField* privatemessage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(privatemessage_);
  }
  privatemessage_ = privatemessage;
  if (privatemessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PrivateMessage.PrivateMessage)
}
inline ::messages::DocumentField* PrivateMessage::release_privatemessage() {
  auto temp = unsafe_arena_release_privatemessage();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::DocumentField* PrivateMessage::unsafe_arena_release_privatemessage() {
  // @@protoc_insertion_point(field_release:messages.PrivateMessage.PrivateMessage)
  
  ::messages::DocumentField* temp = privatemessage_;
  privatemessage_ = nullptr;
  return temp;
}
inline ::messages::DocumentField* PrivateMessage::_internal_mutable_privatemessage() {
  
  if (privatemessage_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::DocumentField>(GetArena());
    privatemessage_ = p;
  }
  return privatemessage_;
}
inline ::messages::DocumentField* PrivateMessage::mutable_privatemessage() {
  // @@protoc_insertion_point(field_mutable:messages.PrivateMessage.PrivateMessage)
  return _internal_mutable_privatemessage();
}
inline void PrivateMessage::set_allocated_privatemessage(::messages::DocumentField* privatemessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete privatemessage_;
  }
  if (privatemessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(privatemessage);
    if (message_arena != submessage_arena) {
      privatemessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privatemessage, submessage_arena);
    }
    
  } else {
    
  }
  privatemessage_ = privatemessage;
  // @@protoc_insertion_point(field_set_allocated:messages.PrivateMessage.PrivateMessage)
}

// repeated .messages.DocumentField Attachments = 5;
inline int PrivateMessage::_internal_attachments_size() const {
  return attachments_.size();
}
inline int PrivateMessage::attachments_size() const {
  return _internal_attachments_size();
}
inline void PrivateMessage::clear_attachments() {
  attachments_.Clear();
}
inline ::messages::DocumentField* PrivateMessage::mutable_attachments(int index) {
  // @@protoc_insertion_point(field_mutable:messages.PrivateMessage.Attachments)
  return attachments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >*
PrivateMessage::mutable_attachments() {
  // @@protoc_insertion_point(field_mutable_list:messages.PrivateMessage.Attachments)
  return &attachments_;
}
inline const ::messages::DocumentField& PrivateMessage::_internal_attachments(int index) const {
  return attachments_.Get(index);
}
inline const ::messages::DocumentField& PrivateMessage::attachments(int index) const {
  // @@protoc_insertion_point(field_get:messages.PrivateMessage.Attachments)
  return _internal_attachments(index);
}
inline ::messages::DocumentField* PrivateMessage::_internal_add_attachments() {
  return attachments_.Add();
}
inline ::messages::DocumentField* PrivateMessage::add_attachments() {
  // @@protoc_insertion_point(field_add:messages.PrivateMessage.Attachments)
  return _internal_add_attachments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::DocumentField >&
PrivateMessage::attachments() const {
  // @@protoc_insertion_point(field_list:messages.PrivateMessage.Attachments)
  return attachments_;
}

// -------------------------------------------------------------------

// RevertedTx

// uint64 Timestamp = 1;
inline void RevertedTx::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevertedTx::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RevertedTx::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.RevertedTx.Timestamp)
  return _internal_timestamp();
}
inline void RevertedTx::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void RevertedTx::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.RevertedTx.Timestamp)
}

// bytes Transaction = 2;
inline void RevertedTx::clear_transaction() {
  transaction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RevertedTx::transaction() const {
  // @@protoc_insertion_point(field_get:messages.RevertedTx.Transaction)
  return _internal_transaction();
}
inline void RevertedTx::set_transaction(const std::string& value) {
  _internal_set_transaction(value);
  // @@protoc_insertion_point(field_set:messages.RevertedTx.Transaction)
}
inline std::string* RevertedTx::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable:messages.RevertedTx.Transaction)
  return _internal_mutable_transaction();
}
inline const std::string& RevertedTx::_internal_transaction() const {
  return transaction_.Get();
}
inline void RevertedTx::_internal_set_transaction(const std::string& value) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RevertedTx::set_transaction(std::string&& value) {
  
  transaction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.RevertedTx.Transaction)
}
inline void RevertedTx::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.RevertedTx.Transaction)
}
inline void RevertedTx::set_transaction(const void* value,
    size_t size) {
  
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.RevertedTx.Transaction)
}
inline std::string* RevertedTx::_internal_mutable_transaction() {
  
  return transaction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RevertedTx::release_transaction() {
  // @@protoc_insertion_point(field_release:messages.RevertedTx.Transaction)
  return transaction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RevertedTx::set_allocated_transaction(std::string* transaction) {
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.RevertedTx.Transaction)
}
inline std::string* RevertedTx::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.RevertedTx.Transaction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transaction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RevertedTx::unsafe_arena_set_allocated_transaction(
    std::string* transaction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transaction != nullptr) {
    
  } else {
    
  }
  transaction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transaction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.RevertedTx.Transaction)
}

// -------------------------------------------------------------------

// Offer

// uint64 Timestamp = 1;
inline void Offer::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Offer::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Offer::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.Offer.Timestamp)
  return _internal_timestamp();
}
inline void Offer::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Offer::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.Offer.Timestamp)
}

// bytes Payload = 2;
inline void Offer::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Offer::payload() const {
  // @@protoc_insertion_point(field_get:messages.Offer.Payload)
  return _internal_payload();
}
inline void Offer::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:messages.Offer.Payload)
}
inline std::string* Offer::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:messages.Offer.Payload)
  return _internal_mutable_payload();
}
inline const std::string& Offer::_internal_payload() const {
  return payload_.Get();
}
inline void Offer::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Offer::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.Offer.Payload)
}
inline void Offer::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.Offer.Payload)
}
inline void Offer::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.Offer.Payload)
}
inline std::string* Offer::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Offer::release_payload() {
  // @@protoc_insertion_point(field_release:messages.Offer.Payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Offer::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.Offer.Payload)
}
inline std::string* Offer::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.Offer.Payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Offer::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.Offer.Payload)
}

// -------------------------------------------------------------------

// SignatureRequest

// uint64 Timestamp = 1;
inline void SignatureRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SignatureRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.SignatureRequest.Timestamp)
  return _internal_timestamp();
}
inline void SignatureRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void SignatureRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.SignatureRequest.Timestamp)
}

// bytes Payload = 2;
inline void SignatureRequest::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SignatureRequest::payload() const {
  // @@protoc_insertion_point(field_get:messages.SignatureRequest.Payload)
  return _internal_payload();
}
inline void SignatureRequest::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:messages.SignatureRequest.Payload)
}
inline std::string* SignatureRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:messages.SignatureRequest.Payload)
  return _internal_mutable_payload();
}
inline const std::string& SignatureRequest::_internal_payload() const {
  return payload_.Get();
}
inline void SignatureRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SignatureRequest::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.SignatureRequest.Payload)
}
inline void SignatureRequest::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.SignatureRequest.Payload)
}
inline void SignatureRequest::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.SignatureRequest.Payload)
}
inline std::string* SignatureRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SignatureRequest::release_payload() {
  // @@protoc_insertion_point(field_release:messages.SignatureRequest.Payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SignatureRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.SignatureRequest.Payload)
}
inline std::string* SignatureRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.SignatureRequest.Payload)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SignatureRequest::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.SignatureRequest.Payload)
}

// -------------------------------------------------------------------

// SettlementRequest

// uint64 Timestamp = 1;
inline void SettlementRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlementRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SettlementRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.SettlementRequest.Timestamp)
  return _internal_timestamp();
}
inline void SettlementRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void SettlementRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.SettlementRequest.Timestamp)
}

// bytes TransferTxId = 2;
inline void SettlementRequest::clear_transfertxid() {
  transfertxid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SettlementRequest::transfertxid() const {
  // @@protoc_insertion_point(field_get:messages.SettlementRequest.TransferTxId)
  return _internal_transfertxid();
}
inline void SettlementRequest::set_transfertxid(const std::string& value) {
  _internal_set_transfertxid(value);
  // @@protoc_insertion_point(field_set:messages.SettlementRequest.TransferTxId)
}
inline std::string* SettlementRequest::mutable_transfertxid() {
  // @@protoc_insertion_point(field_mutable:messages.SettlementRequest.TransferTxId)
  return _internal_mutable_transfertxid();
}
inline const std::string& SettlementRequest::_internal_transfertxid() const {
  return transfertxid_.Get();
}
inline void SettlementRequest::_internal_set_transfertxid(const std::string& value) {
  
  transfertxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SettlementRequest::set_transfertxid(std::string&& value) {
  
  transfertxid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.SettlementRequest.TransferTxId)
}
inline void SettlementRequest::set_transfertxid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transfertxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.SettlementRequest.TransferTxId)
}
inline void SettlementRequest::set_transfertxid(const void* value,
    size_t size) {
  
  transfertxid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.SettlementRequest.TransferTxId)
}
inline std::string* SettlementRequest::_internal_mutable_transfertxid() {
  
  return transfertxid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SettlementRequest::release_transfertxid() {
  // @@protoc_insertion_point(field_release:messages.SettlementRequest.TransferTxId)
  return transfertxid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlementRequest::set_allocated_transfertxid(std::string* transfertxid) {
  if (transfertxid != nullptr) {
    
  } else {
    
  }
  transfertxid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transfertxid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.SettlementRequest.TransferTxId)
}
inline std::string* SettlementRequest::unsafe_arena_release_transfertxid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.SettlementRequest.TransferTxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return transfertxid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SettlementRequest::unsafe_arena_set_allocated_transfertxid(
    std::string* transfertxid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (transfertxid != nullptr) {
    
  } else {
    
  }
  transfertxid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transfertxid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.SettlementRequest.TransferTxId)
}

// repeated .messages.TargetAddressField ContractFees = 3;
inline int SettlementRequest::_internal_contractfees_size() const {
  return contractfees_.size();
}
inline int SettlementRequest::contractfees_size() const {
  return _internal_contractfees_size();
}
inline void SettlementRequest::clear_contractfees() {
  contractfees_.Clear();
}
inline ::messages::TargetAddressField* SettlementRequest::mutable_contractfees(int index) {
  // @@protoc_insertion_point(field_mutable:messages.SettlementRequest.ContractFees)
  return contractfees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >*
SettlementRequest::mutable_contractfees() {
  // @@protoc_insertion_point(field_mutable_list:messages.SettlementRequest.ContractFees)
  return &contractfees_;
}
inline const ::messages::TargetAddressField& SettlementRequest::_internal_contractfees(int index) const {
  return contractfees_.Get(index);
}
inline const ::messages::TargetAddressField& SettlementRequest::contractfees(int index) const {
  // @@protoc_insertion_point(field_get:messages.SettlementRequest.ContractFees)
  return _internal_contractfees(index);
}
inline ::messages::TargetAddressField* SettlementRequest::_internal_add_contractfees() {
  return contractfees_.Add();
}
inline ::messages::TargetAddressField* SettlementRequest::add_contractfees() {
  // @@protoc_insertion_point(field_add:messages.SettlementRequest.ContractFees)
  return _internal_add_contractfees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >&
SettlementRequest::contractfees() const {
  // @@protoc_insertion_point(field_list:messages.SettlementRequest.ContractFees)
  return contractfees_;
}

// bytes Settlement = 4;
inline void SettlementRequest::clear_settlement() {
  settlement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SettlementRequest::settlement() const {
  // @@protoc_insertion_point(field_get:messages.SettlementRequest.Settlement)
  return _internal_settlement();
}
inline void SettlementRequest::set_settlement(const std::string& value) {
  _internal_set_settlement(value);
  // @@protoc_insertion_point(field_set:messages.SettlementRequest.Settlement)
}
inline std::string* SettlementRequest::mutable_settlement() {
  // @@protoc_insertion_point(field_mutable:messages.SettlementRequest.Settlement)
  return _internal_mutable_settlement();
}
inline const std::string& SettlementRequest::_internal_settlement() const {
  return settlement_.Get();
}
inline void SettlementRequest::_internal_set_settlement(const std::string& value) {
  
  settlement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SettlementRequest::set_settlement(std::string&& value) {
  
  settlement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.SettlementRequest.Settlement)
}
inline void SettlementRequest::set_settlement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  settlement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.SettlementRequest.Settlement)
}
inline void SettlementRequest::set_settlement(const void* value,
    size_t size) {
  
  settlement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.SettlementRequest.Settlement)
}
inline std::string* SettlementRequest::_internal_mutable_settlement() {
  
  return settlement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SettlementRequest::release_settlement() {
  // @@protoc_insertion_point(field_release:messages.SettlementRequest.Settlement)
  return settlement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SettlementRequest::set_allocated_settlement(std::string* settlement) {
  if (settlement != nullptr) {
    
  } else {
    
  }
  settlement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), settlement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.SettlementRequest.Settlement)
}
inline std::string* SettlementRequest::unsafe_arena_release_settlement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.SettlementRequest.Settlement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return settlement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SettlementRequest::unsafe_arena_set_allocated_settlement(
    std::string* settlement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (settlement != nullptr) {
    
  } else {
    
  }
  settlement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      settlement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.SettlementRequest.Settlement)
}

// repeated .messages.TargetAddressField TransferFees = 5;
inline int SettlementRequest::_internal_transferfees_size() const {
  return transferfees_.size();
}
inline int SettlementRequest::transferfees_size() const {
  return _internal_transferfees_size();
}
inline void SettlementRequest::clear_transferfees() {
  transferfees_.Clear();
}
inline ::messages::TargetAddressField* SettlementRequest::mutable_transferfees(int index) {
  // @@protoc_insertion_point(field_mutable:messages.SettlementRequest.TransferFees)
  return transferfees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >*
SettlementRequest::mutable_transferfees() {
  // @@protoc_insertion_point(field_mutable_list:messages.SettlementRequest.TransferFees)
  return &transferfees_;
}
inline const ::messages::TargetAddressField& SettlementRequest::_internal_transferfees(int index) const {
  return transferfees_.Get(index);
}
inline const ::messages::TargetAddressField& SettlementRequest::transferfees(int index) const {
  // @@protoc_insertion_point(field_get:messages.SettlementRequest.TransferFees)
  return _internal_transferfees(index);
}
inline ::messages::TargetAddressField* SettlementRequest::_internal_add_transferfees() {
  return transferfees_.Add();
}
inline ::messages::TargetAddressField* SettlementRequest::add_transferfees() {
  // @@protoc_insertion_point(field_add:messages.SettlementRequest.TransferFees)
  return _internal_add_transferfees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::TargetAddressField >&
SettlementRequest::transferfees() const {
  // @@protoc_insertion_point(field_list:messages.SettlementRequest.TransferFees)
  return transferfees_;
}

// -------------------------------------------------------------------

// OutputMetadata

// string OutputDescription = 1;
inline void OutputMetadata::clear_outputdescription() {
  outputdescription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputMetadata::outputdescription() const {
  // @@protoc_insertion_point(field_get:messages.OutputMetadata.OutputDescription)
  return _internal_outputdescription();
}
inline void OutputMetadata::set_outputdescription(const std::string& value) {
  _internal_set_outputdescription(value);
  // @@protoc_insertion_point(field_set:messages.OutputMetadata.OutputDescription)
}
inline std::string* OutputMetadata::mutable_outputdescription() {
  // @@protoc_insertion_point(field_mutable:messages.OutputMetadata.OutputDescription)
  return _internal_mutable_outputdescription();
}
inline const std::string& OutputMetadata::_internal_outputdescription() const {
  return outputdescription_.Get();
}
inline void OutputMetadata::_internal_set_outputdescription(const std::string& value) {
  
  outputdescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputMetadata::set_outputdescription(std::string&& value) {
  
  outputdescription_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.OutputMetadata.OutputDescription)
}
inline void OutputMetadata::set_outputdescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputdescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.OutputMetadata.OutputDescription)
}
inline void OutputMetadata::set_outputdescription(const char* value,
    size_t size) {
  
  outputdescription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.OutputMetadata.OutputDescription)
}
inline std::string* OutputMetadata::_internal_mutable_outputdescription() {
  
  return outputdescription_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputMetadata::release_outputdescription() {
  // @@protoc_insertion_point(field_release:messages.OutputMetadata.OutputDescription)
  return outputdescription_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputMetadata::set_allocated_outputdescription(std::string* outputdescription) {
  if (outputdescription != nullptr) {
    
  } else {
    
  }
  outputdescription_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputdescription,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.OutputMetadata.OutputDescription)
}
inline std::string* OutputMetadata::unsafe_arena_release_outputdescription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.OutputMetadata.OutputDescription)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return outputdescription_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutputMetadata::unsafe_arena_set_allocated_outputdescription(
    std::string* outputdescription) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (outputdescription != nullptr) {
    
  } else {
    
  }
  outputdescription_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      outputdescription, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OutputMetadata.OutputDescription)
}

// repeated uint32 Tags = 2;
inline int OutputMetadata::_internal_tags_size() const {
  return tags_.size();
}
inline int OutputMetadata::tags_size() const {
  return _internal_tags_size();
}
inline void OutputMetadata::clear_tags() {
  tags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputMetadata::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:messages.OutputMetadata.Tags)
  return _internal_tags(index);
}
inline void OutputMetadata::set_tags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:messages.OutputMetadata.Tags)
}
inline void OutputMetadata::_internal_add_tags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tags_.Add(value);
}
inline void OutputMetadata::add_tags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tags(value);
  // @@protoc_insertion_point(field_add:messages.OutputMetadata.Tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputMetadata::_internal_tags() const {
  return tags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
OutputMetadata::tags() const {
  // @@protoc_insertion_point(field_list:messages.OutputMetadata.Tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputMetadata::_internal_mutable_tags() {
  return &tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
OutputMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:messages.OutputMetadata.Tags)
  return _internal_mutable_tags();
}

// repeated .messages.OutputTagField CustomTags = 3;
inline int OutputMetadata::_internal_customtags_size() const {
  return customtags_.size();
}
inline int OutputMetadata::customtags_size() const {
  return _internal_customtags_size();
}
inline void OutputMetadata::clear_customtags() {
  customtags_.Clear();
}
inline ::messages::OutputTagField* OutputMetadata::mutable_customtags(int index) {
  // @@protoc_insertion_point(field_mutable:messages.OutputMetadata.CustomTags)
  return customtags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::OutputTagField >*
OutputMetadata::mutable_customtags() {
  // @@protoc_insertion_point(field_mutable_list:messages.OutputMetadata.CustomTags)
  return &customtags_;
}
inline const ::messages::OutputTagField& OutputMetadata::_internal_customtags(int index) const {
  return customtags_.Get(index);
}
inline const ::messages::OutputTagField& OutputMetadata::customtags(int index) const {
  // @@protoc_insertion_point(field_get:messages.OutputMetadata.CustomTags)
  return _internal_customtags(index);
}
inline ::messages::OutputTagField* OutputMetadata::_internal_add_customtags() {
  return customtags_.Add();
}
inline ::messages::OutputTagField* OutputMetadata::add_customtags() {
  // @@protoc_insertion_point(field_add:messages.OutputMetadata.CustomTags)
  return _internal_add_customtags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::OutputTagField >&
OutputMetadata::customtags() const {
  // @@protoc_insertion_point(field_list:messages.OutputMetadata.CustomTags)
  return customtags_;
}

// -------------------------------------------------------------------

// Distribution

// bytes InstrumentCode = 1;
inline void Distribution::clear_instrumentcode() {
  instrumentcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Distribution::instrumentcode() const {
  // @@protoc_insertion_point(field_get:messages.Distribution.InstrumentCode)
  return _internal_instrumentcode();
}
inline void Distribution::set_instrumentcode(const std::string& value) {
  _internal_set_instrumentcode(value);
  // @@protoc_insertion_point(field_set:messages.Distribution.InstrumentCode)
}
inline std::string* Distribution::mutable_instrumentcode() {
  // @@protoc_insertion_point(field_mutable:messages.Distribution.InstrumentCode)
  return _internal_mutable_instrumentcode();
}
inline const std::string& Distribution::_internal_instrumentcode() const {
  return instrumentcode_.Get();
}
inline void Distribution::_internal_set_instrumentcode(const std::string& value) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Distribution::set_instrumentcode(std::string&& value) {
  
  instrumentcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.Distribution.InstrumentCode)
}
inline void Distribution::set_instrumentcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.Distribution.InstrumentCode)
}
inline void Distribution::set_instrumentcode(const void* value,
    size_t size) {
  
  instrumentcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.Distribution.InstrumentCode)
}
inline std::string* Distribution::_internal_mutable_instrumentcode() {
  
  return instrumentcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Distribution::release_instrumentcode() {
  // @@protoc_insertion_point(field_release:messages.Distribution.InstrumentCode)
  return instrumentcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distribution::set_allocated_instrumentcode(std::string* instrumentcode) {
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrumentcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.Distribution.InstrumentCode)
}
inline std::string* Distribution::unsafe_arena_release_instrumentcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.Distribution.InstrumentCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrumentcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Distribution::unsafe_arena_set_allocated_instrumentcode(
    std::string* instrumentcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrumentcode != nullptr) {
    
  } else {
    
  }
  instrumentcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrumentcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.Distribution.InstrumentCode)
}

// uint64 Timestamp = 2;
inline void Distribution::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Distribution::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Distribution::timestamp() const {
  // @@protoc_insertion_point(field_get:messages.Distribution.Timestamp)
  return _internal_timestamp();
}
inline void Distribution::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void Distribution::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:messages.Distribution.Timestamp)
}

// -------------------------------------------------------------------

// InitiateRelationship

// uint32 Type = 1;
inline void InitiateRelationship::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::type() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.Type)
  return _internal_type();
}
inline void InitiateRelationship::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void InitiateRelationship::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.Type)
}

// bytes Seed = 2;
inline void InitiateRelationship::clear_seed() {
  seed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitiateRelationship::seed() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.Seed)
  return _internal_seed();
}
inline void InitiateRelationship::set_seed(const std::string& value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.Seed)
}
inline std::string* InitiateRelationship::mutable_seed() {
  // @@protoc_insertion_point(field_mutable:messages.InitiateRelationship.Seed)
  return _internal_mutable_seed();
}
inline const std::string& InitiateRelationship::_internal_seed() const {
  return seed_.Get();
}
inline void InitiateRelationship::_internal_set_seed(const std::string& value) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitiateRelationship::set_seed(std::string&& value) {
  
  seed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.InitiateRelationship.Seed)
}
inline void InitiateRelationship::set_seed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.InitiateRelationship.Seed)
}
inline void InitiateRelationship::set_seed(const void* value,
    size_t size) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.InitiateRelationship.Seed)
}
inline std::string* InitiateRelationship::_internal_mutable_seed() {
  
  return seed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitiateRelationship::release_seed() {
  // @@protoc_insertion_point(field_release:messages.InitiateRelationship.Seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiateRelationship::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.InitiateRelationship.Seed)
}
inline std::string* InitiateRelationship::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.InitiateRelationship.Seed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitiateRelationship::unsafe_arena_set_allocated_seed(
    std::string* seed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.InitiateRelationship.Seed)
}

// bytes Flag = 3;
inline void InitiateRelationship::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitiateRelationship::flag() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.Flag)
  return _internal_flag();
}
inline void InitiateRelationship::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.Flag)
}
inline std::string* InitiateRelationship::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:messages.InitiateRelationship.Flag)
  return _internal_mutable_flag();
}
inline const std::string& InitiateRelationship::_internal_flag() const {
  return flag_.Get();
}
inline void InitiateRelationship::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitiateRelationship::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.InitiateRelationship.Flag)
}
inline void InitiateRelationship::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.InitiateRelationship.Flag)
}
inline void InitiateRelationship::set_flag(const void* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.InitiateRelationship.Flag)
}
inline std::string* InitiateRelationship::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitiateRelationship::release_flag() {
  // @@protoc_insertion_point(field_release:messages.InitiateRelationship.Flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiateRelationship::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.InitiateRelationship.Flag)
}
inline std::string* InitiateRelationship::unsafe_arena_release_flag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.InitiateRelationship.Flag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitiateRelationship::unsafe_arena_set_allocated_flag(
    std::string* flag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.InitiateRelationship.Flag)
}

// uint32 EncryptionType = 4;
inline void InitiateRelationship::clear_encryptiontype() {
  encryptiontype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::_internal_encryptiontype() const {
  return encryptiontype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::encryptiontype() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.EncryptionType)
  return _internal_encryptiontype();
}
inline void InitiateRelationship::_internal_set_encryptiontype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  encryptiontype_ = value;
}
inline void InitiateRelationship::set_encryptiontype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_encryptiontype(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.EncryptionType)
}

// uint32 ProofOfIdentityType = 5;
inline void InitiateRelationship::clear_proofofidentitytype() {
  proofofidentitytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::_internal_proofofidentitytype() const {
  return proofofidentitytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitiateRelationship::proofofidentitytype() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.ProofOfIdentityType)
  return _internal_proofofidentitytype();
}
inline void InitiateRelationship::_internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proofofidentitytype_ = value;
}
inline void InitiateRelationship::set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proofofidentitytype(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.ProofOfIdentityType)
}

// bytes ProofOfIdentity = 6;
inline void InitiateRelationship::clear_proofofidentity() {
  proofofidentity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitiateRelationship::proofofidentity() const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.ProofOfIdentity)
  return _internal_proofofidentity();
}
inline void InitiateRelationship::set_proofofidentity(const std::string& value) {
  _internal_set_proofofidentity(value);
  // @@protoc_insertion_point(field_set:messages.InitiateRelationship.ProofOfIdentity)
}
inline std::string* InitiateRelationship::mutable_proofofidentity() {
  // @@protoc_insertion_point(field_mutable:messages.InitiateRelationship.ProofOfIdentity)
  return _internal_mutable_proofofidentity();
}
inline const std::string& InitiateRelationship::_internal_proofofidentity() const {
  return proofofidentity_.Get();
}
inline void InitiateRelationship::_internal_set_proofofidentity(const std::string& value) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitiateRelationship::set_proofofidentity(std::string&& value) {
  
  proofofidentity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.InitiateRelationship.ProofOfIdentity)
}
inline void InitiateRelationship::set_proofofidentity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.InitiateRelationship.ProofOfIdentity)
}
inline void InitiateRelationship::set_proofofidentity(const void* value,
    size_t size) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.InitiateRelationship.ProofOfIdentity)
}
inline std::string* InitiateRelationship::_internal_mutable_proofofidentity() {
  
  return proofofidentity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitiateRelationship::release_proofofidentity() {
  // @@protoc_insertion_point(field_release:messages.InitiateRelationship.ProofOfIdentity)
  return proofofidentity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiateRelationship::set_allocated_proofofidentity(std::string* proofofidentity) {
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proofofidentity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.InitiateRelationship.ProofOfIdentity)
}
inline std::string* InitiateRelationship::unsafe_arena_release_proofofidentity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.InitiateRelationship.ProofOfIdentity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proofofidentity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitiateRelationship::unsafe_arena_set_allocated_proofofidentity(
    std::string* proofofidentity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proofofidentity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.InitiateRelationship.ProofOfIdentity)
}

// repeated .messages.ChannelPartyField ChannelParties = 7;
inline int InitiateRelationship::_internal_channelparties_size() const {
  return channelparties_.size();
}
inline int InitiateRelationship::channelparties_size() const {
  return _internal_channelparties_size();
}
inline void InitiateRelationship::clear_channelparties() {
  channelparties_.Clear();
}
inline ::messages::ChannelPartyField* InitiateRelationship::mutable_channelparties(int index) {
  // @@protoc_insertion_point(field_mutable:messages.InitiateRelationship.ChannelParties)
  return channelparties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ChannelPartyField >*
InitiateRelationship::mutable_channelparties() {
  // @@protoc_insertion_point(field_mutable_list:messages.InitiateRelationship.ChannelParties)
  return &channelparties_;
}
inline const ::messages::ChannelPartyField& InitiateRelationship::_internal_channelparties(int index) const {
  return channelparties_.Get(index);
}
inline const ::messages::ChannelPartyField& InitiateRelationship::channelparties(int index) const {
  // @@protoc_insertion_point(field_get:messages.InitiateRelationship.ChannelParties)
  return _internal_channelparties(index);
}
inline ::messages::ChannelPartyField* InitiateRelationship::_internal_add_channelparties() {
  return channelparties_.Add();
}
inline ::messages::ChannelPartyField* InitiateRelationship::add_channelparties() {
  // @@protoc_insertion_point(field_add:messages.InitiateRelationship.ChannelParties)
  return _internal_add_channelparties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ChannelPartyField >&
InitiateRelationship::channelparties() const {
  // @@protoc_insertion_point(field_list:messages.InitiateRelationship.ChannelParties)
  return channelparties_;
}

// -------------------------------------------------------------------

// PendingAcceptRelationship

// uint32 ProofOfIdentityType = 1;
inline void PendingAcceptRelationship::clear_proofofidentitytype() {
  proofofidentitytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingAcceptRelationship::_internal_proofofidentitytype() const {
  return proofofidentitytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingAcceptRelationship::proofofidentitytype() const {
  // @@protoc_insertion_point(field_get:messages.PendingAcceptRelationship.ProofOfIdentityType)
  return _internal_proofofidentitytype();
}
inline void PendingAcceptRelationship::_internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proofofidentitytype_ = value;
}
inline void PendingAcceptRelationship::set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proofofidentitytype(value);
  // @@protoc_insertion_point(field_set:messages.PendingAcceptRelationship.ProofOfIdentityType)
}

// bytes ProofOfIdentity = 2;
inline void PendingAcceptRelationship::clear_proofofidentity() {
  proofofidentity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PendingAcceptRelationship::proofofidentity() const {
  // @@protoc_insertion_point(field_get:messages.PendingAcceptRelationship.ProofOfIdentity)
  return _internal_proofofidentity();
}
inline void PendingAcceptRelationship::set_proofofidentity(const std::string& value) {
  _internal_set_proofofidentity(value);
  // @@protoc_insertion_point(field_set:messages.PendingAcceptRelationship.ProofOfIdentity)
}
inline std::string* PendingAcceptRelationship::mutable_proofofidentity() {
  // @@protoc_insertion_point(field_mutable:messages.PendingAcceptRelationship.ProofOfIdentity)
  return _internal_mutable_proofofidentity();
}
inline const std::string& PendingAcceptRelationship::_internal_proofofidentity() const {
  return proofofidentity_.Get();
}
inline void PendingAcceptRelationship::_internal_set_proofofidentity(const std::string& value) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PendingAcceptRelationship::set_proofofidentity(std::string&& value) {
  
  proofofidentity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.PendingAcceptRelationship.ProofOfIdentity)
}
inline void PendingAcceptRelationship::set_proofofidentity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.PendingAcceptRelationship.ProofOfIdentity)
}
inline void PendingAcceptRelationship::set_proofofidentity(const void* value,
    size_t size) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.PendingAcceptRelationship.ProofOfIdentity)
}
inline std::string* PendingAcceptRelationship::_internal_mutable_proofofidentity() {
  
  return proofofidentity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PendingAcceptRelationship::release_proofofidentity() {
  // @@protoc_insertion_point(field_release:messages.PendingAcceptRelationship.ProofOfIdentity)
  return proofofidentity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PendingAcceptRelationship::set_allocated_proofofidentity(std::string* proofofidentity) {
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proofofidentity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.PendingAcceptRelationship.ProofOfIdentity)
}
inline std::string* PendingAcceptRelationship::unsafe_arena_release_proofofidentity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.PendingAcceptRelationship.ProofOfIdentity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proofofidentity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PendingAcceptRelationship::unsafe_arena_set_allocated_proofofidentity(
    std::string* proofofidentity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proofofidentity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PendingAcceptRelationship.ProofOfIdentity)
}

// -------------------------------------------------------------------

// AcceptRelationship

// uint32 ProofOfIdentityType = 1;
inline void AcceptRelationship::clear_proofofidentitytype() {
  proofofidentitytype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptRelationship::_internal_proofofidentitytype() const {
  return proofofidentitytype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcceptRelationship::proofofidentitytype() const {
  // @@protoc_insertion_point(field_get:messages.AcceptRelationship.ProofOfIdentityType)
  return _internal_proofofidentitytype();
}
inline void AcceptRelationship::_internal_set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  proofofidentitytype_ = value;
}
inline void AcceptRelationship::set_proofofidentitytype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_proofofidentitytype(value);
  // @@protoc_insertion_point(field_set:messages.AcceptRelationship.ProofOfIdentityType)
}

// bytes ProofOfIdentity = 2;
inline void AcceptRelationship::clear_proofofidentity() {
  proofofidentity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcceptRelationship::proofofidentity() const {
  // @@protoc_insertion_point(field_get:messages.AcceptRelationship.ProofOfIdentity)
  return _internal_proofofidentity();
}
inline void AcceptRelationship::set_proofofidentity(const std::string& value) {
  _internal_set_proofofidentity(value);
  // @@protoc_insertion_point(field_set:messages.AcceptRelationship.ProofOfIdentity)
}
inline std::string* AcceptRelationship::mutable_proofofidentity() {
  // @@protoc_insertion_point(field_mutable:messages.AcceptRelationship.ProofOfIdentity)
  return _internal_mutable_proofofidentity();
}
inline const std::string& AcceptRelationship::_internal_proofofidentity() const {
  return proofofidentity_.Get();
}
inline void AcceptRelationship::_internal_set_proofofidentity(const std::string& value) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcceptRelationship::set_proofofidentity(std::string&& value) {
  
  proofofidentity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.AcceptRelationship.ProofOfIdentity)
}
inline void AcceptRelationship::set_proofofidentity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.AcceptRelationship.ProofOfIdentity)
}
inline void AcceptRelationship::set_proofofidentity(const void* value,
    size_t size) {
  
  proofofidentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.AcceptRelationship.ProofOfIdentity)
}
inline std::string* AcceptRelationship::_internal_mutable_proofofidentity() {
  
  return proofofidentity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcceptRelationship::release_proofofidentity() {
  // @@protoc_insertion_point(field_release:messages.AcceptRelationship.ProofOfIdentity)
  return proofofidentity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcceptRelationship::set_allocated_proofofidentity(std::string* proofofidentity) {
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proofofidentity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.AcceptRelationship.ProofOfIdentity)
}
inline std::string* AcceptRelationship::unsafe_arena_release_proofofidentity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.AcceptRelationship.ProofOfIdentity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return proofofidentity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AcceptRelationship::unsafe_arena_set_allocated_proofofidentity(
    std::string* proofofidentity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (proofofidentity != nullptr) {
    
  } else {
    
  }
  proofofidentity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      proofofidentity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.AcceptRelationship.ProofOfIdentity)
}

// -------------------------------------------------------------------

// RelationshipAmendment

// bytes Seed = 1;
inline void RelationshipAmendment::clear_seed() {
  seed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelationshipAmendment::seed() const {
  // @@protoc_insertion_point(field_get:messages.RelationshipAmendment.Seed)
  return _internal_seed();
}
inline void RelationshipAmendment::set_seed(const std::string& value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:messages.RelationshipAmendment.Seed)
}
inline std::string* RelationshipAmendment::mutable_seed() {
  // @@protoc_insertion_point(field_mutable:messages.RelationshipAmendment.Seed)
  return _internal_mutable_seed();
}
inline const std::string& RelationshipAmendment::_internal_seed() const {
  return seed_.Get();
}
inline void RelationshipAmendment::_internal_set_seed(const std::string& value) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelationshipAmendment::set_seed(std::string&& value) {
  
  seed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.RelationshipAmendment.Seed)
}
inline void RelationshipAmendment::set_seed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.RelationshipAmendment.Seed)
}
inline void RelationshipAmendment::set_seed(const void* value,
    size_t size) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.RelationshipAmendment.Seed)
}
inline std::string* RelationshipAmendment::_internal_mutable_seed() {
  
  return seed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelationshipAmendment::release_seed() {
  // @@protoc_insertion_point(field_release:messages.RelationshipAmendment.Seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelationshipAmendment::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.RelationshipAmendment.Seed)
}
inline std::string* RelationshipAmendment::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.RelationshipAmendment.Seed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RelationshipAmendment::unsafe_arena_set_allocated_seed(
    std::string* seed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.RelationshipAmendment.Seed)
}

// bytes BaseEncryptionSecret = 2;
inline void RelationshipAmendment::clear_baseencryptionsecret() {
  baseencryptionsecret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RelationshipAmendment::baseencryptionsecret() const {
  // @@protoc_insertion_point(field_get:messages.RelationshipAmendment.BaseEncryptionSecret)
  return _internal_baseencryptionsecret();
}
inline void RelationshipAmendment::set_baseencryptionsecret(const std::string& value) {
  _internal_set_baseencryptionsecret(value);
  // @@protoc_insertion_point(field_set:messages.RelationshipAmendment.BaseEncryptionSecret)
}
inline std::string* RelationshipAmendment::mutable_baseencryptionsecret() {
  // @@protoc_insertion_point(field_mutable:messages.RelationshipAmendment.BaseEncryptionSecret)
  return _internal_mutable_baseencryptionsecret();
}
inline const std::string& RelationshipAmendment::_internal_baseencryptionsecret() const {
  return baseencryptionsecret_.Get();
}
inline void RelationshipAmendment::_internal_set_baseencryptionsecret(const std::string& value) {
  
  baseencryptionsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RelationshipAmendment::set_baseencryptionsecret(std::string&& value) {
  
  baseencryptionsecret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.RelationshipAmendment.BaseEncryptionSecret)
}
inline void RelationshipAmendment::set_baseencryptionsecret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  baseencryptionsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.RelationshipAmendment.BaseEncryptionSecret)
}
inline void RelationshipAmendment::set_baseencryptionsecret(const void* value,
    size_t size) {
  
  baseencryptionsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.RelationshipAmendment.BaseEncryptionSecret)
}
inline std::string* RelationshipAmendment::_internal_mutable_baseencryptionsecret() {
  
  return baseencryptionsecret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RelationshipAmendment::release_baseencryptionsecret() {
  // @@protoc_insertion_point(field_release:messages.RelationshipAmendment.BaseEncryptionSecret)
  return baseencryptionsecret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RelationshipAmendment::set_allocated_baseencryptionsecret(std::string* baseencryptionsecret) {
  if (baseencryptionsecret != nullptr) {
    
  } else {
    
  }
  baseencryptionsecret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), baseencryptionsecret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.RelationshipAmendment.BaseEncryptionSecret)
}
inline std::string* RelationshipAmendment::unsafe_arena_release_baseencryptionsecret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.RelationshipAmendment.BaseEncryptionSecret)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return baseencryptionsecret_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RelationshipAmendment::unsafe_arena_set_allocated_baseencryptionsecret(
    std::string* baseencryptionsecret) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (baseencryptionsecret != nullptr) {
    
  } else {
    
  }
  baseencryptionsecret_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      baseencryptionsecret, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.RelationshipAmendment.BaseEncryptionSecret)
}

// uint32 AddMemberIndexes = 3;
inline void RelationshipAmendment::clear_addmemberindexes() {
  addmemberindexes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationshipAmendment::_internal_addmemberindexes() const {
  return addmemberindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationshipAmendment::addmemberindexes() const {
  // @@protoc_insertion_point(field_get:messages.RelationshipAmendment.AddMemberIndexes)
  return _internal_addmemberindexes();
}
inline void RelationshipAmendment::_internal_set_addmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  addmemberindexes_ = value;
}
inline void RelationshipAmendment::set_addmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_addmemberindexes(value);
  // @@protoc_insertion_point(field_set:messages.RelationshipAmendment.AddMemberIndexes)
}

// uint32 DropMemberIndexes = 4;
inline void RelationshipAmendment::clear_dropmemberindexes() {
  dropmemberindexes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationshipAmendment::_internal_dropmemberindexes() const {
  return dropmemberindexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RelationshipAmendment::dropmemberindexes() const {
  // @@protoc_insertion_point(field_get:messages.RelationshipAmendment.DropMemberIndexes)
  return _internal_dropmemberindexes();
}
inline void RelationshipAmendment::_internal_set_dropmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dropmemberindexes_ = value;
}
inline void RelationshipAmendment::set_dropmemberindexes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dropmemberindexes(value);
  // @@protoc_insertion_point(field_set:messages.RelationshipAmendment.DropMemberIndexes)
}

// -------------------------------------------------------------------

// InitiateThread

// bytes Flag = 1;
inline void InitiateThread::clear_flag() {
  flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitiateThread::flag() const {
  // @@protoc_insertion_point(field_get:messages.InitiateThread.Flag)
  return _internal_flag();
}
inline void InitiateThread::set_flag(const std::string& value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:messages.InitiateThread.Flag)
}
inline std::string* InitiateThread::mutable_flag() {
  // @@protoc_insertion_point(field_mutable:messages.InitiateThread.Flag)
  return _internal_mutable_flag();
}
inline const std::string& InitiateThread::_internal_flag() const {
  return flag_.Get();
}
inline void InitiateThread::_internal_set_flag(const std::string& value) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitiateThread::set_flag(std::string&& value) {
  
  flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.InitiateThread.Flag)
}
inline void InitiateThread::set_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.InitiateThread.Flag)
}
inline void InitiateThread::set_flag(const void* value,
    size_t size) {
  
  flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.InitiateThread.Flag)
}
inline std::string* InitiateThread::_internal_mutable_flag() {
  
  return flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitiateThread::release_flag() {
  // @@protoc_insertion_point(field_release:messages.InitiateThread.Flag)
  return flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiateThread::set_allocated_flag(std::string* flag) {
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.InitiateThread.Flag)
}
inline std::string* InitiateThread::unsafe_arena_release_flag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.InitiateThread.Flag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return flag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitiateThread::unsafe_arena_set_allocated_flag(
    std::string* flag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (flag != nullptr) {
    
  } else {
    
  }
  flag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      flag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.InitiateThread.Flag)
}

// bytes Seed = 2;
inline void InitiateThread::clear_seed() {
  seed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitiateThread::seed() const {
  // @@protoc_insertion_point(field_get:messages.InitiateThread.Seed)
  return _internal_seed();
}
inline void InitiateThread::set_seed(const std::string& value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:messages.InitiateThread.Seed)
}
inline std::string* InitiateThread::mutable_seed() {
  // @@protoc_insertion_point(field_mutable:messages.InitiateThread.Seed)
  return _internal_mutable_seed();
}
inline const std::string& InitiateThread::_internal_seed() const {
  return seed_.Get();
}
inline void InitiateThread::_internal_set_seed(const std::string& value) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitiateThread::set_seed(std::string&& value) {
  
  seed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.InitiateThread.Seed)
}
inline void InitiateThread::set_seed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.InitiateThread.Seed)
}
inline void InitiateThread::set_seed(const void* value,
    size_t size) {
  
  seed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.InitiateThread.Seed)
}
inline std::string* InitiateThread::_internal_mutable_seed() {
  
  return seed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitiateThread::release_seed() {
  // @@protoc_insertion_point(field_release:messages.InitiateThread.Seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiateThread::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.InitiateThread.Seed)
}
inline std::string* InitiateThread::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.InitiateThread.Seed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitiateThread::unsafe_arena_set_allocated_seed(
    std::string* seed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.InitiateThread.Seed)
}

// -------------------------------------------------------------------

// AdministratorField

// uint32 Type = 1;
inline void AdministratorField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdministratorField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AdministratorField::type() const {
  // @@protoc_insertion_point(field_get:messages.AdministratorField.Type)
  return _internal_type();
}
inline void AdministratorField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void AdministratorField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.AdministratorField.Type)
}

// string Name = 2;
inline void AdministratorField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AdministratorField::name() const {
  // @@protoc_insertion_point(field_get:messages.AdministratorField.Name)
  return _internal_name();
}
inline void AdministratorField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:messages.AdministratorField.Name)
}
inline std::string* AdministratorField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:messages.AdministratorField.Name)
  return _internal_mutable_name();
}
inline const std::string& AdministratorField::_internal_name() const {
  return name_.Get();
}
inline void AdministratorField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AdministratorField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.AdministratorField.Name)
}
inline void AdministratorField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.AdministratorField.Name)
}
inline void AdministratorField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.AdministratorField.Name)
}
inline std::string* AdministratorField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AdministratorField::release_name() {
  // @@protoc_insertion_point(field_release:messages.AdministratorField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdministratorField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.AdministratorField.Name)
}
inline std::string* AdministratorField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.AdministratorField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AdministratorField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.AdministratorField.Name)
}

// -------------------------------------------------------------------

// ChannelPartyField

// bytes AdministrativeAddress = 1;
inline void ChannelPartyField::clear_administrativeaddress() {
  administrativeaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChannelPartyField::administrativeaddress() const {
  // @@protoc_insertion_point(field_get:messages.ChannelPartyField.AdministrativeAddress)
  return _internal_administrativeaddress();
}
inline void ChannelPartyField::set_administrativeaddress(const std::string& value) {
  _internal_set_administrativeaddress(value);
  // @@protoc_insertion_point(field_set:messages.ChannelPartyField.AdministrativeAddress)
}
inline std::string* ChannelPartyField::mutable_administrativeaddress() {
  // @@protoc_insertion_point(field_mutable:messages.ChannelPartyField.AdministrativeAddress)
  return _internal_mutable_administrativeaddress();
}
inline const std::string& ChannelPartyField::_internal_administrativeaddress() const {
  return administrativeaddress_.Get();
}
inline void ChannelPartyField::_internal_set_administrativeaddress(const std::string& value) {
  
  administrativeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChannelPartyField::set_administrativeaddress(std::string&& value) {
  
  administrativeaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ChannelPartyField.AdministrativeAddress)
}
inline void ChannelPartyField::set_administrativeaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  administrativeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ChannelPartyField.AdministrativeAddress)
}
inline void ChannelPartyField::set_administrativeaddress(const void* value,
    size_t size) {
  
  administrativeaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ChannelPartyField.AdministrativeAddress)
}
inline std::string* ChannelPartyField::_internal_mutable_administrativeaddress() {
  
  return administrativeaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChannelPartyField::release_administrativeaddress() {
  // @@protoc_insertion_point(field_release:messages.ChannelPartyField.AdministrativeAddress)
  return administrativeaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelPartyField::set_allocated_administrativeaddress(std::string* administrativeaddress) {
  if (administrativeaddress != nullptr) {
    
  } else {
    
  }
  administrativeaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), administrativeaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ChannelPartyField.AdministrativeAddress)
}
inline std::string* ChannelPartyField::unsafe_arena_release_administrativeaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ChannelPartyField.AdministrativeAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return administrativeaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChannelPartyField::unsafe_arena_set_allocated_administrativeaddress(
    std::string* administrativeaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (administrativeaddress != nullptr) {
    
  } else {
    
  }
  administrativeaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      administrativeaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ChannelPartyField.AdministrativeAddress)
}

// uint32 OutputIndex = 2;
inline void ChannelPartyField::clear_outputindex() {
  outputindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelPartyField::_internal_outputindex() const {
  return outputindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelPartyField::outputindex() const {
  // @@protoc_insertion_point(field_get:messages.ChannelPartyField.OutputIndex)
  return _internal_outputindex();
}
inline void ChannelPartyField::_internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputindex_ = value;
}
inline void ChannelPartyField::set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outputindex(value);
  // @@protoc_insertion_point(field_set:messages.ChannelPartyField.OutputIndex)
}

// -------------------------------------------------------------------

// DocumentField

// string Name = 1;
inline void DocumentField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::name() const {
  // @@protoc_insertion_point(field_get:messages.DocumentField.Name)
  return _internal_name();
}
inline void DocumentField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:messages.DocumentField.Name)
}
inline std::string* DocumentField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:messages.DocumentField.Name)
  return _internal_mutable_name();
}
inline const std::string& DocumentField::_internal_name() const {
  return name_.Get();
}
inline void DocumentField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.DocumentField.Name)
}
inline void DocumentField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.DocumentField.Name)
}
inline void DocumentField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.DocumentField.Name)
}
inline std::string* DocumentField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_name() {
  // @@protoc_insertion_point(field_release:messages.DocumentField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.DocumentField.Name)
}
inline std::string* DocumentField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.DocumentField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.DocumentField.Name)
}

// string Type = 2;
inline void DocumentField::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::type() const {
  // @@protoc_insertion_point(field_get:messages.DocumentField.Type)
  return _internal_type();
}
inline void DocumentField::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.DocumentField.Type)
}
inline std::string* DocumentField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:messages.DocumentField.Type)
  return _internal_mutable_type();
}
inline const std::string& DocumentField::_internal_type() const {
  return type_.Get();
}
inline void DocumentField::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.DocumentField.Type)
}
inline void DocumentField::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.DocumentField.Type)
}
inline void DocumentField::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.DocumentField.Type)
}
inline std::string* DocumentField::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_type() {
  // @@protoc_insertion_point(field_release:messages.DocumentField.Type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.DocumentField.Type)
}
inline std::string* DocumentField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.DocumentField.Type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.DocumentField.Type)
}

// bytes Contents = 3;
inline void DocumentField::clear_contents() {
  contents_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DocumentField::contents() const {
  // @@protoc_insertion_point(field_get:messages.DocumentField.Contents)
  return _internal_contents();
}
inline void DocumentField::set_contents(const std::string& value) {
  _internal_set_contents(value);
  // @@protoc_insertion_point(field_set:messages.DocumentField.Contents)
}
inline std::string* DocumentField::mutable_contents() {
  // @@protoc_insertion_point(field_mutable:messages.DocumentField.Contents)
  return _internal_mutable_contents();
}
inline const std::string& DocumentField::_internal_contents() const {
  return contents_.Get();
}
inline void DocumentField::_internal_set_contents(const std::string& value) {
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DocumentField::set_contents(std::string&& value) {
  
  contents_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.DocumentField.Contents)
}
inline void DocumentField::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.DocumentField.Contents)
}
inline void DocumentField::set_contents(const void* value,
    size_t size) {
  
  contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.DocumentField.Contents)
}
inline std::string* DocumentField::_internal_mutable_contents() {
  
  return contents_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DocumentField::release_contents() {
  // @@protoc_insertion_point(field_release:messages.DocumentField.Contents)
  return contents_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DocumentField::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contents,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.DocumentField.Contents)
}
inline std::string* DocumentField::unsafe_arena_release_contents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.DocumentField.Contents)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return contents_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DocumentField::unsafe_arena_set_allocated_contents(
    std::string* contents) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contents, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.DocumentField.Contents)
}

// -------------------------------------------------------------------

// EntityField

// string Name = 1;
inline void EntityField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::name() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.Name)
  return _internal_name();
}
inline void EntityField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.Name)
}
inline std::string* EntityField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.Name)
  return _internal_mutable_name();
}
inline const std::string& EntityField::_internal_name() const {
  return name_.Get();
}
inline void EntityField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.Name)
}
inline void EntityField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.Name)
}
inline void EntityField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.Name)
}
inline std::string* EntityField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_name() {
  // @@protoc_insertion_point(field_release:messages.EntityField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.Name)
}
inline std::string* EntityField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.Name)
}

// string Type = 2;
inline void EntityField::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::type() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.Type)
  return _internal_type();
}
inline void EntityField::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.Type)
}
inline std::string* EntityField::mutable_type() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.Type)
  return _internal_mutable_type();
}
inline const std::string& EntityField::_internal_type() const {
  return type_.Get();
}
inline void EntityField::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.Type)
}
inline void EntityField::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.Type)
}
inline void EntityField::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.Type)
}
inline std::string* EntityField::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_type() {
  // @@protoc_insertion_point(field_release:messages.EntityField.Type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.Type)
}
inline std::string* EntityField::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.Type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.Type)
}

// string LEI = 3;
inline void EntityField::clear_lei() {
  lei_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::lei() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.LEI)
  return _internal_lei();
}
inline void EntityField::set_lei(const std::string& value) {
  _internal_set_lei(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.LEI)
}
inline std::string* EntityField::mutable_lei() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.LEI)
  return _internal_mutable_lei();
}
inline const std::string& EntityField::_internal_lei() const {
  return lei_.Get();
}
inline void EntityField::_internal_set_lei(const std::string& value) {
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_lei(std::string&& value) {
  
  lei_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.LEI)
}
inline void EntityField::set_lei(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.LEI)
}
inline void EntityField::set_lei(const char* value,
    size_t size) {
  
  lei_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.LEI)
}
inline std::string* EntityField::_internal_mutable_lei() {
  
  return lei_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_lei() {
  // @@protoc_insertion_point(field_release:messages.EntityField.LEI)
  return lei_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_lei(std::string* lei) {
  if (lei != nullptr) {
    
  } else {
    
  }
  lei_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lei,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.LEI)
}
inline std::string* EntityField::unsafe_arena_release_lei() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.LEI)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return lei_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_lei(
    std::string* lei) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lei != nullptr) {
    
  } else {
    
  }
  lei_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lei, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.LEI)
}

// string UnitNumber = 4;
inline void EntityField::clear_unitnumber() {
  unitnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::unitnumber() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.UnitNumber)
  return _internal_unitnumber();
}
inline void EntityField::set_unitnumber(const std::string& value) {
  _internal_set_unitnumber(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.UnitNumber)
}
inline std::string* EntityField::mutable_unitnumber() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.UnitNumber)
  return _internal_mutable_unitnumber();
}
inline const std::string& EntityField::_internal_unitnumber() const {
  return unitnumber_.Get();
}
inline void EntityField::_internal_set_unitnumber(const std::string& value) {
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_unitnumber(std::string&& value) {
  
  unitnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.UnitNumber)
}
inline void EntityField::set_unitnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.UnitNumber)
}
inline void EntityField::set_unitnumber(const char* value,
    size_t size) {
  
  unitnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.UnitNumber)
}
inline std::string* EntityField::_internal_mutable_unitnumber() {
  
  return unitnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_unitnumber() {
  // @@protoc_insertion_point(field_release:messages.EntityField.UnitNumber)
  return unitnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_unitnumber(std::string* unitnumber) {
  if (unitnumber != nullptr) {
    
  } else {
    
  }
  unitnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unitnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.UnitNumber)
}
inline std::string* EntityField::unsafe_arena_release_unitnumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.UnitNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return unitnumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_unitnumber(
    std::string* unitnumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (unitnumber != nullptr) {
    
  } else {
    
  }
  unitnumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      unitnumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.UnitNumber)
}

// string BuildingNumber = 5;
inline void EntityField::clear_buildingnumber() {
  buildingnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::buildingnumber() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.BuildingNumber)
  return _internal_buildingnumber();
}
inline void EntityField::set_buildingnumber(const std::string& value) {
  _internal_set_buildingnumber(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.BuildingNumber)
}
inline std::string* EntityField::mutable_buildingnumber() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.BuildingNumber)
  return _internal_mutable_buildingnumber();
}
inline const std::string& EntityField::_internal_buildingnumber() const {
  return buildingnumber_.Get();
}
inline void EntityField::_internal_set_buildingnumber(const std::string& value) {
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_buildingnumber(std::string&& value) {
  
  buildingnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.BuildingNumber)
}
inline void EntityField::set_buildingnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.BuildingNumber)
}
inline void EntityField::set_buildingnumber(const char* value,
    size_t size) {
  
  buildingnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.BuildingNumber)
}
inline std::string* EntityField::_internal_mutable_buildingnumber() {
  
  return buildingnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_buildingnumber() {
  // @@protoc_insertion_point(field_release:messages.EntityField.BuildingNumber)
  return buildingnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_buildingnumber(std::string* buildingnumber) {
  if (buildingnumber != nullptr) {
    
  } else {
    
  }
  buildingnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buildingnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.BuildingNumber)
}
inline std::string* EntityField::unsafe_arena_release_buildingnumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.BuildingNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return buildingnumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_buildingnumber(
    std::string* buildingnumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buildingnumber != nullptr) {
    
  } else {
    
  }
  buildingnumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buildingnumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.BuildingNumber)
}

// string Street = 6;
inline void EntityField::clear_street() {
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::street() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.Street)
  return _internal_street();
}
inline void EntityField::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.Street)
}
inline std::string* EntityField::mutable_street() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.Street)
  return _internal_mutable_street();
}
inline const std::string& EntityField::_internal_street() const {
  return street_.Get();
}
inline void EntityField::_internal_set_street(const std::string& value) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_street(std::string&& value) {
  
  street_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.Street)
}
inline void EntityField::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.Street)
}
inline void EntityField::set_street(const char* value,
    size_t size) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.Street)
}
inline std::string* EntityField::_internal_mutable_street() {
  
  return street_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_street() {
  // @@protoc_insertion_point(field_release:messages.EntityField.Street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.Street)
}
inline std::string* EntityField::unsafe_arena_release_street() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.Street)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return street_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_street(
    std::string* street) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (street != nullptr) {
    
  } else {
    
  }
  street_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      street, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.Street)
}

// string SuburbCity = 7;
inline void EntityField::clear_suburbcity() {
  suburbcity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::suburbcity() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.SuburbCity)
  return _internal_suburbcity();
}
inline void EntityField::set_suburbcity(const std::string& value) {
  _internal_set_suburbcity(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.SuburbCity)
}
inline std::string* EntityField::mutable_suburbcity() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.SuburbCity)
  return _internal_mutable_suburbcity();
}
inline const std::string& EntityField::_internal_suburbcity() const {
  return suburbcity_.Get();
}
inline void EntityField::_internal_set_suburbcity(const std::string& value) {
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_suburbcity(std::string&& value) {
  
  suburbcity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.SuburbCity)
}
inline void EntityField::set_suburbcity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.SuburbCity)
}
inline void EntityField::set_suburbcity(const char* value,
    size_t size) {
  
  suburbcity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.SuburbCity)
}
inline std::string* EntityField::_internal_mutable_suburbcity() {
  
  return suburbcity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_suburbcity() {
  // @@protoc_insertion_point(field_release:messages.EntityField.SuburbCity)
  return suburbcity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_suburbcity(std::string* suburbcity) {
  if (suburbcity != nullptr) {
    
  } else {
    
  }
  suburbcity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suburbcity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.SuburbCity)
}
inline std::string* EntityField::unsafe_arena_release_suburbcity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.SuburbCity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return suburbcity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_suburbcity(
    std::string* suburbcity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suburbcity != nullptr) {
    
  } else {
    
  }
  suburbcity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suburbcity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.SuburbCity)
}

// string TerritoryStateProvinceCode = 8;
inline void EntityField::clear_territorystateprovincecode() {
  territorystateprovincecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::territorystateprovincecode() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.TerritoryStateProvinceCode)
  return _internal_territorystateprovincecode();
}
inline void EntityField::set_territorystateprovincecode(const std::string& value) {
  _internal_set_territorystateprovincecode(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::mutable_territorystateprovincecode() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.TerritoryStateProvinceCode)
  return _internal_mutable_territorystateprovincecode();
}
inline const std::string& EntityField::_internal_territorystateprovincecode() const {
  return territorystateprovincecode_.Get();
}
inline void EntityField::_internal_set_territorystateprovincecode(const std::string& value) {
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_territorystateprovincecode(std::string&& value) {
  
  territorystateprovincecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.TerritoryStateProvinceCode)
}
inline void EntityField::set_territorystateprovincecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.TerritoryStateProvinceCode)
}
inline void EntityField::set_territorystateprovincecode(const char* value,
    size_t size) {
  
  territorystateprovincecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::_internal_mutable_territorystateprovincecode() {
  
  return territorystateprovincecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_territorystateprovincecode() {
  // @@protoc_insertion_point(field_release:messages.EntityField.TerritoryStateProvinceCode)
  return territorystateprovincecode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_territorystateprovincecode(std::string* territorystateprovincecode) {
  if (territorystateprovincecode != nullptr) {
    
  } else {
    
  }
  territorystateprovincecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), territorystateprovincecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.TerritoryStateProvinceCode)
}
inline std::string* EntityField::unsafe_arena_release_territorystateprovincecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.TerritoryStateProvinceCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return territorystateprovincecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_territorystateprovincecode(
    std::string* territorystateprovincecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (territorystateprovincecode != nullptr) {
    
  } else {
    
  }
  territorystateprovincecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      territorystateprovincecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.TerritoryStateProvinceCode)
}

// string CountryCode = 9;
inline void EntityField::clear_countrycode() {
  countrycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::countrycode() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.CountryCode)
  return _internal_countrycode();
}
inline void EntityField::set_countrycode(const std::string& value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.CountryCode)
}
inline std::string* EntityField::mutable_countrycode() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.CountryCode)
  return _internal_mutable_countrycode();
}
inline const std::string& EntityField::_internal_countrycode() const {
  return countrycode_.Get();
}
inline void EntityField::_internal_set_countrycode(const std::string& value) {
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_countrycode(std::string&& value) {
  
  countrycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.CountryCode)
}
inline void EntityField::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.CountryCode)
}
inline void EntityField::set_countrycode(const char* value,
    size_t size) {
  
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.CountryCode)
}
inline std::string* EntityField::_internal_mutable_countrycode() {
  
  return countrycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_countrycode() {
  // @@protoc_insertion_point(field_release:messages.EntityField.CountryCode)
  return countrycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.CountryCode)
}
inline std::string* EntityField::unsafe_arena_release_countrycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.CountryCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return countrycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_countrycode(
    std::string* countrycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (countrycode != nullptr) {
    
  } else {
    
  }
  countrycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      countrycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.CountryCode)
}

// string PostalZIPCode = 10;
inline void EntityField::clear_postalzipcode() {
  postalzipcode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::postalzipcode() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.PostalZIPCode)
  return _internal_postalzipcode();
}
inline void EntityField::set_postalzipcode(const std::string& value) {
  _internal_set_postalzipcode(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.PostalZIPCode)
}
inline std::string* EntityField::mutable_postalzipcode() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.PostalZIPCode)
  return _internal_mutable_postalzipcode();
}
inline const std::string& EntityField::_internal_postalzipcode() const {
  return postalzipcode_.Get();
}
inline void EntityField::_internal_set_postalzipcode(const std::string& value) {
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_postalzipcode(std::string&& value) {
  
  postalzipcode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.PostalZIPCode)
}
inline void EntityField::set_postalzipcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.PostalZIPCode)
}
inline void EntityField::set_postalzipcode(const char* value,
    size_t size) {
  
  postalzipcode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.PostalZIPCode)
}
inline std::string* EntityField::_internal_mutable_postalzipcode() {
  
  return postalzipcode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_postalzipcode() {
  // @@protoc_insertion_point(field_release:messages.EntityField.PostalZIPCode)
  return postalzipcode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_postalzipcode(std::string* postalzipcode) {
  if (postalzipcode != nullptr) {
    
  } else {
    
  }
  postalzipcode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postalzipcode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.PostalZIPCode)
}
inline std::string* EntityField::unsafe_arena_release_postalzipcode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.PostalZIPCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return postalzipcode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_postalzipcode(
    std::string* postalzipcode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (postalzipcode != nullptr) {
    
  } else {
    
  }
  postalzipcode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      postalzipcode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.PostalZIPCode)
}

// string EmailAddress = 11;
inline void EntityField::clear_emailaddress() {
  emailaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::emailaddress() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.EmailAddress)
  return _internal_emailaddress();
}
inline void EntityField::set_emailaddress(const std::string& value) {
  _internal_set_emailaddress(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.EmailAddress)
}
inline std::string* EntityField::mutable_emailaddress() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.EmailAddress)
  return _internal_mutable_emailaddress();
}
inline const std::string& EntityField::_internal_emailaddress() const {
  return emailaddress_.Get();
}
inline void EntityField::_internal_set_emailaddress(const std::string& value) {
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_emailaddress(std::string&& value) {
  
  emailaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.EmailAddress)
}
inline void EntityField::set_emailaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.EmailAddress)
}
inline void EntityField::set_emailaddress(const char* value,
    size_t size) {
  
  emailaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.EmailAddress)
}
inline std::string* EntityField::_internal_mutable_emailaddress() {
  
  return emailaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_emailaddress() {
  // @@protoc_insertion_point(field_release:messages.EntityField.EmailAddress)
  return emailaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_emailaddress(std::string* emailaddress) {
  if (emailaddress != nullptr) {
    
  } else {
    
  }
  emailaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), emailaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.EmailAddress)
}
inline std::string* EntityField::unsafe_arena_release_emailaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.EmailAddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return emailaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_emailaddress(
    std::string* emailaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (emailaddress != nullptr) {
    
  } else {
    
  }
  emailaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      emailaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.EmailAddress)
}

// string PhoneNumber = 12;
inline void EntityField::clear_phonenumber() {
  phonenumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::phonenumber() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.PhoneNumber)
  return _internal_phonenumber();
}
inline void EntityField::set_phonenumber(const std::string& value) {
  _internal_set_phonenumber(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.PhoneNumber)
}
inline std::string* EntityField::mutable_phonenumber() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.PhoneNumber)
  return _internal_mutable_phonenumber();
}
inline const std::string& EntityField::_internal_phonenumber() const {
  return phonenumber_.Get();
}
inline void EntityField::_internal_set_phonenumber(const std::string& value) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_phonenumber(std::string&& value) {
  
  phonenumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.PhoneNumber)
}
inline void EntityField::set_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.PhoneNumber)
}
inline void EntityField::set_phonenumber(const char* value,
    size_t size) {
  
  phonenumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.PhoneNumber)
}
inline std::string* EntityField::_internal_mutable_phonenumber() {
  
  return phonenumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_phonenumber() {
  // @@protoc_insertion_point(field_release:messages.EntityField.PhoneNumber)
  return phonenumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_phonenumber(std::string* phonenumber) {
  if (phonenumber != nullptr) {
    
  } else {
    
  }
  phonenumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phonenumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.PhoneNumber)
}
inline std::string* EntityField::unsafe_arena_release_phonenumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.PhoneNumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phonenumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_phonenumber(
    std::string* phonenumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phonenumber != nullptr) {
    
  } else {
    
  }
  phonenumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phonenumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.PhoneNumber)
}

// repeated .messages.AdministratorField Administration = 13;
inline int EntityField::_internal_administration_size() const {
  return administration_.size();
}
inline int EntityField::administration_size() const {
  return _internal_administration_size();
}
inline void EntityField::clear_administration() {
  administration_.Clear();
}
inline ::messages::AdministratorField* EntityField::mutable_administration(int index) {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.Administration)
  return administration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::AdministratorField >*
EntityField::mutable_administration() {
  // @@protoc_insertion_point(field_mutable_list:messages.EntityField.Administration)
  return &administration_;
}
inline const ::messages::AdministratorField& EntityField::_internal_administration(int index) const {
  return administration_.Get(index);
}
inline const ::messages::AdministratorField& EntityField::administration(int index) const {
  // @@protoc_insertion_point(field_get:messages.EntityField.Administration)
  return _internal_administration(index);
}
inline ::messages::AdministratorField* EntityField::_internal_add_administration() {
  return administration_.Add();
}
inline ::messages::AdministratorField* EntityField::add_administration() {
  // @@protoc_insertion_point(field_add:messages.EntityField.Administration)
  return _internal_add_administration();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::AdministratorField >&
EntityField::administration() const {
  // @@protoc_insertion_point(field_list:messages.EntityField.Administration)
  return administration_;
}

// repeated .messages.ManagerField Management = 14;
inline int EntityField::_internal_management_size() const {
  return management_.size();
}
inline int EntityField::management_size() const {
  return _internal_management_size();
}
inline void EntityField::clear_management() {
  management_.Clear();
}
inline ::messages::ManagerField* EntityField::mutable_management(int index) {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.Management)
  return management_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ManagerField >*
EntityField::mutable_management() {
  // @@protoc_insertion_point(field_mutable_list:messages.EntityField.Management)
  return &management_;
}
inline const ::messages::ManagerField& EntityField::_internal_management(int index) const {
  return management_.Get(index);
}
inline const ::messages::ManagerField& EntityField::management(int index) const {
  // @@protoc_insertion_point(field_get:messages.EntityField.Management)
  return _internal_management(index);
}
inline ::messages::ManagerField* EntityField::_internal_add_management() {
  return management_.Add();
}
inline ::messages::ManagerField* EntityField::add_management() {
  // @@protoc_insertion_point(field_add:messages.EntityField.Management)
  return _internal_add_management();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::messages::ManagerField >&
EntityField::management() const {
  // @@protoc_insertion_point(field_list:messages.EntityField.Management)
  return management_;
}

// string DomainName = 15;
inline void EntityField::clear_domainname() {
  domainname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::domainname() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.DomainName)
  return _internal_domainname();
}
inline void EntityField::set_domainname(const std::string& value) {
  _internal_set_domainname(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.DomainName)
}
inline std::string* EntityField::mutable_domainname() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.DomainName)
  return _internal_mutable_domainname();
}
inline const std::string& EntityField::_internal_domainname() const {
  return domainname_.Get();
}
inline void EntityField::_internal_set_domainname(const std::string& value) {
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_domainname(std::string&& value) {
  
  domainname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.DomainName)
}
inline void EntityField::set_domainname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.DomainName)
}
inline void EntityField::set_domainname(const char* value,
    size_t size) {
  
  domainname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.DomainName)
}
inline std::string* EntityField::_internal_mutable_domainname() {
  
  return domainname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_domainname() {
  // @@protoc_insertion_point(field_release:messages.EntityField.DomainName)
  return domainname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_domainname(std::string* domainname) {
  if (domainname != nullptr) {
    
  } else {
    
  }
  domainname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domainname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.DomainName)
}
inline std::string* EntityField::unsafe_arena_release_domainname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.DomainName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domainname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_domainname(
    std::string* domainname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domainname != nullptr) {
    
  } else {
    
  }
  domainname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domainname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.DomainName)
}

// string PaymailHandle = 17;
inline void EntityField::clear_paymailhandle() {
  paymailhandle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EntityField::paymailhandle() const {
  // @@protoc_insertion_point(field_get:messages.EntityField.PaymailHandle)
  return _internal_paymailhandle();
}
inline void EntityField::set_paymailhandle(const std::string& value) {
  _internal_set_paymailhandle(value);
  // @@protoc_insertion_point(field_set:messages.EntityField.PaymailHandle)
}
inline std::string* EntityField::mutable_paymailhandle() {
  // @@protoc_insertion_point(field_mutable:messages.EntityField.PaymailHandle)
  return _internal_mutable_paymailhandle();
}
inline const std::string& EntityField::_internal_paymailhandle() const {
  return paymailhandle_.Get();
}
inline void EntityField::_internal_set_paymailhandle(const std::string& value) {
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EntityField::set_paymailhandle(std::string&& value) {
  
  paymailhandle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.EntityField.PaymailHandle)
}
inline void EntityField::set_paymailhandle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.EntityField.PaymailHandle)
}
inline void EntityField::set_paymailhandle(const char* value,
    size_t size) {
  
  paymailhandle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.EntityField.PaymailHandle)
}
inline std::string* EntityField::_internal_mutable_paymailhandle() {
  
  return paymailhandle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EntityField::release_paymailhandle() {
  // @@protoc_insertion_point(field_release:messages.EntityField.PaymailHandle)
  return paymailhandle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EntityField::set_allocated_paymailhandle(std::string* paymailhandle) {
  if (paymailhandle != nullptr) {
    
  } else {
    
  }
  paymailhandle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymailhandle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.EntityField.PaymailHandle)
}
inline std::string* EntityField::unsafe_arena_release_paymailhandle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.EntityField.PaymailHandle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return paymailhandle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntityField::unsafe_arena_set_allocated_paymailhandle(
    std::string* paymailhandle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paymailhandle != nullptr) {
    
  } else {
    
  }
  paymailhandle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paymailhandle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.EntityField.PaymailHandle)
}

// -------------------------------------------------------------------

// IdentityOracleProofField

// bytes UserID = 1;
inline void IdentityOracleProofField::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IdentityOracleProofField::userid() const {
  // @@protoc_insertion_point(field_get:messages.IdentityOracleProofField.UserID)
  return _internal_userid();
}
inline void IdentityOracleProofField::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:messages.IdentityOracleProofField.UserID)
}
inline std::string* IdentityOracleProofField::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:messages.IdentityOracleProofField.UserID)
  return _internal_mutable_userid();
}
inline const std::string& IdentityOracleProofField::_internal_userid() const {
  return userid_.Get();
}
inline void IdentityOracleProofField::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IdentityOracleProofField::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.IdentityOracleProofField.UserID)
}
inline void IdentityOracleProofField::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.IdentityOracleProofField.UserID)
}
inline void IdentityOracleProofField::set_userid(const void* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.IdentityOracleProofField.UserID)
}
inline std::string* IdentityOracleProofField::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IdentityOracleProofField::release_userid() {
  // @@protoc_insertion_point(field_release:messages.IdentityOracleProofField.UserID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IdentityOracleProofField::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.IdentityOracleProofField.UserID)
}
inline std::string* IdentityOracleProofField::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.IdentityOracleProofField.UserID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IdentityOracleProofField::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.IdentityOracleProofField.UserID)
}

// .messages.EntityField Entity = 2;
inline bool IdentityOracleProofField::_internal_has_entity() const {
  return this != internal_default_instance() && entity_ != nullptr;
}
inline bool IdentityOracleProofField::has_entity() const {
  return _internal_has_entity();
}
inline void IdentityOracleProofField::clear_entity() {
  if (GetArena() == nullptr && entity_ != nullptr) {
    delete entity_;
  }
  entity_ = nullptr;
}
inline const ::messages::EntityField& IdentityOracleProofField::_internal_entity() const {
  const ::messages::EntityField* p = entity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::EntityField*>(
      &::messages::_EntityField_default_instance_);
}
inline const ::messages::EntityField& IdentityOracleProofField::entity() const {
  // @@protoc_insertion_point(field_get:messages.IdentityOracleProofField.Entity)
  return _internal_entity();
}
inline void IdentityOracleProofField::unsafe_arena_set_allocated_entity(
    ::messages::EntityField* entity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_);
  }
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.IdentityOracleProofField.Entity)
}
inline ::messages::EntityField* IdentityOracleProofField::release_entity() {
  auto temp = unsafe_arena_release_entity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::EntityField* IdentityOracleProofField::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:messages.IdentityOracleProofField.Entity)
  
  ::messages::EntityField* temp = entity_;
  entity_ = nullptr;
  return temp;
}
inline ::messages::EntityField* IdentityOracleProofField::_internal_mutable_entity() {
  
  if (entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::EntityField>(GetArena());
    entity_ = p;
  }
  return entity_;
}
inline ::messages::EntityField* IdentityOracleProofField::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:messages.IdentityOracleProofField.Entity)
  return _internal_mutable_entity();
}
inline void IdentityOracleProofField::set_allocated_entity(::messages::EntityField* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:messages.IdentityOracleProofField.Entity)
}

// .messages.OracleSignatureField OracleSignature = 3;
inline bool IdentityOracleProofField::_internal_has_oraclesignature() const {
  return this != internal_default_instance() && oraclesignature_ != nullptr;
}
inline bool IdentityOracleProofField::has_oraclesignature() const {
  return _internal_has_oraclesignature();
}
inline void IdentityOracleProofField::clear_oraclesignature() {
  if (GetArena() == nullptr && oraclesignature_ != nullptr) {
    delete oraclesignature_;
  }
  oraclesignature_ = nullptr;
}
inline const ::messages::OracleSignatureField& IdentityOracleProofField::_internal_oraclesignature() const {
  const ::messages::OracleSignatureField* p = oraclesignature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::OracleSignatureField*>(
      &::messages::_OracleSignatureField_default_instance_);
}
inline const ::messages::OracleSignatureField& IdentityOracleProofField::oraclesignature() const {
  // @@protoc_insertion_point(field_get:messages.IdentityOracleProofField.OracleSignature)
  return _internal_oraclesignature();
}
inline void IdentityOracleProofField::unsafe_arena_set_allocated_oraclesignature(
    ::messages::OracleSignatureField* oraclesignature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oraclesignature_);
  }
  oraclesignature_ = oraclesignature;
  if (oraclesignature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.IdentityOracleProofField.OracleSignature)
}
inline ::messages::OracleSignatureField* IdentityOracleProofField::release_oraclesignature() {
  auto temp = unsafe_arena_release_oraclesignature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::OracleSignatureField* IdentityOracleProofField::unsafe_arena_release_oraclesignature() {
  // @@protoc_insertion_point(field_release:messages.IdentityOracleProofField.OracleSignature)
  
  ::messages::OracleSignatureField* temp = oraclesignature_;
  oraclesignature_ = nullptr;
  return temp;
}
inline ::messages::OracleSignatureField* IdentityOracleProofField::_internal_mutable_oraclesignature() {
  
  if (oraclesignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::OracleSignatureField>(GetArena());
    oraclesignature_ = p;
  }
  return oraclesignature_;
}
inline ::messages::OracleSignatureField* IdentityOracleProofField::mutable_oraclesignature() {
  // @@protoc_insertion_point(field_mutable:messages.IdentityOracleProofField.OracleSignature)
  return _internal_mutable_oraclesignature();
}
inline void IdentityOracleProofField::set_allocated_oraclesignature(::messages::OracleSignatureField* oraclesignature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oraclesignature_;
  }
  if (oraclesignature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oraclesignature);
    if (message_arena != submessage_arena) {
      oraclesignature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oraclesignature, submessage_arena);
    }
    
  } else {
    
  }
  oraclesignature_ = oraclesignature;
  // @@protoc_insertion_point(field_set_allocated:messages.IdentityOracleProofField.OracleSignature)
}

// -------------------------------------------------------------------

// ManagerField

// uint32 Type = 1;
inline void ManagerField::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ManagerField::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ManagerField::type() const {
  // @@protoc_insertion_point(field_get:messages.ManagerField.Type)
  return _internal_type();
}
inline void ManagerField::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void ManagerField::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:messages.ManagerField.Type)
}

// string Name = 2;
inline void ManagerField::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ManagerField::name() const {
  // @@protoc_insertion_point(field_get:messages.ManagerField.Name)
  return _internal_name();
}
inline void ManagerField::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:messages.ManagerField.Name)
}
inline std::string* ManagerField::mutable_name() {
  // @@protoc_insertion_point(field_mutable:messages.ManagerField.Name)
  return _internal_mutable_name();
}
inline const std::string& ManagerField::_internal_name() const {
  return name_.Get();
}
inline void ManagerField::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ManagerField::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.ManagerField.Name)
}
inline void ManagerField::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.ManagerField.Name)
}
inline void ManagerField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.ManagerField.Name)
}
inline std::string* ManagerField::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ManagerField::release_name() {
  // @@protoc_insertion_point(field_release:messages.ManagerField.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ManagerField::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.ManagerField.Name)
}
inline std::string* ManagerField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.ManagerField.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ManagerField::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.ManagerField.Name)
}

// -------------------------------------------------------------------

// OracleSignatureField

// string OracleURL = 1;
inline void OracleSignatureField::clear_oracleurl() {
  oracleurl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OracleSignatureField::oracleurl() const {
  // @@protoc_insertion_point(field_get:messages.OracleSignatureField.OracleURL)
  return _internal_oracleurl();
}
inline void OracleSignatureField::set_oracleurl(const std::string& value) {
  _internal_set_oracleurl(value);
  // @@protoc_insertion_point(field_set:messages.OracleSignatureField.OracleURL)
}
inline std::string* OracleSignatureField::mutable_oracleurl() {
  // @@protoc_insertion_point(field_mutable:messages.OracleSignatureField.OracleURL)
  return _internal_mutable_oracleurl();
}
inline const std::string& OracleSignatureField::_internal_oracleurl() const {
  return oracleurl_.Get();
}
inline void OracleSignatureField::_internal_set_oracleurl(const std::string& value) {
  
  oracleurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OracleSignatureField::set_oracleurl(std::string&& value) {
  
  oracleurl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.OracleSignatureField.OracleURL)
}
inline void OracleSignatureField::set_oracleurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  oracleurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.OracleSignatureField.OracleURL)
}
inline void OracleSignatureField::set_oracleurl(const char* value,
    size_t size) {
  
  oracleurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.OracleSignatureField.OracleURL)
}
inline std::string* OracleSignatureField::_internal_mutable_oracleurl() {
  
  return oracleurl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OracleSignatureField::release_oracleurl() {
  // @@protoc_insertion_point(field_release:messages.OracleSignatureField.OracleURL)
  return oracleurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleSignatureField::set_allocated_oracleurl(std::string* oracleurl) {
  if (oracleurl != nullptr) {
    
  } else {
    
  }
  oracleurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oracleurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.OracleSignatureField.OracleURL)
}
inline std::string* OracleSignatureField::unsafe_arena_release_oracleurl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.OracleSignatureField.OracleURL)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return oracleurl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OracleSignatureField::unsafe_arena_set_allocated_oracleurl(
    std::string* oracleurl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (oracleurl != nullptr) {
    
  } else {
    
  }
  oracleurl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      oracleurl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OracleSignatureField.OracleURL)
}

// uint32 BlockHeight = 2;
inline void OracleSignatureField::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleSignatureField::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleSignatureField::blockheight() const {
  // @@protoc_insertion_point(field_get:messages.OracleSignatureField.BlockHeight)
  return _internal_blockheight();
}
inline void OracleSignatureField::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void OracleSignatureField::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:messages.OracleSignatureField.BlockHeight)
}

// .messages.PeriodField ValidityPeriod = 3;
inline bool OracleSignatureField::_internal_has_validityperiod() const {
  return this != internal_default_instance() && validityperiod_ != nullptr;
}
inline bool OracleSignatureField::has_validityperiod() const {
  return _internal_has_validityperiod();
}
inline void OracleSignatureField::clear_validityperiod() {
  if (GetArena() == nullptr && validityperiod_ != nullptr) {
    delete validityperiod_;
  }
  validityperiod_ = nullptr;
}
inline const ::messages::PeriodField& OracleSignatureField::_internal_validityperiod() const {
  const ::messages::PeriodField* p = validityperiod_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::PeriodField*>(
      &::messages::_PeriodField_default_instance_);
}
inline const ::messages::PeriodField& OracleSignatureField::validityperiod() const {
  // @@protoc_insertion_point(field_get:messages.OracleSignatureField.ValidityPeriod)
  return _internal_validityperiod();
}
inline void OracleSignatureField::unsafe_arena_set_allocated_validityperiod(
    ::messages::PeriodField* validityperiod) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validityperiod_);
  }
  validityperiod_ = validityperiod;
  if (validityperiod) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OracleSignatureField.ValidityPeriod)
}
inline ::messages::PeriodField* OracleSignatureField::release_validityperiod() {
  auto temp = unsafe_arena_release_validityperiod();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::PeriodField* OracleSignatureField::unsafe_arena_release_validityperiod() {
  // @@protoc_insertion_point(field_release:messages.OracleSignatureField.ValidityPeriod)
  
  ::messages::PeriodField* temp = validityperiod_;
  validityperiod_ = nullptr;
  return temp;
}
inline ::messages::PeriodField* OracleSignatureField::_internal_mutable_validityperiod() {
  
  if (validityperiod_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::PeriodField>(GetArena());
    validityperiod_ = p;
  }
  return validityperiod_;
}
inline ::messages::PeriodField* OracleSignatureField::mutable_validityperiod() {
  // @@protoc_insertion_point(field_mutable:messages.OracleSignatureField.ValidityPeriod)
  return _internal_mutable_validityperiod();
}
inline void OracleSignatureField::set_allocated_validityperiod(::messages::PeriodField* validityperiod) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validityperiod_;
  }
  if (validityperiod) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validityperiod);
    if (message_arena != submessage_arena) {
      validityperiod = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validityperiod, submessage_arena);
    }
    
  } else {
    
  }
  validityperiod_ = validityperiod;
  // @@protoc_insertion_point(field_set_allocated:messages.OracleSignatureField.ValidityPeriod)
}

// uint32 SignatureAlgorithm = 4;
inline void OracleSignatureField::clear_signaturealgorithm() {
  signaturealgorithm_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleSignatureField::_internal_signaturealgorithm() const {
  return signaturealgorithm_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OracleSignatureField::signaturealgorithm() const {
  // @@protoc_insertion_point(field_get:messages.OracleSignatureField.SignatureAlgorithm)
  return _internal_signaturealgorithm();
}
inline void OracleSignatureField::_internal_set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  signaturealgorithm_ = value;
}
inline void OracleSignatureField::set_signaturealgorithm(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_signaturealgorithm(value);
  // @@protoc_insertion_point(field_set:messages.OracleSignatureField.SignatureAlgorithm)
}

// bytes Signature = 5;
inline void OracleSignatureField::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OracleSignatureField::signature() const {
  // @@protoc_insertion_point(field_get:messages.OracleSignatureField.Signature)
  return _internal_signature();
}
inline void OracleSignatureField::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:messages.OracleSignatureField.Signature)
}
inline std::string* OracleSignatureField::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:messages.OracleSignatureField.Signature)
  return _internal_mutable_signature();
}
inline const std::string& OracleSignatureField::_internal_signature() const {
  return signature_.Get();
}
inline void OracleSignatureField::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OracleSignatureField::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.OracleSignatureField.Signature)
}
inline void OracleSignatureField::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.OracleSignatureField.Signature)
}
inline void OracleSignatureField::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.OracleSignatureField.Signature)
}
inline std::string* OracleSignatureField::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OracleSignatureField::release_signature() {
  // @@protoc_insertion_point(field_release:messages.OracleSignatureField.Signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OracleSignatureField::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.OracleSignatureField.Signature)
}
inline std::string* OracleSignatureField::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.OracleSignatureField.Signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OracleSignatureField::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OracleSignatureField.Signature)
}

// -------------------------------------------------------------------

// OutpointField

// bytes TxId = 1;
inline void OutpointField::clear_txid() {
  txid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutpointField::txid() const {
  // @@protoc_insertion_point(field_get:messages.OutpointField.TxId)
  return _internal_txid();
}
inline void OutpointField::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:messages.OutpointField.TxId)
}
inline std::string* OutpointField::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:messages.OutpointField.TxId)
  return _internal_mutable_txid();
}
inline const std::string& OutpointField::_internal_txid() const {
  return txid_.Get();
}
inline void OutpointField::_internal_set_txid(const std::string& value) {
  
  txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutpointField::set_txid(std::string&& value) {
  
  txid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.OutpointField.TxId)
}
inline void OutpointField::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.OutpointField.TxId)
}
inline void OutpointField::set_txid(const void* value,
    size_t size) {
  
  txid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.OutpointField.TxId)
}
inline std::string* OutpointField::_internal_mutable_txid() {
  
  return txid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutpointField::release_txid() {
  // @@protoc_insertion_point(field_release:messages.OutpointField.TxId)
  return txid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutpointField::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.OutpointField.TxId)
}
inline std::string* OutpointField::unsafe_arena_release_txid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.OutpointField.TxId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return txid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutpointField::unsafe_arena_set_allocated_txid(
    std::string* txid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      txid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OutpointField.TxId)
}

// uint32 OutputIndex = 2;
inline void OutpointField::clear_outputindex() {
  outputindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutpointField::_internal_outputindex() const {
  return outputindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutpointField::outputindex() const {
  // @@protoc_insertion_point(field_get:messages.OutpointField.OutputIndex)
  return _internal_outputindex();
}
inline void OutpointField::_internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outputindex_ = value;
}
inline void OutpointField::set_outputindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outputindex(value);
  // @@protoc_insertion_point(field_set:messages.OutpointField.OutputIndex)
}

// -------------------------------------------------------------------

// OutputTagField

// string Tag = 1;
inline void OutputTagField::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OutputTagField::tag() const {
  // @@protoc_insertion_point(field_get:messages.OutputTagField.Tag)
  return _internal_tag();
}
inline void OutputTagField::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:messages.OutputTagField.Tag)
}
inline std::string* OutputTagField::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:messages.OutputTagField.Tag)
  return _internal_mutable_tag();
}
inline const std::string& OutputTagField::_internal_tag() const {
  return tag_.Get();
}
inline void OutputTagField::_internal_set_tag(const std::string& value) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputTagField::set_tag(std::string&& value) {
  
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.OutputTagField.Tag)
}
inline void OutputTagField::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.OutputTagField.Tag)
}
inline void OutputTagField::set_tag(const char* value,
    size_t size) {
  
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.OutputTagField.Tag)
}
inline std::string* OutputTagField::_internal_mutable_tag() {
  
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputTagField::release_tag() {
  // @@protoc_insertion_point(field_release:messages.OutputTagField.Tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputTagField::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.OutputTagField.Tag)
}
inline std::string* OutputTagField::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.OutputTagField.Tag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OutputTagField::unsafe_arena_set_allocated_tag(
    std::string* tag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.OutputTagField.Tag)
}

// -------------------------------------------------------------------

// PaymailProofField

// bytes UserID = 1;
inline void PaymailProofField::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PaymailProofField::userid() const {
  // @@protoc_insertion_point(field_get:messages.PaymailProofField.UserID)
  return _internal_userid();
}
inline void PaymailProofField::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:messages.PaymailProofField.UserID)
}
inline std::string* PaymailProofField::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:messages.PaymailProofField.UserID)
  return _internal_mutable_userid();
}
inline const std::string& PaymailProofField::_internal_userid() const {
  return userid_.Get();
}
inline void PaymailProofField::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PaymailProofField::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.PaymailProofField.UserID)
}
inline void PaymailProofField::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.PaymailProofField.UserID)
}
inline void PaymailProofField::set_userid(const void* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.PaymailProofField.UserID)
}
inline std::string* PaymailProofField::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PaymailProofField::release_userid() {
  // @@protoc_insertion_point(field_release:messages.PaymailProofField.UserID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymailProofField::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.PaymailProofField.UserID)
}
inline std::string* PaymailProofField::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.PaymailProofField.UserID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PaymailProofField::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PaymailProofField.UserID)
}

// string Handle = 2;
inline void PaymailProofField::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PaymailProofField::handle() const {
  // @@protoc_insertion_point(field_get:messages.PaymailProofField.Handle)
  return _internal_handle();
}
inline void PaymailProofField::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:messages.PaymailProofField.Handle)
}
inline std::string* PaymailProofField::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:messages.PaymailProofField.Handle)
  return _internal_mutable_handle();
}
inline const std::string& PaymailProofField::_internal_handle() const {
  return handle_.Get();
}
inline void PaymailProofField::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PaymailProofField::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.PaymailProofField.Handle)
}
inline void PaymailProofField::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.PaymailProofField.Handle)
}
inline void PaymailProofField::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.PaymailProofField.Handle)
}
inline std::string* PaymailProofField::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PaymailProofField::release_handle() {
  // @@protoc_insertion_point(field_release:messages.PaymailProofField.Handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymailProofField::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.PaymailProofField.Handle)
}
inline std::string* PaymailProofField::unsafe_arena_release_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.PaymailProofField.Handle)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return handle_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PaymailProofField::unsafe_arena_set_allocated_handle(
    std::string* handle) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      handle, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PaymailProofField.Handle)
}

// .messages.OracleSignatureField OracleSignature = 3;
inline bool PaymailProofField::_internal_has_oraclesignature() const {
  return this != internal_default_instance() && oraclesignature_ != nullptr;
}
inline bool PaymailProofField::has_oraclesignature() const {
  return _internal_has_oraclesignature();
}
inline void PaymailProofField::clear_oraclesignature() {
  if (GetArena() == nullptr && oraclesignature_ != nullptr) {
    delete oraclesignature_;
  }
  oraclesignature_ = nullptr;
}
inline const ::messages::OracleSignatureField& PaymailProofField::_internal_oraclesignature() const {
  const ::messages::OracleSignatureField* p = oraclesignature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::messages::OracleSignatureField*>(
      &::messages::_OracleSignatureField_default_instance_);
}
inline const ::messages::OracleSignatureField& PaymailProofField::oraclesignature() const {
  // @@protoc_insertion_point(field_get:messages.PaymailProofField.OracleSignature)
  return _internal_oraclesignature();
}
inline void PaymailProofField::unsafe_arena_set_allocated_oraclesignature(
    ::messages::OracleSignatureField* oraclesignature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oraclesignature_);
  }
  oraclesignature_ = oraclesignature;
  if (oraclesignature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.PaymailProofField.OracleSignature)
}
inline ::messages::OracleSignatureField* PaymailProofField::release_oraclesignature() {
  auto temp = unsafe_arena_release_oraclesignature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::messages::OracleSignatureField* PaymailProofField::unsafe_arena_release_oraclesignature() {
  // @@protoc_insertion_point(field_release:messages.PaymailProofField.OracleSignature)
  
  ::messages::OracleSignatureField* temp = oraclesignature_;
  oraclesignature_ = nullptr;
  return temp;
}
inline ::messages::OracleSignatureField* PaymailProofField::_internal_mutable_oraclesignature() {
  
  if (oraclesignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::messages::OracleSignatureField>(GetArena());
    oraclesignature_ = p;
  }
  return oraclesignature_;
}
inline ::messages::OracleSignatureField* PaymailProofField::mutable_oraclesignature() {
  // @@protoc_insertion_point(field_mutable:messages.PaymailProofField.OracleSignature)
  return _internal_mutable_oraclesignature();
}
inline void PaymailProofField::set_allocated_oraclesignature(::messages::OracleSignatureField* oraclesignature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete oraclesignature_;
  }
  if (oraclesignature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oraclesignature);
    if (message_arena != submessage_arena) {
      oraclesignature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oraclesignature, submessage_arena);
    }
    
  } else {
    
  }
  oraclesignature_ = oraclesignature;
  // @@protoc_insertion_point(field_set_allocated:messages.PaymailProofField.OracleSignature)
}

// -------------------------------------------------------------------

// PeriodField

// uint64 Begin = 1;
inline void PeriodField::clear_begin() {
  begin_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeriodField::_internal_begin() const {
  return begin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeriodField::begin() const {
  // @@protoc_insertion_point(field_get:messages.PeriodField.Begin)
  return _internal_begin();
}
inline void PeriodField::_internal_set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_ = value;
}
inline void PeriodField::set_begin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin(value);
  // @@protoc_insertion_point(field_set:messages.PeriodField.Begin)
}

// uint64 End = 2;
inline void PeriodField::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeriodField::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PeriodField::end() const {
  // @@protoc_insertion_point(field_get:messages.PeriodField.End)
  return _internal_end();
}
inline void PeriodField::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_ = value;
}
inline void PeriodField::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:messages.PeriodField.End)
}

// -------------------------------------------------------------------

// TargetAddressField

// bytes Address = 1;
inline void TargetAddressField::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TargetAddressField::address() const {
  // @@protoc_insertion_point(field_get:messages.TargetAddressField.Address)
  return _internal_address();
}
inline void TargetAddressField::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:messages.TargetAddressField.Address)
}
inline std::string* TargetAddressField::mutable_address() {
  // @@protoc_insertion_point(field_mutable:messages.TargetAddressField.Address)
  return _internal_mutable_address();
}
inline const std::string& TargetAddressField::_internal_address() const {
  return address_.Get();
}
inline void TargetAddressField::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TargetAddressField::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:messages.TargetAddressField.Address)
}
inline void TargetAddressField::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:messages.TargetAddressField.Address)
}
inline void TargetAddressField::set_address(const void* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:messages.TargetAddressField.Address)
}
inline std::string* TargetAddressField::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TargetAddressField::release_address() {
  // @@protoc_insertion_point(field_release:messages.TargetAddressField.Address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TargetAddressField::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:messages.TargetAddressField.Address)
}
inline std::string* TargetAddressField::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:messages.TargetAddressField.Address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TargetAddressField::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    
  } else {
    
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messages.TargetAddressField.Address)
}

// uint64 Quantity = 2;
inline void TargetAddressField::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TargetAddressField::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TargetAddressField::quantity() const {
  // @@protoc_insertion_point(field_get:messages.TargetAddressField.Quantity)
  return _internal_quantity();
}
inline void TargetAddressField::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void TargetAddressField::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:messages.TargetAddressField.Quantity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
