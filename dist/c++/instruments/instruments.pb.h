// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruments.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_instruments_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_instruments_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instruments_2eproto;
namespace instruments {
class AgeRestrictionField;
class AgeRestrictionFieldDefaultTypeInternal;
extern AgeRestrictionFieldDefaultTypeInternal _AgeRestrictionField_default_instance_;
class BondFixedRate;
class BondFixedRateDefaultTypeInternal;
extern BondFixedRateDefaultTypeInternal _BondFixedRate_default_instance_;
class CasinoChip;
class CasinoChipDefaultTypeInternal;
extern CasinoChipDefaultTypeInternal _CasinoChip_default_instance_;
class CreditNote;
class CreditNoteDefaultTypeInternal;
extern CreditNoteDefaultTypeInternal _CreditNote_default_instance_;
class Currency;
class CurrencyDefaultTypeInternal;
extern CurrencyDefaultTypeInternal _Currency_default_instance_;
class CurrencyValueField;
class CurrencyValueFieldDefaultTypeInternal;
extern CurrencyValueFieldDefaultTypeInternal _CurrencyValueField_default_instance_;
class DeprecatedLoyaltyPoints;
class DeprecatedLoyaltyPointsDefaultTypeInternal;
extern DeprecatedLoyaltyPointsDefaultTypeInternal _DeprecatedLoyaltyPoints_default_instance_;
class DiscountCoupon;
class DiscountCouponDefaultTypeInternal;
extern DiscountCouponDefaultTypeInternal _DiscountCoupon_default_instance_;
class FixedCurrencyValueField;
class FixedCurrencyValueFieldDefaultTypeInternal;
extern FixedCurrencyValueFieldDefaultTypeInternal _FixedCurrencyValueField_default_instance_;
class InformationServiceLicense;
class InformationServiceLicenseDefaultTypeInternal;
extern InformationServiceLicenseDefaultTypeInternal _InformationServiceLicense_default_instance_;
class Membership;
class MembershipDefaultTypeInternal;
extern MembershipDefaultTypeInternal _Membership_default_instance_;
class RateField;
class RateFieldDefaultTypeInternal;
extern RateFieldDefaultTypeInternal _RateField_default_instance_;
class RewardPoint;
class RewardPointDefaultTypeInternal;
extern RewardPointDefaultTypeInternal _RewardPoint_default_instance_;
class ShareCommon;
class ShareCommonDefaultTypeInternal;
extern ShareCommonDefaultTypeInternal _ShareCommon_default_instance_;
class TicketAdmission;
class TicketAdmissionDefaultTypeInternal;
extern TicketAdmissionDefaultTypeInternal _TicketAdmission_default_instance_;
}  // namespace instruments
PROTOBUF_NAMESPACE_OPEN
template<> ::instruments::AgeRestrictionField* Arena::CreateMaybeMessage<::instruments::AgeRestrictionField>(Arena*);
template<> ::instruments::BondFixedRate* Arena::CreateMaybeMessage<::instruments::BondFixedRate>(Arena*);
template<> ::instruments::CasinoChip* Arena::CreateMaybeMessage<::instruments::CasinoChip>(Arena*);
template<> ::instruments::CreditNote* Arena::CreateMaybeMessage<::instruments::CreditNote>(Arena*);
template<> ::instruments::Currency* Arena::CreateMaybeMessage<::instruments::Currency>(Arena*);
template<> ::instruments::CurrencyValueField* Arena::CreateMaybeMessage<::instruments::CurrencyValueField>(Arena*);
template<> ::instruments::DeprecatedLoyaltyPoints* Arena::CreateMaybeMessage<::instruments::DeprecatedLoyaltyPoints>(Arena*);
template<> ::instruments::DiscountCoupon* Arena::CreateMaybeMessage<::instruments::DiscountCoupon>(Arena*);
template<> ::instruments::FixedCurrencyValueField* Arena::CreateMaybeMessage<::instruments::FixedCurrencyValueField>(Arena*);
template<> ::instruments::InformationServiceLicense* Arena::CreateMaybeMessage<::instruments::InformationServiceLicense>(Arena*);
template<> ::instruments::Membership* Arena::CreateMaybeMessage<::instruments::Membership>(Arena*);
template<> ::instruments::RateField* Arena::CreateMaybeMessage<::instruments::RateField>(Arena*);
template<> ::instruments::RewardPoint* Arena::CreateMaybeMessage<::instruments::RewardPoint>(Arena*);
template<> ::instruments::ShareCommon* Arena::CreateMaybeMessage<::instruments::ShareCommon>(Arena*);
template<> ::instruments::TicketAdmission* Arena::CreateMaybeMessage<::instruments::TicketAdmission>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace instruments {

// ===================================================================

class Membership PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.Membership) */ {
 public:
  inline Membership() : Membership(nullptr) {};
  virtual ~Membership();

  Membership(const Membership& from);
  Membership(Membership&& from) noexcept
    : Membership() {
    *this = ::std::move(from);
  }

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }
  inline Membership& operator=(Membership&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Membership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Membership* internal_default_instance() {
    return reinterpret_cast<const Membership*>(
               &_Membership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Membership& a, Membership& b) {
    a.Swap(&b);
  }
  inline void Swap(Membership* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Membership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Membership* New() const final {
    return CreateMaybeMessage<Membership>(nullptr);
  }

  Membership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Membership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Membership& from);
  void MergeFrom(const Membership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Membership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.Membership";
  }
  protected:
  explicit Membership(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 4,
    kMembershipClassFieldNumber = 5,
    kRoleTypeFieldNumber = 6,
    kMembershipTypeFieldNumber = 7,
    kDescriptionFieldNumber = 8,
    kAgeRestrictionFieldNumber = 1,
    kValidFromFieldNumber = 2,
    kExpirationTimestampFieldNumber = 3,
    kTransfersPermittedFieldNumber = 9,
  };
  // string ID = 4;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string MembershipClass = 5;
  void clear_membershipclass();
  const std::string& membershipclass() const;
  void set_membershipclass(const std::string& value);
  void set_membershipclass(std::string&& value);
  void set_membershipclass(const char* value);
  void set_membershipclass(const char* value, size_t size);
  std::string* mutable_membershipclass();
  std::string* release_membershipclass();
  void set_allocated_membershipclass(std::string* membershipclass);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_membershipclass();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_membershipclass(
      std::string* membershipclass);
  private:
  const std::string& _internal_membershipclass() const;
  void _internal_set_membershipclass(const std::string& value);
  std::string* _internal_mutable_membershipclass();
  public:

  // string RoleType = 6;
  void clear_roletype();
  const std::string& roletype() const;
  void set_roletype(const std::string& value);
  void set_roletype(std::string&& value);
  void set_roletype(const char* value);
  void set_roletype(const char* value, size_t size);
  std::string* mutable_roletype();
  std::string* release_roletype();
  void set_allocated_roletype(std::string* roletype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roletype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roletype(
      std::string* roletype);
  private:
  const std::string& _internal_roletype() const;
  void _internal_set_roletype(const std::string& value);
  std::string* _internal_mutable_roletype();
  public:

  // string MembershipType = 7;
  void clear_membershiptype();
  const std::string& membershiptype() const;
  void set_membershiptype(const std::string& value);
  void set_membershiptype(std::string&& value);
  void set_membershiptype(const char* value);
  void set_membershiptype(const char* value, size_t size);
  std::string* mutable_membershiptype();
  std::string* release_membershiptype();
  void set_allocated_membershiptype(std::string* membershiptype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_membershiptype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_membershiptype(
      std::string* membershiptype);
  private:
  const std::string& _internal_membershiptype() const;
  void _internal_set_membershiptype(const std::string& value);
  std::string* _internal_mutable_membershiptype();
  public:

  // string Description = 8;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 1;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 ValidFrom = 2;
  void clear_validfrom();
  ::PROTOBUF_NAMESPACE_ID::uint64 validfrom() const;
  void set_validfrom(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_validfrom() const;
  void _internal_set_validfrom(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ExpirationTimestamp = 3;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 9;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.Membership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membershipclass_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roletype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membershiptype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 validfrom_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class Currency PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.Currency) */ {
 public:
  inline Currency() : Currency(nullptr) {};
  virtual ~Currency();

  Currency(const Currency& from);
  Currency(Currency&& from) noexcept
    : Currency() {
    *this = ::std::move(from);
  }

  inline Currency& operator=(const Currency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Currency& operator=(Currency&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Currency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Currency* internal_default_instance() {
    return reinterpret_cast<const Currency*>(
               &_Currency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Currency& a, Currency& b) {
    a.Swap(&b);
  }
  inline void Swap(Currency* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Currency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Currency* New() const final {
    return CreateMaybeMessage<Currency>(nullptr);
  }

  Currency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Currency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Currency& from);
  void MergeFrom(const Currency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Currency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.Currency";
  }
  protected:
  explicit Currency(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 1,
    kMonetaryAuthorityFieldNumber = 2,
    kPrecisionFieldNumber = 4,
  };
  // string CurrencyCode = 1;
  void clear_currencycode();
  const std::string& currencycode() const;
  void set_currencycode(const std::string& value);
  void set_currencycode(std::string&& value);
  void set_currencycode(const char* value);
  void set_currencycode(const char* value, size_t size);
  std::string* mutable_currencycode();
  std::string* release_currencycode();
  void set_allocated_currencycode(std::string* currencycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currencycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currencycode(
      std::string* currencycode);
  private:
  const std::string& _internal_currencycode() const;
  void _internal_set_currencycode(const std::string& value);
  std::string* _internal_mutable_currencycode();
  public:

  // string MonetaryAuthority = 2;
  void clear_monetaryauthority();
  const std::string& monetaryauthority() const;
  void set_monetaryauthority(const std::string& value);
  void set_monetaryauthority(std::string&& value);
  void set_monetaryauthority(const char* value);
  void set_monetaryauthority(const char* value, size_t size);
  std::string* mutable_monetaryauthority();
  std::string* release_monetaryauthority();
  void set_allocated_monetaryauthority(std::string* monetaryauthority);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_monetaryauthority();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_monetaryauthority(
      std::string* monetaryauthority);
  private:
  const std::string& _internal_monetaryauthority() const;
  void _internal_set_monetaryauthority(const std::string& value);
  std::string* _internal_mutable_monetaryauthority();
  public:

  // uint64 Precision = 4;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint64 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.Currency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencycode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr monetaryauthority_;
  ::PROTOBUF_NAMESPACE_ID::uint64 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class ShareCommon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.ShareCommon) */ {
 public:
  inline ShareCommon() : ShareCommon(nullptr) {};
  virtual ~ShareCommon();

  ShareCommon(const ShareCommon& from);
  ShareCommon(ShareCommon&& from) noexcept
    : ShareCommon() {
    *this = ::std::move(from);
  }

  inline ShareCommon& operator=(const ShareCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareCommon& operator=(ShareCommon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShareCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareCommon* internal_default_instance() {
    return reinterpret_cast<const ShareCommon*>(
               &_ShareCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShareCommon& a, ShareCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareCommon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareCommon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShareCommon* New() const final {
    return CreateMaybeMessage<ShareCommon>(nullptr);
  }

  ShareCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShareCommon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShareCommon& from);
  void MergeFrom(const ShareCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShareCommon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.ShareCommon";
  }
  protected:
  explicit ShareCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickerFieldNumber = 1,
    kISINFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kTransfersPermittedFieldNumber = 4,
  };
  // string Ticker = 1;
  void clear_ticker();
  const std::string& ticker() const;
  void set_ticker(const std::string& value);
  void set_ticker(std::string&& value);
  void set_ticker(const char* value);
  void set_ticker(const char* value, size_t size);
  std::string* mutable_ticker();
  std::string* release_ticker();
  void set_allocated_ticker(std::string* ticker);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ticker();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ticker(
      std::string* ticker);
  private:
  const std::string& _internal_ticker() const;
  void _internal_set_ticker(const std::string& value);
  std::string* _internal_mutable_ticker();
  public:

  // string ISIN = 2;
  void clear_isin();
  const std::string& isin() const;
  void set_isin(const std::string& value);
  void set_isin(std::string&& value);
  void set_isin(const char* value);
  void set_isin(const char* value, size_t size);
  std::string* mutable_isin();
  std::string* release_isin();
  void set_allocated_isin(std::string* isin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isin(
      std::string* isin);
  private:
  const std::string& _internal_isin() const;
  void _internal_set_isin(const std::string& value);
  std::string* _internal_mutable_isin();
  public:

  // string Description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool TransfersPermitted = 4;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.ShareCommon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class BondFixedRate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.BondFixedRate) */ {
 public:
  inline BondFixedRate() : BondFixedRate(nullptr) {};
  virtual ~BondFixedRate();

  BondFixedRate(const BondFixedRate& from);
  BondFixedRate(BondFixedRate&& from) noexcept
    : BondFixedRate() {
    *this = ::std::move(from);
  }

  inline BondFixedRate& operator=(const BondFixedRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BondFixedRate& operator=(BondFixedRate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BondFixedRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BondFixedRate* internal_default_instance() {
    return reinterpret_cast<const BondFixedRate*>(
               &_BondFixedRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BondFixedRate& a, BondFixedRate& b) {
    a.Swap(&b);
  }
  inline void Swap(BondFixedRate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BondFixedRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BondFixedRate* New() const final {
    return CreateMaybeMessage<BondFixedRate>(nullptr);
  }

  BondFixedRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BondFixedRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BondFixedRate& from);
  void MergeFrom(const BondFixedRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BondFixedRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.BondFixedRate";
  }
  protected:
  explicit BondFixedRate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterestPaymentDateDeltasFieldNumber = 8,
    kNameFieldNumber = 1,
    kBondTypeFieldNumber = 2,
    kISINFieldNumber = 3,
    kCollateralFieldNumber = 4,
    kParValueFieldNumber = 5,
    kInterestRateFieldNumber = 6,
    kLatePaymentPenaltyRateFieldNumber = 9,
    kAgeRestrictionFieldNumber = 13,
    kInterestPaymentInitialDateFieldNumber = 7,
    kLatePaymentWindowFieldNumber = 10,
    kLatePaymentPenaltyPeriodFieldNumber = 11,
    kMaturityDateFieldNumber = 12,
    kTransfersPermittedFieldNumber = 14,
  };
  // repeated uint64 InterestPaymentDateDeltas = 8;
  int interestpaymentdatedeltas_size() const;
  private:
  int _internal_interestpaymentdatedeltas_size() const;
  public:
  void clear_interestpaymentdatedeltas();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_interestpaymentdatedeltas(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_interestpaymentdatedeltas() const;
  void _internal_add_interestpaymentdatedeltas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_interestpaymentdatedeltas();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 interestpaymentdatedeltas(int index) const;
  void set_interestpaymentdatedeltas(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_interestpaymentdatedeltas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      interestpaymentdatedeltas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_interestpaymentdatedeltas();

  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string BondType = 2;
  void clear_bondtype();
  const std::string& bondtype() const;
  void set_bondtype(const std::string& value);
  void set_bondtype(std::string&& value);
  void set_bondtype(const char* value);
  void set_bondtype(const char* value, size_t size);
  std::string* mutable_bondtype();
  std::string* release_bondtype();
  void set_allocated_bondtype(std::string* bondtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bondtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bondtype(
      std::string* bondtype);
  private:
  const std::string& _internal_bondtype() const;
  void _internal_set_bondtype(const std::string& value);
  std::string* _internal_mutable_bondtype();
  public:

  // string ISIN = 3;
  void clear_isin();
  const std::string& isin() const;
  void set_isin(const std::string& value);
  void set_isin(std::string&& value);
  void set_isin(const char* value);
  void set_isin(const char* value, size_t size);
  std::string* mutable_isin();
  std::string* release_isin();
  void set_allocated_isin(std::string* isin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isin(
      std::string* isin);
  private:
  const std::string& _internal_isin() const;
  void _internal_set_isin(const std::string& value);
  std::string* _internal_mutable_isin();
  public:

  // string Collateral = 4;
  void clear_collateral();
  const std::string& collateral() const;
  void set_collateral(const std::string& value);
  void set_collateral(std::string&& value);
  void set_collateral(const char* value);
  void set_collateral(const char* value, size_t size);
  std::string* mutable_collateral();
  std::string* release_collateral();
  void set_allocated_collateral(std::string* collateral);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_collateral();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_collateral(
      std::string* collateral);
  private:
  const std::string& _internal_collateral() const;
  void _internal_set_collateral(const std::string& value);
  std::string* _internal_mutable_collateral();
  public:

  // .instruments.CurrencyValueField ParValue = 5;
  bool has_parvalue() const;
  private:
  bool _internal_has_parvalue() const;
  public:
  void clear_parvalue();
  const ::instruments::CurrencyValueField& parvalue() const;
  ::instruments::CurrencyValueField* release_parvalue();
  ::instruments::CurrencyValueField* mutable_parvalue();
  void set_allocated_parvalue(::instruments::CurrencyValueField* parvalue);
  private:
  const ::instruments::CurrencyValueField& _internal_parvalue() const;
  ::instruments::CurrencyValueField* _internal_mutable_parvalue();
  public:
  void unsafe_arena_set_allocated_parvalue(
      ::instruments::CurrencyValueField* parvalue);
  ::instruments::CurrencyValueField* unsafe_arena_release_parvalue();

  // .instruments.RateField InterestRate = 6;
  bool has_interestrate() const;
  private:
  bool _internal_has_interestrate() const;
  public:
  void clear_interestrate();
  const ::instruments::RateField& interestrate() const;
  ::instruments::RateField* release_interestrate();
  ::instruments::RateField* mutable_interestrate();
  void set_allocated_interestrate(::instruments::RateField* interestrate);
  private:
  const ::instruments::RateField& _internal_interestrate() const;
  ::instruments::RateField* _internal_mutable_interestrate();
  public:
  void unsafe_arena_set_allocated_interestrate(
      ::instruments::RateField* interestrate);
  ::instruments::RateField* unsafe_arena_release_interestrate();

  // .instruments.RateField LatePaymentPenaltyRate = 9;
  bool has_latepaymentpenaltyrate() const;
  private:
  bool _internal_has_latepaymentpenaltyrate() const;
  public:
  void clear_latepaymentpenaltyrate();
  const ::instruments::RateField& latepaymentpenaltyrate() const;
  ::instruments::RateField* release_latepaymentpenaltyrate();
  ::instruments::RateField* mutable_latepaymentpenaltyrate();
  void set_allocated_latepaymentpenaltyrate(::instruments::RateField* latepaymentpenaltyrate);
  private:
  const ::instruments::RateField& _internal_latepaymentpenaltyrate() const;
  ::instruments::RateField* _internal_mutable_latepaymentpenaltyrate();
  public:
  void unsafe_arena_set_allocated_latepaymentpenaltyrate(
      ::instruments::RateField* latepaymentpenaltyrate);
  ::instruments::RateField* unsafe_arena_release_latepaymentpenaltyrate();

  // .instruments.AgeRestrictionField AgeRestriction = 13;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 InterestPaymentInitialDate = 7;
  void clear_interestpaymentinitialdate();
  ::PROTOBUF_NAMESPACE_ID::uint64 interestpaymentinitialdate() const;
  void set_interestpaymentinitialdate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_interestpaymentinitialdate() const;
  void _internal_set_interestpaymentinitialdate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 LatePaymentWindow = 10;
  void clear_latepaymentwindow();
  ::PROTOBUF_NAMESPACE_ID::uint64 latepaymentwindow() const;
  void set_latepaymentwindow(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latepaymentwindow() const;
  void _internal_set_latepaymentwindow(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 LatePaymentPenaltyPeriod = 11;
  void clear_latepaymentpenaltyperiod();
  ::PROTOBUF_NAMESPACE_ID::uint64 latepaymentpenaltyperiod() const;
  void set_latepaymentpenaltyperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latepaymentpenaltyperiod() const;
  void _internal_set_latepaymentpenaltyperiod(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 MaturityDate = 12;
  void clear_maturitydate();
  ::PROTOBUF_NAMESPACE_ID::uint64 maturitydate() const;
  void set_maturitydate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maturitydate() const;
  void _internal_set_maturitydate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 14;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.BondFixedRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > interestpaymentdatedeltas_;
  mutable std::atomic<int> _interestpaymentdatedeltas_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bondtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collateral_;
  ::instruments::CurrencyValueField* parvalue_;
  ::instruments::RateField* interestrate_;
  ::instruments::RateField* latepaymentpenaltyrate_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 interestpaymentinitialdate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latepaymentwindow_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latepaymentpenaltyperiod_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maturitydate_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class DiscountCoupon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.DiscountCoupon) */ {
 public:
  inline DiscountCoupon() : DiscountCoupon(nullptr) {};
  virtual ~DiscountCoupon();

  DiscountCoupon(const DiscountCoupon& from);
  DiscountCoupon(DiscountCoupon&& from) noexcept
    : DiscountCoupon() {
    *this = ::std::move(from);
  }

  inline DiscountCoupon& operator=(const DiscountCoupon& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscountCoupon& operator=(DiscountCoupon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscountCoupon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscountCoupon* internal_default_instance() {
    return reinterpret_cast<const DiscountCoupon*>(
               &_DiscountCoupon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DiscountCoupon& a, DiscountCoupon& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscountCoupon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscountCoupon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscountCoupon* New() const final {
    return CreateMaybeMessage<DiscountCoupon>(nullptr);
  }

  DiscountCoupon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscountCoupon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscountCoupon& from);
  void MergeFrom(const DiscountCoupon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscountCoupon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.DiscountCoupon";
  }
  protected:
  explicit DiscountCoupon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedeemingEntityFieldNumber = 1,
    kCouponNameFieldNumber = 6,
    kRedemptionVenueFieldNumber = 10,
    kDetailsFieldNumber = 11,
    kFaceValueFieldNumber = 9,
    kValidFromTimestampFieldNumber = 2,
    kExpirationTimestampFieldNumber = 3,
    kTransfersPermittedFieldNumber = 8,
  };
  // string RedeemingEntity = 1;
  void clear_redeemingentity();
  const std::string& redeemingentity() const;
  void set_redeemingentity(const std::string& value);
  void set_redeemingentity(std::string&& value);
  void set_redeemingentity(const char* value);
  void set_redeemingentity(const char* value, size_t size);
  std::string* mutable_redeemingentity();
  std::string* release_redeemingentity();
  void set_allocated_redeemingentity(std::string* redeemingentity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_redeemingentity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_redeemingentity(
      std::string* redeemingentity);
  private:
  const std::string& _internal_redeemingentity() const;
  void _internal_set_redeemingentity(const std::string& value);
  std::string* _internal_mutable_redeemingentity();
  public:

  // string CouponName = 6;
  void clear_couponname();
  const std::string& couponname() const;
  void set_couponname(const std::string& value);
  void set_couponname(std::string&& value);
  void set_couponname(const char* value);
  void set_couponname(const char* value, size_t size);
  std::string* mutable_couponname();
  std::string* release_couponname();
  void set_allocated_couponname(std::string* couponname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_couponname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_couponname(
      std::string* couponname);
  private:
  const std::string& _internal_couponname() const;
  void _internal_set_couponname(const std::string& value);
  std::string* _internal_mutable_couponname();
  public:

  // string RedemptionVenue = 10;
  void clear_redemptionvenue();
  const std::string& redemptionvenue() const;
  void set_redemptionvenue(const std::string& value);
  void set_redemptionvenue(std::string&& value);
  void set_redemptionvenue(const char* value);
  void set_redemptionvenue(const char* value, size_t size);
  std::string* mutable_redemptionvenue();
  std::string* release_redemptionvenue();
  void set_allocated_redemptionvenue(std::string* redemptionvenue);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_redemptionvenue();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_redemptionvenue(
      std::string* redemptionvenue);
  private:
  const std::string& _internal_redemptionvenue() const;
  void _internal_set_redemptionvenue(const std::string& value);
  std::string* _internal_mutable_redemptionvenue();
  public:

  // string Details = 11;
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_details();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_details(
      std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // .instruments.CurrencyValueField FaceValue = 9;
  bool has_facevalue() const;
  private:
  bool _internal_has_facevalue() const;
  public:
  void clear_facevalue();
  const ::instruments::CurrencyValueField& facevalue() const;
  ::instruments::CurrencyValueField* release_facevalue();
  ::instruments::CurrencyValueField* mutable_facevalue();
  void set_allocated_facevalue(::instruments::CurrencyValueField* facevalue);
  private:
  const ::instruments::CurrencyValueField& _internal_facevalue() const;
  ::instruments::CurrencyValueField* _internal_mutable_facevalue();
  public:
  void unsafe_arena_set_allocated_facevalue(
      ::instruments::CurrencyValueField* facevalue);
  ::instruments::CurrencyValueField* unsafe_arena_release_facevalue();

  // uint64 ValidFromTimestamp = 2;
  void clear_validfromtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 validfromtimestamp() const;
  void set_validfromtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_validfromtimestamp() const;
  void _internal_set_validfromtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ExpirationTimestamp = 3;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 8;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.DiscountCoupon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redeemingentity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr couponname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redemptionvenue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  ::instruments::CurrencyValueField* facevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 validfromtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedLoyaltyPoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.DeprecatedLoyaltyPoints) */ {
 public:
  inline DeprecatedLoyaltyPoints() : DeprecatedLoyaltyPoints(nullptr) {};
  virtual ~DeprecatedLoyaltyPoints();

  DeprecatedLoyaltyPoints(const DeprecatedLoyaltyPoints& from);
  DeprecatedLoyaltyPoints(DeprecatedLoyaltyPoints&& from) noexcept
    : DeprecatedLoyaltyPoints() {
    *this = ::std::move(from);
  }

  inline DeprecatedLoyaltyPoints& operator=(const DeprecatedLoyaltyPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedLoyaltyPoints& operator=(DeprecatedLoyaltyPoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeprecatedLoyaltyPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecatedLoyaltyPoints* internal_default_instance() {
    return reinterpret_cast<const DeprecatedLoyaltyPoints*>(
               &_DeprecatedLoyaltyPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeprecatedLoyaltyPoints& a, DeprecatedLoyaltyPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedLoyaltyPoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeprecatedLoyaltyPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedLoyaltyPoints* New() const final {
    return CreateMaybeMessage<DeprecatedLoyaltyPoints>(nullptr);
  }

  DeprecatedLoyaltyPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedLoyaltyPoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeprecatedLoyaltyPoints& from);
  void MergeFrom(const DeprecatedLoyaltyPoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeprecatedLoyaltyPoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.DeprecatedLoyaltyPoints";
  }
  protected:
  explicit DeprecatedLoyaltyPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramNameFieldNumber = 2,
    kDetailsFieldNumber = 5,
    kAgeRestrictionFieldNumber = 1,
    kExpirationTimestampFieldNumber = 4,
    kTransfersPermittedFieldNumber = 6,
  };
  // string ProgramName = 2;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_programname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_programname(
      std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // string Details = 5;
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_details();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_details(
      std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 1;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 ExpirationTimestamp = 4;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 6;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.DeprecatedLoyaltyPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class TicketAdmission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.TicketAdmission) */ {
 public:
  inline TicketAdmission() : TicketAdmission(nullptr) {};
  virtual ~TicketAdmission();

  TicketAdmission(const TicketAdmission& from);
  TicketAdmission(TicketAdmission&& from) noexcept
    : TicketAdmission() {
    *this = ::std::move(from);
  }

  inline TicketAdmission& operator=(const TicketAdmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline TicketAdmission& operator=(TicketAdmission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TicketAdmission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TicketAdmission* internal_default_instance() {
    return reinterpret_cast<const TicketAdmission*>(
               &_TicketAdmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TicketAdmission& a, TicketAdmission& b) {
    a.Swap(&b);
  }
  inline void Swap(TicketAdmission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TicketAdmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TicketAdmission* New() const final {
    return CreateMaybeMessage<TicketAdmission>(nullptr);
  }

  TicketAdmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TicketAdmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TicketAdmission& from);
  void MergeFrom(const TicketAdmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TicketAdmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.TicketAdmission";
  }
  protected:
  explicit TicketAdmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVenueFieldNumber = 3,
    kAreaFieldNumber = 5,
    kSeatFieldNumber = 6,
    kEventNameFieldNumber = 10,
    kDetailsFieldNumber = 12,
    kSectionFieldNumber = 13,
    kRowFieldNumber = 14,
    kAgeRestrictionFieldNumber = 1,
    kEventStartTimestampFieldNumber = 7,
    kTransfersPermittedFieldNumber = 11,
    kEventEndTimestampFieldNumber = 15,
  };
  // string Venue = 3;
  void clear_venue();
  const std::string& venue() const;
  void set_venue(const std::string& value);
  void set_venue(std::string&& value);
  void set_venue(const char* value);
  void set_venue(const char* value, size_t size);
  std::string* mutable_venue();
  std::string* release_venue();
  void set_allocated_venue(std::string* venue);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_venue();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_venue(
      std::string* venue);
  private:
  const std::string& _internal_venue() const;
  void _internal_set_venue(const std::string& value);
  std::string* _internal_mutable_venue();
  public:

  // string Area = 5;
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_area();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_area(
      std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // string Seat = 6;
  void clear_seat();
  const std::string& seat() const;
  void set_seat(const std::string& value);
  void set_seat(std::string&& value);
  void set_seat(const char* value);
  void set_seat(const char* value, size_t size);
  std::string* mutable_seat();
  std::string* release_seat();
  void set_allocated_seat(std::string* seat);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_seat();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_seat(
      std::string* seat);
  private:
  const std::string& _internal_seat() const;
  void _internal_set_seat(const std::string& value);
  std::string* _internal_mutable_seat();
  public:

  // string EventName = 10;
  void clear_eventname();
  const std::string& eventname() const;
  void set_eventname(const std::string& value);
  void set_eventname(std::string&& value);
  void set_eventname(const char* value);
  void set_eventname(const char* value, size_t size);
  std::string* mutable_eventname();
  std::string* release_eventname();
  void set_allocated_eventname(std::string* eventname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_eventname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_eventname(
      std::string* eventname);
  private:
  const std::string& _internal_eventname() const;
  void _internal_set_eventname(const std::string& value);
  std::string* _internal_mutable_eventname();
  public:

  // string Details = 12;
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_details();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_details(
      std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // string Section = 13;
  void clear_section();
  const std::string& section() const;
  void set_section(const std::string& value);
  void set_section(std::string&& value);
  void set_section(const char* value);
  void set_section(const char* value, size_t size);
  std::string* mutable_section();
  std::string* release_section();
  void set_allocated_section(std::string* section);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_section();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_section(
      std::string* section);
  private:
  const std::string& _internal_section() const;
  void _internal_set_section(const std::string& value);
  std::string* _internal_mutable_section();
  public:

  // string Row = 14;
  void clear_row();
  const std::string& row() const;
  void set_row(const std::string& value);
  void set_row(std::string&& value);
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  std::string* mutable_row();
  std::string* release_row();
  void set_allocated_row(std::string* row);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_row();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_row(
      std::string* row);
  private:
  const std::string& _internal_row() const;
  void _internal_set_row(const std::string& value);
  std::string* _internal_mutable_row();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 1;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 EventStartTimestamp = 7;
  void clear_eventstarttimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 eventstarttimestamp() const;
  void set_eventstarttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_eventstarttimestamp() const;
  void _internal_set_eventstarttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 11;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // uint64 EventEndTimestamp = 15;
  void clear_eventendtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 eventendtimestamp() const;
  void set_eventendtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_eventendtimestamp() const;
  void _internal_set_eventendtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.TicketAdmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr venue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr section_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr row_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 eventstarttimestamp_;
  bool transferspermitted_;
  ::PROTOBUF_NAMESPACE_ID::uint64 eventendtimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class CasinoChip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.CasinoChip) */ {
 public:
  inline CasinoChip() : CasinoChip(nullptr) {};
  virtual ~CasinoChip();

  CasinoChip(const CasinoChip& from);
  CasinoChip(CasinoChip&& from) noexcept
    : CasinoChip() {
    *this = ::std::move(from);
  }

  inline CasinoChip& operator=(const CasinoChip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CasinoChip& operator=(CasinoChip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CasinoChip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CasinoChip* internal_default_instance() {
    return reinterpret_cast<const CasinoChip*>(
               &_CasinoChip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CasinoChip& a, CasinoChip& b) {
    a.Swap(&b);
  }
  inline void Swap(CasinoChip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CasinoChip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CasinoChip* New() const final {
    return CreateMaybeMessage<CasinoChip>(nullptr);
  }

  CasinoChip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CasinoChip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CasinoChip& from);
  void MergeFrom(const CasinoChip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CasinoChip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.CasinoChip";
  }
  protected:
  explicit CasinoChip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseTypeFieldNumber = 2,
    kCasinoNameFieldNumber = 8,
    kAgeRestrictionFieldNumber = 3,
    kFaceValueFieldNumber = 9,
    kExpirationTimestampFieldNumber = 5,
    kTransfersPermittedFieldNumber = 7,
  };
  // string UseType = 2;
  void clear_usetype();
  const std::string& usetype() const;
  void set_usetype(const std::string& value);
  void set_usetype(std::string&& value);
  void set_usetype(const char* value);
  void set_usetype(const char* value, size_t size);
  std::string* mutable_usetype();
  std::string* release_usetype();
  void set_allocated_usetype(std::string* usetype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_usetype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_usetype(
      std::string* usetype);
  private:
  const std::string& _internal_usetype() const;
  void _internal_set_usetype(const std::string& value);
  std::string* _internal_mutable_usetype();
  public:

  // string CasinoName = 8;
  void clear_casinoname();
  const std::string& casinoname() const;
  void set_casinoname(const std::string& value);
  void set_casinoname(std::string&& value);
  void set_casinoname(const char* value);
  void set_casinoname(const char* value, size_t size);
  std::string* mutable_casinoname();
  std::string* release_casinoname();
  void set_allocated_casinoname(std::string* casinoname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_casinoname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_casinoname(
      std::string* casinoname);
  private:
  const std::string& _internal_casinoname() const;
  void _internal_set_casinoname(const std::string& value);
  std::string* _internal_mutable_casinoname();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 3;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // .instruments.CurrencyValueField FaceValue = 9;
  bool has_facevalue() const;
  private:
  bool _internal_has_facevalue() const;
  public:
  void clear_facevalue();
  const ::instruments::CurrencyValueField& facevalue() const;
  ::instruments::CurrencyValueField* release_facevalue();
  ::instruments::CurrencyValueField* mutable_facevalue();
  void set_allocated_facevalue(::instruments::CurrencyValueField* facevalue);
  private:
  const ::instruments::CurrencyValueField& _internal_facevalue() const;
  ::instruments::CurrencyValueField* _internal_mutable_facevalue();
  public:
  void unsafe_arena_set_allocated_facevalue(
      ::instruments::CurrencyValueField* facevalue);
  ::instruments::CurrencyValueField* unsafe_arena_release_facevalue();

  // uint64 ExpirationTimestamp = 5;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 7;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.CasinoChip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr casinoname_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::instruments::CurrencyValueField* facevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class InformationServiceLicense PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.InformationServiceLicense) */ {
 public:
  inline InformationServiceLicense() : InformationServiceLicense(nullptr) {};
  virtual ~InformationServiceLicense();

  InformationServiceLicense(const InformationServiceLicense& from);
  InformationServiceLicense(InformationServiceLicense&& from) noexcept
    : InformationServiceLicense() {
    *this = ::std::move(from);
  }

  inline InformationServiceLicense& operator=(const InformationServiceLicense& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformationServiceLicense& operator=(InformationServiceLicense&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InformationServiceLicense& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InformationServiceLicense* internal_default_instance() {
    return reinterpret_cast<const InformationServiceLicense*>(
               &_InformationServiceLicense_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InformationServiceLicense& a, InformationServiceLicense& b) {
    a.Swap(&b);
  }
  inline void Swap(InformationServiceLicense* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformationServiceLicense* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InformationServiceLicense* New() const final {
    return CreateMaybeMessage<InformationServiceLicense>(nullptr);
  }

  InformationServiceLicense* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InformationServiceLicense>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InformationServiceLicense& from);
  void MergeFrom(const InformationServiceLicense& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InformationServiceLicense* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.InformationServiceLicense";
  }
  protected:
  explicit InformationServiceLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kURLFieldNumber = 5,
    kAgeRestrictionFieldNumber = 1,
    kExpirationTimestampFieldNumber = 2,
    kTransfersPermittedFieldNumber = 4,
  };
  // string ServiceName = 3;
  void clear_servicename();
  const std::string& servicename() const;
  void set_servicename(const std::string& value);
  void set_servicename(std::string&& value);
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  std::string* mutable_servicename();
  std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_servicename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_servicename(
      std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string URL = 5;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 1;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 ExpirationTimestamp = 2;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 4;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.InformationServiceLicense)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class CreditNote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.CreditNote) */ {
 public:
  inline CreditNote() : CreditNote(nullptr) {};
  virtual ~CreditNote();

  CreditNote(const CreditNote& from);
  CreditNote(CreditNote&& from) noexcept
    : CreditNote() {
    *this = ::std::move(from);
  }

  inline CreditNote& operator=(const CreditNote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditNote& operator=(CreditNote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreditNote* internal_default_instance() {
    return reinterpret_cast<const CreditNote*>(
               &_CreditNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreditNote& a, CreditNote& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditNote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditNote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditNote* New() const final {
    return CreateMaybeMessage<CreditNote>(nullptr);
  }

  CreditNote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditNote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditNote& from);
  void MergeFrom(const CreditNote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditNote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.CreditNote";
  }
  protected:
  explicit CreditNote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceValueFieldNumber = 2,
    kExpirationTimestampFieldNumber = 3,
    kTransfersPermittedFieldNumber = 4,
  };
  // .instruments.FixedCurrencyValueField FaceValue = 2;
  bool has_facevalue() const;
  private:
  bool _internal_has_facevalue() const;
  public:
  void clear_facevalue();
  const ::instruments::FixedCurrencyValueField& facevalue() const;
  ::instruments::FixedCurrencyValueField* release_facevalue();
  ::instruments::FixedCurrencyValueField* mutable_facevalue();
  void set_allocated_facevalue(::instruments::FixedCurrencyValueField* facevalue);
  private:
  const ::instruments::FixedCurrencyValueField& _internal_facevalue() const;
  ::instruments::FixedCurrencyValueField* _internal_mutable_facevalue();
  public:
  void unsafe_arena_set_allocated_facevalue(
      ::instruments::FixedCurrencyValueField* facevalue);
  ::instruments::FixedCurrencyValueField* unsafe_arena_release_facevalue();

  // uint64 ExpirationTimestamp = 3;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 4;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.CreditNote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::instruments::FixedCurrencyValueField* facevalue_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class RewardPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.RewardPoint) */ {
 public:
  inline RewardPoint() : RewardPoint(nullptr) {};
  virtual ~RewardPoint();

  RewardPoint(const RewardPoint& from);
  RewardPoint(RewardPoint&& from) noexcept
    : RewardPoint() {
    *this = ::std::move(from);
  }

  inline RewardPoint& operator=(const RewardPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardPoint& operator=(RewardPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardPoint* internal_default_instance() {
    return reinterpret_cast<const RewardPoint*>(
               &_RewardPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RewardPoint& a, RewardPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardPoint* New() const final {
    return CreateMaybeMessage<RewardPoint>(nullptr);
  }

  RewardPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardPoint& from);
  void MergeFrom(const RewardPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.RewardPoint";
  }
  protected:
  explicit RewardPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramNameFieldNumber = 2,
    kDetailsFieldNumber = 5,
    kAgeRestrictionFieldNumber = 1,
    kExpirationTimestampFieldNumber = 4,
    kTransfersPermittedFieldNumber = 6,
  };
  // string ProgramName = 2;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_programname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_programname(
      std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // string Details = 5;
  void clear_details();
  const std::string& details() const;
  void set_details(const std::string& value);
  void set_details(std::string&& value);
  void set_details(const char* value);
  void set_details(const char* value, size_t size);
  std::string* mutable_details();
  std::string* release_details();
  void set_allocated_details(std::string* details);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_details();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_details(
      std::string* details);
  private:
  const std::string& _internal_details() const;
  void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // .instruments.AgeRestrictionField AgeRestriction = 1;
  bool has_agerestriction() const;
  private:
  bool _internal_has_agerestriction() const;
  public:
  void clear_agerestriction();
  const ::instruments::AgeRestrictionField& agerestriction() const;
  ::instruments::AgeRestrictionField* release_agerestriction();
  ::instruments::AgeRestrictionField* mutable_agerestriction();
  void set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction);
  private:
  const ::instruments::AgeRestrictionField& _internal_agerestriction() const;
  ::instruments::AgeRestrictionField* _internal_mutable_agerestriction();
  public:
  void unsafe_arena_set_allocated_agerestriction(
      ::instruments::AgeRestrictionField* agerestriction);
  ::instruments::AgeRestrictionField* unsafe_arena_release_agerestriction();

  // uint64 ExpirationTimestamp = 4;
  void clear_expirationtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp() const;
  void set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_expirationtimestamp() const;
  void _internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool TransfersPermitted = 6;
  void clear_transferspermitted();
  bool transferspermitted() const;
  void set_transferspermitted(bool value);
  private:
  bool _internal_transferspermitted() const;
  void _internal_set_transferspermitted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.RewardPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
  ::instruments::AgeRestrictionField* agerestriction_;
  ::PROTOBUF_NAMESPACE_ID::uint64 expirationtimestamp_;
  bool transferspermitted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class AgeRestrictionField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.AgeRestrictionField) */ {
 public:
  inline AgeRestrictionField() : AgeRestrictionField(nullptr) {};
  virtual ~AgeRestrictionField();

  AgeRestrictionField(const AgeRestrictionField& from);
  AgeRestrictionField(AgeRestrictionField&& from) noexcept
    : AgeRestrictionField() {
    *this = ::std::move(from);
  }

  inline AgeRestrictionField& operator=(const AgeRestrictionField& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgeRestrictionField& operator=(AgeRestrictionField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgeRestrictionField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgeRestrictionField* internal_default_instance() {
    return reinterpret_cast<const AgeRestrictionField*>(
               &_AgeRestrictionField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AgeRestrictionField& a, AgeRestrictionField& b) {
    a.Swap(&b);
  }
  inline void Swap(AgeRestrictionField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgeRestrictionField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgeRestrictionField* New() const final {
    return CreateMaybeMessage<AgeRestrictionField>(nullptr);
  }

  AgeRestrictionField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgeRestrictionField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgeRestrictionField& from);
  void MergeFrom(const AgeRestrictionField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgeRestrictionField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.AgeRestrictionField";
  }
  protected:
  explicit AgeRestrictionField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerFieldNumber = 1,
    kUpperFieldNumber = 2,
  };
  // uint32 Lower = 1;
  void clear_lower();
  ::PROTOBUF_NAMESPACE_ID::uint32 lower() const;
  void set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lower() const;
  void _internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Upper = 2;
  void clear_upper();
  ::PROTOBUF_NAMESPACE_ID::uint32 upper() const;
  void set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upper() const;
  void _internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.AgeRestrictionField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lower_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class CurrencyValueField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.CurrencyValueField) */ {
 public:
  inline CurrencyValueField() : CurrencyValueField(nullptr) {};
  virtual ~CurrencyValueField();

  CurrencyValueField(const CurrencyValueField& from);
  CurrencyValueField(CurrencyValueField&& from) noexcept
    : CurrencyValueField() {
    *this = ::std::move(from);
  }

  inline CurrencyValueField& operator=(const CurrencyValueField& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyValueField& operator=(CurrencyValueField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrencyValueField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CurrencyValueField* internal_default_instance() {
    return reinterpret_cast<const CurrencyValueField*>(
               &_CurrencyValueField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CurrencyValueField& a, CurrencyValueField& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyValueField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyValueField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrencyValueField* New() const final {
    return CreateMaybeMessage<CurrencyValueField>(nullptr);
  }

  CurrencyValueField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrencyValueField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrencyValueField& from);
  void MergeFrom(const CurrencyValueField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyValueField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.CurrencyValueField";
  }
  protected:
  explicit CurrencyValueField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 2,
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 3,
  };
  // string CurrencyCode = 2;
  void clear_currencycode();
  const std::string& currencycode() const;
  void set_currencycode(const std::string& value);
  void set_currencycode(std::string&& value);
  void set_currencycode(const char* value);
  void set_currencycode(const char* value, size_t size);
  std::string* mutable_currencycode();
  std::string* release_currencycode();
  void set_allocated_currencycode(std::string* currencycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currencycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currencycode(
      std::string* currencycode);
  private:
  const std::string& _internal_currencycode() const;
  void _internal_set_currencycode(const std::string& value);
  std::string* _internal_mutable_currencycode();
  public:

  // uint64 Value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Precision = 3;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.CurrencyValueField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencycode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class FixedCurrencyValueField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.FixedCurrencyValueField) */ {
 public:
  inline FixedCurrencyValueField() : FixedCurrencyValueField(nullptr) {};
  virtual ~FixedCurrencyValueField();

  FixedCurrencyValueField(const FixedCurrencyValueField& from);
  FixedCurrencyValueField(FixedCurrencyValueField&& from) noexcept
    : FixedCurrencyValueField() {
    *this = ::std::move(from);
  }

  inline FixedCurrencyValueField& operator=(const FixedCurrencyValueField& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedCurrencyValueField& operator=(FixedCurrencyValueField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FixedCurrencyValueField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FixedCurrencyValueField* internal_default_instance() {
    return reinterpret_cast<const FixedCurrencyValueField*>(
               &_FixedCurrencyValueField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FixedCurrencyValueField& a, FixedCurrencyValueField& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedCurrencyValueField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedCurrencyValueField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FixedCurrencyValueField* New() const final {
    return CreateMaybeMessage<FixedCurrencyValueField>(nullptr);
  }

  FixedCurrencyValueField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FixedCurrencyValueField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FixedCurrencyValueField& from);
  void MergeFrom(const FixedCurrencyValueField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedCurrencyValueField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.FixedCurrencyValueField";
  }
  protected:
  explicit FixedCurrencyValueField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 2,
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 3,
  };
  // string CurrencyCode = 2;
  void clear_currencycode();
  const std::string& currencycode() const;
  void set_currencycode(const std::string& value);
  void set_currencycode(std::string&& value);
  void set_currencycode(const char* value);
  void set_currencycode(const char* value, size_t size);
  std::string* mutable_currencycode();
  std::string* release_currencycode();
  void set_allocated_currencycode(std::string* currencycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_currencycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_currencycode(
      std::string* currencycode);
  private:
  const std::string& _internal_currencycode() const;
  void _internal_set_currencycode(const std::string& value);
  std::string* _internal_mutable_currencycode();
  public:

  // uint64 Value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Precision = 3;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.FixedCurrencyValueField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencycode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// -------------------------------------------------------------------

class RateField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruments.RateField) */ {
 public:
  inline RateField() : RateField(nullptr) {};
  virtual ~RateField();

  RateField(const RateField& from);
  RateField(RateField&& from) noexcept
    : RateField() {
    *this = ::std::move(from);
  }

  inline RateField& operator=(const RateField& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateField& operator=(RateField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateField* internal_default_instance() {
    return reinterpret_cast<const RateField*>(
               &_RateField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RateField& a, RateField& b) {
    a.Swap(&b);
  }
  inline void Swap(RateField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateField* New() const final {
    return CreateMaybeMessage<RateField>(nullptr);
  }

  RateField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateField& from);
  void MergeFrom(const RateField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruments.RateField";
  }
  protected:
  explicit RateField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruments_2eproto);
    return ::descriptor_table_instruments_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kPrecisionFieldNumber = 1,
  };
  // uint64 Value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 Precision = 1;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::uint32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:instruments.RateField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instruments_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Membership

// .instruments.AgeRestrictionField AgeRestriction = 1;
inline bool Membership::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool Membership::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void Membership::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& Membership::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& Membership::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.AgeRestriction)
  return _internal_agerestriction();
}
inline void Membership::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* Membership::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* Membership::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.Membership.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* Membership::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* Membership::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void Membership::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.AgeRestriction)
}

// uint64 ValidFrom = 2;
inline void Membership::clear_validfrom() {
  validfrom_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Membership::_internal_validfrom() const {
  return validfrom_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Membership::validfrom() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.ValidFrom)
  return _internal_validfrom();
}
inline void Membership::_internal_set_validfrom(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  validfrom_ = value;
}
inline void Membership::set_validfrom(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_validfrom(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.ValidFrom)
}

// uint64 ExpirationTimestamp = 3;
inline void Membership::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Membership::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Membership::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void Membership::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void Membership::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.ExpirationTimestamp)
}

// string ID = 4;
inline void Membership::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Membership::id() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.ID)
  return _internal_id();
}
inline void Membership::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.ID)
}
inline std::string* Membership::mutable_id() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.ID)
  return _internal_mutable_id();
}
inline const std::string& Membership::_internal_id() const {
  return id_.Get();
}
inline void Membership::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Membership::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Membership.ID)
}
inline void Membership::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Membership.ID)
}
inline void Membership::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Membership.ID)
}
inline std::string* Membership::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Membership::release_id() {
  // @@protoc_insertion_point(field_release:instruments.Membership.ID)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Membership::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.ID)
}
inline std::string* Membership::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Membership.ID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Membership::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.ID)
}

// string MembershipClass = 5;
inline void Membership::clear_membershipclass() {
  membershipclass_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Membership::membershipclass() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.MembershipClass)
  return _internal_membershipclass();
}
inline void Membership::set_membershipclass(const std::string& value) {
  _internal_set_membershipclass(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.MembershipClass)
}
inline std::string* Membership::mutable_membershipclass() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.MembershipClass)
  return _internal_mutable_membershipclass();
}
inline const std::string& Membership::_internal_membershipclass() const {
  return membershipclass_.Get();
}
inline void Membership::_internal_set_membershipclass(const std::string& value) {
  
  membershipclass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Membership::set_membershipclass(std::string&& value) {
  
  membershipclass_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Membership.MembershipClass)
}
inline void Membership::set_membershipclass(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  membershipclass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Membership.MembershipClass)
}
inline void Membership::set_membershipclass(const char* value,
    size_t size) {
  
  membershipclass_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Membership.MembershipClass)
}
inline std::string* Membership::_internal_mutable_membershipclass() {
  
  return membershipclass_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Membership::release_membershipclass() {
  // @@protoc_insertion_point(field_release:instruments.Membership.MembershipClass)
  return membershipclass_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Membership::set_allocated_membershipclass(std::string* membershipclass) {
  if (membershipclass != nullptr) {
    
  } else {
    
  }
  membershipclass_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), membershipclass,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.MembershipClass)
}
inline std::string* Membership::unsafe_arena_release_membershipclass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Membership.MembershipClass)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return membershipclass_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Membership::unsafe_arena_set_allocated_membershipclass(
    std::string* membershipclass) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (membershipclass != nullptr) {
    
  } else {
    
  }
  membershipclass_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      membershipclass, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.MembershipClass)
}

// string RoleType = 6;
inline void Membership::clear_roletype() {
  roletype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Membership::roletype() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.RoleType)
  return _internal_roletype();
}
inline void Membership::set_roletype(const std::string& value) {
  _internal_set_roletype(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.RoleType)
}
inline std::string* Membership::mutable_roletype() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.RoleType)
  return _internal_mutable_roletype();
}
inline const std::string& Membership::_internal_roletype() const {
  return roletype_.Get();
}
inline void Membership::_internal_set_roletype(const std::string& value) {
  
  roletype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Membership::set_roletype(std::string&& value) {
  
  roletype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Membership.RoleType)
}
inline void Membership::set_roletype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roletype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Membership.RoleType)
}
inline void Membership::set_roletype(const char* value,
    size_t size) {
  
  roletype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Membership.RoleType)
}
inline std::string* Membership::_internal_mutable_roletype() {
  
  return roletype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Membership::release_roletype() {
  // @@protoc_insertion_point(field_release:instruments.Membership.RoleType)
  return roletype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Membership::set_allocated_roletype(std::string* roletype) {
  if (roletype != nullptr) {
    
  } else {
    
  }
  roletype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roletype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.RoleType)
}
inline std::string* Membership::unsafe_arena_release_roletype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Membership.RoleType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return roletype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Membership::unsafe_arena_set_allocated_roletype(
    std::string* roletype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (roletype != nullptr) {
    
  } else {
    
  }
  roletype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roletype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.RoleType)
}

// string MembershipType = 7;
inline void Membership::clear_membershiptype() {
  membershiptype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Membership::membershiptype() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.MembershipType)
  return _internal_membershiptype();
}
inline void Membership::set_membershiptype(const std::string& value) {
  _internal_set_membershiptype(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.MembershipType)
}
inline std::string* Membership::mutable_membershiptype() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.MembershipType)
  return _internal_mutable_membershiptype();
}
inline const std::string& Membership::_internal_membershiptype() const {
  return membershiptype_.Get();
}
inline void Membership::_internal_set_membershiptype(const std::string& value) {
  
  membershiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Membership::set_membershiptype(std::string&& value) {
  
  membershiptype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Membership.MembershipType)
}
inline void Membership::set_membershiptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  membershiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Membership.MembershipType)
}
inline void Membership::set_membershiptype(const char* value,
    size_t size) {
  
  membershiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Membership.MembershipType)
}
inline std::string* Membership::_internal_mutable_membershiptype() {
  
  return membershiptype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Membership::release_membershiptype() {
  // @@protoc_insertion_point(field_release:instruments.Membership.MembershipType)
  return membershiptype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Membership::set_allocated_membershiptype(std::string* membershiptype) {
  if (membershiptype != nullptr) {
    
  } else {
    
  }
  membershiptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), membershiptype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.MembershipType)
}
inline std::string* Membership::unsafe_arena_release_membershiptype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Membership.MembershipType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return membershiptype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Membership::unsafe_arena_set_allocated_membershiptype(
    std::string* membershiptype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (membershiptype != nullptr) {
    
  } else {
    
  }
  membershiptype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      membershiptype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.MembershipType)
}

// string Description = 8;
inline void Membership::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Membership::description() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.Description)
  return _internal_description();
}
inline void Membership::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.Description)
}
inline std::string* Membership::mutable_description() {
  // @@protoc_insertion_point(field_mutable:instruments.Membership.Description)
  return _internal_mutable_description();
}
inline const std::string& Membership::_internal_description() const {
  return description_.Get();
}
inline void Membership::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Membership::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Membership.Description)
}
inline void Membership::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Membership.Description)
}
inline void Membership::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Membership.Description)
}
inline std::string* Membership::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Membership::release_description() {
  // @@protoc_insertion_point(field_release:instruments.Membership.Description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Membership::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Membership.Description)
}
inline std::string* Membership::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Membership.Description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Membership::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Membership.Description)
}

// bool TransfersPermitted = 9;
inline void Membership::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool Membership::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool Membership::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.Membership.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void Membership::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void Membership::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.Membership.TransfersPermitted)
}

// -------------------------------------------------------------------

// Currency

// string CurrencyCode = 1;
inline void Currency::clear_currencycode() {
  currencycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Currency::currencycode() const {
  // @@protoc_insertion_point(field_get:instruments.Currency.CurrencyCode)
  return _internal_currencycode();
}
inline void Currency::set_currencycode(const std::string& value) {
  _internal_set_currencycode(value);
  // @@protoc_insertion_point(field_set:instruments.Currency.CurrencyCode)
}
inline std::string* Currency::mutable_currencycode() {
  // @@protoc_insertion_point(field_mutable:instruments.Currency.CurrencyCode)
  return _internal_mutable_currencycode();
}
inline const std::string& Currency::_internal_currencycode() const {
  return currencycode_.Get();
}
inline void Currency::_internal_set_currencycode(const std::string& value) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Currency::set_currencycode(std::string&& value) {
  
  currencycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Currency.CurrencyCode)
}
inline void Currency::set_currencycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Currency.CurrencyCode)
}
inline void Currency::set_currencycode(const char* value,
    size_t size) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Currency.CurrencyCode)
}
inline std::string* Currency::_internal_mutable_currencycode() {
  
  return currencycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Currency::release_currencycode() {
  // @@protoc_insertion_point(field_release:instruments.Currency.CurrencyCode)
  return currencycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Currency::set_allocated_currencycode(std::string* currencycode) {
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Currency.CurrencyCode)
}
inline std::string* Currency::unsafe_arena_release_currencycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Currency.CurrencyCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currencycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Currency::unsafe_arena_set_allocated_currencycode(
    std::string* currencycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currencycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Currency.CurrencyCode)
}

// string MonetaryAuthority = 2;
inline void Currency::clear_monetaryauthority() {
  monetaryauthority_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Currency::monetaryauthority() const {
  // @@protoc_insertion_point(field_get:instruments.Currency.MonetaryAuthority)
  return _internal_monetaryauthority();
}
inline void Currency::set_monetaryauthority(const std::string& value) {
  _internal_set_monetaryauthority(value);
  // @@protoc_insertion_point(field_set:instruments.Currency.MonetaryAuthority)
}
inline std::string* Currency::mutable_monetaryauthority() {
  // @@protoc_insertion_point(field_mutable:instruments.Currency.MonetaryAuthority)
  return _internal_mutable_monetaryauthority();
}
inline const std::string& Currency::_internal_monetaryauthority() const {
  return monetaryauthority_.Get();
}
inline void Currency::_internal_set_monetaryauthority(const std::string& value) {
  
  monetaryauthority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Currency::set_monetaryauthority(std::string&& value) {
  
  monetaryauthority_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.Currency.MonetaryAuthority)
}
inline void Currency::set_monetaryauthority(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  monetaryauthority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.Currency.MonetaryAuthority)
}
inline void Currency::set_monetaryauthority(const char* value,
    size_t size) {
  
  monetaryauthority_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.Currency.MonetaryAuthority)
}
inline std::string* Currency::_internal_mutable_monetaryauthority() {
  
  return monetaryauthority_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Currency::release_monetaryauthority() {
  // @@protoc_insertion_point(field_release:instruments.Currency.MonetaryAuthority)
  return monetaryauthority_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Currency::set_allocated_monetaryauthority(std::string* monetaryauthority) {
  if (monetaryauthority != nullptr) {
    
  } else {
    
  }
  monetaryauthority_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), monetaryauthority,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.Currency.MonetaryAuthority)
}
inline std::string* Currency::unsafe_arena_release_monetaryauthority() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.Currency.MonetaryAuthority)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return monetaryauthority_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Currency::unsafe_arena_set_allocated_monetaryauthority(
    std::string* monetaryauthority) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (monetaryauthority != nullptr) {
    
  } else {
    
  }
  monetaryauthority_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      monetaryauthority, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.Currency.MonetaryAuthority)
}

// uint64 Precision = 4;
inline void Currency::clear_precision() {
  precision_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Currency::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Currency::precision() const {
  // @@protoc_insertion_point(field_get:instruments.Currency.Precision)
  return _internal_precision();
}
inline void Currency::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  precision_ = value;
}
inline void Currency::set_precision(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:instruments.Currency.Precision)
}

// -------------------------------------------------------------------

// ShareCommon

// string Ticker = 1;
inline void ShareCommon::clear_ticker() {
  ticker_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShareCommon::ticker() const {
  // @@protoc_insertion_point(field_get:instruments.ShareCommon.Ticker)
  return _internal_ticker();
}
inline void ShareCommon::set_ticker(const std::string& value) {
  _internal_set_ticker(value);
  // @@protoc_insertion_point(field_set:instruments.ShareCommon.Ticker)
}
inline std::string* ShareCommon::mutable_ticker() {
  // @@protoc_insertion_point(field_mutable:instruments.ShareCommon.Ticker)
  return _internal_mutable_ticker();
}
inline const std::string& ShareCommon::_internal_ticker() const {
  return ticker_.Get();
}
inline void ShareCommon::_internal_set_ticker(const std::string& value) {
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShareCommon::set_ticker(std::string&& value) {
  
  ticker_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.ShareCommon.Ticker)
}
inline void ShareCommon::set_ticker(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.ShareCommon.Ticker)
}
inline void ShareCommon::set_ticker(const char* value,
    size_t size) {
  
  ticker_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.ShareCommon.Ticker)
}
inline std::string* ShareCommon::_internal_mutable_ticker() {
  
  return ticker_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShareCommon::release_ticker() {
  // @@protoc_insertion_point(field_release:instruments.ShareCommon.Ticker)
  return ticker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShareCommon::set_allocated_ticker(std::string* ticker) {
  if (ticker != nullptr) {
    
  } else {
    
  }
  ticker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticker,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.ShareCommon.Ticker)
}
inline std::string* ShareCommon::unsafe_arena_release_ticker() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.ShareCommon.Ticker)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ticker_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShareCommon::unsafe_arena_set_allocated_ticker(
    std::string* ticker) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ticker != nullptr) {
    
  } else {
    
  }
  ticker_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ticker, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.ShareCommon.Ticker)
}

// string ISIN = 2;
inline void ShareCommon::clear_isin() {
  isin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShareCommon::isin() const {
  // @@protoc_insertion_point(field_get:instruments.ShareCommon.ISIN)
  return _internal_isin();
}
inline void ShareCommon::set_isin(const std::string& value) {
  _internal_set_isin(value);
  // @@protoc_insertion_point(field_set:instruments.ShareCommon.ISIN)
}
inline std::string* ShareCommon::mutable_isin() {
  // @@protoc_insertion_point(field_mutable:instruments.ShareCommon.ISIN)
  return _internal_mutable_isin();
}
inline const std::string& ShareCommon::_internal_isin() const {
  return isin_.Get();
}
inline void ShareCommon::_internal_set_isin(const std::string& value) {
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShareCommon::set_isin(std::string&& value) {
  
  isin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.ShareCommon.ISIN)
}
inline void ShareCommon::set_isin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.ShareCommon.ISIN)
}
inline void ShareCommon::set_isin(const char* value,
    size_t size) {
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.ShareCommon.ISIN)
}
inline std::string* ShareCommon::_internal_mutable_isin() {
  
  return isin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShareCommon::release_isin() {
  // @@protoc_insertion_point(field_release:instruments.ShareCommon.ISIN)
  return isin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShareCommon::set_allocated_isin(std::string* isin) {
  if (isin != nullptr) {
    
  } else {
    
  }
  isin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.ShareCommon.ISIN)
}
inline std::string* ShareCommon::unsafe_arena_release_isin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.ShareCommon.ISIN)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return isin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShareCommon::unsafe_arena_set_allocated_isin(
    std::string* isin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isin != nullptr) {
    
  } else {
    
  }
  isin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.ShareCommon.ISIN)
}

// string Description = 3;
inline void ShareCommon::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShareCommon::description() const {
  // @@protoc_insertion_point(field_get:instruments.ShareCommon.Description)
  return _internal_description();
}
inline void ShareCommon::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:instruments.ShareCommon.Description)
}
inline std::string* ShareCommon::mutable_description() {
  // @@protoc_insertion_point(field_mutable:instruments.ShareCommon.Description)
  return _internal_mutable_description();
}
inline const std::string& ShareCommon::_internal_description() const {
  return description_.Get();
}
inline void ShareCommon::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShareCommon::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.ShareCommon.Description)
}
inline void ShareCommon::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.ShareCommon.Description)
}
inline void ShareCommon::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.ShareCommon.Description)
}
inline std::string* ShareCommon::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShareCommon::release_description() {
  // @@protoc_insertion_point(field_release:instruments.ShareCommon.Description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShareCommon::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.ShareCommon.Description)
}
inline std::string* ShareCommon::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.ShareCommon.Description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShareCommon::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.ShareCommon.Description)
}

// bool TransfersPermitted = 4;
inline void ShareCommon::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool ShareCommon::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool ShareCommon::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.ShareCommon.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void ShareCommon::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void ShareCommon::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.ShareCommon.TransfersPermitted)
}

// -------------------------------------------------------------------

// BondFixedRate

// string Name = 1;
inline void BondFixedRate::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BondFixedRate::name() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.Name)
  return _internal_name();
}
inline void BondFixedRate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.Name)
}
inline std::string* BondFixedRate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.Name)
  return _internal_mutable_name();
}
inline const std::string& BondFixedRate::_internal_name() const {
  return name_.Get();
}
inline void BondFixedRate::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BondFixedRate::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.BondFixedRate.Name)
}
inline void BondFixedRate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.BondFixedRate.Name)
}
inline void BondFixedRate::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.BondFixedRate.Name)
}
inline std::string* BondFixedRate::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BondFixedRate::release_name() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BondFixedRate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.Name)
}
inline std::string* BondFixedRate::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.BondFixedRate.Name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BondFixedRate::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.Name)
}

// string BondType = 2;
inline void BondFixedRate::clear_bondtype() {
  bondtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BondFixedRate::bondtype() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.BondType)
  return _internal_bondtype();
}
inline void BondFixedRate::set_bondtype(const std::string& value) {
  _internal_set_bondtype(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.BondType)
}
inline std::string* BondFixedRate::mutable_bondtype() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.BondType)
  return _internal_mutable_bondtype();
}
inline const std::string& BondFixedRate::_internal_bondtype() const {
  return bondtype_.Get();
}
inline void BondFixedRate::_internal_set_bondtype(const std::string& value) {
  
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BondFixedRate::set_bondtype(std::string&& value) {
  
  bondtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.BondFixedRate.BondType)
}
inline void BondFixedRate::set_bondtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.BondFixedRate.BondType)
}
inline void BondFixedRate::set_bondtype(const char* value,
    size_t size) {
  
  bondtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.BondFixedRate.BondType)
}
inline std::string* BondFixedRate::_internal_mutable_bondtype() {
  
  return bondtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BondFixedRate::release_bondtype() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.BondType)
  return bondtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BondFixedRate::set_allocated_bondtype(std::string* bondtype) {
  if (bondtype != nullptr) {
    
  } else {
    
  }
  bondtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bondtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.BondType)
}
inline std::string* BondFixedRate::unsafe_arena_release_bondtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.BondFixedRate.BondType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bondtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BondFixedRate::unsafe_arena_set_allocated_bondtype(
    std::string* bondtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bondtype != nullptr) {
    
  } else {
    
  }
  bondtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bondtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.BondType)
}

// string ISIN = 3;
inline void BondFixedRate::clear_isin() {
  isin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BondFixedRate::isin() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.ISIN)
  return _internal_isin();
}
inline void BondFixedRate::set_isin(const std::string& value) {
  _internal_set_isin(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.ISIN)
}
inline std::string* BondFixedRate::mutable_isin() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.ISIN)
  return _internal_mutable_isin();
}
inline const std::string& BondFixedRate::_internal_isin() const {
  return isin_.Get();
}
inline void BondFixedRate::_internal_set_isin(const std::string& value) {
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BondFixedRate::set_isin(std::string&& value) {
  
  isin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.BondFixedRate.ISIN)
}
inline void BondFixedRate::set_isin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.BondFixedRate.ISIN)
}
inline void BondFixedRate::set_isin(const char* value,
    size_t size) {
  
  isin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.BondFixedRate.ISIN)
}
inline std::string* BondFixedRate::_internal_mutable_isin() {
  
  return isin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BondFixedRate::release_isin() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.ISIN)
  return isin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BondFixedRate::set_allocated_isin(std::string* isin) {
  if (isin != nullptr) {
    
  } else {
    
  }
  isin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.ISIN)
}
inline std::string* BondFixedRate::unsafe_arena_release_isin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.BondFixedRate.ISIN)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return isin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BondFixedRate::unsafe_arena_set_allocated_isin(
    std::string* isin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isin != nullptr) {
    
  } else {
    
  }
  isin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.ISIN)
}

// string Collateral = 4;
inline void BondFixedRate::clear_collateral() {
  collateral_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BondFixedRate::collateral() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.Collateral)
  return _internal_collateral();
}
inline void BondFixedRate::set_collateral(const std::string& value) {
  _internal_set_collateral(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.Collateral)
}
inline std::string* BondFixedRate::mutable_collateral() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.Collateral)
  return _internal_mutable_collateral();
}
inline const std::string& BondFixedRate::_internal_collateral() const {
  return collateral_.Get();
}
inline void BondFixedRate::_internal_set_collateral(const std::string& value) {
  
  collateral_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BondFixedRate::set_collateral(std::string&& value) {
  
  collateral_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.BondFixedRate.Collateral)
}
inline void BondFixedRate::set_collateral(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collateral_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.BondFixedRate.Collateral)
}
inline void BondFixedRate::set_collateral(const char* value,
    size_t size) {
  
  collateral_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.BondFixedRate.Collateral)
}
inline std::string* BondFixedRate::_internal_mutable_collateral() {
  
  return collateral_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BondFixedRate::release_collateral() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.Collateral)
  return collateral_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BondFixedRate::set_allocated_collateral(std::string* collateral) {
  if (collateral != nullptr) {
    
  } else {
    
  }
  collateral_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collateral,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.Collateral)
}
inline std::string* BondFixedRate::unsafe_arena_release_collateral() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.BondFixedRate.Collateral)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return collateral_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BondFixedRate::unsafe_arena_set_allocated_collateral(
    std::string* collateral) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (collateral != nullptr) {
    
  } else {
    
  }
  collateral_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      collateral, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.Collateral)
}

// .instruments.CurrencyValueField ParValue = 5;
inline bool BondFixedRate::_internal_has_parvalue() const {
  return this != internal_default_instance() && parvalue_ != nullptr;
}
inline bool BondFixedRate::has_parvalue() const {
  return _internal_has_parvalue();
}
inline void BondFixedRate::clear_parvalue() {
  if (GetArena() == nullptr && parvalue_ != nullptr) {
    delete parvalue_;
  }
  parvalue_ = nullptr;
}
inline const ::instruments::CurrencyValueField& BondFixedRate::_internal_parvalue() const {
  const ::instruments::CurrencyValueField* p = parvalue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::CurrencyValueField*>(
      &::instruments::_CurrencyValueField_default_instance_);
}
inline const ::instruments::CurrencyValueField& BondFixedRate::parvalue() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.ParValue)
  return _internal_parvalue();
}
inline void BondFixedRate::unsafe_arena_set_allocated_parvalue(
    ::instruments::CurrencyValueField* parvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parvalue_);
  }
  parvalue_ = parvalue;
  if (parvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.ParValue)
}
inline ::instruments::CurrencyValueField* BondFixedRate::release_parvalue() {
  auto temp = unsafe_arena_release_parvalue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::CurrencyValueField* BondFixedRate::unsafe_arena_release_parvalue() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.ParValue)
  
  ::instruments::CurrencyValueField* temp = parvalue_;
  parvalue_ = nullptr;
  return temp;
}
inline ::instruments::CurrencyValueField* BondFixedRate::_internal_mutable_parvalue() {
  
  if (parvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::CurrencyValueField>(GetArena());
    parvalue_ = p;
  }
  return parvalue_;
}
inline ::instruments::CurrencyValueField* BondFixedRate::mutable_parvalue() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.ParValue)
  return _internal_mutable_parvalue();
}
inline void BondFixedRate::set_allocated_parvalue(::instruments::CurrencyValueField* parvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parvalue_;
  }
  if (parvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parvalue);
    if (message_arena != submessage_arena) {
      parvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parvalue, submessage_arena);
    }
    
  } else {
    
  }
  parvalue_ = parvalue;
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.ParValue)
}

// .instruments.RateField InterestRate = 6;
inline bool BondFixedRate::_internal_has_interestrate() const {
  return this != internal_default_instance() && interestrate_ != nullptr;
}
inline bool BondFixedRate::has_interestrate() const {
  return _internal_has_interestrate();
}
inline void BondFixedRate::clear_interestrate() {
  if (GetArena() == nullptr && interestrate_ != nullptr) {
    delete interestrate_;
  }
  interestrate_ = nullptr;
}
inline const ::instruments::RateField& BondFixedRate::_internal_interestrate() const {
  const ::instruments::RateField* p = interestrate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::RateField*>(
      &::instruments::_RateField_default_instance_);
}
inline const ::instruments::RateField& BondFixedRate::interestrate() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.InterestRate)
  return _internal_interestrate();
}
inline void BondFixedRate::unsafe_arena_set_allocated_interestrate(
    ::instruments::RateField* interestrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interestrate_);
  }
  interestrate_ = interestrate;
  if (interestrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.InterestRate)
}
inline ::instruments::RateField* BondFixedRate::release_interestrate() {
  auto temp = unsafe_arena_release_interestrate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::RateField* BondFixedRate::unsafe_arena_release_interestrate() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.InterestRate)
  
  ::instruments::RateField* temp = interestrate_;
  interestrate_ = nullptr;
  return temp;
}
inline ::instruments::RateField* BondFixedRate::_internal_mutable_interestrate() {
  
  if (interestrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::RateField>(GetArena());
    interestrate_ = p;
  }
  return interestrate_;
}
inline ::instruments::RateField* BondFixedRate::mutable_interestrate() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.InterestRate)
  return _internal_mutable_interestrate();
}
inline void BondFixedRate::set_allocated_interestrate(::instruments::RateField* interestrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete interestrate_;
  }
  if (interestrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(interestrate);
    if (message_arena != submessage_arena) {
      interestrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interestrate, submessage_arena);
    }
    
  } else {
    
  }
  interestrate_ = interestrate;
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.InterestRate)
}

// uint64 InterestPaymentInitialDate = 7;
inline void BondFixedRate::clear_interestpaymentinitialdate() {
  interestpaymentinitialdate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::_internal_interestpaymentinitialdate() const {
  return interestpaymentinitialdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::interestpaymentinitialdate() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.InterestPaymentInitialDate)
  return _internal_interestpaymentinitialdate();
}
inline void BondFixedRate::_internal_set_interestpaymentinitialdate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  interestpaymentinitialdate_ = value;
}
inline void BondFixedRate::set_interestpaymentinitialdate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_interestpaymentinitialdate(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.InterestPaymentInitialDate)
}

// repeated uint64 InterestPaymentDateDeltas = 8;
inline int BondFixedRate::_internal_interestpaymentdatedeltas_size() const {
  return interestpaymentdatedeltas_.size();
}
inline int BondFixedRate::interestpaymentdatedeltas_size() const {
  return _internal_interestpaymentdatedeltas_size();
}
inline void BondFixedRate::clear_interestpaymentdatedeltas() {
  interestpaymentdatedeltas_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::_internal_interestpaymentdatedeltas(int index) const {
  return interestpaymentdatedeltas_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::interestpaymentdatedeltas(int index) const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.InterestPaymentDateDeltas)
  return _internal_interestpaymentdatedeltas(index);
}
inline void BondFixedRate::set_interestpaymentdatedeltas(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  interestpaymentdatedeltas_.Set(index, value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.InterestPaymentDateDeltas)
}
inline void BondFixedRate::_internal_add_interestpaymentdatedeltas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  interestpaymentdatedeltas_.Add(value);
}
inline void BondFixedRate::add_interestpaymentdatedeltas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_interestpaymentdatedeltas(value);
  // @@protoc_insertion_point(field_add:instruments.BondFixedRate.InterestPaymentDateDeltas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BondFixedRate::_internal_interestpaymentdatedeltas() const {
  return interestpaymentdatedeltas_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BondFixedRate::interestpaymentdatedeltas() const {
  // @@protoc_insertion_point(field_list:instruments.BondFixedRate.InterestPaymentDateDeltas)
  return _internal_interestpaymentdatedeltas();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BondFixedRate::_internal_mutable_interestpaymentdatedeltas() {
  return &interestpaymentdatedeltas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BondFixedRate::mutable_interestpaymentdatedeltas() {
  // @@protoc_insertion_point(field_mutable_list:instruments.BondFixedRate.InterestPaymentDateDeltas)
  return _internal_mutable_interestpaymentdatedeltas();
}

// .instruments.RateField LatePaymentPenaltyRate = 9;
inline bool BondFixedRate::_internal_has_latepaymentpenaltyrate() const {
  return this != internal_default_instance() && latepaymentpenaltyrate_ != nullptr;
}
inline bool BondFixedRate::has_latepaymentpenaltyrate() const {
  return _internal_has_latepaymentpenaltyrate();
}
inline void BondFixedRate::clear_latepaymentpenaltyrate() {
  if (GetArena() == nullptr && latepaymentpenaltyrate_ != nullptr) {
    delete latepaymentpenaltyrate_;
  }
  latepaymentpenaltyrate_ = nullptr;
}
inline const ::instruments::RateField& BondFixedRate::_internal_latepaymentpenaltyrate() const {
  const ::instruments::RateField* p = latepaymentpenaltyrate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::RateField*>(
      &::instruments::_RateField_default_instance_);
}
inline const ::instruments::RateField& BondFixedRate::latepaymentpenaltyrate() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.LatePaymentPenaltyRate)
  return _internal_latepaymentpenaltyrate();
}
inline void BondFixedRate::unsafe_arena_set_allocated_latepaymentpenaltyrate(
    ::instruments::RateField* latepaymentpenaltyrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latepaymentpenaltyrate_);
  }
  latepaymentpenaltyrate_ = latepaymentpenaltyrate;
  if (latepaymentpenaltyrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.LatePaymentPenaltyRate)
}
inline ::instruments::RateField* BondFixedRate::release_latepaymentpenaltyrate() {
  auto temp = unsafe_arena_release_latepaymentpenaltyrate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::RateField* BondFixedRate::unsafe_arena_release_latepaymentpenaltyrate() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.LatePaymentPenaltyRate)
  
  ::instruments::RateField* temp = latepaymentpenaltyrate_;
  latepaymentpenaltyrate_ = nullptr;
  return temp;
}
inline ::instruments::RateField* BondFixedRate::_internal_mutable_latepaymentpenaltyrate() {
  
  if (latepaymentpenaltyrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::RateField>(GetArena());
    latepaymentpenaltyrate_ = p;
  }
  return latepaymentpenaltyrate_;
}
inline ::instruments::RateField* BondFixedRate::mutable_latepaymentpenaltyrate() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.LatePaymentPenaltyRate)
  return _internal_mutable_latepaymentpenaltyrate();
}
inline void BondFixedRate::set_allocated_latepaymentpenaltyrate(::instruments::RateField* latepaymentpenaltyrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latepaymentpenaltyrate_;
  }
  if (latepaymentpenaltyrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latepaymentpenaltyrate);
    if (message_arena != submessage_arena) {
      latepaymentpenaltyrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latepaymentpenaltyrate, submessage_arena);
    }
    
  } else {
    
  }
  latepaymentpenaltyrate_ = latepaymentpenaltyrate;
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.LatePaymentPenaltyRate)
}

// uint64 LatePaymentWindow = 10;
inline void BondFixedRate::clear_latepaymentwindow() {
  latepaymentwindow_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::_internal_latepaymentwindow() const {
  return latepaymentwindow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::latepaymentwindow() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.LatePaymentWindow)
  return _internal_latepaymentwindow();
}
inline void BondFixedRate::_internal_set_latepaymentwindow(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latepaymentwindow_ = value;
}
inline void BondFixedRate::set_latepaymentwindow(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latepaymentwindow(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.LatePaymentWindow)
}

// uint64 LatePaymentPenaltyPeriod = 11;
inline void BondFixedRate::clear_latepaymentpenaltyperiod() {
  latepaymentpenaltyperiod_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::_internal_latepaymentpenaltyperiod() const {
  return latepaymentpenaltyperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::latepaymentpenaltyperiod() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.LatePaymentPenaltyPeriod)
  return _internal_latepaymentpenaltyperiod();
}
inline void BondFixedRate::_internal_set_latepaymentpenaltyperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latepaymentpenaltyperiod_ = value;
}
inline void BondFixedRate::set_latepaymentpenaltyperiod(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latepaymentpenaltyperiod(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.LatePaymentPenaltyPeriod)
}

// uint64 MaturityDate = 12;
inline void BondFixedRate::clear_maturitydate() {
  maturitydate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::_internal_maturitydate() const {
  return maturitydate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BondFixedRate::maturitydate() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.MaturityDate)
  return _internal_maturitydate();
}
inline void BondFixedRate::_internal_set_maturitydate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  maturitydate_ = value;
}
inline void BondFixedRate::set_maturitydate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maturitydate(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.MaturityDate)
}

// .instruments.AgeRestrictionField AgeRestriction = 13;
inline bool BondFixedRate::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool BondFixedRate::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void BondFixedRate::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& BondFixedRate::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& BondFixedRate::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.AgeRestriction)
  return _internal_agerestriction();
}
inline void BondFixedRate::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.BondFixedRate.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* BondFixedRate::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* BondFixedRate::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.BondFixedRate.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* BondFixedRate::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* BondFixedRate::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.BondFixedRate.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void BondFixedRate::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.BondFixedRate.AgeRestriction)
}

// bool TransfersPermitted = 14;
inline void BondFixedRate::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool BondFixedRate::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool BondFixedRate::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.BondFixedRate.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void BondFixedRate::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void BondFixedRate::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.BondFixedRate.TransfersPermitted)
}

// -------------------------------------------------------------------

// DiscountCoupon

// string RedeemingEntity = 1;
inline void DiscountCoupon::clear_redeemingentity() {
  redeemingentity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscountCoupon::redeemingentity() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.RedeemingEntity)
  return _internal_redeemingentity();
}
inline void DiscountCoupon::set_redeemingentity(const std::string& value) {
  _internal_set_redeemingentity(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.RedeemingEntity)
}
inline std::string* DiscountCoupon::mutable_redeemingentity() {
  // @@protoc_insertion_point(field_mutable:instruments.DiscountCoupon.RedeemingEntity)
  return _internal_mutable_redeemingentity();
}
inline const std::string& DiscountCoupon::_internal_redeemingentity() const {
  return redeemingentity_.Get();
}
inline void DiscountCoupon::_internal_set_redeemingentity(const std::string& value) {
  
  redeemingentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscountCoupon::set_redeemingentity(std::string&& value) {
  
  redeemingentity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DiscountCoupon.RedeemingEntity)
}
inline void DiscountCoupon::set_redeemingentity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redeemingentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DiscountCoupon.RedeemingEntity)
}
inline void DiscountCoupon::set_redeemingentity(const char* value,
    size_t size) {
  
  redeemingentity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DiscountCoupon.RedeemingEntity)
}
inline std::string* DiscountCoupon::_internal_mutable_redeemingentity() {
  
  return redeemingentity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscountCoupon::release_redeemingentity() {
  // @@protoc_insertion_point(field_release:instruments.DiscountCoupon.RedeemingEntity)
  return redeemingentity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscountCoupon::set_allocated_redeemingentity(std::string* redeemingentity) {
  if (redeemingentity != nullptr) {
    
  } else {
    
  }
  redeemingentity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redeemingentity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DiscountCoupon.RedeemingEntity)
}
inline std::string* DiscountCoupon::unsafe_arena_release_redeemingentity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DiscountCoupon.RedeemingEntity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return redeemingentity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscountCoupon::unsafe_arena_set_allocated_redeemingentity(
    std::string* redeemingentity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (redeemingentity != nullptr) {
    
  } else {
    
  }
  redeemingentity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      redeemingentity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DiscountCoupon.RedeemingEntity)
}

// uint64 ValidFromTimestamp = 2;
inline void DiscountCoupon::clear_validfromtimestamp() {
  validfromtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DiscountCoupon::_internal_validfromtimestamp() const {
  return validfromtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DiscountCoupon::validfromtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.ValidFromTimestamp)
  return _internal_validfromtimestamp();
}
inline void DiscountCoupon::_internal_set_validfromtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  validfromtimestamp_ = value;
}
inline void DiscountCoupon::set_validfromtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_validfromtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.ValidFromTimestamp)
}

// uint64 ExpirationTimestamp = 3;
inline void DiscountCoupon::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DiscountCoupon::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DiscountCoupon::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void DiscountCoupon::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void DiscountCoupon::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.ExpirationTimestamp)
}

// string CouponName = 6;
inline void DiscountCoupon::clear_couponname() {
  couponname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscountCoupon::couponname() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.CouponName)
  return _internal_couponname();
}
inline void DiscountCoupon::set_couponname(const std::string& value) {
  _internal_set_couponname(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.CouponName)
}
inline std::string* DiscountCoupon::mutable_couponname() {
  // @@protoc_insertion_point(field_mutable:instruments.DiscountCoupon.CouponName)
  return _internal_mutable_couponname();
}
inline const std::string& DiscountCoupon::_internal_couponname() const {
  return couponname_.Get();
}
inline void DiscountCoupon::_internal_set_couponname(const std::string& value) {
  
  couponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscountCoupon::set_couponname(std::string&& value) {
  
  couponname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DiscountCoupon.CouponName)
}
inline void DiscountCoupon::set_couponname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  couponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DiscountCoupon.CouponName)
}
inline void DiscountCoupon::set_couponname(const char* value,
    size_t size) {
  
  couponname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DiscountCoupon.CouponName)
}
inline std::string* DiscountCoupon::_internal_mutable_couponname() {
  
  return couponname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscountCoupon::release_couponname() {
  // @@protoc_insertion_point(field_release:instruments.DiscountCoupon.CouponName)
  return couponname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscountCoupon::set_allocated_couponname(std::string* couponname) {
  if (couponname != nullptr) {
    
  } else {
    
  }
  couponname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), couponname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DiscountCoupon.CouponName)
}
inline std::string* DiscountCoupon::unsafe_arena_release_couponname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DiscountCoupon.CouponName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return couponname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscountCoupon::unsafe_arena_set_allocated_couponname(
    std::string* couponname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (couponname != nullptr) {
    
  } else {
    
  }
  couponname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      couponname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DiscountCoupon.CouponName)
}

// bool TransfersPermitted = 8;
inline void DiscountCoupon::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool DiscountCoupon::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool DiscountCoupon::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void DiscountCoupon::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void DiscountCoupon::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.TransfersPermitted)
}

// .instruments.CurrencyValueField FaceValue = 9;
inline bool DiscountCoupon::_internal_has_facevalue() const {
  return this != internal_default_instance() && facevalue_ != nullptr;
}
inline bool DiscountCoupon::has_facevalue() const {
  return _internal_has_facevalue();
}
inline void DiscountCoupon::clear_facevalue() {
  if (GetArena() == nullptr && facevalue_ != nullptr) {
    delete facevalue_;
  }
  facevalue_ = nullptr;
}
inline const ::instruments::CurrencyValueField& DiscountCoupon::_internal_facevalue() const {
  const ::instruments::CurrencyValueField* p = facevalue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::CurrencyValueField*>(
      &::instruments::_CurrencyValueField_default_instance_);
}
inline const ::instruments::CurrencyValueField& DiscountCoupon::facevalue() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.FaceValue)
  return _internal_facevalue();
}
inline void DiscountCoupon::unsafe_arena_set_allocated_facevalue(
    ::instruments::CurrencyValueField* facevalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(facevalue_);
  }
  facevalue_ = facevalue;
  if (facevalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DiscountCoupon.FaceValue)
}
inline ::instruments::CurrencyValueField* DiscountCoupon::release_facevalue() {
  auto temp = unsafe_arena_release_facevalue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::CurrencyValueField* DiscountCoupon::unsafe_arena_release_facevalue() {
  // @@protoc_insertion_point(field_release:instruments.DiscountCoupon.FaceValue)
  
  ::instruments::CurrencyValueField* temp = facevalue_;
  facevalue_ = nullptr;
  return temp;
}
inline ::instruments::CurrencyValueField* DiscountCoupon::_internal_mutable_facevalue() {
  
  if (facevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::CurrencyValueField>(GetArena());
    facevalue_ = p;
  }
  return facevalue_;
}
inline ::instruments::CurrencyValueField* DiscountCoupon::mutable_facevalue() {
  // @@protoc_insertion_point(field_mutable:instruments.DiscountCoupon.FaceValue)
  return _internal_mutable_facevalue();
}
inline void DiscountCoupon::set_allocated_facevalue(::instruments::CurrencyValueField* facevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete facevalue_;
  }
  if (facevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(facevalue);
    if (message_arena != submessage_arena) {
      facevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, facevalue, submessage_arena);
    }
    
  } else {
    
  }
  facevalue_ = facevalue;
  // @@protoc_insertion_point(field_set_allocated:instruments.DiscountCoupon.FaceValue)
}

// string RedemptionVenue = 10;
inline void DiscountCoupon::clear_redemptionvenue() {
  redemptionvenue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscountCoupon::redemptionvenue() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.RedemptionVenue)
  return _internal_redemptionvenue();
}
inline void DiscountCoupon::set_redemptionvenue(const std::string& value) {
  _internal_set_redemptionvenue(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.RedemptionVenue)
}
inline std::string* DiscountCoupon::mutable_redemptionvenue() {
  // @@protoc_insertion_point(field_mutable:instruments.DiscountCoupon.RedemptionVenue)
  return _internal_mutable_redemptionvenue();
}
inline const std::string& DiscountCoupon::_internal_redemptionvenue() const {
  return redemptionvenue_.Get();
}
inline void DiscountCoupon::_internal_set_redemptionvenue(const std::string& value) {
  
  redemptionvenue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscountCoupon::set_redemptionvenue(std::string&& value) {
  
  redemptionvenue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DiscountCoupon.RedemptionVenue)
}
inline void DiscountCoupon::set_redemptionvenue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redemptionvenue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DiscountCoupon.RedemptionVenue)
}
inline void DiscountCoupon::set_redemptionvenue(const char* value,
    size_t size) {
  
  redemptionvenue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DiscountCoupon.RedemptionVenue)
}
inline std::string* DiscountCoupon::_internal_mutable_redemptionvenue() {
  
  return redemptionvenue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscountCoupon::release_redemptionvenue() {
  // @@protoc_insertion_point(field_release:instruments.DiscountCoupon.RedemptionVenue)
  return redemptionvenue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscountCoupon::set_allocated_redemptionvenue(std::string* redemptionvenue) {
  if (redemptionvenue != nullptr) {
    
  } else {
    
  }
  redemptionvenue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redemptionvenue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DiscountCoupon.RedemptionVenue)
}
inline std::string* DiscountCoupon::unsafe_arena_release_redemptionvenue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DiscountCoupon.RedemptionVenue)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return redemptionvenue_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscountCoupon::unsafe_arena_set_allocated_redemptionvenue(
    std::string* redemptionvenue) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (redemptionvenue != nullptr) {
    
  } else {
    
  }
  redemptionvenue_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      redemptionvenue, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DiscountCoupon.RedemptionVenue)
}

// string Details = 11;
inline void DiscountCoupon::clear_details() {
  details_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DiscountCoupon::details() const {
  // @@protoc_insertion_point(field_get:instruments.DiscountCoupon.Details)
  return _internal_details();
}
inline void DiscountCoupon::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:instruments.DiscountCoupon.Details)
}
inline std::string* DiscountCoupon::mutable_details() {
  // @@protoc_insertion_point(field_mutable:instruments.DiscountCoupon.Details)
  return _internal_mutable_details();
}
inline const std::string& DiscountCoupon::_internal_details() const {
  return details_.Get();
}
inline void DiscountCoupon::_internal_set_details(const std::string& value) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DiscountCoupon::set_details(std::string&& value) {
  
  details_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DiscountCoupon.Details)
}
inline void DiscountCoupon::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DiscountCoupon.Details)
}
inline void DiscountCoupon::set_details(const char* value,
    size_t size) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DiscountCoupon.Details)
}
inline std::string* DiscountCoupon::_internal_mutable_details() {
  
  return details_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DiscountCoupon::release_details() {
  // @@protoc_insertion_point(field_release:instruments.DiscountCoupon.Details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DiscountCoupon::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DiscountCoupon.Details)
}
inline std::string* DiscountCoupon::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DiscountCoupon.Details)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return details_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DiscountCoupon::unsafe_arena_set_allocated_details(
    std::string* details) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (details != nullptr) {
    
  } else {
    
  }
  details_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      details, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DiscountCoupon.Details)
}

// -------------------------------------------------------------------

// DeprecatedLoyaltyPoints

// .instruments.AgeRestrictionField AgeRestriction = 1;
inline bool DeprecatedLoyaltyPoints::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool DeprecatedLoyaltyPoints::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void DeprecatedLoyaltyPoints::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& DeprecatedLoyaltyPoints::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& DeprecatedLoyaltyPoints::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.DeprecatedLoyaltyPoints.AgeRestriction)
  return _internal_agerestriction();
}
inline void DeprecatedLoyaltyPoints::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DeprecatedLoyaltyPoints.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* DeprecatedLoyaltyPoints::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* DeprecatedLoyaltyPoints::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.DeprecatedLoyaltyPoints.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* DeprecatedLoyaltyPoints::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* DeprecatedLoyaltyPoints::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.DeprecatedLoyaltyPoints.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void DeprecatedLoyaltyPoints::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.DeprecatedLoyaltyPoints.AgeRestriction)
}

// string ProgramName = 2;
inline void DeprecatedLoyaltyPoints::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeprecatedLoyaltyPoints::programname() const {
  // @@protoc_insertion_point(field_get:instruments.DeprecatedLoyaltyPoints.ProgramName)
  return _internal_programname();
}
inline void DeprecatedLoyaltyPoints::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:instruments.DeprecatedLoyaltyPoints.ProgramName)
}
inline std::string* DeprecatedLoyaltyPoints::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:instruments.DeprecatedLoyaltyPoints.ProgramName)
  return _internal_mutable_programname();
}
inline const std::string& DeprecatedLoyaltyPoints::_internal_programname() const {
  return programname_.Get();
}
inline void DeprecatedLoyaltyPoints::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeprecatedLoyaltyPoints::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DeprecatedLoyaltyPoints.ProgramName)
}
inline void DeprecatedLoyaltyPoints::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DeprecatedLoyaltyPoints.ProgramName)
}
inline void DeprecatedLoyaltyPoints::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DeprecatedLoyaltyPoints.ProgramName)
}
inline std::string* DeprecatedLoyaltyPoints::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeprecatedLoyaltyPoints::release_programname() {
  // @@protoc_insertion_point(field_release:instruments.DeprecatedLoyaltyPoints.ProgramName)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeprecatedLoyaltyPoints::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DeprecatedLoyaltyPoints.ProgramName)
}
inline std::string* DeprecatedLoyaltyPoints::unsafe_arena_release_programname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DeprecatedLoyaltyPoints.ProgramName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return programname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeprecatedLoyaltyPoints::unsafe_arena_set_allocated_programname(
    std::string* programname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      programname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DeprecatedLoyaltyPoints.ProgramName)
}

// uint64 ExpirationTimestamp = 4;
inline void DeprecatedLoyaltyPoints::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeprecatedLoyaltyPoints::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeprecatedLoyaltyPoints::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.DeprecatedLoyaltyPoints.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void DeprecatedLoyaltyPoints::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void DeprecatedLoyaltyPoints::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.DeprecatedLoyaltyPoints.ExpirationTimestamp)
}

// string Details = 5;
inline void DeprecatedLoyaltyPoints::clear_details() {
  details_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeprecatedLoyaltyPoints::details() const {
  // @@protoc_insertion_point(field_get:instruments.DeprecatedLoyaltyPoints.Details)
  return _internal_details();
}
inline void DeprecatedLoyaltyPoints::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:instruments.DeprecatedLoyaltyPoints.Details)
}
inline std::string* DeprecatedLoyaltyPoints::mutable_details() {
  // @@protoc_insertion_point(field_mutable:instruments.DeprecatedLoyaltyPoints.Details)
  return _internal_mutable_details();
}
inline const std::string& DeprecatedLoyaltyPoints::_internal_details() const {
  return details_.Get();
}
inline void DeprecatedLoyaltyPoints::_internal_set_details(const std::string& value) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeprecatedLoyaltyPoints::set_details(std::string&& value) {
  
  details_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.DeprecatedLoyaltyPoints.Details)
}
inline void DeprecatedLoyaltyPoints::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.DeprecatedLoyaltyPoints.Details)
}
inline void DeprecatedLoyaltyPoints::set_details(const char* value,
    size_t size) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.DeprecatedLoyaltyPoints.Details)
}
inline std::string* DeprecatedLoyaltyPoints::_internal_mutable_details() {
  
  return details_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeprecatedLoyaltyPoints::release_details() {
  // @@protoc_insertion_point(field_release:instruments.DeprecatedLoyaltyPoints.Details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeprecatedLoyaltyPoints::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.DeprecatedLoyaltyPoints.Details)
}
inline std::string* DeprecatedLoyaltyPoints::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.DeprecatedLoyaltyPoints.Details)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return details_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeprecatedLoyaltyPoints::unsafe_arena_set_allocated_details(
    std::string* details) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (details != nullptr) {
    
  } else {
    
  }
  details_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      details, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.DeprecatedLoyaltyPoints.Details)
}

// bool TransfersPermitted = 6;
inline void DeprecatedLoyaltyPoints::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool DeprecatedLoyaltyPoints::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool DeprecatedLoyaltyPoints::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.DeprecatedLoyaltyPoints.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void DeprecatedLoyaltyPoints::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void DeprecatedLoyaltyPoints::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.DeprecatedLoyaltyPoints.TransfersPermitted)
}

// -------------------------------------------------------------------

// TicketAdmission

// .instruments.AgeRestrictionField AgeRestriction = 1;
inline bool TicketAdmission::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool TicketAdmission::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void TicketAdmission::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& TicketAdmission::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& TicketAdmission::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.AgeRestriction)
  return _internal_agerestriction();
}
inline void TicketAdmission::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* TicketAdmission::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* TicketAdmission::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* TicketAdmission::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* TicketAdmission::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void TicketAdmission::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.AgeRestriction)
}

// string Venue = 3;
inline void TicketAdmission::clear_venue() {
  venue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::venue() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Venue)
  return _internal_venue();
}
inline void TicketAdmission::set_venue(const std::string& value) {
  _internal_set_venue(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Venue)
}
inline std::string* TicketAdmission::mutable_venue() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Venue)
  return _internal_mutable_venue();
}
inline const std::string& TicketAdmission::_internal_venue() const {
  return venue_.Get();
}
inline void TicketAdmission::_internal_set_venue(const std::string& value) {
  
  venue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_venue(std::string&& value) {
  
  venue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Venue)
}
inline void TicketAdmission::set_venue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  venue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Venue)
}
inline void TicketAdmission::set_venue(const char* value,
    size_t size) {
  
  venue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Venue)
}
inline std::string* TicketAdmission::_internal_mutable_venue() {
  
  return venue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_venue() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Venue)
  return venue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_venue(std::string* venue) {
  if (venue != nullptr) {
    
  } else {
    
  }
  venue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), venue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Venue)
}
inline std::string* TicketAdmission::unsafe_arena_release_venue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Venue)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return venue_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_venue(
    std::string* venue) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (venue != nullptr) {
    
  } else {
    
  }
  venue_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      venue, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Venue)
}

// string Area = 5;
inline void TicketAdmission::clear_area() {
  area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::area() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Area)
  return _internal_area();
}
inline void TicketAdmission::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Area)
}
inline std::string* TicketAdmission::mutable_area() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Area)
  return _internal_mutable_area();
}
inline const std::string& TicketAdmission::_internal_area() const {
  return area_.Get();
}
inline void TicketAdmission::_internal_set_area(const std::string& value) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_area(std::string&& value) {
  
  area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Area)
}
inline void TicketAdmission::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Area)
}
inline void TicketAdmission::set_area(const char* value,
    size_t size) {
  
  area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Area)
}
inline std::string* TicketAdmission::_internal_mutable_area() {
  
  return area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_area() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Area)
  return area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    
  } else {
    
  }
  area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Area)
}
inline std::string* TicketAdmission::unsafe_arena_release_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Area)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return area_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_area(
    std::string* area) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (area != nullptr) {
    
  } else {
    
  }
  area_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      area, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Area)
}

// string Seat = 6;
inline void TicketAdmission::clear_seat() {
  seat_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::seat() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Seat)
  return _internal_seat();
}
inline void TicketAdmission::set_seat(const std::string& value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Seat)
}
inline std::string* TicketAdmission::mutable_seat() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Seat)
  return _internal_mutable_seat();
}
inline const std::string& TicketAdmission::_internal_seat() const {
  return seat_.Get();
}
inline void TicketAdmission::_internal_set_seat(const std::string& value) {
  
  seat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_seat(std::string&& value) {
  
  seat_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Seat)
}
inline void TicketAdmission::set_seat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  seat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Seat)
}
inline void TicketAdmission::set_seat(const char* value,
    size_t size) {
  
  seat_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Seat)
}
inline std::string* TicketAdmission::_internal_mutable_seat() {
  
  return seat_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_seat() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Seat)
  return seat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_seat(std::string* seat) {
  if (seat != nullptr) {
    
  } else {
    
  }
  seat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seat,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Seat)
}
inline std::string* TicketAdmission::unsafe_arena_release_seat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Seat)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return seat_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_seat(
    std::string* seat) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (seat != nullptr) {
    
  } else {
    
  }
  seat_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      seat, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Seat)
}

// uint64 EventStartTimestamp = 7;
inline void TicketAdmission::clear_eventstarttimestamp() {
  eventstarttimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TicketAdmission::_internal_eventstarttimestamp() const {
  return eventstarttimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TicketAdmission::eventstarttimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.EventStartTimestamp)
  return _internal_eventstarttimestamp();
}
inline void TicketAdmission::_internal_set_eventstarttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  eventstarttimestamp_ = value;
}
inline void TicketAdmission::set_eventstarttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_eventstarttimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.EventStartTimestamp)
}

// string EventName = 10;
inline void TicketAdmission::clear_eventname() {
  eventname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::eventname() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.EventName)
  return _internal_eventname();
}
inline void TicketAdmission::set_eventname(const std::string& value) {
  _internal_set_eventname(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.EventName)
}
inline std::string* TicketAdmission::mutable_eventname() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.EventName)
  return _internal_mutable_eventname();
}
inline const std::string& TicketAdmission::_internal_eventname() const {
  return eventname_.Get();
}
inline void TicketAdmission::_internal_set_eventname(const std::string& value) {
  
  eventname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_eventname(std::string&& value) {
  
  eventname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.EventName)
}
inline void TicketAdmission::set_eventname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.EventName)
}
inline void TicketAdmission::set_eventname(const char* value,
    size_t size) {
  
  eventname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.EventName)
}
inline std::string* TicketAdmission::_internal_mutable_eventname() {
  
  return eventname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_eventname() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.EventName)
  return eventname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_eventname(std::string* eventname) {
  if (eventname != nullptr) {
    
  } else {
    
  }
  eventname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.EventName)
}
inline std::string* TicketAdmission::unsafe_arena_release_eventname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.EventName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return eventname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_eventname(
    std::string* eventname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (eventname != nullptr) {
    
  } else {
    
  }
  eventname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      eventname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.EventName)
}

// bool TransfersPermitted = 11;
inline void TicketAdmission::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool TicketAdmission::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool TicketAdmission::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void TicketAdmission::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void TicketAdmission::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.TransfersPermitted)
}

// string Details = 12;
inline void TicketAdmission::clear_details() {
  details_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::details() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Details)
  return _internal_details();
}
inline void TicketAdmission::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Details)
}
inline std::string* TicketAdmission::mutable_details() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Details)
  return _internal_mutable_details();
}
inline const std::string& TicketAdmission::_internal_details() const {
  return details_.Get();
}
inline void TicketAdmission::_internal_set_details(const std::string& value) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_details(std::string&& value) {
  
  details_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Details)
}
inline void TicketAdmission::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Details)
}
inline void TicketAdmission::set_details(const char* value,
    size_t size) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Details)
}
inline std::string* TicketAdmission::_internal_mutable_details() {
  
  return details_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_details() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Details)
}
inline std::string* TicketAdmission::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Details)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return details_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_details(
    std::string* details) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (details != nullptr) {
    
  } else {
    
  }
  details_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      details, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Details)
}

// string Section = 13;
inline void TicketAdmission::clear_section() {
  section_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::section() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Section)
  return _internal_section();
}
inline void TicketAdmission::set_section(const std::string& value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Section)
}
inline std::string* TicketAdmission::mutable_section() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Section)
  return _internal_mutable_section();
}
inline const std::string& TicketAdmission::_internal_section() const {
  return section_.Get();
}
inline void TicketAdmission::_internal_set_section(const std::string& value) {
  
  section_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_section(std::string&& value) {
  
  section_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Section)
}
inline void TicketAdmission::set_section(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  section_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Section)
}
inline void TicketAdmission::set_section(const char* value,
    size_t size) {
  
  section_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Section)
}
inline std::string* TicketAdmission::_internal_mutable_section() {
  
  return section_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_section() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Section)
  return section_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_section(std::string* section) {
  if (section != nullptr) {
    
  } else {
    
  }
  section_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), section,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Section)
}
inline std::string* TicketAdmission::unsafe_arena_release_section() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Section)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return section_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_section(
    std::string* section) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (section != nullptr) {
    
  } else {
    
  }
  section_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      section, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Section)
}

// string Row = 14;
inline void TicketAdmission::clear_row() {
  row_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TicketAdmission::row() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.Row)
  return _internal_row();
}
inline void TicketAdmission::set_row(const std::string& value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.Row)
}
inline std::string* TicketAdmission::mutable_row() {
  // @@protoc_insertion_point(field_mutable:instruments.TicketAdmission.Row)
  return _internal_mutable_row();
}
inline const std::string& TicketAdmission::_internal_row() const {
  return row_.Get();
}
inline void TicketAdmission::_internal_set_row(const std::string& value) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TicketAdmission::set_row(std::string&& value) {
  
  row_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.TicketAdmission.Row)
}
inline void TicketAdmission::set_row(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.TicketAdmission.Row)
}
inline void TicketAdmission::set_row(const char* value,
    size_t size) {
  
  row_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.TicketAdmission.Row)
}
inline std::string* TicketAdmission::_internal_mutable_row() {
  
  return row_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TicketAdmission::release_row() {
  // @@protoc_insertion_point(field_release:instruments.TicketAdmission.Row)
  return row_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TicketAdmission::set_allocated_row(std::string* row) {
  if (row != nullptr) {
    
  } else {
    
  }
  row_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), row,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.TicketAdmission.Row)
}
inline std::string* TicketAdmission::unsafe_arena_release_row() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.TicketAdmission.Row)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return row_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TicketAdmission::unsafe_arena_set_allocated_row(
    std::string* row) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (row != nullptr) {
    
  } else {
    
  }
  row_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      row, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.TicketAdmission.Row)
}

// uint64 EventEndTimestamp = 15;
inline void TicketAdmission::clear_eventendtimestamp() {
  eventendtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TicketAdmission::_internal_eventendtimestamp() const {
  return eventendtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TicketAdmission::eventendtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.TicketAdmission.EventEndTimestamp)
  return _internal_eventendtimestamp();
}
inline void TicketAdmission::_internal_set_eventendtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  eventendtimestamp_ = value;
}
inline void TicketAdmission::set_eventendtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_eventendtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.TicketAdmission.EventEndTimestamp)
}

// -------------------------------------------------------------------

// CasinoChip

// string UseType = 2;
inline void CasinoChip::clear_usetype() {
  usetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CasinoChip::usetype() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.UseType)
  return _internal_usetype();
}
inline void CasinoChip::set_usetype(const std::string& value) {
  _internal_set_usetype(value);
  // @@protoc_insertion_point(field_set:instruments.CasinoChip.UseType)
}
inline std::string* CasinoChip::mutable_usetype() {
  // @@protoc_insertion_point(field_mutable:instruments.CasinoChip.UseType)
  return _internal_mutable_usetype();
}
inline const std::string& CasinoChip::_internal_usetype() const {
  return usetype_.Get();
}
inline void CasinoChip::_internal_set_usetype(const std::string& value) {
  
  usetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CasinoChip::set_usetype(std::string&& value) {
  
  usetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.CasinoChip.UseType)
}
inline void CasinoChip::set_usetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.CasinoChip.UseType)
}
inline void CasinoChip::set_usetype(const char* value,
    size_t size) {
  
  usetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.CasinoChip.UseType)
}
inline std::string* CasinoChip::_internal_mutable_usetype() {
  
  return usetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CasinoChip::release_usetype() {
  // @@protoc_insertion_point(field_release:instruments.CasinoChip.UseType)
  return usetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasinoChip::set_allocated_usetype(std::string* usetype) {
  if (usetype != nullptr) {
    
  } else {
    
  }
  usetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.CasinoChip.UseType)
}
inline std::string* CasinoChip::unsafe_arena_release_usetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.CasinoChip.UseType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return usetype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CasinoChip::unsafe_arena_set_allocated_usetype(
    std::string* usetype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (usetype != nullptr) {
    
  } else {
    
  }
  usetype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      usetype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CasinoChip.UseType)
}

// .instruments.AgeRestrictionField AgeRestriction = 3;
inline bool CasinoChip::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool CasinoChip::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void CasinoChip::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& CasinoChip::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& CasinoChip::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.AgeRestriction)
  return _internal_agerestriction();
}
inline void CasinoChip::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CasinoChip.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* CasinoChip::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* CasinoChip::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.CasinoChip.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* CasinoChip::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* CasinoChip::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.CasinoChip.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void CasinoChip::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.CasinoChip.AgeRestriction)
}

// uint64 ExpirationTimestamp = 5;
inline void CasinoChip::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasinoChip::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CasinoChip::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void CasinoChip::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void CasinoChip::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.CasinoChip.ExpirationTimestamp)
}

// bool TransfersPermitted = 7;
inline void CasinoChip::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool CasinoChip::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool CasinoChip::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void CasinoChip::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void CasinoChip::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.CasinoChip.TransfersPermitted)
}

// string CasinoName = 8;
inline void CasinoChip::clear_casinoname() {
  casinoname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CasinoChip::casinoname() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.CasinoName)
  return _internal_casinoname();
}
inline void CasinoChip::set_casinoname(const std::string& value) {
  _internal_set_casinoname(value);
  // @@protoc_insertion_point(field_set:instruments.CasinoChip.CasinoName)
}
inline std::string* CasinoChip::mutable_casinoname() {
  // @@protoc_insertion_point(field_mutable:instruments.CasinoChip.CasinoName)
  return _internal_mutable_casinoname();
}
inline const std::string& CasinoChip::_internal_casinoname() const {
  return casinoname_.Get();
}
inline void CasinoChip::_internal_set_casinoname(const std::string& value) {
  
  casinoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CasinoChip::set_casinoname(std::string&& value) {
  
  casinoname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.CasinoChip.CasinoName)
}
inline void CasinoChip::set_casinoname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  casinoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.CasinoChip.CasinoName)
}
inline void CasinoChip::set_casinoname(const char* value,
    size_t size) {
  
  casinoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.CasinoChip.CasinoName)
}
inline std::string* CasinoChip::_internal_mutable_casinoname() {
  
  return casinoname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CasinoChip::release_casinoname() {
  // @@protoc_insertion_point(field_release:instruments.CasinoChip.CasinoName)
  return casinoname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CasinoChip::set_allocated_casinoname(std::string* casinoname) {
  if (casinoname != nullptr) {
    
  } else {
    
  }
  casinoname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), casinoname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.CasinoChip.CasinoName)
}
inline std::string* CasinoChip::unsafe_arena_release_casinoname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.CasinoChip.CasinoName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return casinoname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CasinoChip::unsafe_arena_set_allocated_casinoname(
    std::string* casinoname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (casinoname != nullptr) {
    
  } else {
    
  }
  casinoname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      casinoname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CasinoChip.CasinoName)
}

// .instruments.CurrencyValueField FaceValue = 9;
inline bool CasinoChip::_internal_has_facevalue() const {
  return this != internal_default_instance() && facevalue_ != nullptr;
}
inline bool CasinoChip::has_facevalue() const {
  return _internal_has_facevalue();
}
inline void CasinoChip::clear_facevalue() {
  if (GetArena() == nullptr && facevalue_ != nullptr) {
    delete facevalue_;
  }
  facevalue_ = nullptr;
}
inline const ::instruments::CurrencyValueField& CasinoChip::_internal_facevalue() const {
  const ::instruments::CurrencyValueField* p = facevalue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::CurrencyValueField*>(
      &::instruments::_CurrencyValueField_default_instance_);
}
inline const ::instruments::CurrencyValueField& CasinoChip::facevalue() const {
  // @@protoc_insertion_point(field_get:instruments.CasinoChip.FaceValue)
  return _internal_facevalue();
}
inline void CasinoChip::unsafe_arena_set_allocated_facevalue(
    ::instruments::CurrencyValueField* facevalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(facevalue_);
  }
  facevalue_ = facevalue;
  if (facevalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CasinoChip.FaceValue)
}
inline ::instruments::CurrencyValueField* CasinoChip::release_facevalue() {
  auto temp = unsafe_arena_release_facevalue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::CurrencyValueField* CasinoChip::unsafe_arena_release_facevalue() {
  // @@protoc_insertion_point(field_release:instruments.CasinoChip.FaceValue)
  
  ::instruments::CurrencyValueField* temp = facevalue_;
  facevalue_ = nullptr;
  return temp;
}
inline ::instruments::CurrencyValueField* CasinoChip::_internal_mutable_facevalue() {
  
  if (facevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::CurrencyValueField>(GetArena());
    facevalue_ = p;
  }
  return facevalue_;
}
inline ::instruments::CurrencyValueField* CasinoChip::mutable_facevalue() {
  // @@protoc_insertion_point(field_mutable:instruments.CasinoChip.FaceValue)
  return _internal_mutable_facevalue();
}
inline void CasinoChip::set_allocated_facevalue(::instruments::CurrencyValueField* facevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete facevalue_;
  }
  if (facevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(facevalue);
    if (message_arena != submessage_arena) {
      facevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, facevalue, submessage_arena);
    }
    
  } else {
    
  }
  facevalue_ = facevalue;
  // @@protoc_insertion_point(field_set_allocated:instruments.CasinoChip.FaceValue)
}

// -------------------------------------------------------------------

// InformationServiceLicense

// .instruments.AgeRestrictionField AgeRestriction = 1;
inline bool InformationServiceLicense::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool InformationServiceLicense::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void InformationServiceLicense::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& InformationServiceLicense::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& InformationServiceLicense::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.InformationServiceLicense.AgeRestriction)
  return _internal_agerestriction();
}
inline void InformationServiceLicense::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.InformationServiceLicense.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* InformationServiceLicense::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* InformationServiceLicense::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.InformationServiceLicense.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* InformationServiceLicense::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* InformationServiceLicense::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.InformationServiceLicense.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void InformationServiceLicense::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.InformationServiceLicense.AgeRestriction)
}

// uint64 ExpirationTimestamp = 2;
inline void InformationServiceLicense::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InformationServiceLicense::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InformationServiceLicense::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.InformationServiceLicense.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void InformationServiceLicense::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void InformationServiceLicense::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.InformationServiceLicense.ExpirationTimestamp)
}

// string ServiceName = 3;
inline void InformationServiceLicense::clear_servicename() {
  servicename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InformationServiceLicense::servicename() const {
  // @@protoc_insertion_point(field_get:instruments.InformationServiceLicense.ServiceName)
  return _internal_servicename();
}
inline void InformationServiceLicense::set_servicename(const std::string& value) {
  _internal_set_servicename(value);
  // @@protoc_insertion_point(field_set:instruments.InformationServiceLicense.ServiceName)
}
inline std::string* InformationServiceLicense::mutable_servicename() {
  // @@protoc_insertion_point(field_mutable:instruments.InformationServiceLicense.ServiceName)
  return _internal_mutable_servicename();
}
inline const std::string& InformationServiceLicense::_internal_servicename() const {
  return servicename_.Get();
}
inline void InformationServiceLicense::_internal_set_servicename(const std::string& value) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InformationServiceLicense::set_servicename(std::string&& value) {
  
  servicename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.InformationServiceLicense.ServiceName)
}
inline void InformationServiceLicense::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.InformationServiceLicense.ServiceName)
}
inline void InformationServiceLicense::set_servicename(const char* value,
    size_t size) {
  
  servicename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.InformationServiceLicense.ServiceName)
}
inline std::string* InformationServiceLicense::_internal_mutable_servicename() {
  
  return servicename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InformationServiceLicense::release_servicename() {
  // @@protoc_insertion_point(field_release:instruments.InformationServiceLicense.ServiceName)
  return servicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InformationServiceLicense::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servicename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.InformationServiceLicense.ServiceName)
}
inline std::string* InformationServiceLicense::unsafe_arena_release_servicename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.InformationServiceLicense.ServiceName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return servicename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InformationServiceLicense::unsafe_arena_set_allocated_servicename(
    std::string* servicename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (servicename != nullptr) {
    
  } else {
    
  }
  servicename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      servicename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.InformationServiceLicense.ServiceName)
}

// bool TransfersPermitted = 4;
inline void InformationServiceLicense::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool InformationServiceLicense::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool InformationServiceLicense::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.InformationServiceLicense.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void InformationServiceLicense::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void InformationServiceLicense::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.InformationServiceLicense.TransfersPermitted)
}

// string URL = 5;
inline void InformationServiceLicense::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InformationServiceLicense::url() const {
  // @@protoc_insertion_point(field_get:instruments.InformationServiceLicense.URL)
  return _internal_url();
}
inline void InformationServiceLicense::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:instruments.InformationServiceLicense.URL)
}
inline std::string* InformationServiceLicense::mutable_url() {
  // @@protoc_insertion_point(field_mutable:instruments.InformationServiceLicense.URL)
  return _internal_mutable_url();
}
inline const std::string& InformationServiceLicense::_internal_url() const {
  return url_.Get();
}
inline void InformationServiceLicense::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InformationServiceLicense::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.InformationServiceLicense.URL)
}
inline void InformationServiceLicense::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.InformationServiceLicense.URL)
}
inline void InformationServiceLicense::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.InformationServiceLicense.URL)
}
inline std::string* InformationServiceLicense::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InformationServiceLicense::release_url() {
  // @@protoc_insertion_point(field_release:instruments.InformationServiceLicense.URL)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InformationServiceLicense::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.InformationServiceLicense.URL)
}
inline std::string* InformationServiceLicense::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.InformationServiceLicense.URL)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InformationServiceLicense::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.InformationServiceLicense.URL)
}

// -------------------------------------------------------------------

// CreditNote

// .instruments.FixedCurrencyValueField FaceValue = 2;
inline bool CreditNote::_internal_has_facevalue() const {
  return this != internal_default_instance() && facevalue_ != nullptr;
}
inline bool CreditNote::has_facevalue() const {
  return _internal_has_facevalue();
}
inline void CreditNote::clear_facevalue() {
  if (GetArena() == nullptr && facevalue_ != nullptr) {
    delete facevalue_;
  }
  facevalue_ = nullptr;
}
inline const ::instruments::FixedCurrencyValueField& CreditNote::_internal_facevalue() const {
  const ::instruments::FixedCurrencyValueField* p = facevalue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::FixedCurrencyValueField*>(
      &::instruments::_FixedCurrencyValueField_default_instance_);
}
inline const ::instruments::FixedCurrencyValueField& CreditNote::facevalue() const {
  // @@protoc_insertion_point(field_get:instruments.CreditNote.FaceValue)
  return _internal_facevalue();
}
inline void CreditNote::unsafe_arena_set_allocated_facevalue(
    ::instruments::FixedCurrencyValueField* facevalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(facevalue_);
  }
  facevalue_ = facevalue;
  if (facevalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CreditNote.FaceValue)
}
inline ::instruments::FixedCurrencyValueField* CreditNote::release_facevalue() {
  auto temp = unsafe_arena_release_facevalue();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::FixedCurrencyValueField* CreditNote::unsafe_arena_release_facevalue() {
  // @@protoc_insertion_point(field_release:instruments.CreditNote.FaceValue)
  
  ::instruments::FixedCurrencyValueField* temp = facevalue_;
  facevalue_ = nullptr;
  return temp;
}
inline ::instruments::FixedCurrencyValueField* CreditNote::_internal_mutable_facevalue() {
  
  if (facevalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::FixedCurrencyValueField>(GetArena());
    facevalue_ = p;
  }
  return facevalue_;
}
inline ::instruments::FixedCurrencyValueField* CreditNote::mutable_facevalue() {
  // @@protoc_insertion_point(field_mutable:instruments.CreditNote.FaceValue)
  return _internal_mutable_facevalue();
}
inline void CreditNote::set_allocated_facevalue(::instruments::FixedCurrencyValueField* facevalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete facevalue_;
  }
  if (facevalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(facevalue);
    if (message_arena != submessage_arena) {
      facevalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, facevalue, submessage_arena);
    }
    
  } else {
    
  }
  facevalue_ = facevalue;
  // @@protoc_insertion_point(field_set_allocated:instruments.CreditNote.FaceValue)
}

// uint64 ExpirationTimestamp = 3;
inline void CreditNote::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreditNote::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreditNote::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.CreditNote.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void CreditNote::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void CreditNote::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.CreditNote.ExpirationTimestamp)
}

// bool TransfersPermitted = 4;
inline void CreditNote::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool CreditNote::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool CreditNote::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.CreditNote.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void CreditNote::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void CreditNote::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.CreditNote.TransfersPermitted)
}

// -------------------------------------------------------------------

// RewardPoint

// .instruments.AgeRestrictionField AgeRestriction = 1;
inline bool RewardPoint::_internal_has_agerestriction() const {
  return this != internal_default_instance() && agerestriction_ != nullptr;
}
inline bool RewardPoint::has_agerestriction() const {
  return _internal_has_agerestriction();
}
inline void RewardPoint::clear_agerestriction() {
  if (GetArena() == nullptr && agerestriction_ != nullptr) {
    delete agerestriction_;
  }
  agerestriction_ = nullptr;
}
inline const ::instruments::AgeRestrictionField& RewardPoint::_internal_agerestriction() const {
  const ::instruments::AgeRestrictionField* p = agerestriction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::instruments::AgeRestrictionField*>(
      &::instruments::_AgeRestrictionField_default_instance_);
}
inline const ::instruments::AgeRestrictionField& RewardPoint::agerestriction() const {
  // @@protoc_insertion_point(field_get:instruments.RewardPoint.AgeRestriction)
  return _internal_agerestriction();
}
inline void RewardPoint::unsafe_arena_set_allocated_agerestriction(
    ::instruments::AgeRestrictionField* agerestriction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agerestriction_);
  }
  agerestriction_ = agerestriction;
  if (agerestriction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.RewardPoint.AgeRestriction)
}
inline ::instruments::AgeRestrictionField* RewardPoint::release_agerestriction() {
  auto temp = unsafe_arena_release_agerestriction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::instruments::AgeRestrictionField* RewardPoint::unsafe_arena_release_agerestriction() {
  // @@protoc_insertion_point(field_release:instruments.RewardPoint.AgeRestriction)
  
  ::instruments::AgeRestrictionField* temp = agerestriction_;
  agerestriction_ = nullptr;
  return temp;
}
inline ::instruments::AgeRestrictionField* RewardPoint::_internal_mutable_agerestriction() {
  
  if (agerestriction_ == nullptr) {
    auto* p = CreateMaybeMessage<::instruments::AgeRestrictionField>(GetArena());
    agerestriction_ = p;
  }
  return agerestriction_;
}
inline ::instruments::AgeRestrictionField* RewardPoint::mutable_agerestriction() {
  // @@protoc_insertion_point(field_mutable:instruments.RewardPoint.AgeRestriction)
  return _internal_mutable_agerestriction();
}
inline void RewardPoint::set_allocated_agerestriction(::instruments::AgeRestrictionField* agerestriction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agerestriction_;
  }
  if (agerestriction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agerestriction);
    if (message_arena != submessage_arena) {
      agerestriction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agerestriction, submessage_arena);
    }
    
  } else {
    
  }
  agerestriction_ = agerestriction;
  // @@protoc_insertion_point(field_set_allocated:instruments.RewardPoint.AgeRestriction)
}

// string ProgramName = 2;
inline void RewardPoint::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RewardPoint::programname() const {
  // @@protoc_insertion_point(field_get:instruments.RewardPoint.ProgramName)
  return _internal_programname();
}
inline void RewardPoint::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:instruments.RewardPoint.ProgramName)
}
inline std::string* RewardPoint::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:instruments.RewardPoint.ProgramName)
  return _internal_mutable_programname();
}
inline const std::string& RewardPoint::_internal_programname() const {
  return programname_.Get();
}
inline void RewardPoint::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RewardPoint::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.RewardPoint.ProgramName)
}
inline void RewardPoint::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.RewardPoint.ProgramName)
}
inline void RewardPoint::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.RewardPoint.ProgramName)
}
inline std::string* RewardPoint::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RewardPoint::release_programname() {
  // @@protoc_insertion_point(field_release:instruments.RewardPoint.ProgramName)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPoint::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.RewardPoint.ProgramName)
}
inline std::string* RewardPoint::unsafe_arena_release_programname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.RewardPoint.ProgramName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return programname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RewardPoint::unsafe_arena_set_allocated_programname(
    std::string* programname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      programname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.RewardPoint.ProgramName)
}

// uint64 ExpirationTimestamp = 4;
inline void RewardPoint::clear_expirationtimestamp() {
  expirationtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardPoint::_internal_expirationtimestamp() const {
  return expirationtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardPoint::expirationtimestamp() const {
  // @@protoc_insertion_point(field_get:instruments.RewardPoint.ExpirationTimestamp)
  return _internal_expirationtimestamp();
}
inline void RewardPoint::_internal_set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  expirationtimestamp_ = value;
}
inline void RewardPoint::set_expirationtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_expirationtimestamp(value);
  // @@protoc_insertion_point(field_set:instruments.RewardPoint.ExpirationTimestamp)
}

// string Details = 5;
inline void RewardPoint::clear_details() {
  details_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RewardPoint::details() const {
  // @@protoc_insertion_point(field_get:instruments.RewardPoint.Details)
  return _internal_details();
}
inline void RewardPoint::set_details(const std::string& value) {
  _internal_set_details(value);
  // @@protoc_insertion_point(field_set:instruments.RewardPoint.Details)
}
inline std::string* RewardPoint::mutable_details() {
  // @@protoc_insertion_point(field_mutable:instruments.RewardPoint.Details)
  return _internal_mutable_details();
}
inline const std::string& RewardPoint::_internal_details() const {
  return details_.Get();
}
inline void RewardPoint::_internal_set_details(const std::string& value) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RewardPoint::set_details(std::string&& value) {
  
  details_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.RewardPoint.Details)
}
inline void RewardPoint::set_details(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.RewardPoint.Details)
}
inline void RewardPoint::set_details(const char* value,
    size_t size) {
  
  details_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.RewardPoint.Details)
}
inline std::string* RewardPoint::_internal_mutable_details() {
  
  return details_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RewardPoint::release_details() {
  // @@protoc_insertion_point(field_release:instruments.RewardPoint.Details)
  return details_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RewardPoint::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  details_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), details,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.RewardPoint.Details)
}
inline std::string* RewardPoint::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.RewardPoint.Details)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return details_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RewardPoint::unsafe_arena_set_allocated_details(
    std::string* details) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (details != nullptr) {
    
  } else {
    
  }
  details_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      details, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.RewardPoint.Details)
}

// bool TransfersPermitted = 6;
inline void RewardPoint::clear_transferspermitted() {
  transferspermitted_ = false;
}
inline bool RewardPoint::_internal_transferspermitted() const {
  return transferspermitted_;
}
inline bool RewardPoint::transferspermitted() const {
  // @@protoc_insertion_point(field_get:instruments.RewardPoint.TransfersPermitted)
  return _internal_transferspermitted();
}
inline void RewardPoint::_internal_set_transferspermitted(bool value) {
  
  transferspermitted_ = value;
}
inline void RewardPoint::set_transferspermitted(bool value) {
  _internal_set_transferspermitted(value);
  // @@protoc_insertion_point(field_set:instruments.RewardPoint.TransfersPermitted)
}

// -------------------------------------------------------------------

// AgeRestrictionField

// uint32 Lower = 1;
inline void AgeRestrictionField::clear_lower() {
  lower_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgeRestrictionField::_internal_lower() const {
  return lower_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgeRestrictionField::lower() const {
  // @@protoc_insertion_point(field_get:instruments.AgeRestrictionField.Lower)
  return _internal_lower();
}
inline void AgeRestrictionField::_internal_set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lower_ = value;
}
inline void AgeRestrictionField::set_lower(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:instruments.AgeRestrictionField.Lower)
}

// uint32 Upper = 2;
inline void AgeRestrictionField::clear_upper() {
  upper_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgeRestrictionField::_internal_upper() const {
  return upper_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AgeRestrictionField::upper() const {
  // @@protoc_insertion_point(field_get:instruments.AgeRestrictionField.Upper)
  return _internal_upper();
}
inline void AgeRestrictionField::_internal_set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  upper_ = value;
}
inline void AgeRestrictionField::set_upper(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:instruments.AgeRestrictionField.Upper)
}

// -------------------------------------------------------------------

// CurrencyValueField

// uint64 Value = 1;
inline void CurrencyValueField::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CurrencyValueField::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CurrencyValueField::value() const {
  // @@protoc_insertion_point(field_get:instruments.CurrencyValueField.Value)
  return _internal_value();
}
inline void CurrencyValueField::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void CurrencyValueField::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:instruments.CurrencyValueField.Value)
}

// string CurrencyCode = 2;
inline void CurrencyValueField::clear_currencycode() {
  currencycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrencyValueField::currencycode() const {
  // @@protoc_insertion_point(field_get:instruments.CurrencyValueField.CurrencyCode)
  return _internal_currencycode();
}
inline void CurrencyValueField::set_currencycode(const std::string& value) {
  _internal_set_currencycode(value);
  // @@protoc_insertion_point(field_set:instruments.CurrencyValueField.CurrencyCode)
}
inline std::string* CurrencyValueField::mutable_currencycode() {
  // @@protoc_insertion_point(field_mutable:instruments.CurrencyValueField.CurrencyCode)
  return _internal_mutable_currencycode();
}
inline const std::string& CurrencyValueField::_internal_currencycode() const {
  return currencycode_.Get();
}
inline void CurrencyValueField::_internal_set_currencycode(const std::string& value) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrencyValueField::set_currencycode(std::string&& value) {
  
  currencycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.CurrencyValueField.CurrencyCode)
}
inline void CurrencyValueField::set_currencycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.CurrencyValueField.CurrencyCode)
}
inline void CurrencyValueField::set_currencycode(const char* value,
    size_t size) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.CurrencyValueField.CurrencyCode)
}
inline std::string* CurrencyValueField::_internal_mutable_currencycode() {
  
  return currencycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrencyValueField::release_currencycode() {
  // @@protoc_insertion_point(field_release:instruments.CurrencyValueField.CurrencyCode)
  return currencycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrencyValueField::set_allocated_currencycode(std::string* currencycode) {
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.CurrencyValueField.CurrencyCode)
}
inline std::string* CurrencyValueField::unsafe_arena_release_currencycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.CurrencyValueField.CurrencyCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currencycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CurrencyValueField::unsafe_arena_set_allocated_currencycode(
    std::string* currencycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currencycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.CurrencyValueField.CurrencyCode)
}

// uint32 Precision = 3;
inline void CurrencyValueField::clear_precision() {
  precision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CurrencyValueField::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CurrencyValueField::precision() const {
  // @@protoc_insertion_point(field_get:instruments.CurrencyValueField.Precision)
  return _internal_precision();
}
inline void CurrencyValueField::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  precision_ = value;
}
inline void CurrencyValueField::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:instruments.CurrencyValueField.Precision)
}

// -------------------------------------------------------------------

// FixedCurrencyValueField

// uint64 Value = 1;
inline void FixedCurrencyValueField::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FixedCurrencyValueField::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FixedCurrencyValueField::value() const {
  // @@protoc_insertion_point(field_get:instruments.FixedCurrencyValueField.Value)
  return _internal_value();
}
inline void FixedCurrencyValueField::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void FixedCurrencyValueField::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:instruments.FixedCurrencyValueField.Value)
}

// string CurrencyCode = 2;
inline void FixedCurrencyValueField::clear_currencycode() {
  currencycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FixedCurrencyValueField::currencycode() const {
  // @@protoc_insertion_point(field_get:instruments.FixedCurrencyValueField.CurrencyCode)
  return _internal_currencycode();
}
inline void FixedCurrencyValueField::set_currencycode(const std::string& value) {
  _internal_set_currencycode(value);
  // @@protoc_insertion_point(field_set:instruments.FixedCurrencyValueField.CurrencyCode)
}
inline std::string* FixedCurrencyValueField::mutable_currencycode() {
  // @@protoc_insertion_point(field_mutable:instruments.FixedCurrencyValueField.CurrencyCode)
  return _internal_mutable_currencycode();
}
inline const std::string& FixedCurrencyValueField::_internal_currencycode() const {
  return currencycode_.Get();
}
inline void FixedCurrencyValueField::_internal_set_currencycode(const std::string& value) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FixedCurrencyValueField::set_currencycode(std::string&& value) {
  
  currencycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:instruments.FixedCurrencyValueField.CurrencyCode)
}
inline void FixedCurrencyValueField::set_currencycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:instruments.FixedCurrencyValueField.CurrencyCode)
}
inline void FixedCurrencyValueField::set_currencycode(const char* value,
    size_t size) {
  
  currencycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:instruments.FixedCurrencyValueField.CurrencyCode)
}
inline std::string* FixedCurrencyValueField::_internal_mutable_currencycode() {
  
  return currencycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FixedCurrencyValueField::release_currencycode() {
  // @@protoc_insertion_point(field_release:instruments.FixedCurrencyValueField.CurrencyCode)
  return currencycode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FixedCurrencyValueField::set_allocated_currencycode(std::string* currencycode) {
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:instruments.FixedCurrencyValueField.CurrencyCode)
}
inline std::string* FixedCurrencyValueField::unsafe_arena_release_currencycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:instruments.FixedCurrencyValueField.CurrencyCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return currencycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FixedCurrencyValueField::unsafe_arena_set_allocated_currencycode(
    std::string* currencycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (currencycode != nullptr) {
    
  } else {
    
  }
  currencycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      currencycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:instruments.FixedCurrencyValueField.CurrencyCode)
}

// uint32 Precision = 3;
inline void FixedCurrencyValueField::clear_precision() {
  precision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FixedCurrencyValueField::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FixedCurrencyValueField::precision() const {
  // @@protoc_insertion_point(field_get:instruments.FixedCurrencyValueField.Precision)
  return _internal_precision();
}
inline void FixedCurrencyValueField::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  precision_ = value;
}
inline void FixedCurrencyValueField::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:instruments.FixedCurrencyValueField.Precision)
}

// -------------------------------------------------------------------

// RateField

// uint32 Precision = 1;
inline void RateField::clear_precision() {
  precision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RateField::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RateField::precision() const {
  // @@protoc_insertion_point(field_get:instruments.RateField.Precision)
  return _internal_precision();
}
inline void RateField::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  precision_ = value;
}
inline void RateField::set_precision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:instruments.RateField.Precision)
}

// uint64 Value = 2;
inline void RateField::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateField::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RateField::value() const {
  // @@protoc_insertion_point(field_get:instruments.RateField.Value)
  return _internal_value();
}
inline void RateField::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void RateField::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:instruments.RateField.Value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instruments

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_instruments_2eproto
