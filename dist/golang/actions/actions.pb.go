// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: actions.proto

package actions

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Message - Contract Offer (C1)
type ContractOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName              string                           `protobuf:"bytes,1,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                            // varchar
	BodyOfAgreementType       uint32                           `protobuf:"varint,2,opt,name=BodyOfAgreementType,proto3" json:"BodyOfAgreementType,omitempty"`             // uint
	BodyOfAgreement           []byte                           `protobuf:"bytes,3,opt,name=BodyOfAgreement,proto3" json:"BodyOfAgreement,omitempty"`                      // varbin
	SupportingDocs            []*DocumentField                 `protobuf:"bytes,5,rep,name=SupportingDocs,proto3" json:"SupportingDocs,omitempty"`                        // Document[]
	ContractExpiration        uint64                           `protobuf:"varint,8,opt,name=ContractExpiration,proto3" json:"ContractExpiration,omitempty"`               // Timestamp
	ContractURI               string                           `protobuf:"bytes,9,opt,name=ContractURI,proto3" json:"ContractURI,omitempty"`                              // varchar
	Issuer                    *EntityField                     `protobuf:"bytes,10,opt,name=Issuer,proto3" json:"Issuer,omitempty"`                                       // Entity
	ContractOperatorIncluded  bool                             `protobuf:"varint,12,opt,name=ContractOperatorIncluded,proto3" json:"ContractOperatorIncluded,omitempty"`  // bool
	ContractFee               uint64                           `protobuf:"varint,17,opt,name=ContractFee,proto3" json:"ContractFee,omitempty"`                            // uint
	VotingSystems             []*VotingSystemField             `protobuf:"bytes,18,rep,name=VotingSystems,proto3" json:"VotingSystems,omitempty"`                         // VotingSystem[]
	ContractPermissions       []byte                           `protobuf:"bytes,19,opt,name=ContractPermissions,proto3" json:"ContractPermissions,omitempty"`             // varbin
	RestrictedQtyAssets       uint64                           `protobuf:"varint,20,opt,name=RestrictedQtyAssets,proto3" json:"RestrictedQtyAssets,omitempty"`            // uint
	AdministrationProposal    bool                             `protobuf:"varint,21,opt,name=AdministrationProposal,proto3" json:"AdministrationProposal,omitempty"`      // bool
	HolderProposal            bool                             `protobuf:"varint,22,opt,name=HolderProposal,proto3" json:"HolderProposal,omitempty"`                      // bool
	Oracles                   []*OracleField                   `protobuf:"bytes,23,rep,name=Oracles,proto3" json:"Oracles,omitempty"`                                     // Oracle[]
	MasterAddress             []byte                           `protobuf:"bytes,24,opt,name=MasterAddress,proto3" json:"MasterAddress,omitempty"`                         // Address
	EntityContract            []byte                           `protobuf:"bytes,25,opt,name=EntityContract,proto3" json:"EntityContract,omitempty"`                       // Address
	OperatorEntityContract    []byte                           `protobuf:"bytes,26,opt,name=OperatorEntityContract,proto3" json:"OperatorEntityContract,omitempty"`       // Address
	ContractType              uint32                           `protobuf:"varint,27,opt,name=ContractType,proto3" json:"ContractType,omitempty"`                          // uint
	Services                  []*ServiceField                  `protobuf:"bytes,28,rep,name=Services,proto3" json:"Services,omitempty"`                                   // Service[]
	AdminIdentityCertificates []*AdminIdentityCertificateField `protobuf:"bytes,29,rep,name=AdminIdentityCertificates,proto3" json:"AdminIdentityCertificates,omitempty"` // AdminIdentityCertificate[]
	GoverningLaw              string                           `protobuf:"bytes,30,opt,name=GoverningLaw,proto3" json:"GoverningLaw,omitempty"`                           // LegalSystem
	Jurisdiction              string                           `protobuf:"bytes,31,opt,name=Jurisdiction,proto3" json:"Jurisdiction,omitempty"`                           // Polity
}

func (x *ContractOffer) Reset() {
	*x = ContractOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractOffer) ProtoMessage() {}

func (x *ContractOffer) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractOffer.ProtoReflect.Descriptor instead.
func (*ContractOffer) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{0}
}

func (x *ContractOffer) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractOffer) GetBodyOfAgreementType() uint32 {
	if x != nil {
		return x.BodyOfAgreementType
	}
	return 0
}

func (x *ContractOffer) GetBodyOfAgreement() []byte {
	if x != nil {
		return x.BodyOfAgreement
	}
	return nil
}

func (x *ContractOffer) GetSupportingDocs() []*DocumentField {
	if x != nil {
		return x.SupportingDocs
	}
	return nil
}

func (x *ContractOffer) GetContractExpiration() uint64 {
	if x != nil {
		return x.ContractExpiration
	}
	return 0
}

func (x *ContractOffer) GetContractURI() string {
	if x != nil {
		return x.ContractURI
	}
	return ""
}

func (x *ContractOffer) GetIssuer() *EntityField {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *ContractOffer) GetContractOperatorIncluded() bool {
	if x != nil {
		return x.ContractOperatorIncluded
	}
	return false
}

func (x *ContractOffer) GetContractFee() uint64 {
	if x != nil {
		return x.ContractFee
	}
	return 0
}

func (x *ContractOffer) GetVotingSystems() []*VotingSystemField {
	if x != nil {
		return x.VotingSystems
	}
	return nil
}

func (x *ContractOffer) GetContractPermissions() []byte {
	if x != nil {
		return x.ContractPermissions
	}
	return nil
}

func (x *ContractOffer) GetRestrictedQtyAssets() uint64 {
	if x != nil {
		return x.RestrictedQtyAssets
	}
	return 0
}

func (x *ContractOffer) GetAdministrationProposal() bool {
	if x != nil {
		return x.AdministrationProposal
	}
	return false
}

func (x *ContractOffer) GetHolderProposal() bool {
	if x != nil {
		return x.HolderProposal
	}
	return false
}

func (x *ContractOffer) GetOracles() []*OracleField {
	if x != nil {
		return x.Oracles
	}
	return nil
}

func (x *ContractOffer) GetMasterAddress() []byte {
	if x != nil {
		return x.MasterAddress
	}
	return nil
}

func (x *ContractOffer) GetEntityContract() []byte {
	if x != nil {
		return x.EntityContract
	}
	return nil
}

func (x *ContractOffer) GetOperatorEntityContract() []byte {
	if x != nil {
		return x.OperatorEntityContract
	}
	return nil
}

func (x *ContractOffer) GetContractType() uint32 {
	if x != nil {
		return x.ContractType
	}
	return 0
}

func (x *ContractOffer) GetServices() []*ServiceField {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ContractOffer) GetAdminIdentityCertificates() []*AdminIdentityCertificateField {
	if x != nil {
		return x.AdminIdentityCertificates
	}
	return nil
}

func (x *ContractOffer) GetGoverningLaw() string {
	if x != nil {
		return x.GoverningLaw
	}
	return ""
}

func (x *ContractOffer) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

// Message - Contract Formation (C2)
type ContractFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName              string                           `protobuf:"bytes,1,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                            // varchar
	BodyOfAgreementType       uint32                           `protobuf:"varint,2,opt,name=BodyOfAgreementType,proto3" json:"BodyOfAgreementType,omitempty"`             // uint
	BodyOfAgreement           []byte                           `protobuf:"bytes,3,opt,name=BodyOfAgreement,proto3" json:"BodyOfAgreement,omitempty"`                      // varbin
	SupportingDocs            []*DocumentField                 `protobuf:"bytes,5,rep,name=SupportingDocs,proto3" json:"SupportingDocs,omitempty"`                        // Document[]
	ContractExpiration        uint64                           `protobuf:"varint,8,opt,name=ContractExpiration,proto3" json:"ContractExpiration,omitempty"`               // Timestamp
	ContractURI               string                           `protobuf:"bytes,9,opt,name=ContractURI,proto3" json:"ContractURI,omitempty"`                              // varchar
	Issuer                    *EntityField                     `protobuf:"bytes,10,opt,name=Issuer,proto3" json:"Issuer,omitempty"`                                       // Entity
	ContractFee               uint64                           `protobuf:"varint,16,opt,name=ContractFee,proto3" json:"ContractFee,omitempty"`                            // uint
	VotingSystems             []*VotingSystemField             `protobuf:"bytes,17,rep,name=VotingSystems,proto3" json:"VotingSystems,omitempty"`                         // VotingSystem[]
	ContractPermissions       []byte                           `protobuf:"bytes,18,opt,name=ContractPermissions,proto3" json:"ContractPermissions,omitempty"`             // varbin
	RestrictedQtyAssets       uint64                           `protobuf:"varint,19,opt,name=RestrictedQtyAssets,proto3" json:"RestrictedQtyAssets,omitempty"`            // uint
	AdministrationProposal    bool                             `protobuf:"varint,20,opt,name=AdministrationProposal,proto3" json:"AdministrationProposal,omitempty"`      // bool
	HolderProposal            bool                             `protobuf:"varint,21,opt,name=HolderProposal,proto3" json:"HolderProposal,omitempty"`                      // bool
	Oracles                   []*OracleField                   `protobuf:"bytes,22,rep,name=Oracles,proto3" json:"Oracles,omitempty"`                                     // Oracle[]
	MasterAddress             []byte                           `protobuf:"bytes,23,opt,name=MasterAddress,proto3" json:"MasterAddress,omitempty"`                         // Address
	ContractRevision          uint32                           `protobuf:"varint,24,opt,name=ContractRevision,proto3" json:"ContractRevision,omitempty"`                  // uint
	Timestamp                 uint64                           `protobuf:"varint,25,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`                                // Timestamp
	EntityContract            []byte                           `protobuf:"bytes,26,opt,name=EntityContract,proto3" json:"EntityContract,omitempty"`                       // Address
	OperatorEntityContract    []byte                           `protobuf:"bytes,27,opt,name=OperatorEntityContract,proto3" json:"OperatorEntityContract,omitempty"`       // Address
	ContractType              uint32                           `protobuf:"varint,28,opt,name=ContractType,proto3" json:"ContractType,omitempty"`                          // uint
	Services                  []*ServiceField                  `protobuf:"bytes,29,rep,name=Services,proto3" json:"Services,omitempty"`                                   // Service[]
	AdminIdentityCertificates []*AdminIdentityCertificateField `protobuf:"bytes,30,rep,name=AdminIdentityCertificates,proto3" json:"AdminIdentityCertificates,omitempty"` // AdminIdentityCertificate[]
	AdminAddress              []byte                           `protobuf:"bytes,31,opt,name=AdminAddress,proto3" json:"AdminAddress,omitempty"`                           // Address
	OperatorAddress           []byte                           `protobuf:"bytes,32,opt,name=OperatorAddress,proto3" json:"OperatorAddress,omitempty"`                     // Address
	GoverningLaw              string                           `protobuf:"bytes,33,opt,name=GoverningLaw,proto3" json:"GoverningLaw,omitempty"`                           // LegalSystem
	Jurisdiction              string                           `protobuf:"bytes,34,opt,name=Jurisdiction,proto3" json:"Jurisdiction,omitempty"`                           // Polity
}

func (x *ContractFormation) Reset() {
	*x = ContractFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractFormation) ProtoMessage() {}

func (x *ContractFormation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractFormation.ProtoReflect.Descriptor instead.
func (*ContractFormation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{1}
}

func (x *ContractFormation) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractFormation) GetBodyOfAgreementType() uint32 {
	if x != nil {
		return x.BodyOfAgreementType
	}
	return 0
}

func (x *ContractFormation) GetBodyOfAgreement() []byte {
	if x != nil {
		return x.BodyOfAgreement
	}
	return nil
}

func (x *ContractFormation) GetSupportingDocs() []*DocumentField {
	if x != nil {
		return x.SupportingDocs
	}
	return nil
}

func (x *ContractFormation) GetContractExpiration() uint64 {
	if x != nil {
		return x.ContractExpiration
	}
	return 0
}

func (x *ContractFormation) GetContractURI() string {
	if x != nil {
		return x.ContractURI
	}
	return ""
}

func (x *ContractFormation) GetIssuer() *EntityField {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *ContractFormation) GetContractFee() uint64 {
	if x != nil {
		return x.ContractFee
	}
	return 0
}

func (x *ContractFormation) GetVotingSystems() []*VotingSystemField {
	if x != nil {
		return x.VotingSystems
	}
	return nil
}

func (x *ContractFormation) GetContractPermissions() []byte {
	if x != nil {
		return x.ContractPermissions
	}
	return nil
}

func (x *ContractFormation) GetRestrictedQtyAssets() uint64 {
	if x != nil {
		return x.RestrictedQtyAssets
	}
	return 0
}

func (x *ContractFormation) GetAdministrationProposal() bool {
	if x != nil {
		return x.AdministrationProposal
	}
	return false
}

func (x *ContractFormation) GetHolderProposal() bool {
	if x != nil {
		return x.HolderProposal
	}
	return false
}

func (x *ContractFormation) GetOracles() []*OracleField {
	if x != nil {
		return x.Oracles
	}
	return nil
}

func (x *ContractFormation) GetMasterAddress() []byte {
	if x != nil {
		return x.MasterAddress
	}
	return nil
}

func (x *ContractFormation) GetContractRevision() uint32 {
	if x != nil {
		return x.ContractRevision
	}
	return 0
}

func (x *ContractFormation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ContractFormation) GetEntityContract() []byte {
	if x != nil {
		return x.EntityContract
	}
	return nil
}

func (x *ContractFormation) GetOperatorEntityContract() []byte {
	if x != nil {
		return x.OperatorEntityContract
	}
	return nil
}

func (x *ContractFormation) GetContractType() uint32 {
	if x != nil {
		return x.ContractType
	}
	return 0
}

func (x *ContractFormation) GetServices() []*ServiceField {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ContractFormation) GetAdminIdentityCertificates() []*AdminIdentityCertificateField {
	if x != nil {
		return x.AdminIdentityCertificates
	}
	return nil
}

func (x *ContractFormation) GetAdminAddress() []byte {
	if x != nil {
		return x.AdminAddress
	}
	return nil
}

func (x *ContractFormation) GetOperatorAddress() []byte {
	if x != nil {
		return x.OperatorAddress
	}
	return nil
}

func (x *ContractFormation) GetGoverningLaw() string {
	if x != nil {
		return x.GoverningLaw
	}
	return ""
}

func (x *ContractFormation) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

// Message - Contract Amendment (C3)
type ContractAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeAdministrationAddress bool              `protobuf:"varint,1,opt,name=ChangeAdministrationAddress,proto3" json:"ChangeAdministrationAddress,omitempty"` // bool
	ChangeOperatorAddress       bool              `protobuf:"varint,2,opt,name=ChangeOperatorAddress,proto3" json:"ChangeOperatorAddress,omitempty"`             // bool
	ContractRevision            uint32            `protobuf:"varint,3,opt,name=ContractRevision,proto3" json:"ContractRevision,omitempty"`                       // uint
	Amendments                  []*AmendmentField `protobuf:"bytes,4,rep,name=Amendments,proto3" json:"Amendments,omitempty"`                                    // Amendment[]
	RefTxID                     []byte            `protobuf:"bytes,5,opt,name=RefTxID,proto3" json:"RefTxID,omitempty"`                                          // TxId
}

func (x *ContractAmendment) Reset() {
	*x = ContractAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAmendment) ProtoMessage() {}

func (x *ContractAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAmendment.ProtoReflect.Descriptor instead.
func (*ContractAmendment) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{2}
}

func (x *ContractAmendment) GetChangeAdministrationAddress() bool {
	if x != nil {
		return x.ChangeAdministrationAddress
	}
	return false
}

func (x *ContractAmendment) GetChangeOperatorAddress() bool {
	if x != nil {
		return x.ChangeOperatorAddress
	}
	return false
}

func (x *ContractAmendment) GetContractRevision() uint32 {
	if x != nil {
		return x.ContractRevision
	}
	return 0
}

func (x *ContractAmendment) GetAmendments() []*AmendmentField {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *ContractAmendment) GetRefTxID() []byte {
	if x != nil {
		return x.RefTxID
	}
	return nil
}

// Message - Static Contract Formation (C4)
type StaticContractFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractName               string           `protobuf:"bytes,1,opt,name=ContractName,proto3" json:"ContractName,omitempty"`                               // varchar
	ContractCode               []byte           `protobuf:"bytes,2,opt,name=ContractCode,proto3" json:"ContractCode,omitempty"`                               // ContractCode
	BodyOfAgreementType        uint32           `protobuf:"varint,3,opt,name=BodyOfAgreementType,proto3" json:"BodyOfAgreementType,omitempty"`                // uint
	BodyOfAgreement            []byte           `protobuf:"bytes,4,opt,name=BodyOfAgreement,proto3" json:"BodyOfAgreement,omitempty"`                         // varbin
	ContractType               string           `protobuf:"bytes,5,opt,name=ContractType,proto3" json:"ContractType,omitempty"`                               // varchar
	SupportingDocs             []*DocumentField `protobuf:"bytes,6,rep,name=SupportingDocs,proto3" json:"SupportingDocs,omitempty"`                           // Document[]
	ContractRevision           uint32           `protobuf:"varint,7,opt,name=ContractRevision,proto3" json:"ContractRevision,omitempty"`                      // uint
	EffectiveDate              uint64           `protobuf:"varint,10,opt,name=EffectiveDate,proto3" json:"EffectiveDate,omitempty"`                           // Timestamp
	ContractExpiration         uint64           `protobuf:"varint,11,opt,name=ContractExpiration,proto3" json:"ContractExpiration,omitempty"`                 // Timestamp
	ContractURI                string           `protobuf:"bytes,12,opt,name=ContractURI,proto3" json:"ContractURI,omitempty"`                                // varchar
	PrevRevTxID                []byte           `protobuf:"bytes,13,opt,name=PrevRevTxID,proto3" json:"PrevRevTxID,omitempty"`                                // TxId
	Entities                   []*EntityField   `protobuf:"bytes,14,rep,name=Entities,proto3" json:"Entities,omitempty"`                                      // Entity[]
	EntityOracle               *OracleField     `protobuf:"bytes,15,opt,name=EntityOracle,proto3" json:"EntityOracle,omitempty"`                              // Oracle
	EntityOracleSignature      []byte           `protobuf:"bytes,16,opt,name=EntityOracleSignature,proto3" json:"EntityOracleSignature,omitempty"`            // varbin
	EntityOracleSigBlockHeight uint32           `protobuf:"varint,17,opt,name=EntityOracleSigBlockHeight,proto3" json:"EntityOracleSigBlockHeight,omitempty"` // uint
	GoverningLaw               string           `protobuf:"bytes,18,opt,name=GoverningLaw,proto3" json:"GoverningLaw,omitempty"`                              // LegalSystem
	Jurisdiction               string           `protobuf:"bytes,19,opt,name=Jurisdiction,proto3" json:"Jurisdiction,omitempty"`                              // Polity
}

func (x *StaticContractFormation) Reset() {
	*x = StaticContractFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticContractFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticContractFormation) ProtoMessage() {}

func (x *StaticContractFormation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticContractFormation.ProtoReflect.Descriptor instead.
func (*StaticContractFormation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{3}
}

func (x *StaticContractFormation) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *StaticContractFormation) GetContractCode() []byte {
	if x != nil {
		return x.ContractCode
	}
	return nil
}

func (x *StaticContractFormation) GetBodyOfAgreementType() uint32 {
	if x != nil {
		return x.BodyOfAgreementType
	}
	return 0
}

func (x *StaticContractFormation) GetBodyOfAgreement() []byte {
	if x != nil {
		return x.BodyOfAgreement
	}
	return nil
}

func (x *StaticContractFormation) GetContractType() string {
	if x != nil {
		return x.ContractType
	}
	return ""
}

func (x *StaticContractFormation) GetSupportingDocs() []*DocumentField {
	if x != nil {
		return x.SupportingDocs
	}
	return nil
}

func (x *StaticContractFormation) GetContractRevision() uint32 {
	if x != nil {
		return x.ContractRevision
	}
	return 0
}

func (x *StaticContractFormation) GetEffectiveDate() uint64 {
	if x != nil {
		return x.EffectiveDate
	}
	return 0
}

func (x *StaticContractFormation) GetContractExpiration() uint64 {
	if x != nil {
		return x.ContractExpiration
	}
	return 0
}

func (x *StaticContractFormation) GetContractURI() string {
	if x != nil {
		return x.ContractURI
	}
	return ""
}

func (x *StaticContractFormation) GetPrevRevTxID() []byte {
	if x != nil {
		return x.PrevRevTxID
	}
	return nil
}

func (x *StaticContractFormation) GetEntities() []*EntityField {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *StaticContractFormation) GetEntityOracle() *OracleField {
	if x != nil {
		return x.EntityOracle
	}
	return nil
}

func (x *StaticContractFormation) GetEntityOracleSignature() []byte {
	if x != nil {
		return x.EntityOracleSignature
	}
	return nil
}

func (x *StaticContractFormation) GetEntityOracleSigBlockHeight() uint32 {
	if x != nil {
		return x.EntityOracleSigBlockHeight
	}
	return 0
}

func (x *StaticContractFormation) GetGoverningLaw() string {
	if x != nil {
		return x.GoverningLaw
	}
	return ""
}

func (x *StaticContractFormation) GetJurisdiction() string {
	if x != nil {
		return x.Jurisdiction
	}
	return ""
}

// Message - Contract Address Change (C5)
type ContractAddressChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewContractAddress []byte `protobuf:"bytes,1,opt,name=NewContractAddress,proto3" json:"NewContractAddress,omitempty"` // Address
	Timestamp          uint64 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`                  // Timestamp
}

func (x *ContractAddressChange) Reset() {
	*x = ContractAddressChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAddressChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAddressChange) ProtoMessage() {}

func (x *ContractAddressChange) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAddressChange.ProtoReflect.Descriptor instead.
func (*ContractAddressChange) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{4}
}

func (x *ContractAddressChange) GetNewContractAddress() []byte {
	if x != nil {
		return x.NewContractAddress
	}
	return nil
}

func (x *ContractAddressChange) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Body Of Agreement Offer (C6)
type BodyOfAgreementOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters    []*ChapterField     `protobuf:"bytes,1,rep,name=Chapters,proto3" json:"Chapters,omitempty"`       // Chapter[]
	Definitions []*DefinedTermField `protobuf:"bytes,2,rep,name=Definitions,proto3" json:"Definitions,omitempty"` // DefinedTerm[]
}

func (x *BodyOfAgreementOffer) Reset() {
	*x = BodyOfAgreementOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyOfAgreementOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyOfAgreementOffer) ProtoMessage() {}

func (x *BodyOfAgreementOffer) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyOfAgreementOffer.ProtoReflect.Descriptor instead.
func (*BodyOfAgreementOffer) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{5}
}

func (x *BodyOfAgreementOffer) GetChapters() []*ChapterField {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *BodyOfAgreementOffer) GetDefinitions() []*DefinedTermField {
	if x != nil {
		return x.Definitions
	}
	return nil
}

// Message - Body Of Agreement Formation (C7)
type BodyOfAgreementFormation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chapters    []*ChapterField     `protobuf:"bytes,1,rep,name=Chapters,proto3" json:"Chapters,omitempty"`       // Chapter[]
	Definitions []*DefinedTermField `protobuf:"bytes,2,rep,name=Definitions,proto3" json:"Definitions,omitempty"` // DefinedTerm[]
	Revision    uint32              `protobuf:"varint,3,opt,name=Revision,proto3" json:"Revision,omitempty"`      // uint
	Timestamp   uint64              `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`    // Timestamp
}

func (x *BodyOfAgreementFormation) Reset() {
	*x = BodyOfAgreementFormation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyOfAgreementFormation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyOfAgreementFormation) ProtoMessage() {}

func (x *BodyOfAgreementFormation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyOfAgreementFormation.ProtoReflect.Descriptor instead.
func (*BodyOfAgreementFormation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{6}
}

func (x *BodyOfAgreementFormation) GetChapters() []*ChapterField {
	if x != nil {
		return x.Chapters
	}
	return nil
}

func (x *BodyOfAgreementFormation) GetDefinitions() []*DefinedTermField {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *BodyOfAgreementFormation) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *BodyOfAgreementFormation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Body Of Agreement Amendment (C8)
type BodyOfAgreementAmendment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision   uint32            `protobuf:"varint,1,opt,name=Revision,proto3" json:"Revision,omitempty"`    // uint
	Amendments []*AmendmentField `protobuf:"bytes,2,rep,name=Amendments,proto3" json:"Amendments,omitempty"` // Amendment[]
	RefTxID    []byte            `protobuf:"bytes,3,opt,name=RefTxID,proto3" json:"RefTxID,omitempty"`       // TxId
}

func (x *BodyOfAgreementAmendment) Reset() {
	*x = BodyOfAgreementAmendment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyOfAgreementAmendment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyOfAgreementAmendment) ProtoMessage() {}

func (x *BodyOfAgreementAmendment) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyOfAgreementAmendment.ProtoReflect.Descriptor instead.
func (*BodyOfAgreementAmendment) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{7}
}

func (x *BodyOfAgreementAmendment) GetRevision() uint32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *BodyOfAgreementAmendment) GetAmendments() []*AmendmentField {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *BodyOfAgreementAmendment) GetRefTxID() []byte {
	if x != nil {
		return x.RefTxID
	}
	return nil
}

// Message - Asset Definition (A1)
type AssetDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPermissions            []byte   `protobuf:"bytes,1,opt,name=AssetPermissions,proto3" json:"AssetPermissions,omitempty"`                        // varbin
	EnforcementOrdersPermitted  bool     `protobuf:"varint,4,opt,name=EnforcementOrdersPermitted,proto3" json:"EnforcementOrdersPermitted,omitempty"`   // bool
	VotingRights                bool     `protobuf:"varint,5,opt,name=VotingRights,proto3" json:"VotingRights,omitempty"`                               // bool
	VoteMultiplier              uint32   `protobuf:"varint,6,opt,name=VoteMultiplier,proto3" json:"VoteMultiplier,omitempty"`                           // uint
	AdministrationProposal      bool     `protobuf:"varint,7,opt,name=AdministrationProposal,proto3" json:"AdministrationProposal,omitempty"`           // bool
	HolderProposal              bool     `protobuf:"varint,8,opt,name=HolderProposal,proto3" json:"HolderProposal,omitempty"`                           // bool
	AssetModificationGovernance uint32   `protobuf:"varint,9,opt,name=AssetModificationGovernance,proto3" json:"AssetModificationGovernance,omitempty"` // uint
	AuthorizedTokenQty          uint64   `protobuf:"varint,10,opt,name=AuthorizedTokenQty,proto3" json:"AuthorizedTokenQty,omitempty"`                  // uint
	AssetType                   string   `protobuf:"bytes,11,opt,name=AssetType,proto3" json:"AssetType,omitempty"`                                     // AssetType
	AssetPayload                []byte   `protobuf:"bytes,12,opt,name=AssetPayload,proto3" json:"AssetPayload,omitempty"`                               // varbin
	TradeRestrictions           []string `protobuf:"bytes,13,rep,name=TradeRestrictions,proto3" json:"TradeRestrictions,omitempty"`                     // Polity[]
}

func (x *AssetDefinition) Reset() {
	*x = AssetDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetDefinition) ProtoMessage() {}

func (x *AssetDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetDefinition.ProtoReflect.Descriptor instead.
func (*AssetDefinition) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{8}
}

func (x *AssetDefinition) GetAssetPermissions() []byte {
	if x != nil {
		return x.AssetPermissions
	}
	return nil
}

func (x *AssetDefinition) GetEnforcementOrdersPermitted() bool {
	if x != nil {
		return x.EnforcementOrdersPermitted
	}
	return false
}

func (x *AssetDefinition) GetVotingRights() bool {
	if x != nil {
		return x.VotingRights
	}
	return false
}

func (x *AssetDefinition) GetVoteMultiplier() uint32 {
	if x != nil {
		return x.VoteMultiplier
	}
	return 0
}

func (x *AssetDefinition) GetAdministrationProposal() bool {
	if x != nil {
		return x.AdministrationProposal
	}
	return false
}

func (x *AssetDefinition) GetHolderProposal() bool {
	if x != nil {
		return x.HolderProposal
	}
	return false
}

func (x *AssetDefinition) GetAssetModificationGovernance() uint32 {
	if x != nil {
		return x.AssetModificationGovernance
	}
	return 0
}

func (x *AssetDefinition) GetAuthorizedTokenQty() uint64 {
	if x != nil {
		return x.AuthorizedTokenQty
	}
	return 0
}

func (x *AssetDefinition) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *AssetDefinition) GetAssetPayload() []byte {
	if x != nil {
		return x.AssetPayload
	}
	return nil
}

func (x *AssetDefinition) GetTradeRestrictions() []string {
	if x != nil {
		return x.TradeRestrictions
	}
	return nil
}

// Message - Asset Creation (A2)
type AssetCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetCode                   []byte   `protobuf:"bytes,1,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`                                       // AssetCode
	AssetIndex                  uint64   `protobuf:"varint,2,opt,name=AssetIndex,proto3" json:"AssetIndex,omitempty"`                                    // uint
	AssetPermissions            []byte   `protobuf:"bytes,3,opt,name=AssetPermissions,proto3" json:"AssetPermissions,omitempty"`                         // varbin
	EnforcementOrdersPermitted  bool     `protobuf:"varint,6,opt,name=EnforcementOrdersPermitted,proto3" json:"EnforcementOrdersPermitted,omitempty"`    // bool
	VotingRights                bool     `protobuf:"varint,7,opt,name=VotingRights,proto3" json:"VotingRights,omitempty"`                                // bool
	VoteMultiplier              uint32   `protobuf:"varint,8,opt,name=VoteMultiplier,proto3" json:"VoteMultiplier,omitempty"`                            // uint
	AdministrationProposal      bool     `protobuf:"varint,9,opt,name=AdministrationProposal,proto3" json:"AdministrationProposal,omitempty"`            // bool
	HolderProposal              bool     `protobuf:"varint,10,opt,name=HolderProposal,proto3" json:"HolderProposal,omitempty"`                           // bool
	AssetModificationGovernance uint32   `protobuf:"varint,11,opt,name=AssetModificationGovernance,proto3" json:"AssetModificationGovernance,omitempty"` // uint
	AuthorizedTokenQty          uint64   `protobuf:"varint,12,opt,name=AuthorizedTokenQty,proto3" json:"AuthorizedTokenQty,omitempty"`                   // uint
	AssetType                   string   `protobuf:"bytes,13,opt,name=AssetType,proto3" json:"AssetType,omitempty"`                                      // AssetType
	AssetPayload                []byte   `protobuf:"bytes,14,opt,name=AssetPayload,proto3" json:"AssetPayload,omitempty"`                                // varbin
	AssetRevision               uint32   `protobuf:"varint,15,opt,name=AssetRevision,proto3" json:"AssetRevision,omitempty"`                             // uint
	Timestamp                   uint64   `protobuf:"varint,16,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`                                     // Timestamp
	TradeRestrictions           []string `protobuf:"bytes,17,rep,name=TradeRestrictions,proto3" json:"TradeRestrictions,omitempty"`                      // Polity[]
}

func (x *AssetCreation) Reset() {
	*x = AssetCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetCreation) ProtoMessage() {}

func (x *AssetCreation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetCreation.ProtoReflect.Descriptor instead.
func (*AssetCreation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{9}
}

func (x *AssetCreation) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *AssetCreation) GetAssetIndex() uint64 {
	if x != nil {
		return x.AssetIndex
	}
	return 0
}

func (x *AssetCreation) GetAssetPermissions() []byte {
	if x != nil {
		return x.AssetPermissions
	}
	return nil
}

func (x *AssetCreation) GetEnforcementOrdersPermitted() bool {
	if x != nil {
		return x.EnforcementOrdersPermitted
	}
	return false
}

func (x *AssetCreation) GetVotingRights() bool {
	if x != nil {
		return x.VotingRights
	}
	return false
}

func (x *AssetCreation) GetVoteMultiplier() uint32 {
	if x != nil {
		return x.VoteMultiplier
	}
	return 0
}

func (x *AssetCreation) GetAdministrationProposal() bool {
	if x != nil {
		return x.AdministrationProposal
	}
	return false
}

func (x *AssetCreation) GetHolderProposal() bool {
	if x != nil {
		return x.HolderProposal
	}
	return false
}

func (x *AssetCreation) GetAssetModificationGovernance() uint32 {
	if x != nil {
		return x.AssetModificationGovernance
	}
	return 0
}

func (x *AssetCreation) GetAuthorizedTokenQty() uint64 {
	if x != nil {
		return x.AuthorizedTokenQty
	}
	return 0
}

func (x *AssetCreation) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *AssetCreation) GetAssetPayload() []byte {
	if x != nil {
		return x.AssetPayload
	}
	return nil
}

func (x *AssetCreation) GetAssetRevision() uint32 {
	if x != nil {
		return x.AssetRevision
	}
	return 0
}

func (x *AssetCreation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *AssetCreation) GetTradeRestrictions() []string {
	if x != nil {
		return x.TradeRestrictions
	}
	return nil
}

// Message - Asset Modification (A3)
type AssetModification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType     string            `protobuf:"bytes,1,opt,name=AssetType,proto3" json:"AssetType,omitempty"`          // fixedchar
	AssetCode     []byte            `protobuf:"bytes,2,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`          // AssetCode
	AssetRevision uint32            `protobuf:"varint,3,opt,name=AssetRevision,proto3" json:"AssetRevision,omitempty"` // uint
	Amendments    []*AmendmentField `protobuf:"bytes,4,rep,name=Amendments,proto3" json:"Amendments,omitempty"`        // Amendment[]
	RefTxID       []byte            `protobuf:"bytes,5,opt,name=RefTxID,proto3" json:"RefTxID,omitempty"`              // TxId
}

func (x *AssetModification) Reset() {
	*x = AssetModification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetModification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetModification) ProtoMessage() {}

func (x *AssetModification) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetModification.ProtoReflect.Descriptor instead.
func (*AssetModification) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{10}
}

func (x *AssetModification) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *AssetModification) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *AssetModification) GetAssetRevision() uint32 {
	if x != nil {
		return x.AssetRevision
	}
	return 0
}

func (x *AssetModification) GetAmendments() []*AmendmentField {
	if x != nil {
		return x.Amendments
	}
	return nil
}

func (x *AssetModification) GetRefTxID() []byte {
	if x != nil {
		return x.RefTxID
	}
	return nil
}

// Message - Transfer (T1)
type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets             []*AssetTransferField `protobuf:"bytes,1,rep,name=Assets,proto3" json:"Assets,omitempty"`                         // AssetTransfer[]
	OfferExpiry        uint64                `protobuf:"varint,2,opt,name=OfferExpiry,proto3" json:"OfferExpiry,omitempty"`              // Timestamp
	ExchangeFee        uint64                `protobuf:"varint,3,opt,name=ExchangeFee,proto3" json:"ExchangeFee,omitempty"`              // uint
	ExchangeFeeAddress []byte                `protobuf:"bytes,4,opt,name=ExchangeFeeAddress,proto3" json:"ExchangeFeeAddress,omitempty"` // Address
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{11}
}

func (x *Transfer) GetAssets() []*AssetTransferField {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Transfer) GetOfferExpiry() uint64 {
	if x != nil {
		return x.OfferExpiry
	}
	return 0
}

func (x *Transfer) GetExchangeFee() uint64 {
	if x != nil {
		return x.ExchangeFee
	}
	return 0
}

func (x *Transfer) GetExchangeFeeAddress() []byte {
	if x != nil {
		return x.ExchangeFeeAddress
	}
	return nil
}

// Message - Settlement (T2)
type Settlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets    []*AssetSettlementField `protobuf:"bytes,1,rep,name=Assets,proto3" json:"Assets,omitempty"`        // AssetSettlement[]
	Timestamp uint64                  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` // Timestamp
}

func (x *Settlement) Reset() {
	*x = Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settlement) ProtoMessage() {}

func (x *Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settlement.ProtoReflect.Descriptor instead.
func (*Settlement) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{12}
}

func (x *Settlement) GetAssets() []*AssetSettlementField {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *Settlement) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Proposal (G1)
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 uint32            `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`                                // uint
	AssetType            string            `protobuf:"bytes,2,opt,name=AssetType,proto3" json:"AssetType,omitempty"`                       // fixedchar
	AssetCode            []byte            `protobuf:"bytes,3,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`                       // AssetCode
	VoteSystem           uint32            `protobuf:"varint,4,opt,name=VoteSystem,proto3" json:"VoteSystem,omitempty"`                    // uint
	ProposedAmendments   []*AmendmentField `protobuf:"bytes,5,rep,name=ProposedAmendments,proto3" json:"ProposedAmendments,omitempty"`     // Amendment[]
	VoteOptions          string            `protobuf:"bytes,6,opt,name=VoteOptions,proto3" json:"VoteOptions,omitempty"`                   // varchar
	VoteMax              uint32            `protobuf:"varint,7,opt,name=VoteMax,proto3" json:"VoteMax,omitempty"`                          // uint
	ProposalDescription  string            `protobuf:"bytes,8,opt,name=ProposalDescription,proto3" json:"ProposalDescription,omitempty"`   // varchar
	ProposalDocumentHash []byte            `protobuf:"bytes,9,opt,name=ProposalDocumentHash,proto3" json:"ProposalDocumentHash,omitempty"` // bin
	VoteCutOffTimestamp  uint64            `protobuf:"varint,10,opt,name=VoteCutOffTimestamp,proto3" json:"VoteCutOffTimestamp,omitempty"` // Timestamp
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{13}
}

func (x *Proposal) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Proposal) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Proposal) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Proposal) GetVoteSystem() uint32 {
	if x != nil {
		return x.VoteSystem
	}
	return 0
}

func (x *Proposal) GetProposedAmendments() []*AmendmentField {
	if x != nil {
		return x.ProposedAmendments
	}
	return nil
}

func (x *Proposal) GetVoteOptions() string {
	if x != nil {
		return x.VoteOptions
	}
	return ""
}

func (x *Proposal) GetVoteMax() uint32 {
	if x != nil {
		return x.VoteMax
	}
	return 0
}

func (x *Proposal) GetProposalDescription() string {
	if x != nil {
		return x.ProposalDescription
	}
	return ""
}

func (x *Proposal) GetProposalDocumentHash() []byte {
	if x != nil {
		return x.ProposalDocumentHash
	}
	return nil
}

func (x *Proposal) GetVoteCutOffTimestamp() uint64 {
	if x != nil {
		return x.VoteCutOffTimestamp
	}
	return 0
}

// Message - Vote (G2)
type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` // Timestamp
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{14}
}

func (x *Vote) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Ballot Cast (G3)
type BallotCast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteTxId []byte `protobuf:"bytes,1,opt,name=VoteTxId,proto3" json:"VoteTxId,omitempty"` // TxId
	Vote     string `protobuf:"bytes,2,opt,name=Vote,proto3" json:"Vote,omitempty"`         // varchar
}

func (x *BallotCast) Reset() {
	*x = BallotCast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotCast) ProtoMessage() {}

func (x *BallotCast) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotCast.ProtoReflect.Descriptor instead.
func (*BallotCast) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{15}
}

func (x *BallotCast) GetVoteTxId() []byte {
	if x != nil {
		return x.VoteTxId
	}
	return nil
}

func (x *BallotCast) GetVote() string {
	if x != nil {
		return x.Vote
	}
	return ""
}

// Message - Ballot Counted (G4)
type BallotCounted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteTxId  []byte `protobuf:"bytes,1,opt,name=VoteTxId,proto3" json:"VoteTxId,omitempty"`    // TxId
	Vote      string `protobuf:"bytes,2,opt,name=Vote,proto3" json:"Vote,omitempty"`            // varchar
	Quantity  uint64 `protobuf:"varint,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`   // uint
	Timestamp uint64 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` // Timestamp
}

func (x *BallotCounted) Reset() {
	*x = BallotCounted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallotCounted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotCounted) ProtoMessage() {}

func (x *BallotCounted) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotCounted.ProtoReflect.Descriptor instead.
func (*BallotCounted) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{16}
}

func (x *BallotCounted) GetVoteTxId() []byte {
	if x != nil {
		return x.VoteTxId
	}
	return nil
}

func (x *BallotCounted) GetVote() string {
	if x != nil {
		return x.Vote
	}
	return ""
}

func (x *BallotCounted) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *BallotCounted) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Result (G5)
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType          string            `protobuf:"bytes,1,opt,name=AssetType,proto3" json:"AssetType,omitempty"`                   // fixedchar
	AssetCode          []byte            `protobuf:"bytes,2,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`                   // AssetCode
	ProposedAmendments []*AmendmentField `protobuf:"bytes,3,rep,name=ProposedAmendments,proto3" json:"ProposedAmendments,omitempty"` // Amendment[]
	VoteTxId           []byte            `protobuf:"bytes,4,opt,name=VoteTxId,proto3" json:"VoteTxId,omitempty"`                     // TxId
	OptionTally        []uint64          `protobuf:"varint,5,rep,packed,name=OptionTally,proto3" json:"OptionTally,omitempty"`       // uint[]
	Result             string            `protobuf:"bytes,6,opt,name=Result,proto3" json:"Result,omitempty"`                         // varchar
	Timestamp          uint64            `protobuf:"varint,7,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`                  // Timestamp
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{17}
}

func (x *Result) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Result) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Result) GetProposedAmendments() []*AmendmentField {
	if x != nil {
		return x.ProposedAmendments
	}
	return nil
}

func (x *Result) GetVoteTxId() []byte {
	if x != nil {
		return x.VoteTxId
	}
	return nil
}

func (x *Result) GetOptionTally() []uint64 {
	if x != nil {
		return x.OptionTally
	}
	return nil
}

func (x *Result) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Result) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Order (E1)
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplianceAction         string                       `protobuf:"bytes,1,opt,name=ComplianceAction,proto3" json:"ComplianceAction,omitempty"`                   // fixedchar
	AssetType                string                       `protobuf:"bytes,2,opt,name=AssetType,proto3" json:"AssetType,omitempty"`                                 // fixedchar
	AssetCode                []byte                       `protobuf:"bytes,3,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`                                 // AssetCode
	TargetAddresses          []*TargetAddressField        `protobuf:"bytes,4,rep,name=TargetAddresses,proto3" json:"TargetAddresses,omitempty"`                     // TargetAddress[]
	FreezeTxId               []byte                       `protobuf:"bytes,5,opt,name=FreezeTxId,proto3" json:"FreezeTxId,omitempty"`                               // TxId
	FreezePeriod             uint64                       `protobuf:"varint,6,opt,name=FreezePeriod,proto3" json:"FreezePeriod,omitempty"`                          // Timestamp
	DepositAddress           []byte                       `protobuf:"bytes,7,opt,name=DepositAddress,proto3" json:"DepositAddress,omitempty"`                       // Address
	AuthorityName            string                       `protobuf:"bytes,8,opt,name=AuthorityName,proto3" json:"AuthorityName,omitempty"`                         // varchar
	AuthorityPublicKey       []byte                       `protobuf:"bytes,9,opt,name=AuthorityPublicKey,proto3" json:"AuthorityPublicKey,omitempty"`               // varbin
	SignatureAlgorithm       uint32                       `protobuf:"varint,10,opt,name=SignatureAlgorithm,proto3" json:"SignatureAlgorithm,omitempty"`             // uint
	OrderSignature           []byte                       `protobuf:"bytes,11,opt,name=OrderSignature,proto3" json:"OrderSignature,omitempty"`                      // varbin
	BitcoinDispersions       []*QuantityIndexField        `protobuf:"bytes,14,rep,name=BitcoinDispersions,proto3" json:"BitcoinDispersions,omitempty"`              // QuantityIndex[]
	Message                  string                       `protobuf:"bytes,15,opt,name=Message,proto3" json:"Message,omitempty"`                                    // varchar
	SupportingEvidenceFormat uint32                       `protobuf:"varint,16,opt,name=SupportingEvidenceFormat,proto3" json:"SupportingEvidenceFormat,omitempty"` // uint
	SupportingEvidence       []byte                       `protobuf:"bytes,17,opt,name=SupportingEvidence,proto3" json:"SupportingEvidence,omitempty"`              // varbin
	ReferenceTransactions    []*ReferenceTransactionField `protobuf:"bytes,18,rep,name=ReferenceTransactions,proto3" json:"ReferenceTransactions,omitempty"`        // ReferenceTransaction[]
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{18}
}

func (x *Order) GetComplianceAction() string {
	if x != nil {
		return x.ComplianceAction
	}
	return ""
}

func (x *Order) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Order) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Order) GetTargetAddresses() []*TargetAddressField {
	if x != nil {
		return x.TargetAddresses
	}
	return nil
}

func (x *Order) GetFreezeTxId() []byte {
	if x != nil {
		return x.FreezeTxId
	}
	return nil
}

func (x *Order) GetFreezePeriod() uint64 {
	if x != nil {
		return x.FreezePeriod
	}
	return 0
}

func (x *Order) GetDepositAddress() []byte {
	if x != nil {
		return x.DepositAddress
	}
	return nil
}

func (x *Order) GetAuthorityName() string {
	if x != nil {
		return x.AuthorityName
	}
	return ""
}

func (x *Order) GetAuthorityPublicKey() []byte {
	if x != nil {
		return x.AuthorityPublicKey
	}
	return nil
}

func (x *Order) GetSignatureAlgorithm() uint32 {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return 0
}

func (x *Order) GetOrderSignature() []byte {
	if x != nil {
		return x.OrderSignature
	}
	return nil
}

func (x *Order) GetBitcoinDispersions() []*QuantityIndexField {
	if x != nil {
		return x.BitcoinDispersions
	}
	return nil
}

func (x *Order) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Order) GetSupportingEvidenceFormat() uint32 {
	if x != nil {
		return x.SupportingEvidenceFormat
	}
	return 0
}

func (x *Order) GetSupportingEvidence() []byte {
	if x != nil {
		return x.SupportingEvidence
	}
	return nil
}

func (x *Order) GetReferenceTransactions() []*ReferenceTransactionField {
	if x != nil {
		return x.ReferenceTransactions
	}
	return nil
}

// Message - Freeze (E2)
type Freeze struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType    string                `protobuf:"bytes,1,opt,name=AssetType,proto3" json:"AssetType,omitempty"`        // fixedchar
	AssetCode    []byte                `protobuf:"bytes,2,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`        // AssetCode
	Quantities   []*QuantityIndexField `protobuf:"bytes,3,rep,name=Quantities,proto3" json:"Quantities,omitempty"`      // QuantityIndex[]
	FreezePeriod uint64                `protobuf:"varint,4,opt,name=FreezePeriod,proto3" json:"FreezePeriod,omitempty"` // Timestamp
	Timestamp    uint64                `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`       // Timestamp
}

func (x *Freeze) Reset() {
	*x = Freeze{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Freeze) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Freeze) ProtoMessage() {}

func (x *Freeze) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Freeze.ProtoReflect.Descriptor instead.
func (*Freeze) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{19}
}

func (x *Freeze) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Freeze) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Freeze) GetQuantities() []*QuantityIndexField {
	if x != nil {
		return x.Quantities
	}
	return nil
}

func (x *Freeze) GetFreezePeriod() uint64 {
	if x != nil {
		return x.FreezePeriod
	}
	return 0
}

func (x *Freeze) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Thaw (E3)
type Thaw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreezeTxId []byte `protobuf:"bytes,1,opt,name=FreezeTxId,proto3" json:"FreezeTxId,omitempty"` // TxId
	Timestamp  uint64 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`  // Timestamp
}

func (x *Thaw) Reset() {
	*x = Thaw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thaw) ProtoMessage() {}

func (x *Thaw) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thaw.ProtoReflect.Descriptor instead.
func (*Thaw) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{20}
}

func (x *Thaw) GetFreezeTxId() []byte {
	if x != nil {
		return x.FreezeTxId
	}
	return nil
}

func (x *Thaw) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Confiscation (E4)
type Confiscation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType  string                `protobuf:"bytes,1,opt,name=AssetType,proto3" json:"AssetType,omitempty"`    // fixedchar
	AssetCode  []byte                `protobuf:"bytes,2,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`    // AssetCode
	Quantities []*QuantityIndexField `protobuf:"bytes,3,rep,name=Quantities,proto3" json:"Quantities,omitempty"`  // QuantityIndex[]
	DepositQty uint64                `protobuf:"varint,4,opt,name=DepositQty,proto3" json:"DepositQty,omitempty"` // uint
	Timestamp  uint64                `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`   // Timestamp
}

func (x *Confiscation) Reset() {
	*x = Confiscation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confiscation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confiscation) ProtoMessage() {}

func (x *Confiscation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confiscation.ProtoReflect.Descriptor instead.
func (*Confiscation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{21}
}

func (x *Confiscation) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Confiscation) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Confiscation) GetQuantities() []*QuantityIndexField {
	if x != nil {
		return x.Quantities
	}
	return nil
}

func (x *Confiscation) GetDepositQty() uint64 {
	if x != nil {
		return x.DepositQty
	}
	return 0
}

func (x *Confiscation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Reconciliation (E5)
type Reconciliation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType  string                `protobuf:"bytes,1,opt,name=AssetType,proto3" json:"AssetType,omitempty"`   // fixedchar
	AssetCode  []byte                `protobuf:"bytes,2,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`   // AssetCode
	Quantities []*QuantityIndexField `protobuf:"bytes,3,rep,name=Quantities,proto3" json:"Quantities,omitempty"` // QuantityIndex[]
	Timestamp  uint64                `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`  // Timestamp
}

func (x *Reconciliation) Reset() {
	*x = Reconciliation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reconciliation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reconciliation) ProtoMessage() {}

func (x *Reconciliation) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reconciliation.ProtoReflect.Descriptor instead.
func (*Reconciliation) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{22}
}

func (x *Reconciliation) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *Reconciliation) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *Reconciliation) GetQuantities() []*QuantityIndexField {
	if x != nil {
		return x.Quantities
	}
	return nil
}

func (x *Reconciliation) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Message - Establishment (R1)
type Establishment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"` // varchar
}

func (x *Establishment) Reset() {
	*x = Establishment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Establishment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Establishment) ProtoMessage() {}

func (x *Establishment) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Establishment.ProtoReflect.Descriptor instead.
func (*Establishment) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{23}
}

func (x *Establishment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message - Addition (R2)
type Addition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"` // varchar
}

func (x *Addition) Reset() {
	*x = Addition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addition) ProtoMessage() {}

func (x *Addition) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addition.ProtoReflect.Descriptor instead.
func (*Addition) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{24}
}

func (x *Addition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message - Alteration (R3)
type Alteration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTxID []byte `protobuf:"bytes,1,opt,name=EntryTxID,proto3" json:"EntryTxID,omitempty"` // TxId
	Message   string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`     // varchar
}

func (x *Alteration) Reset() {
	*x = Alteration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alteration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alteration) ProtoMessage() {}

func (x *Alteration) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alteration.ProtoReflect.Descriptor instead.
func (*Alteration) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{25}
}

func (x *Alteration) GetEntryTxID() []byte {
	if x != nil {
		return x.EntryTxID
	}
	return nil
}

func (x *Alteration) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message - Removal (R4)
type Removal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryTxID []byte `protobuf:"bytes,1,opt,name=EntryTxID,proto3" json:"EntryTxID,omitempty"` // TxId
	Message   string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`     // varchar
}

func (x *Removal) Reset() {
	*x = Removal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Removal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Removal) ProtoMessage() {}

func (x *Removal) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Removal.ProtoReflect.Descriptor instead.
func (*Removal) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{26}
}

func (x *Removal) GetEntryTxID() []byte {
	if x != nil {
		return x.EntryTxID
	}
	return nil
}

func (x *Removal) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message - Message (M1)
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderIndexes   []uint32 `protobuf:"varint,1,rep,packed,name=SenderIndexes,proto3" json:"SenderIndexes,omitempty"`     // uint[]
	ReceiverIndexes []uint32 `protobuf:"varint,2,rep,packed,name=ReceiverIndexes,proto3" json:"ReceiverIndexes,omitempty"` // uint[]
	MessageCode     uint32   `protobuf:"varint,3,opt,name=MessageCode,proto3" json:"MessageCode,omitempty"`                // uint
	MessagePayload  []byte   `protobuf:"bytes,4,opt,name=MessagePayload,proto3" json:"MessagePayload,omitempty"`           // varbin
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{27}
}

func (x *Message) GetSenderIndexes() []uint32 {
	if x != nil {
		return x.SenderIndexes
	}
	return nil
}

func (x *Message) GetReceiverIndexes() []uint32 {
	if x != nil {
		return x.ReceiverIndexes
	}
	return nil
}

func (x *Message) GetMessageCode() uint32 {
	if x != nil {
		return x.MessageCode
	}
	return 0
}

func (x *Message) GetMessagePayload() []byte {
	if x != nil {
		return x.MessagePayload
	}
	return nil
}

// Message - Rejection (M2)
type Rejection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressIndexes     []uint32 `protobuf:"varint,1,rep,packed,name=AddressIndexes,proto3" json:"AddressIndexes,omitempty"`  // uint[]
	RejectAddressIndex uint32   `protobuf:"varint,2,opt,name=RejectAddressIndex,proto3" json:"RejectAddressIndex,omitempty"` // uint
	RejectionCode      uint32   `protobuf:"varint,3,opt,name=RejectionCode,proto3" json:"RejectionCode,omitempty"`           // RejectionCode
	Message            string   `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`                        // varchar
	Timestamp          uint64   `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`                   // Timestamp
}

func (x *Rejection) Reset() {
	*x = Rejection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rejection) ProtoMessage() {}

func (x *Rejection) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rejection.ProtoReflect.Descriptor instead.
func (*Rejection) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{28}
}

func (x *Rejection) GetAddressIndexes() []uint32 {
	if x != nil {
		return x.AddressIndexes
	}
	return nil
}

func (x *Rejection) GetRejectAddressIndex() uint32 {
	if x != nil {
		return x.RejectAddressIndex
	}
	return 0
}

func (x *Rejection) GetRejectionCode() uint32 {
	if x != nil {
		return x.RejectionCode
	}
	return 0
}

func (x *Rejection) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Rejection) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Field - Administrator
type AdministratorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"` // Role
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`  // varchar
}

func (x *AdministratorField) Reset() {
	*x = AdministratorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministratorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministratorField) ProtoMessage() {}

func (x *AdministratorField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministratorField.ProtoReflect.Descriptor instead.
func (*AdministratorField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{29}
}

func (x *AdministratorField) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AdministratorField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Field - Administrator Identity Certificate
type AdminIdentityCertificateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityContract []byte `protobuf:"bytes,1,opt,name=EntityContract,proto3" json:"EntityContract,omitempty"` // Address
	Signature      []byte `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`           // Signature
	BlockHeight    uint32 `protobuf:"varint,3,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`      // uint
	Expiration     uint64 `protobuf:"varint,4,opt,name=Expiration,proto3" json:"Expiration,omitempty"`        // Timestamp
}

func (x *AdminIdentityCertificateField) Reset() {
	*x = AdminIdentityCertificateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminIdentityCertificateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminIdentityCertificateField) ProtoMessage() {}

func (x *AdminIdentityCertificateField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminIdentityCertificateField.ProtoReflect.Descriptor instead.
func (*AdminIdentityCertificateField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{30}
}

func (x *AdminIdentityCertificateField) GetEntityContract() []byte {
	if x != nil {
		return x.EntityContract
	}
	return nil
}

func (x *AdminIdentityCertificateField) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AdminIdentityCertificateField) GetBlockHeight() uint32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *AdminIdentityCertificateField) GetExpiration() uint64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

// Field - Amendment
type AmendmentField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldIndexPath []byte `protobuf:"bytes,1,opt,name=FieldIndexPath,proto3" json:"FieldIndexPath,omitempty"` // varbin
	Operation      uint32 `protobuf:"varint,2,opt,name=Operation,proto3" json:"Operation,omitempty"`          // uint
	Data           []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`                     // varbin
}

func (x *AmendmentField) Reset() {
	*x = AmendmentField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmendmentField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmendmentField) ProtoMessage() {}

func (x *AmendmentField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmendmentField.ProtoReflect.Descriptor instead.
func (*AmendmentField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{31}
}

func (x *AmendmentField) GetFieldIndexPath() []byte {
	if x != nil {
		return x.FieldIndexPath
	}
	return nil
}

func (x *AmendmentField) GetOperation() uint32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *AmendmentField) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Field - AssetReceiver
type AssetReceiverField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address               []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`                             // Address
	Quantity              uint64 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`                          // uint
	OracleSigAlgorithm    uint32 `protobuf:"varint,3,opt,name=OracleSigAlgorithm,proto3" json:"OracleSigAlgorithm,omitempty"`      // uint
	OracleIndex           uint32 `protobuf:"varint,4,opt,name=OracleIndex,proto3" json:"OracleIndex,omitempty"`                    // uint
	OracleConfirmationSig []byte `protobuf:"bytes,5,opt,name=OracleConfirmationSig,proto3" json:"OracleConfirmationSig,omitempty"` // Signature
	OracleSigBlockHeight  uint32 `protobuf:"varint,6,opt,name=OracleSigBlockHeight,proto3" json:"OracleSigBlockHeight,omitempty"`  // uint
	OracleSigExpiry       uint64 `protobuf:"varint,7,opt,name=OracleSigExpiry,proto3" json:"OracleSigExpiry,omitempty"`            // Timestamp
}

func (x *AssetReceiverField) Reset() {
	*x = AssetReceiverField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetReceiverField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetReceiverField) ProtoMessage() {}

func (x *AssetReceiverField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetReceiverField.ProtoReflect.Descriptor instead.
func (*AssetReceiverField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{32}
}

func (x *AssetReceiverField) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AssetReceiverField) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *AssetReceiverField) GetOracleSigAlgorithm() uint32 {
	if x != nil {
		return x.OracleSigAlgorithm
	}
	return 0
}

func (x *AssetReceiverField) GetOracleIndex() uint32 {
	if x != nil {
		return x.OracleIndex
	}
	return 0
}

func (x *AssetReceiverField) GetOracleConfirmationSig() []byte {
	if x != nil {
		return x.OracleConfirmationSig
	}
	return nil
}

func (x *AssetReceiverField) GetOracleSigBlockHeight() uint32 {
	if x != nil {
		return x.OracleSigBlockHeight
	}
	return 0
}

func (x *AssetReceiverField) GetOracleSigExpiry() uint64 {
	if x != nil {
		return x.OracleSigExpiry
	}
	return 0
}

// Field - Asset Settlement
type AssetSettlementField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIndex uint32                `protobuf:"varint,1,opt,name=ContractIndex,proto3" json:"ContractIndex,omitempty"` // uint
	AssetType     string                `protobuf:"bytes,2,opt,name=AssetType,proto3" json:"AssetType,omitempty"`          // fixedchar
	AssetCode     []byte                `protobuf:"bytes,3,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`          // AssetCode
	Settlements   []*QuantityIndexField `protobuf:"bytes,4,rep,name=Settlements,proto3" json:"Settlements,omitempty"`      // QuantityIndex[]
}

func (x *AssetSettlementField) Reset() {
	*x = AssetSettlementField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSettlementField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSettlementField) ProtoMessage() {}

func (x *AssetSettlementField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSettlementField.ProtoReflect.Descriptor instead.
func (*AssetSettlementField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{33}
}

func (x *AssetSettlementField) GetContractIndex() uint32 {
	if x != nil {
		return x.ContractIndex
	}
	return 0
}

func (x *AssetSettlementField) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *AssetSettlementField) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *AssetSettlementField) GetSettlements() []*QuantityIndexField {
	if x != nil {
		return x.Settlements
	}
	return nil
}

// Field - Asset Transfer
type AssetTransferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractIndex  uint32                `protobuf:"varint,1,opt,name=ContractIndex,proto3" json:"ContractIndex,omitempty"`  // uint
	AssetType      string                `protobuf:"bytes,2,opt,name=AssetType,proto3" json:"AssetType,omitempty"`           // fixedchar
	AssetCode      []byte                `protobuf:"bytes,3,opt,name=AssetCode,proto3" json:"AssetCode,omitempty"`           // AssetCode
	AssetSenders   []*QuantityIndexField `protobuf:"bytes,4,rep,name=AssetSenders,proto3" json:"AssetSenders,omitempty"`     // QuantityIndex[]
	AssetReceivers []*AssetReceiverField `protobuf:"bytes,5,rep,name=AssetReceivers,proto3" json:"AssetReceivers,omitempty"` // AssetReceiver[]
}

func (x *AssetTransferField) Reset() {
	*x = AssetTransferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetTransferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetTransferField) ProtoMessage() {}

func (x *AssetTransferField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetTransferField.ProtoReflect.Descriptor instead.
func (*AssetTransferField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{34}
}

func (x *AssetTransferField) GetContractIndex() uint32 {
	if x != nil {
		return x.ContractIndex
	}
	return 0
}

func (x *AssetTransferField) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *AssetTransferField) GetAssetCode() []byte {
	if x != nil {
		return x.AssetCode
	}
	return nil
}

func (x *AssetTransferField) GetAssetSenders() []*QuantityIndexField {
	if x != nil {
		return x.AssetSenders
	}
	return nil
}

func (x *AssetTransferField) GetAssetReceivers() []*AssetReceiverField {
	if x != nil {
		return x.AssetReceivers
	}
	return nil
}

// Field - Chapter
type ChapterField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string         `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`       // varchar
	Preamble string         `protobuf:"bytes,2,opt,name=Preamble,proto3" json:"Preamble,omitempty"` // varchar
	Articles []*ClauseField `protobuf:"bytes,3,rep,name=Articles,proto3" json:"Articles,omitempty"` // Clause[]
}

func (x *ChapterField) Reset() {
	*x = ChapterField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterField) ProtoMessage() {}

func (x *ChapterField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterField.ProtoReflect.Descriptor instead.
func (*ChapterField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{35}
}

func (x *ChapterField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterField) GetPreamble() string {
	if x != nil {
		return x.Preamble
	}
	return ""
}

func (x *ChapterField) GetArticles() []*ClauseField {
	if x != nil {
		return x.Articles
	}
	return nil
}

// Field - Clause
type ClauseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string         `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`       // varchar
	Body     string         `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`         // varchar
	Children []*ClauseField `protobuf:"bytes,3,rep,name=Children,proto3" json:"Children,omitempty"` // Clause[]
}

func (x *ClauseField) Reset() {
	*x = ClauseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClauseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClauseField) ProtoMessage() {}

func (x *ClauseField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClauseField.ProtoReflect.Descriptor instead.
func (*ClauseField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{36}
}

func (x *ClauseField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ClauseField) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ClauseField) GetChildren() []*ClauseField {
	if x != nil {
		return x.Children
	}
	return nil
}

// Field - Defined Term
type DefinedTermField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term       string `protobuf:"bytes,1,opt,name=Term,proto3" json:"Term,omitempty"`             // varchar
	Definition string `protobuf:"bytes,2,opt,name=Definition,proto3" json:"Definition,omitempty"` // varchar
}

func (x *DefinedTermField) Reset() {
	*x = DefinedTermField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefinedTermField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefinedTermField) ProtoMessage() {}

func (x *DefinedTermField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefinedTermField.ProtoReflect.Descriptor instead.
func (*DefinedTermField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{37}
}

func (x *DefinedTermField) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *DefinedTermField) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// Field - Document
type DocumentField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`         // varchar
	Type     string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`         // varchar
	Contents []byte `protobuf:"bytes,3,opt,name=Contents,proto3" json:"Contents,omitempty"` // varbin
}

func (x *DocumentField) Reset() {
	*x = DocumentField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentField) ProtoMessage() {}

func (x *DocumentField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentField.ProtoReflect.Descriptor instead.
func (*DocumentField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{38}
}

func (x *DocumentField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DocumentField) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

// Field - Entity
type EntityField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                             // varchar
	Type                       string                `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`                                             // EntityType
	LEI                        string                `protobuf:"bytes,3,opt,name=LEI,proto3" json:"LEI,omitempty"`                                               // fixedchar
	UnitNumber                 string                `protobuf:"bytes,4,opt,name=UnitNumber,proto3" json:"UnitNumber,omitempty"`                                 // varchar
	BuildingNumber             string                `protobuf:"bytes,5,opt,name=BuildingNumber,proto3" json:"BuildingNumber,omitempty"`                         // varchar
	Street                     string                `protobuf:"bytes,6,opt,name=Street,proto3" json:"Street,omitempty"`                                         // varchar
	SuburbCity                 string                `protobuf:"bytes,7,opt,name=SuburbCity,proto3" json:"SuburbCity,omitempty"`                                 // varchar
	TerritoryStateProvinceCode string                `protobuf:"bytes,8,opt,name=TerritoryStateProvinceCode,proto3" json:"TerritoryStateProvinceCode,omitempty"` // fixedchar
	CountryCode                string                `protobuf:"bytes,9,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`                               // fixedchar
	PostalZIPCode              string                `protobuf:"bytes,10,opt,name=PostalZIPCode,proto3" json:"PostalZIPCode,omitempty"`                          // fixedchar
	EmailAddress               string                `protobuf:"bytes,11,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`                            // varchar
	PhoneNumber                string                `protobuf:"bytes,12,opt,name=PhoneNumber,proto3" json:"PhoneNumber,omitempty"`                              // varchar
	Administration             []*AdministratorField `protobuf:"bytes,13,rep,name=Administration,proto3" json:"Administration,omitempty"`                        // Administrator[]
	Management                 []*ManagerField       `protobuf:"bytes,14,rep,name=Management,proto3" json:"Management,omitempty"`                                // Manager[]
	DomainName                 string                `protobuf:"bytes,15,opt,name=DomainName,proto3" json:"DomainName,omitempty"`                                // varchar
	PaymailHandle              string                `protobuf:"bytes,17,opt,name=PaymailHandle,proto3" json:"PaymailHandle,omitempty"`                          // varchar
}

func (x *EntityField) Reset() {
	*x = EntityField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityField) ProtoMessage() {}

func (x *EntityField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityField.ProtoReflect.Descriptor instead.
func (*EntityField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{39}
}

func (x *EntityField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EntityField) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityField) GetLEI() string {
	if x != nil {
		return x.LEI
	}
	return ""
}

func (x *EntityField) GetUnitNumber() string {
	if x != nil {
		return x.UnitNumber
	}
	return ""
}

func (x *EntityField) GetBuildingNumber() string {
	if x != nil {
		return x.BuildingNumber
	}
	return ""
}

func (x *EntityField) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *EntityField) GetSuburbCity() string {
	if x != nil {
		return x.SuburbCity
	}
	return ""
}

func (x *EntityField) GetTerritoryStateProvinceCode() string {
	if x != nil {
		return x.TerritoryStateProvinceCode
	}
	return ""
}

func (x *EntityField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *EntityField) GetPostalZIPCode() string {
	if x != nil {
		return x.PostalZIPCode
	}
	return ""
}

func (x *EntityField) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *EntityField) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *EntityField) GetAdministration() []*AdministratorField {
	if x != nil {
		return x.Administration
	}
	return nil
}

func (x *EntityField) GetManagement() []*ManagerField {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *EntityField) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *EntityField) GetPaymailHandle() string {
	if x != nil {
		return x.PaymailHandle
	}
	return ""
}

// Field - Manager
type ManagerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"` // Role
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`  // varchar
}

func (x *ManagerField) Reset() {
	*x = ManagerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerField) ProtoMessage() {}

func (x *ManagerField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerField.ProtoReflect.Descriptor instead.
func (*ManagerField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{40}
}

func (x *ManagerField) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ManagerField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Field - Oracle
type OracleField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OracleTypes    []uint32 `protobuf:"varint,4,rep,packed,name=OracleTypes,proto3" json:"OracleTypes,omitempty"` // uint[]
	EntityContract []byte   `protobuf:"bytes,5,opt,name=EntityContract,proto3" json:"EntityContract,omitempty"`   // Address
}

func (x *OracleField) Reset() {
	*x = OracleField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleField) ProtoMessage() {}

func (x *OracleField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleField.ProtoReflect.Descriptor instead.
func (*OracleField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{41}
}

func (x *OracleField) GetOracleTypes() []uint32 {
	if x != nil {
		return x.OracleTypes
	}
	return nil
}

func (x *OracleField) GetEntityContract() []byte {
	if x != nil {
		return x.EntityContract
	}
	return nil
}

// Field - Quantity Index
type QuantityIndexField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`       // uint
	Quantity uint64 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"` // uint
}

func (x *QuantityIndexField) Reset() {
	*x = QuantityIndexField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityIndexField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityIndexField) ProtoMessage() {}

func (x *QuantityIndexField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityIndexField.ProtoReflect.Descriptor instead.
func (*QuantityIndexField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{42}
}

func (x *QuantityIndexField) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *QuantityIndexField) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Field - Reference Transaction
type ReferenceTransactionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []byte   `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"` // varbin
	Outputs     [][]byte `protobuf:"bytes,2,rep,name=Outputs,proto3" json:"Outputs,omitempty"`         // varbin[]
}

func (x *ReferenceTransactionField) Reset() {
	*x = ReferenceTransactionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceTransactionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceTransactionField) ProtoMessage() {}

func (x *ReferenceTransactionField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceTransactionField.ProtoReflect.Descriptor instead.
func (*ReferenceTransactionField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{43}
}

func (x *ReferenceTransactionField) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ReferenceTransactionField) GetOutputs() [][]byte {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Field - Service
type ServiceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`          // uint
	URL       string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`             // varchar
	PublicKey []byte `protobuf:"bytes,3,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"` // PublicKey
}

func (x *ServiceField) Reset() {
	*x = ServiceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceField) ProtoMessage() {}

func (x *ServiceField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceField.ProtoReflect.Descriptor instead.
func (*ServiceField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{44}
}

func (x *ServiceField) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ServiceField) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ServiceField) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// Field - Target Address
type TargetAddressField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  []byte `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`    // Address
	Quantity uint64 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"` // uint
}

func (x *TargetAddressField) Reset() {
	*x = TargetAddressField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetAddressField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAddressField) ProtoMessage() {}

func (x *TargetAddressField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAddressField.ProtoReflect.Descriptor instead.
func (*TargetAddressField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{45}
}

func (x *TargetAddressField) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TargetAddressField) GetQuantity() uint64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Field - Voting System
type VotingSystemField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`                                        // varchar
	VoteType                string `protobuf:"bytes,2,opt,name=VoteType,proto3" json:"VoteType,omitempty"`                                // fixedchar
	TallyLogic              uint32 `protobuf:"varint,3,opt,name=TallyLogic,proto3" json:"TallyLogic,omitempty"`                           // uint
	ThresholdPercentage     uint32 `protobuf:"varint,4,opt,name=ThresholdPercentage,proto3" json:"ThresholdPercentage,omitempty"`         // uint
	VoteMultiplierPermitted bool   `protobuf:"varint,5,opt,name=VoteMultiplierPermitted,proto3" json:"VoteMultiplierPermitted,omitempty"` // bool
	HolderProposalFee       uint64 `protobuf:"varint,6,opt,name=HolderProposalFee,proto3" json:"HolderProposalFee,omitempty"`             // uint
}

func (x *VotingSystemField) Reset() {
	*x = VotingSystemField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_actions_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VotingSystemField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotingSystemField) ProtoMessage() {}

func (x *VotingSystemField) ProtoReflect() protoreflect.Message {
	mi := &file_actions_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotingSystemField.ProtoReflect.Descriptor instead.
func (*VotingSystemField) Descriptor() ([]byte, []int) {
	return file_actions_proto_rawDescGZIP(), []int{46}
}

func (x *VotingSystemField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VotingSystemField) GetVoteType() string {
	if x != nil {
		return x.VoteType
	}
	return ""
}

func (x *VotingSystemField) GetTallyLogic() uint32 {
	if x != nil {
		return x.TallyLogic
	}
	return 0
}

func (x *VotingSystemField) GetThresholdPercentage() uint32 {
	if x != nil {
		return x.ThresholdPercentage
	}
	return 0
}

func (x *VotingSystemField) GetVoteMultiplierPermitted() bool {
	if x != nil {
		return x.VoteMultiplierPermitted
	}
	return false
}

func (x *VotingSystemField) GetHolderProposalFee() uint64 {
	if x != nil {
		return x.HolderProposalFee
	}
	return 0
}

var File_actions_proto protoreflect.FileDescriptor

var file_actions_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x09, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x42, 0x6f, 0x64,
	0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x4f,
	0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52, 0x49, 0x12, 0x2c, 0x0a, 0x06,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x51, 0x74, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x51, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x07, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x19, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4c, 0x61, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x75, 0x72,
	0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0b, 0x10,
	0x0c, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08,
	0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0xfe, 0x09, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52, 0x49, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52,
	0x49, 0x12, 0x2c, 0x0a, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x65,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x51, 0x74, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x51, 0x74,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x07,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x36, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x16, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x64,
	0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c,
	0x61, 0x77, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x61, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0b,
	0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04,
	0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x22, 0x9d, 0x06, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42,
	0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52, 0x49, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x52, 0x49, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x52, 0x65, 0x76, 0x54, 0x78, 0x49, 0x44, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x52, 0x65, 0x76, 0x54, 0x78, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4c, 0x61, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x75, 0x72, 0x69, 0x73,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a,
	0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x4e, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x86,
	0x01, 0x0a, 0x14, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x42, 0x6f, 0x64, 0x79,
	0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x43,
	0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65,
	0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x89,
	0x01, 0x0a, 0x18, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x66, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x22, 0x97, 0x04, 0x0a, 0x0f, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0x97, 0x05, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x56, 0x6f,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x1b,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x1b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x51, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x51, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xc8,
	0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0a, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x52, 0x65, 0x66, 0x54, 0x78, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x65, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x61, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a,
	0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x97, 0x03, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x47, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x65, 0x6e, 0x64,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56,
	0x6f, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f,
	0x74, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x6f, 0x74,
	0x65, 0x4d, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x6f,
	0x74, 0x65, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x24, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x3c, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x22, 0x79, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x56, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x81, 0x02, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d,
	0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x56,
	0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x56,
	0x6f, 0x74, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x89, 0x06, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x12, 0x42, 0x69, 0x74,
	0x63, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4a,
	0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xc3, 0x01, 0x0a, 0x06,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x44, 0x0a, 0x04, 0x54, 0x68, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc5, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x51, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x51, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x29, 0x0a, 0x0d, 0x45, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x41, 0x0a, 0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x09, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3c, 0x0a,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0e, 0x41, 0x6d, 0x65, 0x6e, 0x64, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xb0, 0x02, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x12, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x53, 0x69, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x34, 0x0a, 0x15, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x15, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x53, 0x69, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfc,
	0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x22, 0x69, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x10,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x0b, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x45, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4c, 0x45, 0x49, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x75, 0x72, 0x62, 0x43, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x75, 0x62, 0x75, 0x72, 0x62, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x54, 0x65, 0x72, 0x72, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5a,
	0x49, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5a, 0x49, 0x50, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x61, 0x79, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x61, 0x69, 0x6c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22, 0x36, 0x0a, 0x0c, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x69, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x46, 0x0a, 0x12,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x57, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x52, 0x0a,
	0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x4a, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xfd, 0x01,
	0x0a, 0x11, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x61, 0x6c, 0x6c, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x11, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_actions_proto_rawDescOnce sync.Once
	file_actions_proto_rawDescData = file_actions_proto_rawDesc
)

func file_actions_proto_rawDescGZIP() []byte {
	file_actions_proto_rawDescOnce.Do(func() {
		file_actions_proto_rawDescData = protoimpl.X.CompressGZIP(file_actions_proto_rawDescData)
	})
	return file_actions_proto_rawDescData
}

var file_actions_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_actions_proto_goTypes = []interface{}{
	(*ContractOffer)(nil),                 // 0: actions.ContractOffer
	(*ContractFormation)(nil),             // 1: actions.ContractFormation
	(*ContractAmendment)(nil),             // 2: actions.ContractAmendment
	(*StaticContractFormation)(nil),       // 3: actions.StaticContractFormation
	(*ContractAddressChange)(nil),         // 4: actions.ContractAddressChange
	(*BodyOfAgreementOffer)(nil),          // 5: actions.BodyOfAgreementOffer
	(*BodyOfAgreementFormation)(nil),      // 6: actions.BodyOfAgreementFormation
	(*BodyOfAgreementAmendment)(nil),      // 7: actions.BodyOfAgreementAmendment
	(*AssetDefinition)(nil),               // 8: actions.AssetDefinition
	(*AssetCreation)(nil),                 // 9: actions.AssetCreation
	(*AssetModification)(nil),             // 10: actions.AssetModification
	(*Transfer)(nil),                      // 11: actions.Transfer
	(*Settlement)(nil),                    // 12: actions.Settlement
	(*Proposal)(nil),                      // 13: actions.Proposal
	(*Vote)(nil),                          // 14: actions.Vote
	(*BallotCast)(nil),                    // 15: actions.BallotCast
	(*BallotCounted)(nil),                 // 16: actions.BallotCounted
	(*Result)(nil),                        // 17: actions.Result
	(*Order)(nil),                         // 18: actions.Order
	(*Freeze)(nil),                        // 19: actions.Freeze
	(*Thaw)(nil),                          // 20: actions.Thaw
	(*Confiscation)(nil),                  // 21: actions.Confiscation
	(*Reconciliation)(nil),                // 22: actions.Reconciliation
	(*Establishment)(nil),                 // 23: actions.Establishment
	(*Addition)(nil),                      // 24: actions.Addition
	(*Alteration)(nil),                    // 25: actions.Alteration
	(*Removal)(nil),                       // 26: actions.Removal
	(*Message)(nil),                       // 27: actions.Message
	(*Rejection)(nil),                     // 28: actions.Rejection
	(*AdministratorField)(nil),            // 29: actions.AdministratorField
	(*AdminIdentityCertificateField)(nil), // 30: actions.AdminIdentityCertificateField
	(*AmendmentField)(nil),                // 31: actions.AmendmentField
	(*AssetReceiverField)(nil),            // 32: actions.AssetReceiverField
	(*AssetSettlementField)(nil),          // 33: actions.AssetSettlementField
	(*AssetTransferField)(nil),            // 34: actions.AssetTransferField
	(*ChapterField)(nil),                  // 35: actions.ChapterField
	(*ClauseField)(nil),                   // 36: actions.ClauseField
	(*DefinedTermField)(nil),              // 37: actions.DefinedTermField
	(*DocumentField)(nil),                 // 38: actions.DocumentField
	(*EntityField)(nil),                   // 39: actions.EntityField
	(*ManagerField)(nil),                  // 40: actions.ManagerField
	(*OracleField)(nil),                   // 41: actions.OracleField
	(*QuantityIndexField)(nil),            // 42: actions.QuantityIndexField
	(*ReferenceTransactionField)(nil),     // 43: actions.ReferenceTransactionField
	(*ServiceField)(nil),                  // 44: actions.ServiceField
	(*TargetAddressField)(nil),            // 45: actions.TargetAddressField
	(*VotingSystemField)(nil),             // 46: actions.VotingSystemField
}
var file_actions_proto_depIdxs = []int32{
	38, // 0: actions.ContractOffer.SupportingDocs:type_name -> actions.DocumentField
	39, // 1: actions.ContractOffer.Issuer:type_name -> actions.EntityField
	46, // 2: actions.ContractOffer.VotingSystems:type_name -> actions.VotingSystemField
	41, // 3: actions.ContractOffer.Oracles:type_name -> actions.OracleField
	44, // 4: actions.ContractOffer.Services:type_name -> actions.ServiceField
	30, // 5: actions.ContractOffer.AdminIdentityCertificates:type_name -> actions.AdminIdentityCertificateField
	38, // 6: actions.ContractFormation.SupportingDocs:type_name -> actions.DocumentField
	39, // 7: actions.ContractFormation.Issuer:type_name -> actions.EntityField
	46, // 8: actions.ContractFormation.VotingSystems:type_name -> actions.VotingSystemField
	41, // 9: actions.ContractFormation.Oracles:type_name -> actions.OracleField
	44, // 10: actions.ContractFormation.Services:type_name -> actions.ServiceField
	30, // 11: actions.ContractFormation.AdminIdentityCertificates:type_name -> actions.AdminIdentityCertificateField
	31, // 12: actions.ContractAmendment.Amendments:type_name -> actions.AmendmentField
	38, // 13: actions.StaticContractFormation.SupportingDocs:type_name -> actions.DocumentField
	39, // 14: actions.StaticContractFormation.Entities:type_name -> actions.EntityField
	41, // 15: actions.StaticContractFormation.EntityOracle:type_name -> actions.OracleField
	35, // 16: actions.BodyOfAgreementOffer.Chapters:type_name -> actions.ChapterField
	37, // 17: actions.BodyOfAgreementOffer.Definitions:type_name -> actions.DefinedTermField
	35, // 18: actions.BodyOfAgreementFormation.Chapters:type_name -> actions.ChapterField
	37, // 19: actions.BodyOfAgreementFormation.Definitions:type_name -> actions.DefinedTermField
	31, // 20: actions.BodyOfAgreementAmendment.Amendments:type_name -> actions.AmendmentField
	31, // 21: actions.AssetModification.Amendments:type_name -> actions.AmendmentField
	34, // 22: actions.Transfer.Assets:type_name -> actions.AssetTransferField
	33, // 23: actions.Settlement.Assets:type_name -> actions.AssetSettlementField
	31, // 24: actions.Proposal.ProposedAmendments:type_name -> actions.AmendmentField
	31, // 25: actions.Result.ProposedAmendments:type_name -> actions.AmendmentField
	45, // 26: actions.Order.TargetAddresses:type_name -> actions.TargetAddressField
	42, // 27: actions.Order.BitcoinDispersions:type_name -> actions.QuantityIndexField
	43, // 28: actions.Order.ReferenceTransactions:type_name -> actions.ReferenceTransactionField
	42, // 29: actions.Freeze.Quantities:type_name -> actions.QuantityIndexField
	42, // 30: actions.Confiscation.Quantities:type_name -> actions.QuantityIndexField
	42, // 31: actions.Reconciliation.Quantities:type_name -> actions.QuantityIndexField
	42, // 32: actions.AssetSettlementField.Settlements:type_name -> actions.QuantityIndexField
	42, // 33: actions.AssetTransferField.AssetSenders:type_name -> actions.QuantityIndexField
	32, // 34: actions.AssetTransferField.AssetReceivers:type_name -> actions.AssetReceiverField
	36, // 35: actions.ChapterField.Articles:type_name -> actions.ClauseField
	36, // 36: actions.ClauseField.Children:type_name -> actions.ClauseField
	29, // 37: actions.EntityField.Administration:type_name -> actions.AdministratorField
	40, // 38: actions.EntityField.Management:type_name -> actions.ManagerField
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_actions_proto_init() }
func file_actions_proto_init() {
	if File_actions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_actions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticContractFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAddressChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyOfAgreementOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyOfAgreementFormation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyOfAgreementAmendment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetModification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotCast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallotCounted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Freeze); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thaw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confiscation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reconciliation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Establishment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alteration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Removal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rejection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministratorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminIdentityCertificateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmendmentField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetReceiverField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSettlementField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetTransferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClauseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefinedTermField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityIndexField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceTransactionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetAddressField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_actions_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VotingSystemField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_actions_proto_goTypes,
		DependencyIndexes: file_actions_proto_depIdxs,
		MessageInfos:      file_actions_proto_msgTypes,
	}.Build()
	File_actions_proto = out.File
	file_actions_proto_rawDesc = nil
	file_actions_proto_goTypes = nil
	file_actions_proto_depIdxs = nil
}
